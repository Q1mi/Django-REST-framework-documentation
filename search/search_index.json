{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django REST framework \u4e2d\u6587\u6587\u6863 \u6700\u5f00\u59cb\u662f2015\u5e74\u8fd8\u5728\u641c\u72d7\u4e0a\u73ed\u7684\u65f6\u5019\uff0c\u6709\u4e2a\u9879\u76ee\u7528\u5230DRF\u6846\u67b6\u7684\u65f6\u5019\u968f\u624b\u7ffb\u8bd1\u7684\u3002 \u5982\u679c\u672c\u6587\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u8bf7\u5728 github \u4e0a star \u8be5\u9879\u76ee\u3002 \u5f53\u7136\u6211\u4e5f\u5341\u5206\u6b22\u8fce\u4f60\u52a0\u5165\u8be5\u9879\u76ee\u5e76\u63d0\u4ea4PR\u63a8\u9001\u4f60\u7684\u7ffb\u8bd1\u3002 \uff08\u8bf4\u53e5\u9898\u5916\u8bdd\uff0c\u4e00\u4e2a\u7ffb\u8bd1\u9879\u76ee\u5c31\u6ca1\u6709\u5fc5\u8981\u6284\u88ad\u4e86\u5427\u3002\u3002\u3002\u6211\u90fd\u65e0\u5948\u4e86\u3002\u3002\u3002\uff09 Django REST framework \u6280\u672f\u4ea4\u6d41QQ\u7fa4 QQ\u7fa4\u53f7\uff1a930578836 \u7ffb\u8bd1\u4eba\u5458 Q1mi ScienceYuan leveleven Liniian belingud Core00077 \u4ee5\u4e0b\u7ae0\u8282\u5df2\u5b8c\u6210\u7ffb\u8bd1 \u6559\u7a0b Quickstart 1-Serialization 2-requests-and-responses 3-class-based-views 4-authentication-and-permissions 5-relationships-and-hyperlinked-apis 6-viewsets-and-routers 7-schemas-and-client-libraries API\u6307\u5357 Requests Responses Views Generic Views Viewets Routers Parsers Renderers Serializers Serializer fields Throttling Filtering Pagination Authentication Permissions Caching Versioning Content negotiation Format suffixes Metadata Returning URLs Exceptions Status codes Testing \u4e3b\u9898 ajax-csrf-cors \u8981\u6c42 REST framework \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42: Python (3.5, 3.6, 3.7, 3.8, 3.9) Django (2.2, 3.0, 3.1) \u6211\u4eec \u5f3a\u70c8\u63a8\u8350 \u4e14\u4ec5\u5b98\u65b9\u652f\u6301Python\u548cDjango\u7684\u6bcf\u4e2a\u7cfb\u5217(\u5927\u7248\u672c)\u7684\u6700\u65b0\u7248\u672c\u3002 \u4ee5\u4e0b\u5305\u4e3a\u53ef\u9009\u9879\uff1a PyYAML , uritemplate (5.1+, 3.0.0+) - Schema\u751f\u6210\u652f\u6301\u3002 Markdown (3.0.0+) - \u4e3abrowsable API \u63d0\u4f9bMarkdown\u652f\u6301\u3002 Pygments (2.4.0+) - \u4e3aMarkdown\u5904\u7406\u63d0\u4f9b\u8bed\u6cd5\u9ad8\u4eae\u3002 django-filter (1.0.1+) - Filtering\u652f\u6301\u3002 django-guardian (1.1.1+) - \u5bf9\u8c61\u7ea7\u522b\u7684\u6743\u9650\u652f\u6301\u3002 \u5b89\u88c5 \u7528 pip \u6765\u5b89\u88c5\uff0c\u53ef\u4ee5\u5305\u62ec\u4efb\u4f55\u4f60\u60f3\u5b89\u88c5\u7684\u53ef\u9009\u5305\u2026 pip install djangorestframework pip install markdown # \u4e3abrowsable API \u63d0\u4f9bMarkdown\u652f\u6301\u3002 pip install django-filter # Filtering\u652f\u6301\u3002 ...\u6216\u8005\u76f4\u63a5\u4ecegithub clone\u8be5\u9879\u76ee\u3002 git clone https://github.com/encode/django-rest-framework \u5728 INSTALLED_APPS \u4e2d\u6dfb\u52a0 'rest_framework' \u9879\u3002 INSTALLED_APPS = [ ... 'rest_framework', ] \u5982\u679c\u4f60\u6b63\u6253\u7b97\u7528browsable API\uff0c\u4f60\u53ef\u80fd\u4e5f\u60f3\u7528REST framework\u7684\u767b\u5f55\u6ce8\u9500\u89c6\u56fe\u3002\u628a\u4e0b\u9762\u7684\u4ee3\u7801\u6dfb\u52a0\u5230\u4f60\u6839\u76ee\u5f55\u7684 urls.py \u6587\u4ef6\u3002 urlpatterns = [ ... path('api-auth/', include('rest_framework.urls')) ] \u8bf7\u6ce8\u610f\uff0cURL\u8def\u5f84\u53ef\u4ee5\u968f\u610f\u6539\u3002 \u4e3e\u4e2a\u4f8b\u5b50 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e2a\u7528REST framework\u6784\u5efa\u7684\u7b80\u5355\u7684\u6a21\u578b\u652f\u6491\u7684API\u540e\u7aef\u6848\u4f8b\u3002 \u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u8bfb\u5199API\u6765\u8bbf\u95ee\u6211\u4eec\u9879\u76ee\u7684\u7528\u6237\u4fe1\u606f\u3002 REST framework API\u7684\u6240\u6709\u5168\u5c40\u8bbe\u5b9a\u90fd\u4f1a\u653e\u5728\u4e00\u4e2a\u53eb REST_FRAMEWORK \u7684\u914d\u7f6e\u8bcd\u5178\u91cc\u3002\u9996\u5148\u628a\u4e0b\u9762\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u4f60\u7684 settings.py \u6a21\u5757\u4e2d\uff1a REST_FRAMEWORK = { # Use Django's standard `django.contrib.auth` permissions, # or allow read-only access for unauthenticated users. 'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly' ] } \u4e0d\u8981\u5fd8\u4e86\u4f60\u8fd8\u8981 rest_framework \u6dfb\u52a0\u5230\u4f60\u7684 INSTALLED_APPS \u91cc\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u521b\u5efa\u6211\u4eec\u7684API\u4e86\u3002 \u8fd9\u662f\u6211\u4eec\u6839\u76ee\u5f55\u7684 urls.py \u6a21\u5757\uff1a from django.urls import path, include from django.contrib.auth.models import User from rest_framework import routers, serializers, viewsets # \u5e8f\u5217\u5316\u5668\u662f\u7528\u6765\u5b9a\u4e49API\u7684\u8868\u793a\u5f62\u5f0f\u3002 class UserSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = User fields = ['url', 'username', 'email', 'is_staff'] # ViewSets\u5b9a\u4e49\u89c6\u56fe\u7684\u884c\u4e3a\u3002 class UserViewSet(viewsets.ModelViewSet): queryset = User.objects.all() serializer_class = UserSerializer # \u8def\u7531\u5668\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u81ea\u52a8\u7684\u65b9\u6cd5\u6765\u51b3\u5b9aURL\u7684\u914d\u7f6e\u3002 router = routers.DefaultRouter() router.register(r'users', UserViewSet) # \u901a\u8fc7URL\u81ea\u52a8\u8def\u7531\u6765\u7ed9\u6211\u4eec\u7684API\u5e03\u5c40\u3002 # \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u8981\u628a\u767b\u5f55\u7684URL\u5305\u542b\u8fdb\u6765\u3002 urlpatterns = [ path('', include(router.urls)), path('api-auth/', include('rest_framework.urls', namespace='rest_framework')) ] \u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 http://127.0.0.1:8000/ \uff0c\u67e5\u770b\u4f60\u7684'user' API\u4e86\u3002\u5982\u679c\u4f60\u7528\u4e86\u53f3\u4e0a\u89d2\u7684\u767b\u5f55\u63a7\u5236\uff0c\u90a3\u4f60\u8fd8\u53ef\u4ee5\u5728\u7cfb\u7edf\u4e2d\u6dfb\u52a0\u3001\u521b\u5efa\u5e76\u5220\u9664\u7528\u6237\u3002 Quickstart \u8feb\u4e0d\u53ca\u5f85\u60f3\u4e0a\u624b\u4e86\uff1f \u5feb\u901f\u5165\u95e8\u6307\u5357 \u662f\u4f60\u4e0a\u624b\u3001\u8fd0\u884c\u5e76\u6784\u5efaREST framewrok API\u7684\u6700\u5feb\u65b9\u6cd5\u3002","title":"\u4e3b\u9875"},{"location":"#django-rest-framework","text":"\u6700\u5f00\u59cb\u662f2015\u5e74\u8fd8\u5728\u641c\u72d7\u4e0a\u73ed\u7684\u65f6\u5019\uff0c\u6709\u4e2a\u9879\u76ee\u7528\u5230DRF\u6846\u67b6\u7684\u65f6\u5019\u968f\u624b\u7ffb\u8bd1\u7684\u3002 \u5982\u679c\u672c\u6587\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u8bf7\u5728 github \u4e0a star \u8be5\u9879\u76ee\u3002 \u5f53\u7136\u6211\u4e5f\u5341\u5206\u6b22\u8fce\u4f60\u52a0\u5165\u8be5\u9879\u76ee\u5e76\u63d0\u4ea4PR\u63a8\u9001\u4f60\u7684\u7ffb\u8bd1\u3002 \uff08\u8bf4\u53e5\u9898\u5916\u8bdd\uff0c\u4e00\u4e2a\u7ffb\u8bd1\u9879\u76ee\u5c31\u6ca1\u6709\u5fc5\u8981\u6284\u88ad\u4e86\u5427\u3002\u3002\u3002\u6211\u90fd\u65e0\u5948\u4e86\u3002\u3002\u3002\uff09","title":"Django REST framework \u4e2d\u6587\u6587\u6863"},{"location":"#django-rest-framework-qq","text":"QQ\u7fa4\u53f7\uff1a930578836","title":"Django REST framework \u6280\u672f\u4ea4\u6d41QQ\u7fa4"},{"location":"#_1","text":"Q1mi ScienceYuan leveleven Liniian belingud Core00077","title":"\u7ffb\u8bd1\u4eba\u5458"},{"location":"#_2","text":"","title":"\u4ee5\u4e0b\u7ae0\u8282\u5df2\u5b8c\u6210\u7ffb\u8bd1"},{"location":"#_3","text":"Quickstart 1-Serialization 2-requests-and-responses 3-class-based-views 4-authentication-and-permissions 5-relationships-and-hyperlinked-apis 6-viewsets-and-routers 7-schemas-and-client-libraries","title":"\u6559\u7a0b"},{"location":"#api","text":"Requests Responses Views Generic Views Viewets Routers Parsers Renderers Serializers Serializer fields Throttling Filtering Pagination Authentication Permissions Caching Versioning Content negotiation Format suffixes Metadata Returning URLs Exceptions Status codes Testing","title":"API\u6307\u5357"},{"location":"#_4","text":"ajax-csrf-cors","title":"\u4e3b\u9898"},{"location":"#_5","text":"REST framework \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42: Python (3.5, 3.6, 3.7, 3.8, 3.9) Django (2.2, 3.0, 3.1) \u6211\u4eec \u5f3a\u70c8\u63a8\u8350 \u4e14\u4ec5\u5b98\u65b9\u652f\u6301Python\u548cDjango\u7684\u6bcf\u4e2a\u7cfb\u5217(\u5927\u7248\u672c)\u7684\u6700\u65b0\u7248\u672c\u3002 \u4ee5\u4e0b\u5305\u4e3a\u53ef\u9009\u9879\uff1a PyYAML , uritemplate (5.1+, 3.0.0+) - Schema\u751f\u6210\u652f\u6301\u3002 Markdown (3.0.0+) - \u4e3abrowsable API \u63d0\u4f9bMarkdown\u652f\u6301\u3002 Pygments (2.4.0+) - \u4e3aMarkdown\u5904\u7406\u63d0\u4f9b\u8bed\u6cd5\u9ad8\u4eae\u3002 django-filter (1.0.1+) - Filtering\u652f\u6301\u3002 django-guardian (1.1.1+) - \u5bf9\u8c61\u7ea7\u522b\u7684\u6743\u9650\u652f\u6301\u3002","title":"\u8981\u6c42"},{"location":"#_6","text":"\u7528 pip \u6765\u5b89\u88c5\uff0c\u53ef\u4ee5\u5305\u62ec\u4efb\u4f55\u4f60\u60f3\u5b89\u88c5\u7684\u53ef\u9009\u5305\u2026 pip install djangorestframework pip install markdown # \u4e3abrowsable API \u63d0\u4f9bMarkdown\u652f\u6301\u3002 pip install django-filter # Filtering\u652f\u6301\u3002 ...\u6216\u8005\u76f4\u63a5\u4ecegithub clone\u8be5\u9879\u76ee\u3002 git clone https://github.com/encode/django-rest-framework \u5728 INSTALLED_APPS \u4e2d\u6dfb\u52a0 'rest_framework' \u9879\u3002 INSTALLED_APPS = [ ... 'rest_framework', ] \u5982\u679c\u4f60\u6b63\u6253\u7b97\u7528browsable API\uff0c\u4f60\u53ef\u80fd\u4e5f\u60f3\u7528REST framework\u7684\u767b\u5f55\u6ce8\u9500\u89c6\u56fe\u3002\u628a\u4e0b\u9762\u7684\u4ee3\u7801\u6dfb\u52a0\u5230\u4f60\u6839\u76ee\u5f55\u7684 urls.py \u6587\u4ef6\u3002 urlpatterns = [ ... path('api-auth/', include('rest_framework.urls')) ] \u8bf7\u6ce8\u610f\uff0cURL\u8def\u5f84\u53ef\u4ee5\u968f\u610f\u6539\u3002","title":"\u5b89\u88c5"},{"location":"#_7","text":"\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e2a\u7528REST framework\u6784\u5efa\u7684\u7b80\u5355\u7684\u6a21\u578b\u652f\u6491\u7684API\u540e\u7aef\u6848\u4f8b\u3002 \u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u8bfb\u5199API\u6765\u8bbf\u95ee\u6211\u4eec\u9879\u76ee\u7684\u7528\u6237\u4fe1\u606f\u3002 REST framework API\u7684\u6240\u6709\u5168\u5c40\u8bbe\u5b9a\u90fd\u4f1a\u653e\u5728\u4e00\u4e2a\u53eb REST_FRAMEWORK \u7684\u914d\u7f6e\u8bcd\u5178\u91cc\u3002\u9996\u5148\u628a\u4e0b\u9762\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u4f60\u7684 settings.py \u6a21\u5757\u4e2d\uff1a REST_FRAMEWORK = { # Use Django's standard `django.contrib.auth` permissions, # or allow read-only access for unauthenticated users. 'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly' ] } \u4e0d\u8981\u5fd8\u4e86\u4f60\u8fd8\u8981 rest_framework \u6dfb\u52a0\u5230\u4f60\u7684 INSTALLED_APPS \u91cc\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u521b\u5efa\u6211\u4eec\u7684API\u4e86\u3002 \u8fd9\u662f\u6211\u4eec\u6839\u76ee\u5f55\u7684 urls.py \u6a21\u5757\uff1a from django.urls import path, include from django.contrib.auth.models import User from rest_framework import routers, serializers, viewsets # \u5e8f\u5217\u5316\u5668\u662f\u7528\u6765\u5b9a\u4e49API\u7684\u8868\u793a\u5f62\u5f0f\u3002 class UserSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = User fields = ['url', 'username', 'email', 'is_staff'] # ViewSets\u5b9a\u4e49\u89c6\u56fe\u7684\u884c\u4e3a\u3002 class UserViewSet(viewsets.ModelViewSet): queryset = User.objects.all() serializer_class = UserSerializer # \u8def\u7531\u5668\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u81ea\u52a8\u7684\u65b9\u6cd5\u6765\u51b3\u5b9aURL\u7684\u914d\u7f6e\u3002 router = routers.DefaultRouter() router.register(r'users', UserViewSet) # \u901a\u8fc7URL\u81ea\u52a8\u8def\u7531\u6765\u7ed9\u6211\u4eec\u7684API\u5e03\u5c40\u3002 # \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u8981\u628a\u767b\u5f55\u7684URL\u5305\u542b\u8fdb\u6765\u3002 urlpatterns = [ path('', include(router.urls)), path('api-auth/', include('rest_framework.urls', namespace='rest_framework')) ] \u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 http://127.0.0.1:8000/ \uff0c\u67e5\u770b\u4f60\u7684'user' API\u4e86\u3002\u5982\u679c\u4f60\u7528\u4e86\u53f3\u4e0a\u89d2\u7684\u767b\u5f55\u63a7\u5236\uff0c\u90a3\u4f60\u8fd8\u53ef\u4ee5\u5728\u7cfb\u7edf\u4e2d\u6dfb\u52a0\u3001\u521b\u5efa\u5e76\u5220\u9664\u7528\u6237\u3002","title":"\u4e3e\u4e2a\u4f8b\u5b50"},{"location":"#quickstart","text":"\u8feb\u4e0d\u53ca\u5f85\u60f3\u4e0a\u624b\u4e86\uff1f \u5feb\u901f\u5165\u95e8\u6307\u5357 \u662f\u4f60\u4e0a\u624b\u3001\u8fd0\u884c\u5e76\u6784\u5efaREST framewrok API\u7684\u6700\u5feb\u65b9\u6cd5\u3002","title":"Quickstart"},{"location":"api-guide/authentication/","text":"Authentication Auth needs to be pluggable. \u2014 Jacob Kaplan-Moss, \"REST worst practices\" Authentication is the mechanism of associating an incoming request with a set of identifying credentials, such as the user the request came from, or the token that it was signed with. The permission and throttling policies can then use those credentials to determine if the request should be permitted. REST framework provides a number of authentication schemes out of the box, and also allows you to implement custom schemes. Authentication is always run at the very start of the view, before the permission and throttling checks occur, and before any other code is allowed to proceed. The request.user property will typically be set to an instance of the contrib.auth package's User class. The request.auth property is used for any additional authentication information, for example, it may be used to represent an authentication token that the request was signed with. Note: Don't forget that authentication by itself won't allow or disallow an incoming request , it simply identifies the credentials that the request was made with. For information on how to setup the permission polices for your API please see the permissions documentation . How authentication is determined The authentication schemes are always defined as a list of classes. REST framework will attempt to authenticate with each class in the list, and will set request.user and request.auth using the return value of the first class that successfully authenticates. If no class authenticates, request.user will be set to an instance of django.contrib.auth.models.AnonymousUser , and request.auth will be set to None . The value of request.user and request.auth for unauthenticated requests can be modified using the UNAUTHENTICATED_USER and UNAUTHENTICATED_TOKEN settings. Setting the authentication scheme The default authentication schemes may be set globally, using the DEFAULT_AUTHENTICATION_CLASSES setting. For example. REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': [ 'rest_framework.authentication.BasicAuthentication', 'rest_framework.authentication.SessionAuthentication', ] } You can also set the authentication scheme on a per-view or per-viewset basis, using the APIView class-based views. from rest_framework.authentication import SessionAuthentication, BasicAuthentication from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): authentication_classes = [SessionAuthentication, BasicAuthentication] permission_classes = [IsAuthenticated] def get(self, request, format=None): content = { 'user': unicode(request.user), # `django.contrib.auth.User` instance. 'auth': unicode(request.auth), # None } return Response(content) Or, if you're using the @api_view decorator with function based views. @api_view(['GET']) @authentication_classes([SessionAuthentication, BasicAuthentication]) @permission_classes([IsAuthenticated]) def example_view(request, format=None): content = { 'user': unicode(request.user), # `django.contrib.auth.User` instance. 'auth': unicode(request.auth), # None } return Response(content) Unauthorized and Forbidden responses When an unauthenticated request is denied permission there are two different error codes that may be appropriate. HTTP 401 Unauthorized HTTP 403 Permission Denied HTTP 401 responses must always include a WWW-Authenticate header, that instructs the client how to authenticate. HTTP 403 responses do not include the WWW-Authenticate header. The kind of response that will be used depends on the authentication scheme. Although multiple authentication schemes may be in use, only one scheme may be used to determine the type of response. The first authentication class set on the view is used when determining the type of response . Note that when a request may successfully authenticate, but still be denied permission to perform the request, in which case a 403 Permission Denied response will always be used, regardless of the authentication scheme. Apache mod_wsgi specific configuration Note that if deploying to Apache using mod_wsgi , the authorization header is not passed through to a WSGI application by default, as it is assumed that authentication will be handled by Apache, rather than at an application level. If you are deploying to Apache, and using any non-session based authentication, you will need to explicitly configure mod_wsgi to pass the required headers through to the application. This can be done by specifying the WSGIPassAuthorization directive in the appropriate context and setting it to 'On' . # this can go in either server config, virtual host, directory or .htaccess WSGIPassAuthorization On API Reference BasicAuthentication This authentication scheme uses HTTP Basic Authentication , signed against a user's username and password. Basic authentication is generally only appropriate for testing. If successfully authenticated, BasicAuthentication provides the following credentials. request.user will be a Django User instance. request.auth will be None . Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Basic realm=\"api\" Note: If you use BasicAuthentication in production you must ensure that your API is only available over https . You should also ensure that your API clients will always re-request the username and password at login, and will never store those details to persistent storage. TokenAuthentication This authentication scheme uses a simple token-based HTTP Authentication scheme. Token authentication is appropriate for client-server setups, such as native desktop and mobile clients. To use the TokenAuthentication scheme you'll need to configure the authentication classes to include TokenAuthentication , and additionally include rest_framework.authtoken in your INSTALLED_APPS setting: INSTALLED_APPS = [ ... 'rest_framework.authtoken' ] Note: Make sure to run manage.py migrate after changing your settings. The rest_framework.authtoken app provides Django database migrations. You'll also need to create tokens for your users. from rest_framework.authtoken.models import Token token = Token.objects.create(user=...) print(token.key) For clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example: Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b Note: If you want to use a different keyword in the header, such as Bearer , simply subclass TokenAuthentication and set the keyword class variable. If successfully authenticated, TokenAuthentication provides the following credentials. request.user will be a Django User instance. request.auth will be a rest_framework.authtoken.models.Token instance. Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Token The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' Note: If you use TokenAuthentication in production you must ensure that your API is only available over https . Generating Tokens By using signals If you want every user to have an automatically generated Token, you can simply catch the User's post_save signal. from django.conf import settings from django.db.models.signals import post_save from django.dispatch import receiver from rest_framework.authtoken.models import Token @receiver(post_save, sender=settings.AUTH_USER_MODEL) def create_auth_token(sender, instance=None, created=False, **kwargs): if created: Token.objects.create(user=instance) Note that you'll want to ensure you place this code snippet in an installed models.py module, or some other location that will be imported by Django on startup. If you've already created some users, you can generate tokens for all existing users like this: from django.contrib.auth.models import User from rest_framework.authtoken.models import Token for user in User.objects.all(): Token.objects.get_or_create(user=user) By exposing an api endpoint When using TokenAuthentication , you may want to provide a mechanism for clients to obtain a token given the username and password. REST framework provides a built-in view to provide this behavior. To use it, add the obtain_auth_token view to your URLconf: from rest_framework.authtoken import views urlpatterns += [ url(r'^api-token-auth/', views.obtain_auth_token) ] Note that the URL part of the pattern can be whatever you want to use. The obtain_auth_token view will return a JSON response when valid username and password fields are POSTed to the view using form data or JSON: { 'token' : '9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' } Note that the default obtain_auth_token view explicitly uses JSON requests and responses, rather than using default renderer and parser classes in your settings. By default there are no permissions or throttling applied to the obtain_auth_token view. If you do wish to apply throttling you'll need to override the view class, and include them using the throttle_classes attribute. If you need a customized version of the obtain_auth_token view, you can do so by subclassing the ObtainAuthToken view class, and using that in your url conf instead. For example, you may return additional user information beyond the token value: from rest_framework.authtoken.views import ObtainAuthToken from rest_framework.authtoken.models import Token from rest_framework.response import Response class CustomAuthToken(ObtainAuthToken): def post(self, request, *args, **kwargs): serializer = self.serializer_class(data=request.data, context={'request': request}) serializer.is_valid(raise_exception=True) user = serializer.validated_data['user'] token, created = Token.objects.get_or_create(user=user) return Response({ 'token': token.key, 'user_id': user.pk, 'email': user.email }) And in your urls.py : urlpatterns += [ url(r'^api-token-auth/', CustomAuthToken.as_view()) ] With Django admin It is also possible to create Tokens manually through admin interface. In case you are using a large user base, we recommend that you monkey patch the TokenAdmin class to customize it to your needs, more specifically by declaring the user field as raw_field . your_app/admin.py : from rest_framework.authtoken.admin import TokenAdmin TokenAdmin.raw_id_fields = ['user'] Using Django manage.py command Since version 3.6.4 it's possible to generate a user token using the following command: ./manage.py drf_create_token <username> this command will return the API token for the given user, creating it if it doesn't exist: Generated token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b for user user1 In case you want to regenerate the token (for example if it has been compromised or leaked) you can pass an additional parameter: ./manage.py drf_create_token -r <username> SessionAuthentication This authentication scheme uses Django's default session backend for authentication. Session authentication is appropriate for AJAX clients that are running in the same session context as your website. If successfully authenticated, SessionAuthentication provides the following credentials. request.user will be a Django User instance. request.auth will be None . Unauthenticated responses that are denied permission will result in an HTTP 403 Forbidden response. If you're using an AJAX style API with SessionAuthentication, you'll need to make sure you include a valid CSRF token for any \"unsafe\" HTTP method calls, such as PUT , PATCH , POST or DELETE requests. See the Django CSRF documentation for more details. Warning : Always use Django's standard login view when creating login pages. This will ensure your login views are properly protected. CSRF validation in REST framework works slightly differently to standard Django due to the need to support both session and non-session based authentication to the same views. This means that only authenticated requests require CSRF tokens, and anonymous requests may be sent without CSRF tokens. This behaviour is not suitable for login views, which should always have CSRF validation applied. RemoteUserAuthentication This authentication scheme allows you to delegate authentication to your web server, which sets the REMOTE_USER environment variable. To use it, you must have django.contrib.auth.backends.RemoteUserBackend (or a subclass) in your AUTHENTICATION_BACKENDS setting. By default, RemoteUserBackend creates User objects for usernames that don't already exist. To change this and other behaviour, consult the Django documentation . If successfully authenticated, RemoteUserAuthentication provides the following credentials: request.user will be a Django User instance. request.auth will be None . Consult your web server's documentation for information about configuring an authentication method, e.g.: Apache Authentication How-To NGINX (Restricting Access) Custom authentication To implement a custom authentication scheme, subclass BaseAuthentication and override the .authenticate(self, request) method. The method should return a two-tuple of (user, auth) if authentication succeeds, or None otherwise. In some circumstances instead of returning None , you may want to raise an AuthenticationFailed exception from the .authenticate() method. Typically the approach you should take is: If authentication is not attempted, return None . Any other authentication schemes also in use will still be checked. If authentication is attempted but fails, raise a AuthenticationFailed exception. An error response will be returned immediately, regardless of any permissions checks, and without checking any other authentication schemes. You may also override the .authenticate_header(self, request) method. If implemented, it should return a string that will be used as the value of the WWW-Authenticate header in a HTTP 401 Unauthorized response. If the .authenticate_header() method is not overridden, the authentication scheme will return HTTP 403 Forbidden responses when an unauthenticated request is denied access. Note: When your custom authenticator is invoked by the request object's .user or .auth properties, you may see an AttributeError re-raised as a WrappedAttributeError . This is necessary to prevent the original exception from being suppressed by the outer property access. Python will not recognize that the AttributeError originates from your custom authenticator and will instead assume that the request object does not have a .user or .auth property. These errors should be fixed or otherwise handled by your authenticator. Example The following example will authenticate any incoming request as the user given by the username in a custom request header named 'X-USERNAME'. from django.contrib.auth.models import User from rest_framework import authentication from rest_framework import exceptions class ExampleAuthentication(authentication.BaseAuthentication): def authenticate(self, request): username = request.META.get('HTTP_X_USERNAME') if not username: return None try: user = User.objects.get(username=username) except User.DoesNotExist: raise exceptions.AuthenticationFailed('No such user') return (user, None) Third party packages The following third party packages are also available. Django OAuth Toolkit The Django OAuth Toolkit package provides OAuth 2.0 support and works with Python 3.4+. The package is maintained by Evonove and uses the excellent OAuthLib . The package is well documented, and well supported and is currently our recommended package for OAuth 2.0 support . Installation & configuration Install using pip . pip install django-oauth-toolkit Add the package to your INSTALLED_APPS and modify your REST framework settings. INSTALLED_APPS = [ ... 'oauth2_provider', ] REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': [ 'oauth2_provider.contrib.rest_framework.OAuth2Authentication', ] } For more details see the Django REST framework - Getting started documentation. Django REST framework OAuth The Django REST framework OAuth package provides both OAuth1 and OAuth2 support for REST framework. This package was previously included directly in REST framework but is now supported and maintained as a third party package. Installation & configuration Install the package using pip . pip install djangorestframework-oauth For details on configuration and usage see the Django REST framework OAuth documentation for authentication and permissions . JSON Web Token Authentication JSON Web Token is a fairly new standard which can be used for token-based authentication. Unlike the built-in TokenAuthentication scheme, JWT Authentication doesn't need to use a database to validate a token. A package for JWT authentication is djangorestframework-simplejwt which provides some features as well as a pluggable token blacklist app. Hawk HTTP Authentication The HawkREST library builds on the Mohawk library to let you work with Hawk signed requests and responses in your API. Hawk lets two parties securely communicate with each other using messages signed by a shared key. It is based on HTTP MAC access authentication (which was based on parts of OAuth 1.0 ). HTTP Signature Authentication HTTP Signature (currently a IETF draft ) provides a way to achieve origin authentication and message integrity for HTTP messages. Similar to Amazon's HTTP Signature scheme , used by many of its services, it permits stateless, per-request authentication. Elvio Toccalino maintains the djangorestframework-httpsignature (outdated) package which provides an easy to use HTTP Signature Authentication mechanism. You can use the updated fork version of djangorestframework-httpsignature , which is drf-httpsig . Djoser Djoser library provides a set of views to handle basic actions such as registration, login, logout, password reset and account activation. The package works with a custom user model and it uses token based authentication. This is a ready to use REST implementation of Django authentication system. django-rest-auth / dj-rest-auth This library provides a set of REST API endpoints for registration, authentication (including social media authentication), password reset, retrieve and update user details, etc. By having these API endpoints, your client apps such as AngularJS, iOS, Android, and others can communicate to your Django backend site independently via REST APIs for user management. There are currently two forks of this project. Django-rest-auth is the original project, but is not currently receiving updates . Dj-rest-auth is a newer fork of the project. django-rest-framework-social-oauth2 Django-rest-framework-social-oauth2 library provides an easy way to integrate social plugins (facebook, twitter, google, etc.) to your authentication system and an easy oauth2 setup. With this library, you will be able to authenticate users based on external tokens (e.g. facebook access token), convert these tokens to \"in-house\" oauth2 tokens and use and generate oauth2 tokens to authenticate your users. django-rest-knox Django-rest-knox library provides models and views to handle token based authentication in a more secure and extensible way than the built-in TokenAuthentication scheme - with Single Page Applications and Mobile clients in mind. It provides per-client tokens, and views to generate them when provided some other authentication (usually basic authentication), to delete the token (providing a server enforced logout) and to delete all tokens (logs out all clients that a user is logged into). drfpasswordless drfpasswordless adds (Medium, Square Cash inspired) passwordless support to Django REST Framework's own TokenAuthentication scheme. Users log in and sign up with a token sent to a contact point like an email address or a mobile number.","title":"Authentication"},{"location":"api-guide/authentication/#authentication","text":"Auth needs to be pluggable. \u2014 Jacob Kaplan-Moss, \"REST worst practices\" Authentication is the mechanism of associating an incoming request with a set of identifying credentials, such as the user the request came from, or the token that it was signed with. The permission and throttling policies can then use those credentials to determine if the request should be permitted. REST framework provides a number of authentication schemes out of the box, and also allows you to implement custom schemes. Authentication is always run at the very start of the view, before the permission and throttling checks occur, and before any other code is allowed to proceed. The request.user property will typically be set to an instance of the contrib.auth package's User class. The request.auth property is used for any additional authentication information, for example, it may be used to represent an authentication token that the request was signed with. Note: Don't forget that authentication by itself won't allow or disallow an incoming request , it simply identifies the credentials that the request was made with. For information on how to setup the permission polices for your API please see the permissions documentation .","title":"Authentication"},{"location":"api-guide/authentication/#how-authentication-is-determined","text":"The authentication schemes are always defined as a list of classes. REST framework will attempt to authenticate with each class in the list, and will set request.user and request.auth using the return value of the first class that successfully authenticates. If no class authenticates, request.user will be set to an instance of django.contrib.auth.models.AnonymousUser , and request.auth will be set to None . The value of request.user and request.auth for unauthenticated requests can be modified using the UNAUTHENTICATED_USER and UNAUTHENTICATED_TOKEN settings.","title":"How authentication is determined"},{"location":"api-guide/authentication/#setting-the-authentication-scheme","text":"The default authentication schemes may be set globally, using the DEFAULT_AUTHENTICATION_CLASSES setting. For example. REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': [ 'rest_framework.authentication.BasicAuthentication', 'rest_framework.authentication.SessionAuthentication', ] } You can also set the authentication scheme on a per-view or per-viewset basis, using the APIView class-based views. from rest_framework.authentication import SessionAuthentication, BasicAuthentication from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): authentication_classes = [SessionAuthentication, BasicAuthentication] permission_classes = [IsAuthenticated] def get(self, request, format=None): content = { 'user': unicode(request.user), # `django.contrib.auth.User` instance. 'auth': unicode(request.auth), # None } return Response(content) Or, if you're using the @api_view decorator with function based views. @api_view(['GET']) @authentication_classes([SessionAuthentication, BasicAuthentication]) @permission_classes([IsAuthenticated]) def example_view(request, format=None): content = { 'user': unicode(request.user), # `django.contrib.auth.User` instance. 'auth': unicode(request.auth), # None } return Response(content)","title":"Setting the authentication scheme"},{"location":"api-guide/authentication/#unauthorized-and-forbidden-responses","text":"When an unauthenticated request is denied permission there are two different error codes that may be appropriate. HTTP 401 Unauthorized HTTP 403 Permission Denied HTTP 401 responses must always include a WWW-Authenticate header, that instructs the client how to authenticate. HTTP 403 responses do not include the WWW-Authenticate header. The kind of response that will be used depends on the authentication scheme. Although multiple authentication schemes may be in use, only one scheme may be used to determine the type of response. The first authentication class set on the view is used when determining the type of response . Note that when a request may successfully authenticate, but still be denied permission to perform the request, in which case a 403 Permission Denied response will always be used, regardless of the authentication scheme.","title":"Unauthorized and Forbidden responses"},{"location":"api-guide/authentication/#apache-mod_wsgi-specific-configuration","text":"Note that if deploying to Apache using mod_wsgi , the authorization header is not passed through to a WSGI application by default, as it is assumed that authentication will be handled by Apache, rather than at an application level. If you are deploying to Apache, and using any non-session based authentication, you will need to explicitly configure mod_wsgi to pass the required headers through to the application. This can be done by specifying the WSGIPassAuthorization directive in the appropriate context and setting it to 'On' . # this can go in either server config, virtual host, directory or .htaccess WSGIPassAuthorization On","title":"Apache mod_wsgi specific configuration"},{"location":"api-guide/authentication/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/authentication/#basicauthentication","text":"This authentication scheme uses HTTP Basic Authentication , signed against a user's username and password. Basic authentication is generally only appropriate for testing. If successfully authenticated, BasicAuthentication provides the following credentials. request.user will be a Django User instance. request.auth will be None . Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Basic realm=\"api\" Note: If you use BasicAuthentication in production you must ensure that your API is only available over https . You should also ensure that your API clients will always re-request the username and password at login, and will never store those details to persistent storage.","title":"BasicAuthentication"},{"location":"api-guide/authentication/#tokenauthentication","text":"This authentication scheme uses a simple token-based HTTP Authentication scheme. Token authentication is appropriate for client-server setups, such as native desktop and mobile clients. To use the TokenAuthentication scheme you'll need to configure the authentication classes to include TokenAuthentication , and additionally include rest_framework.authtoken in your INSTALLED_APPS setting: INSTALLED_APPS = [ ... 'rest_framework.authtoken' ] Note: Make sure to run manage.py migrate after changing your settings. The rest_framework.authtoken app provides Django database migrations. You'll also need to create tokens for your users. from rest_framework.authtoken.models import Token token = Token.objects.create(user=...) print(token.key) For clients to authenticate, the token key should be included in the Authorization HTTP header. The key should be prefixed by the string literal \"Token\", with whitespace separating the two strings. For example: Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b Note: If you want to use a different keyword in the header, such as Bearer , simply subclass TokenAuthentication and set the keyword class variable. If successfully authenticated, TokenAuthentication provides the following credentials. request.user will be a Django User instance. request.auth will be a rest_framework.authtoken.models.Token instance. Unauthenticated responses that are denied permission will result in an HTTP 401 Unauthorized response with an appropriate WWW-Authenticate header. For example: WWW-Authenticate: Token The curl command line tool may be useful for testing token authenticated APIs. For example: curl -X GET http://127.0.0.1:8000/api/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' Note: If you use TokenAuthentication in production you must ensure that your API is only available over https .","title":"TokenAuthentication"},{"location":"api-guide/authentication/#generating-tokens","text":"","title":"Generating Tokens"},{"location":"api-guide/authentication/#by-using-signals","text":"If you want every user to have an automatically generated Token, you can simply catch the User's post_save signal. from django.conf import settings from django.db.models.signals import post_save from django.dispatch import receiver from rest_framework.authtoken.models import Token @receiver(post_save, sender=settings.AUTH_USER_MODEL) def create_auth_token(sender, instance=None, created=False, **kwargs): if created: Token.objects.create(user=instance) Note that you'll want to ensure you place this code snippet in an installed models.py module, or some other location that will be imported by Django on startup. If you've already created some users, you can generate tokens for all existing users like this: from django.contrib.auth.models import User from rest_framework.authtoken.models import Token for user in User.objects.all(): Token.objects.get_or_create(user=user)","title":"By using signals"},{"location":"api-guide/authentication/#by-exposing-an-api-endpoint","text":"When using TokenAuthentication , you may want to provide a mechanism for clients to obtain a token given the username and password. REST framework provides a built-in view to provide this behavior. To use it, add the obtain_auth_token view to your URLconf: from rest_framework.authtoken import views urlpatterns += [ url(r'^api-token-auth/', views.obtain_auth_token) ] Note that the URL part of the pattern can be whatever you want to use. The obtain_auth_token view will return a JSON response when valid username and password fields are POSTed to the view using form data or JSON: { 'token' : '9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' } Note that the default obtain_auth_token view explicitly uses JSON requests and responses, rather than using default renderer and parser classes in your settings. By default there are no permissions or throttling applied to the obtain_auth_token view. If you do wish to apply throttling you'll need to override the view class, and include them using the throttle_classes attribute. If you need a customized version of the obtain_auth_token view, you can do so by subclassing the ObtainAuthToken view class, and using that in your url conf instead. For example, you may return additional user information beyond the token value: from rest_framework.authtoken.views import ObtainAuthToken from rest_framework.authtoken.models import Token from rest_framework.response import Response class CustomAuthToken(ObtainAuthToken): def post(self, request, *args, **kwargs): serializer = self.serializer_class(data=request.data, context={'request': request}) serializer.is_valid(raise_exception=True) user = serializer.validated_data['user'] token, created = Token.objects.get_or_create(user=user) return Response({ 'token': token.key, 'user_id': user.pk, 'email': user.email }) And in your urls.py : urlpatterns += [ url(r'^api-token-auth/', CustomAuthToken.as_view()) ]","title":"By exposing an api endpoint"},{"location":"api-guide/authentication/#with-django-admin","text":"It is also possible to create Tokens manually through admin interface. In case you are using a large user base, we recommend that you monkey patch the TokenAdmin class to customize it to your needs, more specifically by declaring the user field as raw_field . your_app/admin.py : from rest_framework.authtoken.admin import TokenAdmin TokenAdmin.raw_id_fields = ['user']","title":"With Django admin"},{"location":"api-guide/authentication/#using-django-managepy-command","text":"Since version 3.6.4 it's possible to generate a user token using the following command: ./manage.py drf_create_token <username> this command will return the API token for the given user, creating it if it doesn't exist: Generated token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b for user user1 In case you want to regenerate the token (for example if it has been compromised or leaked) you can pass an additional parameter: ./manage.py drf_create_token -r <username>","title":"Using Django manage.py command"},{"location":"api-guide/authentication/#sessionauthentication","text":"This authentication scheme uses Django's default session backend for authentication. Session authentication is appropriate for AJAX clients that are running in the same session context as your website. If successfully authenticated, SessionAuthentication provides the following credentials. request.user will be a Django User instance. request.auth will be None . Unauthenticated responses that are denied permission will result in an HTTP 403 Forbidden response. If you're using an AJAX style API with SessionAuthentication, you'll need to make sure you include a valid CSRF token for any \"unsafe\" HTTP method calls, such as PUT , PATCH , POST or DELETE requests. See the Django CSRF documentation for more details. Warning : Always use Django's standard login view when creating login pages. This will ensure your login views are properly protected. CSRF validation in REST framework works slightly differently to standard Django due to the need to support both session and non-session based authentication to the same views. This means that only authenticated requests require CSRF tokens, and anonymous requests may be sent without CSRF tokens. This behaviour is not suitable for login views, which should always have CSRF validation applied.","title":"SessionAuthentication"},{"location":"api-guide/authentication/#remoteuserauthentication","text":"This authentication scheme allows you to delegate authentication to your web server, which sets the REMOTE_USER environment variable. To use it, you must have django.contrib.auth.backends.RemoteUserBackend (or a subclass) in your AUTHENTICATION_BACKENDS setting. By default, RemoteUserBackend creates User objects for usernames that don't already exist. To change this and other behaviour, consult the Django documentation . If successfully authenticated, RemoteUserAuthentication provides the following credentials: request.user will be a Django User instance. request.auth will be None . Consult your web server's documentation for information about configuring an authentication method, e.g.: Apache Authentication How-To NGINX (Restricting Access)","title":"RemoteUserAuthentication"},{"location":"api-guide/authentication/#custom-authentication","text":"To implement a custom authentication scheme, subclass BaseAuthentication and override the .authenticate(self, request) method. The method should return a two-tuple of (user, auth) if authentication succeeds, or None otherwise. In some circumstances instead of returning None , you may want to raise an AuthenticationFailed exception from the .authenticate() method. Typically the approach you should take is: If authentication is not attempted, return None . Any other authentication schemes also in use will still be checked. If authentication is attempted but fails, raise a AuthenticationFailed exception. An error response will be returned immediately, regardless of any permissions checks, and without checking any other authentication schemes. You may also override the .authenticate_header(self, request) method. If implemented, it should return a string that will be used as the value of the WWW-Authenticate header in a HTTP 401 Unauthorized response. If the .authenticate_header() method is not overridden, the authentication scheme will return HTTP 403 Forbidden responses when an unauthenticated request is denied access. Note: When your custom authenticator is invoked by the request object's .user or .auth properties, you may see an AttributeError re-raised as a WrappedAttributeError . This is necessary to prevent the original exception from being suppressed by the outer property access. Python will not recognize that the AttributeError originates from your custom authenticator and will instead assume that the request object does not have a .user or .auth property. These errors should be fixed or otherwise handled by your authenticator.","title":"Custom authentication"},{"location":"api-guide/authentication/#example","text":"The following example will authenticate any incoming request as the user given by the username in a custom request header named 'X-USERNAME'. from django.contrib.auth.models import User from rest_framework import authentication from rest_framework import exceptions class ExampleAuthentication(authentication.BaseAuthentication): def authenticate(self, request): username = request.META.get('HTTP_X_USERNAME') if not username: return None try: user = User.objects.get(username=username) except User.DoesNotExist: raise exceptions.AuthenticationFailed('No such user') return (user, None)","title":"Example"},{"location":"api-guide/authentication/#third-party-packages","text":"The following third party packages are also available.","title":"Third party packages"},{"location":"api-guide/authentication/#django-oauth-toolkit","text":"The Django OAuth Toolkit package provides OAuth 2.0 support and works with Python 3.4+. The package is maintained by Evonove and uses the excellent OAuthLib . The package is well documented, and well supported and is currently our recommended package for OAuth 2.0 support .","title":"Django OAuth Toolkit"},{"location":"api-guide/authentication/#installation-configuration","text":"Install using pip . pip install django-oauth-toolkit Add the package to your INSTALLED_APPS and modify your REST framework settings. INSTALLED_APPS = [ ... 'oauth2_provider', ] REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': [ 'oauth2_provider.contrib.rest_framework.OAuth2Authentication', ] } For more details see the Django REST framework - Getting started documentation.","title":"Installation &amp; configuration"},{"location":"api-guide/authentication/#django-rest-framework-oauth","text":"The Django REST framework OAuth package provides both OAuth1 and OAuth2 support for REST framework. This package was previously included directly in REST framework but is now supported and maintained as a third party package.","title":"Django REST framework OAuth"},{"location":"api-guide/authentication/#installation-configuration_1","text":"Install the package using pip . pip install djangorestframework-oauth For details on configuration and usage see the Django REST framework OAuth documentation for authentication and permissions .","title":"Installation &amp; configuration"},{"location":"api-guide/authentication/#json-web-token-authentication","text":"JSON Web Token is a fairly new standard which can be used for token-based authentication. Unlike the built-in TokenAuthentication scheme, JWT Authentication doesn't need to use a database to validate a token. A package for JWT authentication is djangorestframework-simplejwt which provides some features as well as a pluggable token blacklist app.","title":"JSON Web Token Authentication"},{"location":"api-guide/authentication/#hawk-http-authentication","text":"The HawkREST library builds on the Mohawk library to let you work with Hawk signed requests and responses in your API. Hawk lets two parties securely communicate with each other using messages signed by a shared key. It is based on HTTP MAC access authentication (which was based on parts of OAuth 1.0 ).","title":"Hawk HTTP Authentication"},{"location":"api-guide/authentication/#http-signature-authentication","text":"HTTP Signature (currently a IETF draft ) provides a way to achieve origin authentication and message integrity for HTTP messages. Similar to Amazon's HTTP Signature scheme , used by many of its services, it permits stateless, per-request authentication. Elvio Toccalino maintains the djangorestframework-httpsignature (outdated) package which provides an easy to use HTTP Signature Authentication mechanism. You can use the updated fork version of djangorestframework-httpsignature , which is drf-httpsig .","title":"HTTP Signature Authentication"},{"location":"api-guide/authentication/#djoser","text":"Djoser library provides a set of views to handle basic actions such as registration, login, logout, password reset and account activation. The package works with a custom user model and it uses token based authentication. This is a ready to use REST implementation of Django authentication system.","title":"Djoser"},{"location":"api-guide/authentication/#django-rest-auth-dj-rest-auth","text":"This library provides a set of REST API endpoints for registration, authentication (including social media authentication), password reset, retrieve and update user details, etc. By having these API endpoints, your client apps such as AngularJS, iOS, Android, and others can communicate to your Django backend site independently via REST APIs for user management. There are currently two forks of this project. Django-rest-auth is the original project, but is not currently receiving updates . Dj-rest-auth is a newer fork of the project.","title":"django-rest-auth / dj-rest-auth"},{"location":"api-guide/authentication/#django-rest-framework-social-oauth2","text":"Django-rest-framework-social-oauth2 library provides an easy way to integrate social plugins (facebook, twitter, google, etc.) to your authentication system and an easy oauth2 setup. With this library, you will be able to authenticate users based on external tokens (e.g. facebook access token), convert these tokens to \"in-house\" oauth2 tokens and use and generate oauth2 tokens to authenticate your users.","title":"django-rest-framework-social-oauth2"},{"location":"api-guide/authentication/#django-rest-knox","text":"Django-rest-knox library provides models and views to handle token based authentication in a more secure and extensible way than the built-in TokenAuthentication scheme - with Single Page Applications and Mobile clients in mind. It provides per-client tokens, and views to generate them when provided some other authentication (usually basic authentication), to delete the token (providing a server enforced logout) and to delete all tokens (logs out all clients that a user is logged into).","title":"django-rest-knox"},{"location":"api-guide/authentication/#drfpasswordless","text":"drfpasswordless adds (Medium, Square Cash inspired) passwordless support to Django REST Framework's own TokenAuthentication scheme. Users log in and sign up with a token sent to a contact point like an email address or a mobile number.","title":"drfpasswordless"},{"location":"api-guide/authentication_zh/","text":"\u8ba4\u8bc1 \u8eab\u4efd\u9a8c\u8bc1\u529f\u80fd\u9700\u8981\u53ef\u63d2\u62d4\u3002 \u2014 Jacob Kaplan-Moss, \"REST worst practices\" \u8eab\u4efd\u9a8c\u8bc1\u662f\u5c06\u4f20\u5165\u8bf7\u6c42\u4e0e\u4e00\u7ec4\u6807\u8bc6\u51ed\u636e\uff08\u4f8b\u5982\u8bf7\u6c42\u6765\u81ea\u7684\u7528\u6237\u6216\u5176\u7b7e\u540d\u7684\u4ee4\u724c\uff09\u76f8\u5173\u8054\u7684\u673a\u5236\u3002\u7136\u540e\uff0c \u6743\u9650 \u548c \u9650\u5236 \u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u51ed\u636e\u6765\u786e\u5b9a\u662f\u5426\u5e94\u5141\u8bb8\u8be5\u8bf7\u6c42\u3002 REST framework \u63d0\u4f9b\u4e86\u4e00\u4e9b\u5f00\u7bb1\u5373\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u5e76\u4e14\u8fd8\u5141\u8bb8\u4f60\u5b9e\u73b0\u81ea\u5b9a\u4e49\u65b9\u6848\u3002 \u9a8c\u8bc1\u59cb\u7ec8\u5728\u89c6\u56fe\u7684\u6700\u5f00\u59cb\u8fdb\u884c\uff0c\u5728\u6267\u884c\u6743\u9650\u548c\u9650\u5236\u68c0\u67e5\u4e4b\u524d\u4ee5\u53ca\u5141\u8bb8\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\u4e4b\u524d\u3002 request.user \u5c5e\u6027\u901a\u5e38\u88ab\u8bbe\u7f6e\u4e3a contrib.auth \u5305\u4e2d User \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 request.auth \u5c5e\u6027\u7528\u4e8e\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\uff0c\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u8868\u793a\u8bf7\u6c42\u7b7e\u540d\u7684\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u3002 \u6ce8\u610f\uff1a \u4e0d\u8981\u5fd8\u4e86 \u8ba4\u8bc1\u672c\u8eab\u4e0d\u4f1a\u5141\u8bb8\u6216\u62d2\u7edd\u4f20\u5165\u7684\u8bf7\u6c42 \uff0c\u5b83\u53ea\u662f\u7b80\u5355\u8bc6\u522b\u8bf7\u6c42\u643a\u5e26\u7684\u51ed\u8bc1\u3002 \u6709\u5173\u5982\u4f55\u8bbe\u7f6eAPI\u6743\u9650\u7b56\u7565\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u6743\u9650\u6587\u6863 \u3002 \u5982\u4f55\u786e\u5b9a\u8eab\u4efd\u9a8c\u8bc1 \u8ba4\u8bc1\u65b9\u6848\u603b\u662f\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7c7b\u7684\u5217\u8868\u3002REST framework \u5c06\u5c1d\u8bd5\u4f7f\u7528\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7c7b\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4f7f\u7528\u6210\u529f\u5b8c\u6210\u9a8c\u8bc1\u7684\u7b2c\u4e00\u4e2a\u7c7b\u7684\u8fd4\u56de\u503c\u8bbe\u7f6e request.user \u548c request.auth \u3002 \u5982\u679c\u6ca1\u6709\u7c7b\u8fdb\u884c\u9a8c\u8bc1\uff0c request.user \u5c06\u88ab\u8bbe\u7f6e\u6210 django.contrib.auth.models.AnonymousUser \u7684\u5b9e\u4f8b\uff0c request.auth \u5c06\u88ab\u8bbe\u7f6e\u6210 None \u3002 \u672a\u8ba4\u8bc1\u8bf7\u6c42\u7684 request.user \u548c request.auth \u7684\u503c\u53ef\u4ee5\u4f7f\u7528 UNAUTHENTICATED_USER \u548c UNAUTHENTICATED_TOKEN \u8bbe\u7f6e\u8fdb\u884c\u4fee\u6539\u3002 \u8bbe\u7f6e\u8ba4\u8bc1\u65b9\u6848 \u53ef\u4ee5\u4f7f\u7528 DEFAULT_AUTHENTICATION_CLASSES \u8bbe\u7f6e\u5168\u5c40\u7684\u9ed8\u8ba4\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002\u6bd4\u5982\uff1a REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.BasicAuthentication', 'rest_framework.authentication.SessionAuthentication', ) } \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e APIView \u7c7b\u89c6\u56fe\u7684\u65b9\u5f0f\uff0c\u5728\u6bcf\u4e2aview\u6216\u6bcf\u4e2aviewset\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002 from rest_framework.authentication import SessionAuthentication, BasicAuthentication from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): authentication_classes = (SessionAuthentication, BasicAuthentication) permission_classes = (IsAuthenticated,) def get(self, request, format=None): content = { 'user': unicode(request.user), # `django.contrib.auth.User` \u5b9e\u4f8b\u3002 'auth': unicode(request.auth), # None } return Response(content) \u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\uff0c\u90a3\u5c31\u4f7f\u7528 @api_view \u88c5\u9970\u5668\u3002 @api_view(['GET']) @authentication_classes((SessionAuthentication, BasicAuthentication)) @permission_classes((IsAuthenticated,)) def example_view(request, format=None): content = { 'user': unicode(request.user), # `django.contrib.auth.User` \u5b9e\u4f8b\u3002 'auth': unicode(request.auth), # None } return Response(content) \u672a\u8ba4\u8bc1\u548c\u7981\u6b62\u7684\u54cd\u5e94 \u5f53\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u88ab\u62d2\u7edd\u65f6\uff0c\u6709\u4e0b\u9762\u4e24\u79cd\u4e0d\u540c\u7684\u9519\u8bef\u4ee3\u7801\u53ef\u4f7f\u7528\u3002 HTTP 401 \u672a\u8ba4\u8bc1 HTTP 403 \u65e0\u6743\u9650 HTTP 401 \u54cd\u5e94\u5fc5\u987b\u59cb\u7ec8\u5305\u62ec\u4e00\u4e2a WWW-Authenticate \u5934\uff0c\u6307\u793a\u5ba2\u6237\u7aef\u5982\u4f55\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 HTTP 403\u54cd\u5e94\u4e0d\u5305\u62ec WWW-Authenticate \u3002 \u5177\u4f53\u4f7f\u7528\u54ea\u79cd\u54cd\u5e94\u53d6\u51b3\u4e8e\u8ba4\u8bc1\u65b9\u6848\u3002\u867d\u7136\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u8ba4\u8bc1\u65b9\u6848\uff0c\u4f46\u662f\u4ec5\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u65b9\u6848\u6765\u786e\u5b9a\u54cd\u5e94\u7684\u7c7b\u578b\u3002 \u5728\u786e\u5b9a\u54cd\u5e94\u7c7b\u578b\u65f6\uff0c\u5c06\u4f7f\u7528\u89c6\u56fe\u4e0a\u8bbe\u7f6e\u7684\u7b2c\u4e00\u4e2a\u8ba4\u8bc1\u7c7b\u3002 \u6ce8\u610f\uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42\u901a\u8fc7\u4e86\u9a8c\u8bc1\u4f46\u662f\u88ab\u62d2\u7edd\u6267\u884c\u8bf7\u6c42\u7684\u6743\u9650\u65f6\uff0c\u4e0d\u7ba1\u8ba4\u8bc1\u65b9\u6848\u662f\u4ec0\u4e48\uff0c\u90fd\u8981\u4f7f\u7528 403 Permission Denied \u54cd\u5e94\u3002 Apache mod_wsgi \u5177\u4f53\u914d\u7f6e \u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 Apache using mod_wsgi \u90e8\u7f72\uff0c\u8ba4\u8bc1\u5934\u9ed8\u8ba4\u4e0d\u4f1a\u4f20\u9012\u7ed9WSGI\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u5047\u5b9a\u7531Apache\u5904\u7406\u8ba4\u8bc1\uff0c\u800c\u4e0d\u662f\u5728\u5e94\u7528\u5c42\u9762\u5904\u7406\u3002 \u5982\u679c\u4f60\u6b63\u5728\u90e8\u7f72\u5230Apache\uff0c\u5e76\u4e14\u4f7f\u7528\u4efb\u4f55non-session\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5219\u9700\u8981\u663e\u5f0f\u914d\u7f6emod_wsgi\u624d\u80fd\u5c06\u6240\u9700\u7684\u5934\u6587\u4ef6\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u9002\u5f53\u7684\u4e0a\u4e0b\u6587\u4e2d\u6307\u5b9a WSGIPassAuthorization \u6307\u4ee4\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a 'On' \u6765\u5b8c\u6210\u3002 # \u8fd9\u53ef\u80fd\u4f1a\u5728\u670d\u52a1\u5668\u914d\u7f6e\uff0c\u865a\u62df\u4e3b\u673a\uff0c\u76ee\u5f55\u6216.htaccess WSGIPassAuthorization On API \u53c2\u8003 BasicAuthentication \u6b64\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528 HTTP \u57fa\u672c\u8ba4\u8bc1 \uff0c\u9488\u5bf9\u7528\u6237\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u8ba4\u8bc1\u3002\u57fa\u672c\u8ba4\u8bc1\u901a\u5e38\u53ea\u9002\u7528\u4e8e\u6d4b\u8bd5\u3002 \u5982\u679c\u8ba4\u8bc1\u6210\u529f BasicAuthentication \u63d0\u4f9b\u4ee5\u4e0b\u4fe1\u606f\u3002 request.user \u5c06\u662f\u4e00\u4e2a Django User \u5b9e\u4f8b\u3002 request.auth \u5c06\u662f None \u3002 \u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de\u4f7f\u7528\u9002\u5f53WWW-Authenticate\u6807\u5934\u7684 HTTP 401 Unauthorized \u54cd\u5e94\u3002\u4f8b\u5982\uff1a WWW-Authenticate: Basic realm=\"api\" \u6ce8\u610f\uff1a \u5982\u679c\u4f60\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528 BasicAuthentication \uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u786e\u4fdd\u4f60\u7684API\u4ec5\u5728 https \u4e2d\u53ef\u7528\u3002\u4f60\u8fd8\u5e94\u786e\u4fdd\u4f60\u7684API\u5ba2\u6237\u7aef\u59cb\u7ec8\u5728\u767b\u5f55\u65f6\u91cd\u65b0\u8bf7\u6c42\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c06\u8fd9\u4e9b\u8be6\u7ec6\u4fe1\u606f\u5b58\u50a8\u5230\u6301\u4e45\u5b58\u50a8\u4e2d\u3002 TokenAuthentication \u8be5\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528\u7b80\u5355\u7684\u57fa\u4e8eToken\u7684HTTP\u8ba4\u8bc1\u65b9\u6848\u3002Token\u8ba4\u8bc1\u9002\u7528\u4e8e\u5ba2\u6237\u7aef - \u670d\u52a1\u5668\u8bbe\u7f6e\uff0c\u5982\u672c\u5730\u684c\u9762\u548c\u79fb\u52a8\u5ba2\u6237\u7aef\u3002 \u8981\u4f7f\u7528 TokenAuthentication \u65b9\u6848\uff0c\u4f60\u9700\u8981 \u914d\u7f6e\u8ba4\u8bc1\u7c7b \u4ee5\u4fbf\u5305\u542b TokenAuthentication \uff0c\u53e6\u5916\u5728 INSTALLED_APPS \u8bbe\u7f6e\u4e2d\u8fd8\u9700\u8981\u5305\u542b rest_framework.authtoken \uff1a INSTALLED_APPS = ( ... 'rest_framework.authtoken' ) \u6ce8\u610f\uff1a \u786e\u4fdd\u5728\u4fee\u6539\u8bbe\u7f6e\u540e\u8fd0\u884c\u4e00\u4e0b manage.py migrate \u3002 rest_framework.authtoken app \u4f1a\u63d0\u4ea4\u4e00\u4e9bDjango\u6570\u636e\u5e93\u8fc1\u79fb\u64cd\u4f5c\u3002 \u4f60\u8fd8\u9700\u8981\u4e3a\u4f60\u7684\u7528\u6237\u521b\u5efa\u4ee4\u724c\u3002 from rest_framework.authtoken.models import Token token = Token.objects.create(user=...) print token.key \u5bf9\u5ba2\u6237\u7aef\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0ctoken\u9700\u8981\u5305\u542b\u5728 Authorization HTTP\u5934\u4e2d\u3002\u5bc6\u94a5\u5e94\u8be5\u662f\u4ee5\u5b57\u7b26\u4e32\"Token\"\u4e3a\u524d\u7f00\uff0c\u4ee5\u7a7a\u683c\u5206\u5272\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff1a Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b \u6ce8\u610f\uff1a \u5982\u679c\u4f60\u60f3\u5728HTTP\u5934\u4e2d\u4f7f\u7528\u5176\u4ed6\u7684\u5173\u952e\u5b57\uff0c\u6bd4\u5982 Bearer \uff0c\u53ea\u9700\u8981\u7ee7\u627f TokenAuthentication \u7c7b\u5e76\u8bbe\u7f6e keyword \u7c7b\u53d8\u91cf\u3002 \u5982\u679c\u8ba4\u8bc1\u6210\u529f\uff0c TokenAuthentication \u63d0\u4f9b\u4ee5\u4e0b\u8ba4\u8bc1\u4fe1\u606f\uff1a request.user \u5c06\u662f\u4e00\u4e2aDjango User \u5b9e\u4f8b\u3002 request.auth \u5c06\u662f\u4e00\u4e2a rest_framework.authtoken.models.Token \u5b9e\u4f8b\u3002 \u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de\u4f7f\u7528\u9002\u5f53WWW-Authenticate\u6807\u5934\u7684 HTTP 401 Unauthorized \u54cd\u5e94\u3002\u4f8b\u5982\uff1a WWW-Authenticate: Token \u547d\u4ee4\u884c\u5de5\u5177 curl \u53ef\u7528\u4e8e\u6d4b\u8bd5\u57fa\u4e8eToken\u8ba4\u8bc1\u7684API\uff0c\u4f8b\u5982\uff1a curl -X GET http://127.0.0.1:8000/api/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' \u6ce8\u610f\uff1a \u5982\u679c\u4f60\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u4f7f\u7528 TokenAuthentication \u8ba4\u8bc1\uff0c\u4f60\u5fc5\u987b\u786e\u4fdd\u4f60\u7684API\u4ec5\u5728 https \u53ef\u7528\u3002 \u751f\u6210Tokens \u901a\u8fc7\u4f7f\u7528\u4fe1\u53f7 \u5982\u679c\u4f60\u5e0c\u671b\u6bcf\u4e2a\u7528\u6237\u62e5\u6709\u81ea\u52a8\u751f\u6210\u7684\u4ee4\u724c\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u6355\u83b7\u7528\u6237\u7684 post_save \u4fe1\u53f7\u3002 from django.conf import settings from django.db.models.signals import post_save from django.dispatch import receiver from rest_framework.authtoken.models import Token @receiver(post_save, sender=settings.AUTH_USER_MODEL) def create_auth_token(sender, instance=None, created=False, **kwargs): if created: Token.objects.create(user=instance) \u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5c06\u6b64\u4ee3\u7801\u6bb5\u653e\u7f6e\u5728\u5df2\u5b89\u88c5\u7684 models.py \u6a21\u5757\u6216Django\u5728\u542f\u52a8\u65f6\u5bfc\u5165\u7684\u5176\u4ed6\u4f4d\u7f6e\u3002 \u5982\u679c\u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e9b\u7528\u6237\uff0c\u5219\u53ef\u4ee5\u5982\u4e0b\u6240\u793a\u4e3a\u6240\u6709\u73b0\u6709\u7528\u6237\u751f\u6210\u4ee4\u724c\uff1a from django.contrib.auth.models import User from rest_framework.authtoken.models import Token for user in User.objects.all(): Token.objects.get_or_create(user=user) \u901a\u8fc7\u66b4\u9732 api \u7aef\u70b9 \u5f53\u4f7f\u7528 TokenAuthentication \u65f6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u4e00\u4e2a\u83b7\u53d6\u7ed9\u5b9a\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u4ee4\u724c\u7684\u673a\u5236\u3002 REST framework \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684\u89c6\u56fe\u6765\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002\u8981\u4f7f\u7528\u5b83\uff0c\u9700\u8981\u5c06 obtain_auth_token \u89c6\u56fe\u6dfb\u52a0\u5230\u4f60\u7684URLconf\uff1a from rest_framework.authtoken import views urlpatterns += [ url(r'^api-token-auth/', views.obtain_auth_token) ] \u6ce8\u610fURL\u6b63\u5219\u5339\u914d\u6a21\u5f0f\u90a3\u91cc\u53ef\u4ee5\u662f\u4f60\u60f3\u8981\u4f7f\u7528\u7684\u4efb\u4f55\u5185\u5bb9\u3002 \u5f53\u4f7f\u7528form\u8868\u5355\u6216JSON\u5c06\u6709\u6548\u7684 username \u548c password \u5b57\u6bb5POST\u63d0\u4ea4\u5230\u89c6\u56fe\u65f6\uff0c obtain_auth_token \u89c6\u56fe\u5c06\u8fd4\u56deJSON\u54cd\u5e94\uff1a { 'token' : '9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' } \u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u7684 obtain_auth_token \u89c6\u56fe\u663e\u5f0f\u4f7f\u7528JSON\u8bf7\u6c42\u548c\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4f7f\u7528settings\u4e2d\u914d\u7f6e\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u7c7b\u3002\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u7248\u672c\u7684 obtain_auth_token \u89c6\u56fe\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 ObtainAuthToken \u7c7b\uff0c\u5e76\u5728url conf\u4e2d\u4f7f\u7528\u5b83\u6765\u5b9e\u73b0\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u6743\u9650\u6216\u9650\u5236\u5e94\u7528\u4e8e obtain_auth_token \u89c6\u56fe\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5e94\u7528\u9650\u5236\uff0c\u5219\u9700\u8981\u91cd\u5199\u89c6\u56fe\u7c7b\uff0c\u5e76\u4f7f\u7528 throttle_classes \u5c5e\u6027\u5305\u542b\u5b83\u4eec\u3002 With Django admin \u4e5f\u53ef\u4ee5\u901a\u8fc7\u7ba1\u7406\u754c\u9762\u624b\u52a8\u521b\u5efa\u4ee4\u724c\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u5927\u578b\u7528\u6237\u7fa4\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u52a8\u6001\u4fee\u6539 TokenAdmin \u7c7b\uff0c\u4ee5\u6839\u636e\u4f60\u7684\u9700\u8981\u8fdb\u884c\u81ea\u5b9a\u4e49\uff0c\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5c06 user \u5b57\u6bb5\u58f0\u660e\u4e3a raw_field \u3002 your_app/admin.py : from rest_framework.authtoken.admin import TokenAdmin TokenAdmin.raw_id_fields = ('user',) Session\u8ba4\u8bc1 \u6b64\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528Django\u7684\u9ed8\u8ba4session\u540e\u7aef\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002Session\u8eab\u4efd\u9a8c\u8bc1\u9002\u7528\u4e8e\u4e0e\u4f60\u7684\u7f51\u7ad9\u5728\u76f8\u540c\u7684Session\u73af\u5883\u4e2d\u8fd0\u884c\u7684AJAX\u5ba2\u6237\u7aef\u3002 \u5982\u679c\u6210\u529f\u9a8c\u8bc1\uff0c SessionAuthentication \u63d0\u4f9b\u4ee5\u4e0b\u51ed\u636e\u3002 request.user \u662f\u4e00\u4e2a Django User \u5b9e\u4f8b\u3002 request.auth \u662f None \u3002 \u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de HTTP 403 Forbidden \u54cd\u5e94\u3002 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u5e26\u6709SessionAuthentication\u7684AJAX\u6837\u5f0f\u7684API\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u4efb\u4f55\"\u4efb\u4f55\"\u4e0d\u5b89\u5168\u7684HTTP\u65b9\u6cd5\u8c03\u7528\uff08\u5982\uff1a PUT , PATCH , POST or DELETE \u8bf7\u6c42\uff09\u90fd\u5305\u542b\u6709\u6548\u7684CSRF token\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Django CSRF \u6587\u6863 \u3002 \u8b66\u544a \uff1a\u5728\u521b\u5efa\u767b\u9646\u9875\u9762\u65f6\uff0c\u59cb\u7ec8\u8981\u4f7f\u7528Django\u7684\u6807\u51c6\u767b\u9646\u89c6\u56fe\u3002\u8fd9\u6837\u624d\u80fd\u786e\u4fdd\u4f60\u7684\u767b\u9646\u89c6\u56fe\u88ab\u6b63\u786e\u7684\u8ba4\u8bc1\u4fdd\u62a4\u3002 \u7531\u4e8e\u9700\u8981\u540c\u65f6\u652f\u6301session\u548cnon-session\u975e\u4f1a\u8bdd\u8eab\u4efd\u9a8c\u8bc1\uff0cREST\u6846\u67b6\u4e2d\u7684CSRF\u9a8c\u8bc1\u4e0e\u6807\u51c6Django\u4e2d\u7684\u5de5\u4f5c\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002\u8fd9\u610f\u5473\u7740\u53ea\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u9700\u8981CSRF\u4ee4\u724c\uff0c\u533f\u540d\u8bf7\u6c42\u53ef\u80fd\u4e0d\u4f1a\u53d1\u9001CSRF\u4ee4\u724ctokens\u3002\u6b64\u884c\u4e3a\u4e0d\u9002\u7528\u4e8e\u59cb\u7ec8\u9700\u8981\u4f7f\u7528CSRF\u9a8c\u8bc1\u7684\u767b\u5f55\u89c6\u56fe\u3002 \u81ea\u5b9a\u4e49\u8ba4\u8bc1 \u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u65b9\u6848\uff0c\u8981\u7ee7\u627f BaseAuthentication \u7c7b\u5e76\u4e14\u91cd\u5199 .authenticate(self, request) \u65b9\u6cd5\u3002\u5982\u679c\u8ba4\u8bc1\u6210\u529f\uff0c\u8be5\u65b9\u6cd5\u5e94\u8fd4\u56de (user, auth) \u7684\u4e8c\u5143\u5143\u7ec4\uff0c\u5426\u5219\u8fd4\u56de None \u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u4e0d\u60f3\u8fd4\u56de None \uff0c\u800c\u662f\u5e0c\u671b\u4ece .authenticate() \u65b9\u6cd5\u629b\u51fa AuthenticationFailed \u5f02\u5e38\u3002 \u901a\u5e38\u4f60\u5e94\u8be5\u91c7\u53d6\u7684\u65b9\u6cd5\u662f\uff1a \u5982\u679c\u4e0d\u5c1d\u8bd5\u9a8c\u8bc1\uff0c\u8fd4\u56de None \u3002\u8fd8\u5c06\u68c0\u67e5\u4efb\u4f55\u5176\u4ed6\u6b63\u5728\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002 \u5982\u679c\u5c1d\u8bd5\u9a8c\u8bc1\u4f46\u5931\u8d25\uff0c\u5219\u629b\u51fa AuthenticationFailed \u5f02\u5e38\u3002\u65e0\u8bba\u4efb\u4f55\u6743\u9650\u68c0\u67e5\u4e5f\u4e0d\u68c0\u67e5\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u7acb\u5373\u8fd4\u56de\u9519\u8bef\u54cd\u5e94\u3002 \u4f60\u4e5f \u53ef\u4ee5 \u91cd\u5199 .authenticate_header(self, request) \u65b9\u6cd5\u3002\u5982\u679c\u5b9e\u73b0\u8be5\u65b9\u6cd5\uff0c\u5219\u5e94\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u7528\u4f5c HTTP 401 Unauthorized \u54cd\u5e94\u4e2d\u7684 WWW-Authenticate \u5934\u7684\u503c\u3002 \u5982\u679c .authenticate_header() \u65b9\u6cd5\u672a\u88ab\u91cd\u5199\uff0c\u5219\u8ba4\u8bc1\u65b9\u6848\u5c06\u5728\u672a\u9a8c\u8bc1\u7684\u8bf7\u6c42\u88ab\u62d2\u7edd\u8bbf\u95ee\u65f6\u8fd4\u56de HTTP 403 Forbidden \u54cd\u5e94\u3002 \u793a\u4f8b \u4ee5\u4e0b\u793a\u4f8b\u5c06\u4ee5\u81ea\u5b9a\u4e49\u8bf7\u6c42\u6807\u5934\u4e2d\u540d\u79f0\u4e3a'X_USERNAME'\u63d0\u4f9b\u7684\u7528\u6237\u540d\u4f5c\u4e3a\u7528\u6237\u5bf9\u4efb\u4f55\u4f20\u5165\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 from django.contrib.auth.models import User from rest_framework import authentication from rest_framework import exceptions class ExampleAuthentication(authentication.BaseAuthentication): def authenticate(self, request): username = request.META.get('X_USERNAME') if not username: return None try: user = User.objects.get(username=username) except User.DoesNotExist: raise exceptions.AuthenticationFailed('No such user') return (user, None) \u7b2c\u4e09\u65b9\u5305 \u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u662f\u53ef\u7528\u7684\u3002 Django OAuth Toolkit Django OAuth Toolkit \u5305\u63d0\u4f9b\u4e86OAuth 2.0 \u8ba4\u8bc1\u652f\u6301\uff0c\u5e76\u4e14\u517c\u5bb9Python 2.7\u548cPython 3.3+\u3002\u8fd9\u4e2a\u5305\u4f7f\u7528\u4f18\u79c0\u7684 OAuthLib \uff0c\u7531 Evonove \u7ef4\u62a4\u3002\u8be5\u8f6f\u4ef6\u5305\u6709\u5f88\u5b8c\u5584\u7684\u6587\u6863\uff0c\u5e76\u5f97\u5230\u5f88\u597d\u7684\u652f\u6301\uff0c\u76ee\u524d\u662f\u6211\u4eec \u63a8\u8350\u4f7f\u7528\u7684OAuth 2.0\u652f\u6301\u8f6f\u4ef6\u5305 \u3002 \u5b89\u88c5\u548c\u914d\u7f6e \u4f7f\u7528 pip \u5b89\u88c5\u3002 pip install django-oauth-toolkit \u628a\u8fd9\u4e2a\u5305\u6dfb\u52a0\u5230\u4f60\u7684 INSTALLED_APPS \u4e2d\uff0c\u5e76\u4e14\u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002 INSTALLED_APPS = ( ... 'oauth2_provider', ) REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'oauth2_provider.ext.rest_framework.OAuth2Authentication', ) } \u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u9605 Django REST framework - Getting started \u6587\u6863\u3002 Django REST framework OAuth Django REST framework OAuth \u5305\u63d0\u4f9bOAuth1\u548cOAuth2\u652f\u6301\u3002 \u8fd9\u4e2a\u8f6f\u4ef6\u5305\u4ee5\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework\u4e2d\uff0c\u4f46\u73b0\u5728\u5df2\u88ab\u4f5c\u4e3a\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u652f\u6301\u548c\u7ef4\u62a4\u3002 \u5b89\u88c5\u548c\u914d\u7f6e \u4f7f\u7528 pip \u8fdb\u884c\u5b89\u88c5\u3002 pip install djangorestframework-oauth \u66f4\u591a\u914d\u7f6e\u548c\u4f7f\u7528\u4fe1\u606f\u8bf7\u67e5\u9605Django REST framework OAuth\u6587\u6863\u4e2d\u7684 authentication \u548c permissions \u3002 Digest Authentication HTTP\u6458\u8981\u8ba4\u8bc1\u662f\u4e00\u79cd\u5e7f\u6cdb\u5b9e\u73b0\u7684\u65b9\u6848\uff0c\u65e8\u5728\u66ff\u4ee3HTTP\u57fa\u672c\u8ba4\u8bc1\uff0c\u5e76\u63d0\u4f9b\u7b80\u5355\u7684\u52a0\u5bc6\u8ba4\u8bc1\u673a\u5236\u3002 Juan Riaza \u7ef4\u62a4\u7740 djangorestframework-digestauth \u4e3aREST framework\u63d0\u4f9b\u4e86HTTP\u6458\u8981\u8ba4\u8bc1\u652f\u6301\u3002 Django OAuth2 Consumer Rediker Software \u7684 Django OAuth2 Consumer \u662f\u53e6\u4e00\u4e2a\u4e3aREST\u6846\u67b6\u63d0\u4f9b OAuth 2.0 support for REST framework \u7684\u8f6f\u4ef6\u5305\u3002\u8be5\u5305\u5305\u542btokens\u8303\u56f4\u9650\u5236\u6743\u9650\uff0c\u5141\u8bb8\u5bf9\u4f60\u7684API\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u8bbf\u95ee\u3002 JSON Web Token Authentication JSON Web Token\u662f\u4e00\u79cd\u76f8\u5f53\u65b0\u7684\u6807\u51c6\uff0c\u53ef\u7528\u4e8e\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\u4e0e\u5185\u7f6e\u7684TokenAuthentication\u65b9\u6848\u4e0d\u540c\uff0cJWT\u8eab\u4efd\u9a8c\u8bc1\u4e0d\u9700\u8981\u4f7f\u7528\u6570\u636e\u5e93\u6765\u9a8c\u8bc1\u4ee4\u724c\u3002 Blimp \u7ef4\u62a4 djangorestframework-jwt \u8f6f\u4ef6\u5305\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2aJWT Authentication\u7c7b\u4ee5\u53ca\u4e00\u4e2a\u673a\u5236\uff0c\u5ba2\u6237\u7aef\u83b7\u5f97\u4e00\u4e2a\u7ed9\u5b9a\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684JWT\u3002 Hawk HTTP Authentication HawkREST \u5e93\u57fa\u4e8e Mohawk \u5e93\uff0c\u8ba9\u4f60\u53ef\u4ee5\u5728API\u4e2d\u4f7f\u7528 Hawk \u7b7e\u540d\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u3002 Hawk \u8ba9\u53cc\u65b9\u4f7f\u7528\u5171\u4eab\u5bc6\u94a5\u7b7e\u540d\u7684\u6d88\u606f\u5f7c\u6b64\u5b89\u5168\u5730\u8fdb\u884c\u901a\u4fe1\u3002\u5b83\u57fa\u4e8e HTTP MAC access authentication \u8bbf\u95ee\u8ba4\u8bc1\uff08\u5b83\u57fa\u4e8e OAuth 1.0 \u7684\u90e8\u5206\uff09\u3002 HTTP Signature Authentication HTTP\u7b7e\u540d\uff08\u76ee\u524d\u4e3a IETF\u8349\u6848 \uff09\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0HTTP\u6d88\u606f\u7684\u6e90\u8ba4\u8bc1\u548c\u6d88\u606f\u5b8c\u6574\u6027\u7684\u65b9\u6cd5\u3002\u4e0e Amazon\u7684HTTP\u7b7e\u540d\u65b9\u6848 \u7c7b\u4f3c\uff0c\u8bb8\u591a\u670d\u52a1\u4f7f\u7528\u5b83\uff0c\u5b83\u5141\u8bb8\u65e0\u72b6\u6001\u7684\u6bcf\u4e2a\u8bf7\u6c42\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002 Elvio Toccalino \u7ef4\u62a4\u4e86 djangorestframework-httpsignature \u5305\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684HTTP\u7b7e\u540d\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\u3002 Djoser Djoser \u5e93\u63d0\u4f9b\u4e00\u7ec4\u89c6\u56fe\u6765\u5904\u7406\u57fa\u672c\u64cd\u4f5c\uff0c\u5982\u6ce8\u518c\uff0c\u767b\u5f55\uff0c\u6ce8\u9500\uff0c\u5bc6\u7801\u91cd\u7f6e\u548c\u5e10\u6237\u6fc0\u6d3b\u3002\u8be5\u5305\u4f7f\u7528\u81ea\u5b9a\u4e49\u7528\u6237\u6a21\u578b\uff0c\u5b83\u4f7f\u7528\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u4f7f\u7528REST\u5b9e\u73b0\u7684Django\u8ba4\u8bc1\u7cfb\u7edf\u3002 django-rest-auth Django-rest-auth \u5e93\u63d0\u4f9b\u4e86\u4e00\u7ec4REST API\u7aef\u70b9\uff0c\u7528\u4e8e\u6ce8\u518c\uff0c\u8eab\u4efd\u9a8c\u8bc1\uff08\u5305\u62ec\u793e\u4ea4\u5a92\u4f53\u8eab\u4efd\u9a8c\u8bc1\uff09\uff0c\u5bc6\u7801\u91cd\u7f6e\uff0c\u68c0\u7d22\u548c\u66f4\u65b0\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u7b49\u3002\u6709\u4e86\u8fd9\u4e9bAPI\u7aef\u70b9\u4e4b\u540e\uff0c\u4f60\u7684\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\uff08\u5982AngularJS\uff0ciOS\uff0cAndroid\u548c\u5176\u4ed6\uff09\u53ef\u4ee5\u901a\u8fc7REST API\u72ec\u7acb\u901a\u4fe1\u5230Django\u540e\u7aef\u7ad9\u70b9\uff0c\u4ee5\u8fdb\u884c\u7528\u6237\u7ba1\u7406\u3002 django-rest-framework-social-oauth2 Django-rest-framework-social-oauth2 \u5e93\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u793e\u4ea4\u63d2\u4ef6\uff08facebook\uff0ctwitter\uff0cgoogle\u7b49\uff09\u96c6\u6210\u5230\u4f60\u7684\u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\u548c\u7b80\u5355\u7684oauth2\u8bbe\u7f6e\u7684\u7b80\u5355\u65b9\u6cd5\u3002\u4f7f\u7528\u8fd9\u4e2a\u5e93\uff0c\u4f60\u5c06\u80fd\u591f\u6839\u636e\u5916\u90e8token\uff08\u4f8b\u5982\uff0cFacebook\u8bbf\u95eetoken\uff09\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5c06\u8fd9\u4e9b\u4ee4\u724c\u8f6c\u6362\u4e3a\u201c\u5185\u90e8\u201doauth2 tokens\uff0c\u5e76\u4f7f\u7528\u548c\u751f\u6210oauth2 tokens\u6765\u9a8c\u8bc1\u7528\u6237\u3002 django-rest-knox Django-rest-knox \u5e93\u63d0\u4f9b\u4e86\u6a21\u578b\u548c\u89c6\u56fe\uff0c\u4ee5\u6bd4\u5185\u7f6e\u7684TokenAuthentication\u65b9\u6848\u66f4\u5b89\u5168\u548c\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u6765\u5904\u7406\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1 - \u4f7f\u7528\u5355\u9875\u9762\u5e94\u7528\u7a0b\u5e8f\u548c\u79fb\u52a8\u5ba2\u6237\u7aef\u80fd\u591f\u4e00\u8d77\u3002\u5b83\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9btokens\uff0c\u4ee5\u53ca\u5728\u63d0\u4f9b\u4e00\u4e9b\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\uff08\u901a\u5e38\u662f\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\uff09\u65f6\u751f\u6210tokens\uff0c\u5220\u9664token\uff08\u63d0\u4f9b\u670d\u52a1\u5668\u5f3a\u5236\u6ce8\u9500\uff09\u548c\u5220\u9664\u6240\u6709tokens\uff08\u6ce8\u9500\u7528\u6237\u767b\u5f55\u7684\u6240\u6709\u5ba2\u6237\u7aef\uff09\u7684\u89c6\u56fe\u3002","title":"Authentication"},{"location":"api-guide/authentication_zh/#_1","text":"\u8eab\u4efd\u9a8c\u8bc1\u529f\u80fd\u9700\u8981\u53ef\u63d2\u62d4\u3002 \u2014 Jacob Kaplan-Moss, \"REST worst practices\" \u8eab\u4efd\u9a8c\u8bc1\u662f\u5c06\u4f20\u5165\u8bf7\u6c42\u4e0e\u4e00\u7ec4\u6807\u8bc6\u51ed\u636e\uff08\u4f8b\u5982\u8bf7\u6c42\u6765\u81ea\u7684\u7528\u6237\u6216\u5176\u7b7e\u540d\u7684\u4ee4\u724c\uff09\u76f8\u5173\u8054\u7684\u673a\u5236\u3002\u7136\u540e\uff0c \u6743\u9650 \u548c \u9650\u5236 \u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u51ed\u636e\u6765\u786e\u5b9a\u662f\u5426\u5e94\u5141\u8bb8\u8be5\u8bf7\u6c42\u3002 REST framework \u63d0\u4f9b\u4e86\u4e00\u4e9b\u5f00\u7bb1\u5373\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u5e76\u4e14\u8fd8\u5141\u8bb8\u4f60\u5b9e\u73b0\u81ea\u5b9a\u4e49\u65b9\u6848\u3002 \u9a8c\u8bc1\u59cb\u7ec8\u5728\u89c6\u56fe\u7684\u6700\u5f00\u59cb\u8fdb\u884c\uff0c\u5728\u6267\u884c\u6743\u9650\u548c\u9650\u5236\u68c0\u67e5\u4e4b\u524d\u4ee5\u53ca\u5141\u8bb8\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\u4e4b\u524d\u3002 request.user \u5c5e\u6027\u901a\u5e38\u88ab\u8bbe\u7f6e\u4e3a contrib.auth \u5305\u4e2d User \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 request.auth \u5c5e\u6027\u7528\u4e8e\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\uff0c\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u8868\u793a\u8bf7\u6c42\u7b7e\u540d\u7684\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u3002 \u6ce8\u610f\uff1a \u4e0d\u8981\u5fd8\u4e86 \u8ba4\u8bc1\u672c\u8eab\u4e0d\u4f1a\u5141\u8bb8\u6216\u62d2\u7edd\u4f20\u5165\u7684\u8bf7\u6c42 \uff0c\u5b83\u53ea\u662f\u7b80\u5355\u8bc6\u522b\u8bf7\u6c42\u643a\u5e26\u7684\u51ed\u8bc1\u3002 \u6709\u5173\u5982\u4f55\u8bbe\u7f6eAPI\u6743\u9650\u7b56\u7565\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u6743\u9650\u6587\u6863 \u3002","title":"\u8ba4\u8bc1"},{"location":"api-guide/authentication_zh/#_2","text":"\u8ba4\u8bc1\u65b9\u6848\u603b\u662f\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7c7b\u7684\u5217\u8868\u3002REST framework \u5c06\u5c1d\u8bd5\u4f7f\u7528\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7c7b\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4f7f\u7528\u6210\u529f\u5b8c\u6210\u9a8c\u8bc1\u7684\u7b2c\u4e00\u4e2a\u7c7b\u7684\u8fd4\u56de\u503c\u8bbe\u7f6e request.user \u548c request.auth \u3002 \u5982\u679c\u6ca1\u6709\u7c7b\u8fdb\u884c\u9a8c\u8bc1\uff0c request.user \u5c06\u88ab\u8bbe\u7f6e\u6210 django.contrib.auth.models.AnonymousUser \u7684\u5b9e\u4f8b\uff0c request.auth \u5c06\u88ab\u8bbe\u7f6e\u6210 None \u3002 \u672a\u8ba4\u8bc1\u8bf7\u6c42\u7684 request.user \u548c request.auth \u7684\u503c\u53ef\u4ee5\u4f7f\u7528 UNAUTHENTICATED_USER \u548c UNAUTHENTICATED_TOKEN \u8bbe\u7f6e\u8fdb\u884c\u4fee\u6539\u3002","title":"\u5982\u4f55\u786e\u5b9a\u8eab\u4efd\u9a8c\u8bc1"},{"location":"api-guide/authentication_zh/#_3","text":"\u53ef\u4ee5\u4f7f\u7528 DEFAULT_AUTHENTICATION_CLASSES \u8bbe\u7f6e\u5168\u5c40\u7684\u9ed8\u8ba4\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002\u6bd4\u5982\uff1a REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.BasicAuthentication', 'rest_framework.authentication.SessionAuthentication', ) } \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e APIView \u7c7b\u89c6\u56fe\u7684\u65b9\u5f0f\uff0c\u5728\u6bcf\u4e2aview\u6216\u6bcf\u4e2aviewset\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002 from rest_framework.authentication import SessionAuthentication, BasicAuthentication from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): authentication_classes = (SessionAuthentication, BasicAuthentication) permission_classes = (IsAuthenticated,) def get(self, request, format=None): content = { 'user': unicode(request.user), # `django.contrib.auth.User` \u5b9e\u4f8b\u3002 'auth': unicode(request.auth), # None } return Response(content) \u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\uff0c\u90a3\u5c31\u4f7f\u7528 @api_view \u88c5\u9970\u5668\u3002 @api_view(['GET']) @authentication_classes((SessionAuthentication, BasicAuthentication)) @permission_classes((IsAuthenticated,)) def example_view(request, format=None): content = { 'user': unicode(request.user), # `django.contrib.auth.User` \u5b9e\u4f8b\u3002 'auth': unicode(request.auth), # None } return Response(content)","title":"\u8bbe\u7f6e\u8ba4\u8bc1\u65b9\u6848"},{"location":"api-guide/authentication_zh/#_4","text":"\u5f53\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u88ab\u62d2\u7edd\u65f6\uff0c\u6709\u4e0b\u9762\u4e24\u79cd\u4e0d\u540c\u7684\u9519\u8bef\u4ee3\u7801\u53ef\u4f7f\u7528\u3002 HTTP 401 \u672a\u8ba4\u8bc1 HTTP 403 \u65e0\u6743\u9650 HTTP 401 \u54cd\u5e94\u5fc5\u987b\u59cb\u7ec8\u5305\u62ec\u4e00\u4e2a WWW-Authenticate \u5934\uff0c\u6307\u793a\u5ba2\u6237\u7aef\u5982\u4f55\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 HTTP 403\u54cd\u5e94\u4e0d\u5305\u62ec WWW-Authenticate \u3002 \u5177\u4f53\u4f7f\u7528\u54ea\u79cd\u54cd\u5e94\u53d6\u51b3\u4e8e\u8ba4\u8bc1\u65b9\u6848\u3002\u867d\u7136\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u8ba4\u8bc1\u65b9\u6848\uff0c\u4f46\u662f\u4ec5\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u65b9\u6848\u6765\u786e\u5b9a\u54cd\u5e94\u7684\u7c7b\u578b\u3002 \u5728\u786e\u5b9a\u54cd\u5e94\u7c7b\u578b\u65f6\uff0c\u5c06\u4f7f\u7528\u89c6\u56fe\u4e0a\u8bbe\u7f6e\u7684\u7b2c\u4e00\u4e2a\u8ba4\u8bc1\u7c7b\u3002 \u6ce8\u610f\uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42\u901a\u8fc7\u4e86\u9a8c\u8bc1\u4f46\u662f\u88ab\u62d2\u7edd\u6267\u884c\u8bf7\u6c42\u7684\u6743\u9650\u65f6\uff0c\u4e0d\u7ba1\u8ba4\u8bc1\u65b9\u6848\u662f\u4ec0\u4e48\uff0c\u90fd\u8981\u4f7f\u7528 403 Permission Denied \u54cd\u5e94\u3002","title":"\u672a\u8ba4\u8bc1\u548c\u7981\u6b62\u7684\u54cd\u5e94"},{"location":"api-guide/authentication_zh/#apache-mod_wsgi","text":"\u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 Apache using mod_wsgi \u90e8\u7f72\uff0c\u8ba4\u8bc1\u5934\u9ed8\u8ba4\u4e0d\u4f1a\u4f20\u9012\u7ed9WSGI\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u5047\u5b9a\u7531Apache\u5904\u7406\u8ba4\u8bc1\uff0c\u800c\u4e0d\u662f\u5728\u5e94\u7528\u5c42\u9762\u5904\u7406\u3002 \u5982\u679c\u4f60\u6b63\u5728\u90e8\u7f72\u5230Apache\uff0c\u5e76\u4e14\u4f7f\u7528\u4efb\u4f55non-session\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5219\u9700\u8981\u663e\u5f0f\u914d\u7f6emod_wsgi\u624d\u80fd\u5c06\u6240\u9700\u7684\u5934\u6587\u4ef6\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u9002\u5f53\u7684\u4e0a\u4e0b\u6587\u4e2d\u6307\u5b9a WSGIPassAuthorization \u6307\u4ee4\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a 'On' \u6765\u5b8c\u6210\u3002 # \u8fd9\u53ef\u80fd\u4f1a\u5728\u670d\u52a1\u5668\u914d\u7f6e\uff0c\u865a\u62df\u4e3b\u673a\uff0c\u76ee\u5f55\u6216.htaccess WSGIPassAuthorization On","title":"Apache mod_wsgi \u5177\u4f53\u914d\u7f6e"},{"location":"api-guide/authentication_zh/#api","text":"","title":"API \u53c2\u8003"},{"location":"api-guide/authentication_zh/#basicauthentication","text":"\u6b64\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528 HTTP \u57fa\u672c\u8ba4\u8bc1 \uff0c\u9488\u5bf9\u7528\u6237\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u8ba4\u8bc1\u3002\u57fa\u672c\u8ba4\u8bc1\u901a\u5e38\u53ea\u9002\u7528\u4e8e\u6d4b\u8bd5\u3002 \u5982\u679c\u8ba4\u8bc1\u6210\u529f BasicAuthentication \u63d0\u4f9b\u4ee5\u4e0b\u4fe1\u606f\u3002 request.user \u5c06\u662f\u4e00\u4e2a Django User \u5b9e\u4f8b\u3002 request.auth \u5c06\u662f None \u3002 \u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de\u4f7f\u7528\u9002\u5f53WWW-Authenticate\u6807\u5934\u7684 HTTP 401 Unauthorized \u54cd\u5e94\u3002\u4f8b\u5982\uff1a WWW-Authenticate: Basic realm=\"api\" \u6ce8\u610f\uff1a \u5982\u679c\u4f60\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528 BasicAuthentication \uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u786e\u4fdd\u4f60\u7684API\u4ec5\u5728 https \u4e2d\u53ef\u7528\u3002\u4f60\u8fd8\u5e94\u786e\u4fdd\u4f60\u7684API\u5ba2\u6237\u7aef\u59cb\u7ec8\u5728\u767b\u5f55\u65f6\u91cd\u65b0\u8bf7\u6c42\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5c06\u8fd9\u4e9b\u8be6\u7ec6\u4fe1\u606f\u5b58\u50a8\u5230\u6301\u4e45\u5b58\u50a8\u4e2d\u3002","title":"BasicAuthentication"},{"location":"api-guide/authentication_zh/#tokenauthentication","text":"\u8be5\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528\u7b80\u5355\u7684\u57fa\u4e8eToken\u7684HTTP\u8ba4\u8bc1\u65b9\u6848\u3002Token\u8ba4\u8bc1\u9002\u7528\u4e8e\u5ba2\u6237\u7aef - \u670d\u52a1\u5668\u8bbe\u7f6e\uff0c\u5982\u672c\u5730\u684c\u9762\u548c\u79fb\u52a8\u5ba2\u6237\u7aef\u3002 \u8981\u4f7f\u7528 TokenAuthentication \u65b9\u6848\uff0c\u4f60\u9700\u8981 \u914d\u7f6e\u8ba4\u8bc1\u7c7b \u4ee5\u4fbf\u5305\u542b TokenAuthentication \uff0c\u53e6\u5916\u5728 INSTALLED_APPS \u8bbe\u7f6e\u4e2d\u8fd8\u9700\u8981\u5305\u542b rest_framework.authtoken \uff1a INSTALLED_APPS = ( ... 'rest_framework.authtoken' ) \u6ce8\u610f\uff1a \u786e\u4fdd\u5728\u4fee\u6539\u8bbe\u7f6e\u540e\u8fd0\u884c\u4e00\u4e0b manage.py migrate \u3002 rest_framework.authtoken app \u4f1a\u63d0\u4ea4\u4e00\u4e9bDjango\u6570\u636e\u5e93\u8fc1\u79fb\u64cd\u4f5c\u3002 \u4f60\u8fd8\u9700\u8981\u4e3a\u4f60\u7684\u7528\u6237\u521b\u5efa\u4ee4\u724c\u3002 from rest_framework.authtoken.models import Token token = Token.objects.create(user=...) print token.key \u5bf9\u5ba2\u6237\u7aef\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0ctoken\u9700\u8981\u5305\u542b\u5728 Authorization HTTP\u5934\u4e2d\u3002\u5bc6\u94a5\u5e94\u8be5\u662f\u4ee5\u5b57\u7b26\u4e32\"Token\"\u4e3a\u524d\u7f00\uff0c\u4ee5\u7a7a\u683c\u5206\u5272\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff1a Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b \u6ce8\u610f\uff1a \u5982\u679c\u4f60\u60f3\u5728HTTP\u5934\u4e2d\u4f7f\u7528\u5176\u4ed6\u7684\u5173\u952e\u5b57\uff0c\u6bd4\u5982 Bearer \uff0c\u53ea\u9700\u8981\u7ee7\u627f TokenAuthentication \u7c7b\u5e76\u8bbe\u7f6e keyword \u7c7b\u53d8\u91cf\u3002 \u5982\u679c\u8ba4\u8bc1\u6210\u529f\uff0c TokenAuthentication \u63d0\u4f9b\u4ee5\u4e0b\u8ba4\u8bc1\u4fe1\u606f\uff1a request.user \u5c06\u662f\u4e00\u4e2aDjango User \u5b9e\u4f8b\u3002 request.auth \u5c06\u662f\u4e00\u4e2a rest_framework.authtoken.models.Token \u5b9e\u4f8b\u3002 \u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de\u4f7f\u7528\u9002\u5f53WWW-Authenticate\u6807\u5934\u7684 HTTP 401 Unauthorized \u54cd\u5e94\u3002\u4f8b\u5982\uff1a WWW-Authenticate: Token \u547d\u4ee4\u884c\u5de5\u5177 curl \u53ef\u7528\u4e8e\u6d4b\u8bd5\u57fa\u4e8eToken\u8ba4\u8bc1\u7684API\uff0c\u4f8b\u5982\uff1a curl -X GET http://127.0.0.1:8000/api/example/ -H 'Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' \u6ce8\u610f\uff1a \u5982\u679c\u4f60\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u4f7f\u7528 TokenAuthentication \u8ba4\u8bc1\uff0c\u4f60\u5fc5\u987b\u786e\u4fdd\u4f60\u7684API\u4ec5\u5728 https \u53ef\u7528\u3002","title":"TokenAuthentication"},{"location":"api-guide/authentication_zh/#tokens","text":"","title":"\u751f\u6210Tokens"},{"location":"api-guide/authentication_zh/#_5","text":"\u5982\u679c\u4f60\u5e0c\u671b\u6bcf\u4e2a\u7528\u6237\u62e5\u6709\u81ea\u52a8\u751f\u6210\u7684\u4ee4\u724c\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u6355\u83b7\u7528\u6237\u7684 post_save \u4fe1\u53f7\u3002 from django.conf import settings from django.db.models.signals import post_save from django.dispatch import receiver from rest_framework.authtoken.models import Token @receiver(post_save, sender=settings.AUTH_USER_MODEL) def create_auth_token(sender, instance=None, created=False, **kwargs): if created: Token.objects.create(user=instance) \u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5c06\u6b64\u4ee3\u7801\u6bb5\u653e\u7f6e\u5728\u5df2\u5b89\u88c5\u7684 models.py \u6a21\u5757\u6216Django\u5728\u542f\u52a8\u65f6\u5bfc\u5165\u7684\u5176\u4ed6\u4f4d\u7f6e\u3002 \u5982\u679c\u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e9b\u7528\u6237\uff0c\u5219\u53ef\u4ee5\u5982\u4e0b\u6240\u793a\u4e3a\u6240\u6709\u73b0\u6709\u7528\u6237\u751f\u6210\u4ee4\u724c\uff1a from django.contrib.auth.models import User from rest_framework.authtoken.models import Token for user in User.objects.all(): Token.objects.get_or_create(user=user)","title":"\u901a\u8fc7\u4f7f\u7528\u4fe1\u53f7"},{"location":"api-guide/authentication_zh/#api_1","text":"\u5f53\u4f7f\u7528 TokenAuthentication \u65f6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4e3a\u5ba2\u6237\u7aef\u63d0\u4f9b\u4e00\u4e2a\u83b7\u53d6\u7ed9\u5b9a\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u4ee4\u724c\u7684\u673a\u5236\u3002 REST framework \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684\u89c6\u56fe\u6765\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002\u8981\u4f7f\u7528\u5b83\uff0c\u9700\u8981\u5c06 obtain_auth_token \u89c6\u56fe\u6dfb\u52a0\u5230\u4f60\u7684URLconf\uff1a from rest_framework.authtoken import views urlpatterns += [ url(r'^api-token-auth/', views.obtain_auth_token) ] \u6ce8\u610fURL\u6b63\u5219\u5339\u914d\u6a21\u5f0f\u90a3\u91cc\u53ef\u4ee5\u662f\u4f60\u60f3\u8981\u4f7f\u7528\u7684\u4efb\u4f55\u5185\u5bb9\u3002 \u5f53\u4f7f\u7528form\u8868\u5355\u6216JSON\u5c06\u6709\u6548\u7684 username \u548c password \u5b57\u6bb5POST\u63d0\u4ea4\u5230\u89c6\u56fe\u65f6\uff0c obtain_auth_token \u89c6\u56fe\u5c06\u8fd4\u56deJSON\u54cd\u5e94\uff1a { 'token' : '9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b' } \u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u7684 obtain_auth_token \u89c6\u56fe\u663e\u5f0f\u4f7f\u7528JSON\u8bf7\u6c42\u548c\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4f7f\u7528settings\u4e2d\u914d\u7f6e\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u7c7b\u3002\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u7248\u672c\u7684 obtain_auth_token \u89c6\u56fe\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 ObtainAuthToken \u7c7b\uff0c\u5e76\u5728url conf\u4e2d\u4f7f\u7528\u5b83\u6765\u5b9e\u73b0\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u6743\u9650\u6216\u9650\u5236\u5e94\u7528\u4e8e obtain_auth_token \u89c6\u56fe\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5e94\u7528\u9650\u5236\uff0c\u5219\u9700\u8981\u91cd\u5199\u89c6\u56fe\u7c7b\uff0c\u5e76\u4f7f\u7528 throttle_classes \u5c5e\u6027\u5305\u542b\u5b83\u4eec\u3002","title":"\u901a\u8fc7\u66b4\u9732 api \u7aef\u70b9"},{"location":"api-guide/authentication_zh/#with-django-admin","text":"\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7ba1\u7406\u754c\u9762\u624b\u52a8\u521b\u5efa\u4ee4\u724c\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u5927\u578b\u7528\u6237\u7fa4\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u52a8\u6001\u4fee\u6539 TokenAdmin \u7c7b\uff0c\u4ee5\u6839\u636e\u4f60\u7684\u9700\u8981\u8fdb\u884c\u81ea\u5b9a\u4e49\uff0c\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5c06 user \u5b57\u6bb5\u58f0\u660e\u4e3a raw_field \u3002 your_app/admin.py : from rest_framework.authtoken.admin import TokenAdmin TokenAdmin.raw_id_fields = ('user',)","title":"With Django admin"},{"location":"api-guide/authentication_zh/#session","text":"\u6b64\u8ba4\u8bc1\u65b9\u6848\u4f7f\u7528Django\u7684\u9ed8\u8ba4session\u540e\u7aef\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002Session\u8eab\u4efd\u9a8c\u8bc1\u9002\u7528\u4e8e\u4e0e\u4f60\u7684\u7f51\u7ad9\u5728\u76f8\u540c\u7684Session\u73af\u5883\u4e2d\u8fd0\u884c\u7684AJAX\u5ba2\u6237\u7aef\u3002 \u5982\u679c\u6210\u529f\u9a8c\u8bc1\uff0c SessionAuthentication \u63d0\u4f9b\u4ee5\u4e0b\u51ed\u636e\u3002 request.user \u662f\u4e00\u4e2a Django User \u5b9e\u4f8b\u3002 request.auth \u662f None \u3002 \u90a3\u4e9b\u88ab\u62d2\u7edd\u7684\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u4f1a\u8fd4\u56de HTTP 403 Forbidden \u54cd\u5e94\u3002 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u5e26\u6709SessionAuthentication\u7684AJAX\u6837\u5f0f\u7684API\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u4efb\u4f55\"\u4efb\u4f55\"\u4e0d\u5b89\u5168\u7684HTTP\u65b9\u6cd5\u8c03\u7528\uff08\u5982\uff1a PUT , PATCH , POST or DELETE \u8bf7\u6c42\uff09\u90fd\u5305\u542b\u6709\u6548\u7684CSRF token\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Django CSRF \u6587\u6863 \u3002 \u8b66\u544a \uff1a\u5728\u521b\u5efa\u767b\u9646\u9875\u9762\u65f6\uff0c\u59cb\u7ec8\u8981\u4f7f\u7528Django\u7684\u6807\u51c6\u767b\u9646\u89c6\u56fe\u3002\u8fd9\u6837\u624d\u80fd\u786e\u4fdd\u4f60\u7684\u767b\u9646\u89c6\u56fe\u88ab\u6b63\u786e\u7684\u8ba4\u8bc1\u4fdd\u62a4\u3002 \u7531\u4e8e\u9700\u8981\u540c\u65f6\u652f\u6301session\u548cnon-session\u975e\u4f1a\u8bdd\u8eab\u4efd\u9a8c\u8bc1\uff0cREST\u6846\u67b6\u4e2d\u7684CSRF\u9a8c\u8bc1\u4e0e\u6807\u51c6Django\u4e2d\u7684\u5de5\u4f5c\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002\u8fd9\u610f\u5473\u7740\u53ea\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u9700\u8981CSRF\u4ee4\u724c\uff0c\u533f\u540d\u8bf7\u6c42\u53ef\u80fd\u4e0d\u4f1a\u53d1\u9001CSRF\u4ee4\u724ctokens\u3002\u6b64\u884c\u4e3a\u4e0d\u9002\u7528\u4e8e\u59cb\u7ec8\u9700\u8981\u4f7f\u7528CSRF\u9a8c\u8bc1\u7684\u767b\u5f55\u89c6\u56fe\u3002","title":"Session\u8ba4\u8bc1"},{"location":"api-guide/authentication_zh/#_6","text":"\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u65b9\u6848\uff0c\u8981\u7ee7\u627f BaseAuthentication \u7c7b\u5e76\u4e14\u91cd\u5199 .authenticate(self, request) \u65b9\u6cd5\u3002\u5982\u679c\u8ba4\u8bc1\u6210\u529f\uff0c\u8be5\u65b9\u6cd5\u5e94\u8fd4\u56de (user, auth) \u7684\u4e8c\u5143\u5143\u7ec4\uff0c\u5426\u5219\u8fd4\u56de None \u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u4e0d\u60f3\u8fd4\u56de None \uff0c\u800c\u662f\u5e0c\u671b\u4ece .authenticate() \u65b9\u6cd5\u629b\u51fa AuthenticationFailed \u5f02\u5e38\u3002 \u901a\u5e38\u4f60\u5e94\u8be5\u91c7\u53d6\u7684\u65b9\u6cd5\u662f\uff1a \u5982\u679c\u4e0d\u5c1d\u8bd5\u9a8c\u8bc1\uff0c\u8fd4\u56de None \u3002\u8fd8\u5c06\u68c0\u67e5\u4efb\u4f55\u5176\u4ed6\u6b63\u5728\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002 \u5982\u679c\u5c1d\u8bd5\u9a8c\u8bc1\u4f46\u5931\u8d25\uff0c\u5219\u629b\u51fa AuthenticationFailed \u5f02\u5e38\u3002\u65e0\u8bba\u4efb\u4f55\u6743\u9650\u68c0\u67e5\u4e5f\u4e0d\u68c0\u67e5\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u7acb\u5373\u8fd4\u56de\u9519\u8bef\u54cd\u5e94\u3002 \u4f60\u4e5f \u53ef\u4ee5 \u91cd\u5199 .authenticate_header(self, request) \u65b9\u6cd5\u3002\u5982\u679c\u5b9e\u73b0\u8be5\u65b9\u6cd5\uff0c\u5219\u5e94\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u7528\u4f5c HTTP 401 Unauthorized \u54cd\u5e94\u4e2d\u7684 WWW-Authenticate \u5934\u7684\u503c\u3002 \u5982\u679c .authenticate_header() \u65b9\u6cd5\u672a\u88ab\u91cd\u5199\uff0c\u5219\u8ba4\u8bc1\u65b9\u6848\u5c06\u5728\u672a\u9a8c\u8bc1\u7684\u8bf7\u6c42\u88ab\u62d2\u7edd\u8bbf\u95ee\u65f6\u8fd4\u56de HTTP 403 Forbidden \u54cd\u5e94\u3002","title":"\u81ea\u5b9a\u4e49\u8ba4\u8bc1"},{"location":"api-guide/authentication_zh/#_7","text":"\u4ee5\u4e0b\u793a\u4f8b\u5c06\u4ee5\u81ea\u5b9a\u4e49\u8bf7\u6c42\u6807\u5934\u4e2d\u540d\u79f0\u4e3a'X_USERNAME'\u63d0\u4f9b\u7684\u7528\u6237\u540d\u4f5c\u4e3a\u7528\u6237\u5bf9\u4efb\u4f55\u4f20\u5165\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 from django.contrib.auth.models import User from rest_framework import authentication from rest_framework import exceptions class ExampleAuthentication(authentication.BaseAuthentication): def authenticate(self, request): username = request.META.get('X_USERNAME') if not username: return None try: user = User.objects.get(username=username) except User.DoesNotExist: raise exceptions.AuthenticationFailed('No such user') return (user, None)","title":"\u793a\u4f8b"},{"location":"api-guide/authentication_zh/#_8","text":"\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u662f\u53ef\u7528\u7684\u3002","title":"\u7b2c\u4e09\u65b9\u5305"},{"location":"api-guide/authentication_zh/#django-oauth-toolkit","text":"Django OAuth Toolkit \u5305\u63d0\u4f9b\u4e86OAuth 2.0 \u8ba4\u8bc1\u652f\u6301\uff0c\u5e76\u4e14\u517c\u5bb9Python 2.7\u548cPython 3.3+\u3002\u8fd9\u4e2a\u5305\u4f7f\u7528\u4f18\u79c0\u7684 OAuthLib \uff0c\u7531 Evonove \u7ef4\u62a4\u3002\u8be5\u8f6f\u4ef6\u5305\u6709\u5f88\u5b8c\u5584\u7684\u6587\u6863\uff0c\u5e76\u5f97\u5230\u5f88\u597d\u7684\u652f\u6301\uff0c\u76ee\u524d\u662f\u6211\u4eec \u63a8\u8350\u4f7f\u7528\u7684OAuth 2.0\u652f\u6301\u8f6f\u4ef6\u5305 \u3002","title":"Django OAuth Toolkit"},{"location":"api-guide/authentication_zh/#_9","text":"\u4f7f\u7528 pip \u5b89\u88c5\u3002 pip install django-oauth-toolkit \u628a\u8fd9\u4e2a\u5305\u6dfb\u52a0\u5230\u4f60\u7684 INSTALLED_APPS \u4e2d\uff0c\u5e76\u4e14\u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002 INSTALLED_APPS = ( ... 'oauth2_provider', ) REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'oauth2_provider.ext.rest_framework.OAuth2Authentication', ) } \u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u9605 Django REST framework - Getting started \u6587\u6863\u3002","title":"\u5b89\u88c5\u548c\u914d\u7f6e"},{"location":"api-guide/authentication_zh/#django-rest-framework-oauth","text":"Django REST framework OAuth \u5305\u63d0\u4f9bOAuth1\u548cOAuth2\u652f\u6301\u3002 \u8fd9\u4e2a\u8f6f\u4ef6\u5305\u4ee5\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework\u4e2d\uff0c\u4f46\u73b0\u5728\u5df2\u88ab\u4f5c\u4e3a\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u652f\u6301\u548c\u7ef4\u62a4\u3002","title":"Django REST framework OAuth"},{"location":"api-guide/authentication_zh/#_10","text":"\u4f7f\u7528 pip \u8fdb\u884c\u5b89\u88c5\u3002 pip install djangorestframework-oauth \u66f4\u591a\u914d\u7f6e\u548c\u4f7f\u7528\u4fe1\u606f\u8bf7\u67e5\u9605Django REST framework OAuth\u6587\u6863\u4e2d\u7684 authentication \u548c permissions \u3002","title":"\u5b89\u88c5\u548c\u914d\u7f6e"},{"location":"api-guide/authentication_zh/#digest-authentication","text":"HTTP\u6458\u8981\u8ba4\u8bc1\u662f\u4e00\u79cd\u5e7f\u6cdb\u5b9e\u73b0\u7684\u65b9\u6848\uff0c\u65e8\u5728\u66ff\u4ee3HTTP\u57fa\u672c\u8ba4\u8bc1\uff0c\u5e76\u63d0\u4f9b\u7b80\u5355\u7684\u52a0\u5bc6\u8ba4\u8bc1\u673a\u5236\u3002 Juan Riaza \u7ef4\u62a4\u7740 djangorestframework-digestauth \u4e3aREST framework\u63d0\u4f9b\u4e86HTTP\u6458\u8981\u8ba4\u8bc1\u652f\u6301\u3002","title":"Digest Authentication"},{"location":"api-guide/authentication_zh/#django-oauth2-consumer","text":"Rediker Software \u7684 Django OAuth2 Consumer \u662f\u53e6\u4e00\u4e2a\u4e3aREST\u6846\u67b6\u63d0\u4f9b OAuth 2.0 support for REST framework \u7684\u8f6f\u4ef6\u5305\u3002\u8be5\u5305\u5305\u542btokens\u8303\u56f4\u9650\u5236\u6743\u9650\uff0c\u5141\u8bb8\u5bf9\u4f60\u7684API\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u8bbf\u95ee\u3002","title":"Django OAuth2 Consumer"},{"location":"api-guide/authentication_zh/#json-web-token-authentication","text":"JSON Web Token\u662f\u4e00\u79cd\u76f8\u5f53\u65b0\u7684\u6807\u51c6\uff0c\u53ef\u7528\u4e8e\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\u4e0e\u5185\u7f6e\u7684TokenAuthentication\u65b9\u6848\u4e0d\u540c\uff0cJWT\u8eab\u4efd\u9a8c\u8bc1\u4e0d\u9700\u8981\u4f7f\u7528\u6570\u636e\u5e93\u6765\u9a8c\u8bc1\u4ee4\u724c\u3002 Blimp \u7ef4\u62a4 djangorestframework-jwt \u8f6f\u4ef6\u5305\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2aJWT Authentication\u7c7b\u4ee5\u53ca\u4e00\u4e2a\u673a\u5236\uff0c\u5ba2\u6237\u7aef\u83b7\u5f97\u4e00\u4e2a\u7ed9\u5b9a\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684JWT\u3002","title":"JSON Web Token Authentication"},{"location":"api-guide/authentication_zh/#hawk-http-authentication","text":"HawkREST \u5e93\u57fa\u4e8e Mohawk \u5e93\uff0c\u8ba9\u4f60\u53ef\u4ee5\u5728API\u4e2d\u4f7f\u7528 Hawk \u7b7e\u540d\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u3002 Hawk \u8ba9\u53cc\u65b9\u4f7f\u7528\u5171\u4eab\u5bc6\u94a5\u7b7e\u540d\u7684\u6d88\u606f\u5f7c\u6b64\u5b89\u5168\u5730\u8fdb\u884c\u901a\u4fe1\u3002\u5b83\u57fa\u4e8e HTTP MAC access authentication \u8bbf\u95ee\u8ba4\u8bc1\uff08\u5b83\u57fa\u4e8e OAuth 1.0 \u7684\u90e8\u5206\uff09\u3002","title":"Hawk HTTP Authentication"},{"location":"api-guide/authentication_zh/#http-signature-authentication","text":"HTTP\u7b7e\u540d\uff08\u76ee\u524d\u4e3a IETF\u8349\u6848 \uff09\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0HTTP\u6d88\u606f\u7684\u6e90\u8ba4\u8bc1\u548c\u6d88\u606f\u5b8c\u6574\u6027\u7684\u65b9\u6cd5\u3002\u4e0e Amazon\u7684HTTP\u7b7e\u540d\u65b9\u6848 \u7c7b\u4f3c\uff0c\u8bb8\u591a\u670d\u52a1\u4f7f\u7528\u5b83\uff0c\u5b83\u5141\u8bb8\u65e0\u72b6\u6001\u7684\u6bcf\u4e2a\u8bf7\u6c42\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002 Elvio Toccalino \u7ef4\u62a4\u4e86 djangorestframework-httpsignature \u5305\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684HTTP\u7b7e\u540d\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\u3002","title":"HTTP Signature Authentication"},{"location":"api-guide/authentication_zh/#djoser","text":"Djoser \u5e93\u63d0\u4f9b\u4e00\u7ec4\u89c6\u56fe\u6765\u5904\u7406\u57fa\u672c\u64cd\u4f5c\uff0c\u5982\u6ce8\u518c\uff0c\u767b\u5f55\uff0c\u6ce8\u9500\uff0c\u5bc6\u7801\u91cd\u7f6e\u548c\u5e10\u6237\u6fc0\u6d3b\u3002\u8be5\u5305\u4f7f\u7528\u81ea\u5b9a\u4e49\u7528\u6237\u6a21\u578b\uff0c\u5b83\u4f7f\u7528\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u4f7f\u7528REST\u5b9e\u73b0\u7684Django\u8ba4\u8bc1\u7cfb\u7edf\u3002","title":"Djoser"},{"location":"api-guide/authentication_zh/#django-rest-auth","text":"Django-rest-auth \u5e93\u63d0\u4f9b\u4e86\u4e00\u7ec4REST API\u7aef\u70b9\uff0c\u7528\u4e8e\u6ce8\u518c\uff0c\u8eab\u4efd\u9a8c\u8bc1\uff08\u5305\u62ec\u793e\u4ea4\u5a92\u4f53\u8eab\u4efd\u9a8c\u8bc1\uff09\uff0c\u5bc6\u7801\u91cd\u7f6e\uff0c\u68c0\u7d22\u548c\u66f4\u65b0\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u7b49\u3002\u6709\u4e86\u8fd9\u4e9bAPI\u7aef\u70b9\u4e4b\u540e\uff0c\u4f60\u7684\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\uff08\u5982AngularJS\uff0ciOS\uff0cAndroid\u548c\u5176\u4ed6\uff09\u53ef\u4ee5\u901a\u8fc7REST API\u72ec\u7acb\u901a\u4fe1\u5230Django\u540e\u7aef\u7ad9\u70b9\uff0c\u4ee5\u8fdb\u884c\u7528\u6237\u7ba1\u7406\u3002","title":"django-rest-auth"},{"location":"api-guide/authentication_zh/#django-rest-framework-social-oauth2","text":"Django-rest-framework-social-oauth2 \u5e93\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u793e\u4ea4\u63d2\u4ef6\uff08facebook\uff0ctwitter\uff0cgoogle\u7b49\uff09\u96c6\u6210\u5230\u4f60\u7684\u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\u548c\u7b80\u5355\u7684oauth2\u8bbe\u7f6e\u7684\u7b80\u5355\u65b9\u6cd5\u3002\u4f7f\u7528\u8fd9\u4e2a\u5e93\uff0c\u4f60\u5c06\u80fd\u591f\u6839\u636e\u5916\u90e8token\uff08\u4f8b\u5982\uff0cFacebook\u8bbf\u95eetoken\uff09\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5c06\u8fd9\u4e9b\u4ee4\u724c\u8f6c\u6362\u4e3a\u201c\u5185\u90e8\u201doauth2 tokens\uff0c\u5e76\u4f7f\u7528\u548c\u751f\u6210oauth2 tokens\u6765\u9a8c\u8bc1\u7528\u6237\u3002","title":"django-rest-framework-social-oauth2"},{"location":"api-guide/authentication_zh/#django-rest-knox","text":"Django-rest-knox \u5e93\u63d0\u4f9b\u4e86\u6a21\u578b\u548c\u89c6\u56fe\uff0c\u4ee5\u6bd4\u5185\u7f6e\u7684TokenAuthentication\u65b9\u6848\u66f4\u5b89\u5168\u548c\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u6765\u5904\u7406\u57fa\u4e8etoken\u7684\u8eab\u4efd\u9a8c\u8bc1 - \u4f7f\u7528\u5355\u9875\u9762\u5e94\u7528\u7a0b\u5e8f\u548c\u79fb\u52a8\u5ba2\u6237\u7aef\u80fd\u591f\u4e00\u8d77\u3002\u5b83\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9btokens\uff0c\u4ee5\u53ca\u5728\u63d0\u4f9b\u4e00\u4e9b\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\uff08\u901a\u5e38\u662f\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\uff09\u65f6\u751f\u6210tokens\uff0c\u5220\u9664token\uff08\u63d0\u4f9b\u670d\u52a1\u5668\u5f3a\u5236\u6ce8\u9500\uff09\u548c\u5220\u9664\u6240\u6709tokens\uff08\u6ce8\u9500\u7528\u6237\u767b\u5f55\u7684\u6240\u6709\u5ba2\u6237\u7aef\uff09\u7684\u89c6\u56fe\u3002","title":"django-rest-knox"},{"location":"api-guide/caching/","text":"Caching A certain woman had a very sharp consciousness but almost no memory ... She remembered enough to work, and she worked hard. - Lydia Davis Caching in REST Framework works well with the cache utilities provided in Django. Using cache with apiview and viewsets Django provides a method_decorator to use decorators with class based views. This can be used with other cache decorators such as cache_page and vary_on_cookie . from django.utils.decorators import method_decorator from django.views.decorators.cache import cache_page from django.views.decorators.vary import vary_on_cookie from rest_framework.response import Response from rest_framework.views import APIView from rest_framework import viewsets class UserViewSet(viewsets.ViewSet): # Cache requested url for each user for 2 hours @method_decorator(cache_page(60*60*2)) @method_decorator(vary_on_cookie) def list(self, request, format=None): content = { 'user_feed': request.user.get_user_feed() } return Response(content) class PostView(APIView): # Cache page for the requested url @method_decorator(cache_page(60*60*2)) def get(self, request, format=None): content = { 'title': 'Post title', 'body': 'Post content' } return Response(content) NOTE: The cache_page decorator only caches the GET and HEAD responses with status 200.","title":"Caching"},{"location":"api-guide/caching/#caching","text":"A certain woman had a very sharp consciousness but almost no memory ... She remembered enough to work, and she worked hard. - Lydia Davis Caching in REST Framework works well with the cache utilities provided in Django.","title":"Caching"},{"location":"api-guide/caching/#using-cache-with-apiview-and-viewsets","text":"Django provides a method_decorator to use decorators with class based views. This can be used with other cache decorators such as cache_page and vary_on_cookie . from django.utils.decorators import method_decorator from django.views.decorators.cache import cache_page from django.views.decorators.vary import vary_on_cookie from rest_framework.response import Response from rest_framework.views import APIView from rest_framework import viewsets class UserViewSet(viewsets.ViewSet): # Cache requested url for each user for 2 hours @method_decorator(cache_page(60*60*2)) @method_decorator(vary_on_cookie) def list(self, request, format=None): content = { 'user_feed': request.user.get_user_feed() } return Response(content) class PostView(APIView): # Cache page for the requested url @method_decorator(cache_page(60*60*2)) def get(self, request, format=None): content = { 'title': 'Post title', 'body': 'Post content' } return Response(content) NOTE: The cache_page decorator only caches the GET and HEAD responses with status 200.","title":"Using cache with apiview and viewsets"},{"location":"api-guide/caching_zh/","text":"\u7f13\u5b58 \u67d0\u4e2a\u5973\u4eba\u610f\u8bc6\u975e\u5e38\u654f\u9510\uff0c\u4f46\u662f\u51e0\u4e4e\u6ca1\u6709\u8bb0\u5fc6 ... \u5979\u53ea\u8bb0\u5f97\u5982\u4f55\u5de5\u4f5c\uff0c\u5e76\u4e14\u5f88\u52aa\u529b\u3002 - Lydia Davis REST Framework\u4e2d\u7684\u7f13\u5b58\u662f\u4f7f\u7528Django\u63d0\u4f9b\u7684\u7f13\u5b58\u5de5\u5177\u6765\u5b9e\u73b0\u7684\u3002 \u5728apiview\u548cviewset\u4e2d\u4f7f\u7528\u7f13\u5b58 Django\u63d0\u4f9b\u4e86\u4e00\u4e2a method_decorator \u7684\u88c5\u9970\u5668\uff0c\u6765\u7ed3\u5408\u7c7b\u89c6\u56fe\u4f7f\u7528\u3002 \u5b83\u4e5f\u53ef\u4ee5\u548c\u5176\u4ed6\u7f13\u5b58\u91cd\u89c6\u8d77\u4e00\u8d77\u4f7f\u7528\uff0c\u4f8b\u5982 cache_page \u548c vary_on_cookie \u3002 from django.utils.decorators import method_decorator from django.views.decorators.cache import cache_page from django.views.decorators.vary import vary_on_cookie from rest_framework.response import Response from rest_framework.views import APIView from rest_framework import viewsets class UserViewSet(viewsets.ViewSet): # \u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u8be5\u63a5\u53e3\u7684\u7528\u6237\u8bbe\u7f6e2\u4e2a\u5c0f\u65f6\u7f13\u5b58 @method_decorator(cache_page(60*60*2)) @method_decorator(vary_on_cookie) def list(self, request, format=None): content = { 'user_feed': request.user.get_user_feed() } return Response(content) class PostView(APIView): # \u4e3a\u63a5\u53e3\u8bbe\u7f6e\u7f13\u5b58 @method_decorator(cache_page(60*60*2)) def get(self, request, format=None): content = { 'title': 'Post title', 'body': 'Post content' } return Response(content) NOTE: cache_page \u88c5\u9970\u5668\u53ea\u7f13\u5b58 GET \u548c HEAD \u7684200\u72b6\u6001\u7801\u7684\u8fd4\u56de","title":"Caching"},{"location":"api-guide/caching_zh/#_1","text":"\u67d0\u4e2a\u5973\u4eba\u610f\u8bc6\u975e\u5e38\u654f\u9510\uff0c\u4f46\u662f\u51e0\u4e4e\u6ca1\u6709\u8bb0\u5fc6 ... \u5979\u53ea\u8bb0\u5f97\u5982\u4f55\u5de5\u4f5c\uff0c\u5e76\u4e14\u5f88\u52aa\u529b\u3002 - Lydia Davis REST Framework\u4e2d\u7684\u7f13\u5b58\u662f\u4f7f\u7528Django\u63d0\u4f9b\u7684\u7f13\u5b58\u5de5\u5177\u6765\u5b9e\u73b0\u7684\u3002","title":"\u7f13\u5b58"},{"location":"api-guide/caching_zh/#apiviewviewset","text":"Django\u63d0\u4f9b\u4e86\u4e00\u4e2a method_decorator \u7684\u88c5\u9970\u5668\uff0c\u6765\u7ed3\u5408\u7c7b\u89c6\u56fe\u4f7f\u7528\u3002 \u5b83\u4e5f\u53ef\u4ee5\u548c\u5176\u4ed6\u7f13\u5b58\u91cd\u89c6\u8d77\u4e00\u8d77\u4f7f\u7528\uff0c\u4f8b\u5982 cache_page \u548c vary_on_cookie \u3002 from django.utils.decorators import method_decorator from django.views.decorators.cache import cache_page from django.views.decorators.vary import vary_on_cookie from rest_framework.response import Response from rest_framework.views import APIView from rest_framework import viewsets class UserViewSet(viewsets.ViewSet): # \u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u8be5\u63a5\u53e3\u7684\u7528\u6237\u8bbe\u7f6e2\u4e2a\u5c0f\u65f6\u7f13\u5b58 @method_decorator(cache_page(60*60*2)) @method_decorator(vary_on_cookie) def list(self, request, format=None): content = { 'user_feed': request.user.get_user_feed() } return Response(content) class PostView(APIView): # \u4e3a\u63a5\u53e3\u8bbe\u7f6e\u7f13\u5b58 @method_decorator(cache_page(60*60*2)) def get(self, request, format=None): content = { 'title': 'Post title', 'body': 'Post content' } return Response(content) NOTE: cache_page \u88c5\u9970\u5668\u53ea\u7f13\u5b58 GET \u548c HEAD \u7684200\u72b6\u6001\u7801\u7684\u8fd4\u56de","title":"\u5728apiview\u548cviewset\u4e2d\u4f7f\u7528\u7f13\u5b58"},{"location":"api-guide/content-negotiation/","text":"Content negotiation HTTP has provisions for several mechanisms for \"content negotiation\" - the process of selecting the best representation for a given response when there are multiple representations available. \u2014 RFC 2616 , Fielding et al. Content negotiation is the process of selecting one of multiple possible representations to return to a client, based on client or server preferences. Determining the accepted renderer REST framework uses a simple style of content negotiation to determine which media type should be returned to a client, based on the available renderers, the priorities of each of those renderers, and the client's Accept: header. The style used is partly client-driven, and partly server-driven. More specific media types are given preference to less specific media types. If multiple media types have the same specificity, then preference is given to based on the ordering of the renderers configured for the given view. For example, given the following Accept header: application/json; indent=4, application/json, application/yaml, text/html, */* The priorities for each of the given media types would be: application/json; indent=4 application/json , application/yaml and text/html */* If the requested view was only configured with renderers for YAML and HTML , then REST framework would select whichever renderer was listed first in the renderer_classes list or DEFAULT_RENDERER_CLASSES setting. For more information on the HTTP Accept header, see RFC 2616 Note : \"q\" values are not taken into account by REST framework when determining preference. The use of \"q\" values negatively impacts caching, and in the author's opinion they are an unnecessary and overcomplicated approach to content negotiation. This is a valid approach as the HTTP spec deliberately underspecifies how a server should weight server-based preferences against client-based preferences. Custom content negotiation It's unlikely that you'll want to provide a custom content negotiation scheme for REST framework, but you can do so if needed. To implement a custom content negotiation scheme override BaseContentNegotiation . REST framework's content negotiation classes handle selection of both the appropriate parser for the request, and the appropriate renderer for the response, so you should implement both the .select_parser(request, parsers) and .select_renderer(request, renderers, format_suffix) methods. The select_parser() method should return one of the parser instances from the list of available parsers, or None if none of the parsers can handle the incoming request. The select_renderer() method should return a two-tuple of (renderer instance, media type), or raise a NotAcceptable exception. Example The following is a custom content negotiation class which ignores the client request when selecting the appropriate parser or renderer. from rest_framework.negotiation import BaseContentNegotiation class IgnoreClientContentNegotiation(BaseContentNegotiation): def select_parser(self, request, parsers): \"\"\" Select the first parser in the `.parser_classes` list. \"\"\" return parsers[0] def select_renderer(self, request, renderers, format_suffix): \"\"\" Select the first renderer in the `.renderer_classes` list. \"\"\" return (renderers[0], renderers[0].media_type) Setting the content negotiation The default content negotiation class may be set globally, using the DEFAULT_CONTENT_NEGOTIATION_CLASS setting. For example, the following settings would use our example IgnoreClientContentNegotiation class. REST_FRAMEWORK = { 'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'myapp.negotiation.IgnoreClientContentNegotiation', } You can also set the content negotiation used for an individual view, or viewset, using the APIView class-based views. from myapp.negotiation import IgnoreClientContentNegotiation from rest_framework.response import Response from rest_framework.views import APIView class NoNegotiationView(APIView): \"\"\" An example view that does not perform content negotiation. \"\"\" content_negotiation_class = IgnoreClientContentNegotiation def get(self, request, format=None): return Response({ 'accepted media type': request.accepted_renderer.media_type })","title":"Content negotiation"},{"location":"api-guide/content-negotiation/#content-negotiation","text":"HTTP has provisions for several mechanisms for \"content negotiation\" - the process of selecting the best representation for a given response when there are multiple representations available. \u2014 RFC 2616 , Fielding et al. Content negotiation is the process of selecting one of multiple possible representations to return to a client, based on client or server preferences.","title":"Content negotiation"},{"location":"api-guide/content-negotiation/#determining-the-accepted-renderer","text":"REST framework uses a simple style of content negotiation to determine which media type should be returned to a client, based on the available renderers, the priorities of each of those renderers, and the client's Accept: header. The style used is partly client-driven, and partly server-driven. More specific media types are given preference to less specific media types. If multiple media types have the same specificity, then preference is given to based on the ordering of the renderers configured for the given view. For example, given the following Accept header: application/json; indent=4, application/json, application/yaml, text/html, */* The priorities for each of the given media types would be: application/json; indent=4 application/json , application/yaml and text/html */* If the requested view was only configured with renderers for YAML and HTML , then REST framework would select whichever renderer was listed first in the renderer_classes list or DEFAULT_RENDERER_CLASSES setting. For more information on the HTTP Accept header, see RFC 2616 Note : \"q\" values are not taken into account by REST framework when determining preference. The use of \"q\" values negatively impacts caching, and in the author's opinion they are an unnecessary and overcomplicated approach to content negotiation. This is a valid approach as the HTTP spec deliberately underspecifies how a server should weight server-based preferences against client-based preferences.","title":"Determining the accepted renderer"},{"location":"api-guide/content-negotiation/#custom-content-negotiation","text":"It's unlikely that you'll want to provide a custom content negotiation scheme for REST framework, but you can do so if needed. To implement a custom content negotiation scheme override BaseContentNegotiation . REST framework's content negotiation classes handle selection of both the appropriate parser for the request, and the appropriate renderer for the response, so you should implement both the .select_parser(request, parsers) and .select_renderer(request, renderers, format_suffix) methods. The select_parser() method should return one of the parser instances from the list of available parsers, or None if none of the parsers can handle the incoming request. The select_renderer() method should return a two-tuple of (renderer instance, media type), or raise a NotAcceptable exception.","title":"Custom content negotiation"},{"location":"api-guide/content-negotiation/#example","text":"The following is a custom content negotiation class which ignores the client request when selecting the appropriate parser or renderer. from rest_framework.negotiation import BaseContentNegotiation class IgnoreClientContentNegotiation(BaseContentNegotiation): def select_parser(self, request, parsers): \"\"\" Select the first parser in the `.parser_classes` list. \"\"\" return parsers[0] def select_renderer(self, request, renderers, format_suffix): \"\"\" Select the first renderer in the `.renderer_classes` list. \"\"\" return (renderers[0], renderers[0].media_type)","title":"Example"},{"location":"api-guide/content-negotiation/#setting-the-content-negotiation","text":"The default content negotiation class may be set globally, using the DEFAULT_CONTENT_NEGOTIATION_CLASS setting. For example, the following settings would use our example IgnoreClientContentNegotiation class. REST_FRAMEWORK = { 'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'myapp.negotiation.IgnoreClientContentNegotiation', } You can also set the content negotiation used for an individual view, or viewset, using the APIView class-based views. from myapp.negotiation import IgnoreClientContentNegotiation from rest_framework.response import Response from rest_framework.views import APIView class NoNegotiationView(APIView): \"\"\" An example view that does not perform content negotiation. \"\"\" content_negotiation_class = IgnoreClientContentNegotiation def get(self, request, format=None): return Response({ 'accepted media type': request.accepted_renderer.media_type })","title":"Setting the content negotiation"},{"location":"api-guide/content-negotiation_zh/","text":"Content negotiation \uff08\u5185\u5bb9\u534f\u5546\uff09 HTTP\u4e3a\u201c\u5185\u5bb9\u534f\u5546\u201d \u2014\u2014\u5373\u5f53\u5b58\u5728\u591a\u4e2a\u53ef\u7528\u8868\u793a\u65b9\u6cd5\u65f6\uff0c\u4e3a\u7ed9\u5b9a\u54cd\u5e94\u9009\u62e9\u6700\u4f73\u8868\u793a\u7684\u8fc7\u7a0b\uff0c\u63d0\u4f9b\u4e86\u591a\u79cd\u673a\u5236\u3002 \u2014 RFC 2616 , Fielding \u7b49\u4eba. \u5185\u5bb9\u534f\u5546\u662f\u6839\u636e\u7528\u6237\u7aef\u6216\u670d\u52a1\u5668\u7684\u9996\u9009\u9879\uff0c\u4ece\u591a\u4e2a\u53ef\u80fd\u7684\u8868\u793a\u65b9\u6cd5\u4e2d\u9009\u62e9\u4e00\u4e2a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u8fc7\u7a0b\u3002 Determining the accepted renderer \uff08\u786e\u5b9a\u53ef\u63a5\u53d7\u7684\u6e32\u67d3\u5668\uff09 REST\u6846\u67b6\u4f7f\u7528\u4e00\u79cd\u7b80\u5355\u7684\u5185\u5bb9\u534f\u5546\u65b9\u5f0f\uff0c\u6839\u636e\u53ef\u7528\u7684\u6e32\u67d3\u5668\u3001\u6bcf\u4e2a\u6e32\u67d3\u5668\u7684\u4f18\u5148\u7ea7\u4ee5\u53ca\u5ba2\u6237\u7aef\u7684 Accept: \u5934\u6765\u786e\u5b9a\u5e94\u8be5\u5c06\u54ea\u4e2a\u5a92\u4f53\u7c7b\u578b\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u4f7f\u7528\u7684\u65b9\u5f0f\u90e8\u5206\u662f\u5ba2\u6237\u7aef\u9a71\u52a8\u7684\uff0c\u90e8\u5206\u662f\u670d\u52a1\u5668\u9a71\u52a8\u7684\u3002 \u66f4\u5177\u4f53\u7684\u5a92\u4f53\u7c7b\u578b\u4f18\u5148\u4e8e\u4e0d\u592a\u5177\u4f53\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u5982\u679c\u591a\u4e2a\u5a92\u4f53\u7c7b\u578b\u5177\u6709\u76f8\u540c\u7684\u7279\u5f02\u6027\uff0c\u5219\u6839\u636e\u4e3a\u7ed9\u5b9a\u89c6\u56fe\u914d\u7f6e\u7684\u6e32\u67d3\u5668\u7684\u987a\u5e8f\u4f18\u5148\u9009\u62e9\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4ee5\u4e0b Accept \u5934\uff1a application/json; indent=4, application/json, application/yaml, text/html, */* \u6bcf\u79cd\u7ed9\u5b9a\u5a92\u4f53\u7c7b\u578b\u7684\u4f18\u5148\u7ea7\u4e3a\uff1a application/json; indent=4 application/json , application/yaml and text/html */* \u5982\u679c\u88ab\u8bf7\u6c42\u7684\u89c6\u56fe\u53ea\u914d\u7f6e\u4e86 YAML \u548c HTML \u7684\u6e32\u67d3\u5668\uff0c\u90a3\u4e48REST framework\u5c06\u9009\u62e9 renderer_classes \u5217\u8868\u6216\u9ed8\u8ba4\u7684 DEFAULT_RENDERER_CLASSES \u8bbe\u7f6e\u4e2d\u6700\u5148\u5217\u51fa\u7684\u6e32\u67d3\u5668\u3002 \u6709\u5173 HTTP Accept \u5934\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 RFC 2616 Note : REST\u6846\u67b6\u5728\u786e\u5b9a\u4f18\u5148\u7ea7\u65f6\u4e0d\u8003\u8651\u201cq\u201d\u503c\u3002\u201cq\u201d\u503c\u7684\u4f7f\u7528\u4f1a\u5bf9\u7f13\u5b58\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\uff0c\u5728\u4f5c\u8005\u770b\u6765\uff0c\u5b83\u4eec\u662f\u4e00\u79cd\u4e0d\u5fc5\u8981\u7684\u3001\u8fc7\u4e8e\u590d\u6742\u7684\u5185\u5bb9\u534f\u5546\u65b9\u6cd5\u3002 \u8fd9\u662f\u4e00\u79cd\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3aHTTP\u89c4\u8303\u672a\u660e\u786e\u8bf4\u660e\u670d\u52a1\u5668\u5e94\u8be5\u5982\u4f55\u6743\u8861\u57fa\u4e8e\u670d\u52a1\u5668\u7684\u9996\u9009\u9879\u548c\u57fa\u4e8e\u5ba2\u6237\u7aef\u7684\u9996\u9009\u9879\u3002 Custom content negotiation \uff08\u81ea\u5b9a\u4e49\u5185\u5bb9\u534f\u5546\uff09 \u60a8\u4e0d\u592a\u53ef\u80fd\u5e0c\u671b\u4e3aREST\u6846\u67b6\u63d0\u4f9b\u4e00\u4e2a\u5b9a\u5236\u7684\u5185\u5bb9\u534f\u5546\u65b9\u6848\uff0c\u4f46\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u8fd9\u6837\u505a\u3002\u82e5\u8981\u5e94\u7528\u81ea\u5b9a\u4e49\u5185\u5bb9\u534f\u5546\u65b9\u6848\uff0c\u8bf7\u91cd\u5199 BaseContentNegotiation \u3002 REST\u6846\u67b6\u7684\u5185\u5bb9\u534f\u5546\u7c7b\u5904\u7406\u5bf9\u8bf7\u6c42\u7684\u9002\u5f53\u89e3\u6790\u5668\u548c\u54cd\u5e94\u7684\u9002\u5f53\u6e32\u67d3\u5668\u7684\u9009\u62e9\uff0c\u56e0\u6b64\u60a8\u5e94\u8be5\u540c\u65f6\u5e94\u7528 .select_parser(request, parsers) \u548c .select_renderer(request, renderers, format_suffix) \u65b9\u6cd5\u3002 select_parser() \u65b9\u6cd5\u5e94\u8be5\u4ece\u53ef\u7528\u89e3\u6790\u5668\u5217\u8868\u4e2d\u8fd4\u56de\u4e00\u4e2a\u89e3\u6790\u5668\u5b9e\u4f8b\uff0c\u5982\u679c\u6ca1\u6709\u89e3\u6790\u5668\u80fd\u591f\u5904\u7406\u4f20\u5165\u7684\u8bf7\u6c42\uff0c\u5219\u8fd4\u56de None \u3002 select_renderer() \u65b9\u6cd5\u5e94\u8fd4\u56de\u4e00\u4e2a\u53cc\u5143\u7ec4\uff08\u6e32\u67d3\u5668\u5b9e\u4f8b\uff0c\u5a92\u4f53\u7c7b\u578b\uff09\uff0c\u6216\u629b\u51fa NotAcceptable \u5f02\u5e38\u3002 Example \uff08\u4e3e\u4e2a\u4f8b\u5b50\uff09 \u4e0b\u9762\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5185\u5bb9\u534f\u5546\u7c7b\uff0c\u5b83\u5728\u9009\u62e9\u9002\u5f53\u7684\u89e3\u6790\u5668\u6216\u6e32\u67d3\u5668\u65f6\u5ffd\u7565\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002 from rest_framework.negotiation import BaseContentNegotiation class IgnoreClientContentNegotiation(BaseContentNegotiation): def select_parser(self, request, parsers): \"\"\" Select the first parser in the `.parser_classes` list. \"\"\" return parsers[0] def select_renderer(self, request, renderers, format_suffix): \"\"\" Select the first renderer in the `.renderer_classes` list. \"\"\" return (renderers[0], renderers[0].media_type) Setting the content negotiation \uff08\u8bbe\u7f6e\u5185\u5bb9\u534f\u5546\uff09 \u53ef\u4ee5\u4f7f\u7528 DEFAULT_CONTENT_NEGOTIATION_CLASS \u8bbe\u7f6e\u6765\u5168\u5c40\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u201c\u5185\u5bb9\u534f\u5546\u201d\u7c7b\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bbe\u7f6e\u5c06\u4f7f\u7528\u793a\u4f8b IgnoreClientContentNegotiation \u7c7b\u3002 REST_FRAMEWORK = { 'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'myapp.negotiation.IgnoreClientContentNegotiation', } \u8fd8\u53ef\u4ee5\u5bf9\u4f7f\u7528\u57fa\u4e8e APIView \u7c7b\u7684\u89c6\u56fe\u8bbe\u7f6e\u7528\u4e8e\u5355\u4e2a\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u7684\u5185\u5bb9\u534f\u5546\u3002 from myapp.negotiation import IgnoreClientContentNegotiation from rest_framework.response import Response from rest_framework.views import APIView class NoNegotiationView(APIView): \"\"\" An example view that does not perform content negotiation. \"\"\" content_negotiation_class = IgnoreClientContentNegotiation def get(self, request, format=None): return Response({ 'accepted media type': request.accepted_renderer.media_type })","title":"Content negotiation"},{"location":"api-guide/content-negotiation_zh/#content-negotiation","text":"HTTP\u4e3a\u201c\u5185\u5bb9\u534f\u5546\u201d \u2014\u2014\u5373\u5f53\u5b58\u5728\u591a\u4e2a\u53ef\u7528\u8868\u793a\u65b9\u6cd5\u65f6\uff0c\u4e3a\u7ed9\u5b9a\u54cd\u5e94\u9009\u62e9\u6700\u4f73\u8868\u793a\u7684\u8fc7\u7a0b\uff0c\u63d0\u4f9b\u4e86\u591a\u79cd\u673a\u5236\u3002 \u2014 RFC 2616 , Fielding \u7b49\u4eba. \u5185\u5bb9\u534f\u5546\u662f\u6839\u636e\u7528\u6237\u7aef\u6216\u670d\u52a1\u5668\u7684\u9996\u9009\u9879\uff0c\u4ece\u591a\u4e2a\u53ef\u80fd\u7684\u8868\u793a\u65b9\u6cd5\u4e2d\u9009\u62e9\u4e00\u4e2a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u8fc7\u7a0b\u3002","title":"Content negotiation \uff08\u5185\u5bb9\u534f\u5546\uff09"},{"location":"api-guide/content-negotiation_zh/#determining-the-accepted-renderer","text":"REST\u6846\u67b6\u4f7f\u7528\u4e00\u79cd\u7b80\u5355\u7684\u5185\u5bb9\u534f\u5546\u65b9\u5f0f\uff0c\u6839\u636e\u53ef\u7528\u7684\u6e32\u67d3\u5668\u3001\u6bcf\u4e2a\u6e32\u67d3\u5668\u7684\u4f18\u5148\u7ea7\u4ee5\u53ca\u5ba2\u6237\u7aef\u7684 Accept: \u5934\u6765\u786e\u5b9a\u5e94\u8be5\u5c06\u54ea\u4e2a\u5a92\u4f53\u7c7b\u578b\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u4f7f\u7528\u7684\u65b9\u5f0f\u90e8\u5206\u662f\u5ba2\u6237\u7aef\u9a71\u52a8\u7684\uff0c\u90e8\u5206\u662f\u670d\u52a1\u5668\u9a71\u52a8\u7684\u3002 \u66f4\u5177\u4f53\u7684\u5a92\u4f53\u7c7b\u578b\u4f18\u5148\u4e8e\u4e0d\u592a\u5177\u4f53\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u5982\u679c\u591a\u4e2a\u5a92\u4f53\u7c7b\u578b\u5177\u6709\u76f8\u540c\u7684\u7279\u5f02\u6027\uff0c\u5219\u6839\u636e\u4e3a\u7ed9\u5b9a\u89c6\u56fe\u914d\u7f6e\u7684\u6e32\u67d3\u5668\u7684\u987a\u5e8f\u4f18\u5148\u9009\u62e9\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4ee5\u4e0b Accept \u5934\uff1a application/json; indent=4, application/json, application/yaml, text/html, */* \u6bcf\u79cd\u7ed9\u5b9a\u5a92\u4f53\u7c7b\u578b\u7684\u4f18\u5148\u7ea7\u4e3a\uff1a application/json; indent=4 application/json , application/yaml and text/html */* \u5982\u679c\u88ab\u8bf7\u6c42\u7684\u89c6\u56fe\u53ea\u914d\u7f6e\u4e86 YAML \u548c HTML \u7684\u6e32\u67d3\u5668\uff0c\u90a3\u4e48REST framework\u5c06\u9009\u62e9 renderer_classes \u5217\u8868\u6216\u9ed8\u8ba4\u7684 DEFAULT_RENDERER_CLASSES \u8bbe\u7f6e\u4e2d\u6700\u5148\u5217\u51fa\u7684\u6e32\u67d3\u5668\u3002 \u6709\u5173 HTTP Accept \u5934\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 RFC 2616 Note : REST\u6846\u67b6\u5728\u786e\u5b9a\u4f18\u5148\u7ea7\u65f6\u4e0d\u8003\u8651\u201cq\u201d\u503c\u3002\u201cq\u201d\u503c\u7684\u4f7f\u7528\u4f1a\u5bf9\u7f13\u5b58\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\uff0c\u5728\u4f5c\u8005\u770b\u6765\uff0c\u5b83\u4eec\u662f\u4e00\u79cd\u4e0d\u5fc5\u8981\u7684\u3001\u8fc7\u4e8e\u590d\u6742\u7684\u5185\u5bb9\u534f\u5546\u65b9\u6cd5\u3002 \u8fd9\u662f\u4e00\u79cd\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3aHTTP\u89c4\u8303\u672a\u660e\u786e\u8bf4\u660e\u670d\u52a1\u5668\u5e94\u8be5\u5982\u4f55\u6743\u8861\u57fa\u4e8e\u670d\u52a1\u5668\u7684\u9996\u9009\u9879\u548c\u57fa\u4e8e\u5ba2\u6237\u7aef\u7684\u9996\u9009\u9879\u3002","title":"Determining the accepted renderer \uff08\u786e\u5b9a\u53ef\u63a5\u53d7\u7684\u6e32\u67d3\u5668\uff09"},{"location":"api-guide/content-negotiation_zh/#custom-content-negotiation","text":"\u60a8\u4e0d\u592a\u53ef\u80fd\u5e0c\u671b\u4e3aREST\u6846\u67b6\u63d0\u4f9b\u4e00\u4e2a\u5b9a\u5236\u7684\u5185\u5bb9\u534f\u5546\u65b9\u6848\uff0c\u4f46\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u8fd9\u6837\u505a\u3002\u82e5\u8981\u5e94\u7528\u81ea\u5b9a\u4e49\u5185\u5bb9\u534f\u5546\u65b9\u6848\uff0c\u8bf7\u91cd\u5199 BaseContentNegotiation \u3002 REST\u6846\u67b6\u7684\u5185\u5bb9\u534f\u5546\u7c7b\u5904\u7406\u5bf9\u8bf7\u6c42\u7684\u9002\u5f53\u89e3\u6790\u5668\u548c\u54cd\u5e94\u7684\u9002\u5f53\u6e32\u67d3\u5668\u7684\u9009\u62e9\uff0c\u56e0\u6b64\u60a8\u5e94\u8be5\u540c\u65f6\u5e94\u7528 .select_parser(request, parsers) \u548c .select_renderer(request, renderers, format_suffix) \u65b9\u6cd5\u3002 select_parser() \u65b9\u6cd5\u5e94\u8be5\u4ece\u53ef\u7528\u89e3\u6790\u5668\u5217\u8868\u4e2d\u8fd4\u56de\u4e00\u4e2a\u89e3\u6790\u5668\u5b9e\u4f8b\uff0c\u5982\u679c\u6ca1\u6709\u89e3\u6790\u5668\u80fd\u591f\u5904\u7406\u4f20\u5165\u7684\u8bf7\u6c42\uff0c\u5219\u8fd4\u56de None \u3002 select_renderer() \u65b9\u6cd5\u5e94\u8fd4\u56de\u4e00\u4e2a\u53cc\u5143\u7ec4\uff08\u6e32\u67d3\u5668\u5b9e\u4f8b\uff0c\u5a92\u4f53\u7c7b\u578b\uff09\uff0c\u6216\u629b\u51fa NotAcceptable \u5f02\u5e38\u3002","title":"Custom content negotiation \uff08\u81ea\u5b9a\u4e49\u5185\u5bb9\u534f\u5546\uff09"},{"location":"api-guide/content-negotiation_zh/#example","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5185\u5bb9\u534f\u5546\u7c7b\uff0c\u5b83\u5728\u9009\u62e9\u9002\u5f53\u7684\u89e3\u6790\u5668\u6216\u6e32\u67d3\u5668\u65f6\u5ffd\u7565\u5ba2\u6237\u7aef\u8bf7\u6c42\u3002 from rest_framework.negotiation import BaseContentNegotiation class IgnoreClientContentNegotiation(BaseContentNegotiation): def select_parser(self, request, parsers): \"\"\" Select the first parser in the `.parser_classes` list. \"\"\" return parsers[0] def select_renderer(self, request, renderers, format_suffix): \"\"\" Select the first renderer in the `.renderer_classes` list. \"\"\" return (renderers[0], renderers[0].media_type)","title":"Example \uff08\u4e3e\u4e2a\u4f8b\u5b50\uff09"},{"location":"api-guide/content-negotiation_zh/#setting-the-content-negotiation","text":"\u53ef\u4ee5\u4f7f\u7528 DEFAULT_CONTENT_NEGOTIATION_CLASS \u8bbe\u7f6e\u6765\u5168\u5c40\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u201c\u5185\u5bb9\u534f\u5546\u201d\u7c7b\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bbe\u7f6e\u5c06\u4f7f\u7528\u793a\u4f8b IgnoreClientContentNegotiation \u7c7b\u3002 REST_FRAMEWORK = { 'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'myapp.negotiation.IgnoreClientContentNegotiation', } \u8fd8\u53ef\u4ee5\u5bf9\u4f7f\u7528\u57fa\u4e8e APIView \u7c7b\u7684\u89c6\u56fe\u8bbe\u7f6e\u7528\u4e8e\u5355\u4e2a\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u7684\u5185\u5bb9\u534f\u5546\u3002 from myapp.negotiation import IgnoreClientContentNegotiation from rest_framework.response import Response from rest_framework.views import APIView class NoNegotiationView(APIView): \"\"\" An example view that does not perform content negotiation. \"\"\" content_negotiation_class = IgnoreClientContentNegotiation def get(self, request, format=None): return Response({ 'accepted media type': request.accepted_renderer.media_type })","title":"Setting the content negotiation \uff08\u8bbe\u7f6e\u5185\u5bb9\u534f\u5546\uff09"},{"location":"api-guide/exceptions/","text":"Exceptions Exceptions\u2026 allow error handling to be organized cleanly in a central or high-level place within the program structure. \u2014 Doug Hellmann, Python Exception Handling Techniques Exception handling in REST framework views REST framework's views handle various exceptions, and deal with returning appropriate error responses. The handled exceptions are: Subclasses of APIException raised inside REST framework. Django's Http404 exception. Django's PermissionDenied exception. In each case, REST framework will return a response with an appropriate status code and content-type. The body of the response will include any additional details regarding the nature of the error. Most error responses will include a key detail in the body of the response. For example, the following request: DELETE http://api.example.com/foo/bar HTTP/1.1 Accept: application/json Might receive an error response indicating that the DELETE method is not allowed on that resource: HTTP/1.1 405 Method Not Allowed Content-Type: application/json Content-Length: 42 {\"detail\": \"Method 'DELETE' not allowed.\"} Validation errors are handled slightly differently, and will include the field names as the keys in the response. If the validation error was not specific to a particular field then it will use the \"non_field_errors\" key, or whatever string value has been set for the NON_FIELD_ERRORS_KEY setting. An example validation error might look like this: HTTP/1.1 400 Bad Request Content-Type: application/json Content-Length: 94 {\"amount\": [\"A valid integer is required.\"], \"description\": [\"This field may not be blank.\"]} Custom exception handling You can implement custom exception handling by creating a handler function that converts exceptions raised in your API views into response objects. This allows you to control the style of error responses used by your API. The function must take a pair of arguments, the first is the exception to be handled, and the second is a dictionary containing any extra context such as the view currently being handled. The exception handler function should either return a Response object, or return None if the exception cannot be handled. If the handler returns None then the exception will be re-raised and Django will return a standard HTTP 500 'server error' response. For example, you might want to ensure that all error responses include the HTTP status code in the body of the response, like so: HTTP/1.1 405 Method Not Allowed Content-Type: application/json Content-Length: 62 {\"status_code\": 405, \"detail\": \"Method 'DELETE' not allowed.\"} In order to alter the style of the response, you could write the following custom exception handler: from rest_framework.views import exception_handler def custom_exception_handler(exc, context): # Call REST framework's default exception handler first, # to get the standard error response. response = exception_handler(exc, context) # Now add the HTTP status code to the response. if response is not None: response.data['status_code'] = response.status_code return response The context argument is not used by the default handler, but can be useful if the exception handler needs further information such as the view currently being handled, which can be accessed as context['view'] . The exception handler must also be configured in your settings, using the EXCEPTION_HANDLER setting key. For example: REST_FRAMEWORK = { 'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler' } If not specified, the 'EXCEPTION_HANDLER' setting defaults to the standard exception handler provided by REST framework: REST_FRAMEWORK = { 'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler' } Note that the exception handler will only be called for responses generated by raised exceptions. It will not be used for any responses returned directly by the view, such as the HTTP_400_BAD_REQUEST responses that are returned by the generic views when serializer validation fails. API Reference APIException Signature: APIException() The base class for all exceptions raised inside an APIView class or @api_view . To provide a custom exception, subclass APIException and set the .status_code , .default_detail , and default_code attributes on the class. For example, if your API relies on a third party service that may sometimes be unreachable, you might want to implement an exception for the \"503 Service Unavailable\" HTTP response code. You could do this like so: from rest_framework.exceptions import APIException class ServiceUnavailable(APIException): status_code = 503 default_detail = 'Service temporarily unavailable, try again later.' default_code = 'service_unavailable' Inspecting API exceptions There are a number of different properties available for inspecting the status of an API exception. You can use these to build custom exception handling for your project. The available attributes and methods are: .detail - Return the textual description of the error. .get_codes() - Return the code identifier of the error. .get_full_details() - Return both the textual description and the code identifier. In most cases the error detail will be a simple item: >>> print(exc.detail) You do not have permission to perform this action. >>> print(exc.get_codes()) permission_denied >>> print(exc.get_full_details()) {'message':'You do not have permission to perform this action.','code':'permission_denied'} In the case of validation errors the error detail will be either a list or dictionary of items: >>> print(exc.detail) {\"name\":\"This field is required.\",\"age\":\"A valid integer is required.\"} >>> print(exc.get_codes()) {\"name\":\"required\",\"age\":\"invalid\"} >>> print(exc.get_full_details()) {\"name\":{\"message\":\"This field is required.\",\"code\":\"required\"},\"age\":{\"message\":\"A valid integer is required.\",\"code\":\"invalid\"}} ParseError Signature: ParseError(detail=None, code=None) Raised if the request contains malformed data when accessing request.data . By default this exception results in a response with the HTTP status code \"400 Bad Request\". AuthenticationFailed Signature: AuthenticationFailed(detail=None, code=None) Raised when an incoming request includes incorrect authentication. By default this exception results in a response with the HTTP status code \"401 Unauthenticated\", but it may also result in a \"403 Forbidden\" response, depending on the authentication scheme in use. See the authentication documentation for more details. NotAuthenticated Signature: NotAuthenticated(detail=None, code=None) Raised when an unauthenticated request fails the permission checks. By default this exception results in a response with the HTTP status code \"401 Unauthenticated\", but it may also result in a \"403 Forbidden\" response, depending on the authentication scheme in use. See the authentication documentation for more details. PermissionDenied Signature: PermissionDenied(detail=None, code=None) Raised when an authenticated request fails the permission checks. By default this exception results in a response with the HTTP status code \"403 Forbidden\". NotFound Signature: NotFound(detail=None, code=None) Raised when a resource does not exists at the given URL. This exception is equivalent to the standard Http404 Django exception. By default this exception results in a response with the HTTP status code \"404 Not Found\". MethodNotAllowed Signature: MethodNotAllowed(method, detail=None, code=None) Raised when an incoming request occurs that does not map to a handler method on the view. By default this exception results in a response with the HTTP status code \"405 Method Not Allowed\". NotAcceptable Signature: NotAcceptable(detail=None, code=None) Raised when an incoming request occurs with an Accept header that cannot be satisfied by any of the available renderers. By default this exception results in a response with the HTTP status code \"406 Not Acceptable\". UnsupportedMediaType Signature: UnsupportedMediaType(media_type, detail=None, code=None) Raised if there are no parsers that can handle the content type of the request data when accessing request.data . By default this exception results in a response with the HTTP status code \"415 Unsupported Media Type\". Throttled Signature: Throttled(wait=None, detail=None, code=None) Raised when an incoming request fails the throttling checks. By default this exception results in a response with the HTTP status code \"429 Too Many Requests\". ValidationError Signature: ValidationError(detail, code=None) The ValidationError exception is slightly different from the other APIException classes: The detail argument is mandatory, not optional. The detail argument may be a list or dictionary of error details, and may also be a nested data structure. By convention you should import the serializers module and use a fully qualified ValidationError style, in order to differentiate it from Django's built-in validation error. For example. raise serializers.ValidationError('This field must be an integer value.') The ValidationError class should be used for serializer and field validation, and by validator classes. It is also raised when calling serializer.is_valid with the raise_exception keyword argument: serializer.is_valid(raise_exception=True) The generic views use the raise_exception=True flag, which means that you can override the style of validation error responses globally in your API. To do so, use a custom exception handler, as described above. By default this exception results in a response with the HTTP status code \"400 Bad Request\". Generic Error Views Django REST Framework provides two error views suitable for providing generic JSON 500 Server Error and 400 Bad Request responses. (Django's default error views provide HTML responses, which may not be appropriate for an API-only application.) Use these as per Django's Customizing error views documentation . rest_framework.exceptions.server_error Returns a response with status code 500 and application/json content type. Set as handler500 : handler500 = 'rest_framework.exceptions.server_error' rest_framework.exceptions.bad_request Returns a response with status code 400 and application/json content type. Set as handler400 : handler400 = 'rest_framework.exceptions.bad_request'","title":"Exceptions"},{"location":"api-guide/exceptions/#exceptions","text":"Exceptions\u2026 allow error handling to be organized cleanly in a central or high-level place within the program structure. \u2014 Doug Hellmann, Python Exception Handling Techniques","title":"Exceptions"},{"location":"api-guide/exceptions/#exception-handling-in-rest-framework-views","text":"REST framework's views handle various exceptions, and deal with returning appropriate error responses. The handled exceptions are: Subclasses of APIException raised inside REST framework. Django's Http404 exception. Django's PermissionDenied exception. In each case, REST framework will return a response with an appropriate status code and content-type. The body of the response will include any additional details regarding the nature of the error. Most error responses will include a key detail in the body of the response. For example, the following request: DELETE http://api.example.com/foo/bar HTTP/1.1 Accept: application/json Might receive an error response indicating that the DELETE method is not allowed on that resource: HTTP/1.1 405 Method Not Allowed Content-Type: application/json Content-Length: 42 {\"detail\": \"Method 'DELETE' not allowed.\"} Validation errors are handled slightly differently, and will include the field names as the keys in the response. If the validation error was not specific to a particular field then it will use the \"non_field_errors\" key, or whatever string value has been set for the NON_FIELD_ERRORS_KEY setting. An example validation error might look like this: HTTP/1.1 400 Bad Request Content-Type: application/json Content-Length: 94 {\"amount\": [\"A valid integer is required.\"], \"description\": [\"This field may not be blank.\"]}","title":"Exception handling in REST framework views"},{"location":"api-guide/exceptions/#custom-exception-handling","text":"You can implement custom exception handling by creating a handler function that converts exceptions raised in your API views into response objects. This allows you to control the style of error responses used by your API. The function must take a pair of arguments, the first is the exception to be handled, and the second is a dictionary containing any extra context such as the view currently being handled. The exception handler function should either return a Response object, or return None if the exception cannot be handled. If the handler returns None then the exception will be re-raised and Django will return a standard HTTP 500 'server error' response. For example, you might want to ensure that all error responses include the HTTP status code in the body of the response, like so: HTTP/1.1 405 Method Not Allowed Content-Type: application/json Content-Length: 62 {\"status_code\": 405, \"detail\": \"Method 'DELETE' not allowed.\"} In order to alter the style of the response, you could write the following custom exception handler: from rest_framework.views import exception_handler def custom_exception_handler(exc, context): # Call REST framework's default exception handler first, # to get the standard error response. response = exception_handler(exc, context) # Now add the HTTP status code to the response. if response is not None: response.data['status_code'] = response.status_code return response The context argument is not used by the default handler, but can be useful if the exception handler needs further information such as the view currently being handled, which can be accessed as context['view'] . The exception handler must also be configured in your settings, using the EXCEPTION_HANDLER setting key. For example: REST_FRAMEWORK = { 'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler' } If not specified, the 'EXCEPTION_HANDLER' setting defaults to the standard exception handler provided by REST framework: REST_FRAMEWORK = { 'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler' } Note that the exception handler will only be called for responses generated by raised exceptions. It will not be used for any responses returned directly by the view, such as the HTTP_400_BAD_REQUEST responses that are returned by the generic views when serializer validation fails.","title":"Custom exception handling"},{"location":"api-guide/exceptions/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/exceptions/#apiexception","text":"Signature: APIException() The base class for all exceptions raised inside an APIView class or @api_view . To provide a custom exception, subclass APIException and set the .status_code , .default_detail , and default_code attributes on the class. For example, if your API relies on a third party service that may sometimes be unreachable, you might want to implement an exception for the \"503 Service Unavailable\" HTTP response code. You could do this like so: from rest_framework.exceptions import APIException class ServiceUnavailable(APIException): status_code = 503 default_detail = 'Service temporarily unavailable, try again later.' default_code = 'service_unavailable'","title":"APIException"},{"location":"api-guide/exceptions/#inspecting-api-exceptions","text":"There are a number of different properties available for inspecting the status of an API exception. You can use these to build custom exception handling for your project. The available attributes and methods are: .detail - Return the textual description of the error. .get_codes() - Return the code identifier of the error. .get_full_details() - Return both the textual description and the code identifier. In most cases the error detail will be a simple item: >>> print(exc.detail) You do not have permission to perform this action. >>> print(exc.get_codes()) permission_denied >>> print(exc.get_full_details()) {'message':'You do not have permission to perform this action.','code':'permission_denied'} In the case of validation errors the error detail will be either a list or dictionary of items: >>> print(exc.detail) {\"name\":\"This field is required.\",\"age\":\"A valid integer is required.\"} >>> print(exc.get_codes()) {\"name\":\"required\",\"age\":\"invalid\"} >>> print(exc.get_full_details()) {\"name\":{\"message\":\"This field is required.\",\"code\":\"required\"},\"age\":{\"message\":\"A valid integer is required.\",\"code\":\"invalid\"}}","title":"Inspecting API exceptions"},{"location":"api-guide/exceptions/#parseerror","text":"Signature: ParseError(detail=None, code=None) Raised if the request contains malformed data when accessing request.data . By default this exception results in a response with the HTTP status code \"400 Bad Request\".","title":"ParseError"},{"location":"api-guide/exceptions/#authenticationfailed","text":"Signature: AuthenticationFailed(detail=None, code=None) Raised when an incoming request includes incorrect authentication. By default this exception results in a response with the HTTP status code \"401 Unauthenticated\", but it may also result in a \"403 Forbidden\" response, depending on the authentication scheme in use. See the authentication documentation for more details.","title":"AuthenticationFailed"},{"location":"api-guide/exceptions/#notauthenticated","text":"Signature: NotAuthenticated(detail=None, code=None) Raised when an unauthenticated request fails the permission checks. By default this exception results in a response with the HTTP status code \"401 Unauthenticated\", but it may also result in a \"403 Forbidden\" response, depending on the authentication scheme in use. See the authentication documentation for more details.","title":"NotAuthenticated"},{"location":"api-guide/exceptions/#permissiondenied","text":"Signature: PermissionDenied(detail=None, code=None) Raised when an authenticated request fails the permission checks. By default this exception results in a response with the HTTP status code \"403 Forbidden\".","title":"PermissionDenied"},{"location":"api-guide/exceptions/#notfound","text":"Signature: NotFound(detail=None, code=None) Raised when a resource does not exists at the given URL. This exception is equivalent to the standard Http404 Django exception. By default this exception results in a response with the HTTP status code \"404 Not Found\".","title":"NotFound"},{"location":"api-guide/exceptions/#methodnotallowed","text":"Signature: MethodNotAllowed(method, detail=None, code=None) Raised when an incoming request occurs that does not map to a handler method on the view. By default this exception results in a response with the HTTP status code \"405 Method Not Allowed\".","title":"MethodNotAllowed"},{"location":"api-guide/exceptions/#notacceptable","text":"Signature: NotAcceptable(detail=None, code=None) Raised when an incoming request occurs with an Accept header that cannot be satisfied by any of the available renderers. By default this exception results in a response with the HTTP status code \"406 Not Acceptable\".","title":"NotAcceptable"},{"location":"api-guide/exceptions/#unsupportedmediatype","text":"Signature: UnsupportedMediaType(media_type, detail=None, code=None) Raised if there are no parsers that can handle the content type of the request data when accessing request.data . By default this exception results in a response with the HTTP status code \"415 Unsupported Media Type\".","title":"UnsupportedMediaType"},{"location":"api-guide/exceptions/#throttled","text":"Signature: Throttled(wait=None, detail=None, code=None) Raised when an incoming request fails the throttling checks. By default this exception results in a response with the HTTP status code \"429 Too Many Requests\".","title":"Throttled"},{"location":"api-guide/exceptions/#validationerror","text":"Signature: ValidationError(detail, code=None) The ValidationError exception is slightly different from the other APIException classes: The detail argument is mandatory, not optional. The detail argument may be a list or dictionary of error details, and may also be a nested data structure. By convention you should import the serializers module and use a fully qualified ValidationError style, in order to differentiate it from Django's built-in validation error. For example. raise serializers.ValidationError('This field must be an integer value.') The ValidationError class should be used for serializer and field validation, and by validator classes. It is also raised when calling serializer.is_valid with the raise_exception keyword argument: serializer.is_valid(raise_exception=True) The generic views use the raise_exception=True flag, which means that you can override the style of validation error responses globally in your API. To do so, use a custom exception handler, as described above. By default this exception results in a response with the HTTP status code \"400 Bad Request\".","title":"ValidationError"},{"location":"api-guide/exceptions/#generic-error-views","text":"Django REST Framework provides two error views suitable for providing generic JSON 500 Server Error and 400 Bad Request responses. (Django's default error views provide HTML responses, which may not be appropriate for an API-only application.) Use these as per Django's Customizing error views documentation .","title":"Generic Error Views"},{"location":"api-guide/exceptions/#rest_frameworkexceptionsserver_error","text":"Returns a response with status code 500 and application/json content type. Set as handler500 : handler500 = 'rest_framework.exceptions.server_error'","title":"rest_framework.exceptions.server_error"},{"location":"api-guide/exceptions/#rest_frameworkexceptionsbad_request","text":"Returns a response with status code 400 and application/json content type. Set as handler400 : handler400 = 'rest_framework.exceptions.bad_request'","title":"rest_framework.exceptions.bad_request"},{"location":"api-guide/exceptions_zh/","text":"Exceptions \u5f02\u5e38... \u8ba9\u9519\u8bef\u5904\u7406\u6e05\u6670\u5730\u4f4d\u4e8e\u7a0b\u5e8f\u67b6\u6784\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u6216\u9ad8\u5c42\u4f4d\u7f6e\u3002 \u2014 Doug Hellmann, Python \u5f02\u5e38\u5904\u7406\u65b9\u6cd5 \u5728REST framework views\u4e2d\u7684\u5f02\u5e38\u5904\u7406 REST framework\u7684\u89c6\u56fe\u80fd\u5904\u7406\u5404\u79cd\u5404\u6837\u7684\u5f02\u5e38\uff0c\u80fd\u5904\u7406\u5e76\u8fd4\u56de\u5408\u9002\u7684\u9519\u8bef\u54cd\u5e94\u3002 \u4ee5\u4e0b\u5f02\u5e38\u4f1a\u88ab\u5904\u7406\uff1a \u5728REST framework\u5185\u90e8\u4ea7\u751f\u7684 APIException \u7684\u5b50\u7c7b\u5f02\u5e38\u3002 \u539f\u751fDjango\u7684 Http404 \u5f02\u5e38. \u539f\u751fDjango\u7684 PermissionDenied \u5f02\u5e38. \u5728\u4e0a\u8ff0\u5404\u7c7b\u60c5\u51b5\u4e2d\uff0cREST framework\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u5408\u9002\u72b6\u6001\u7801\u4e0econtent-type\u7684\u54cd\u5e94\u3002\u54cd\u5e94\u6b63\u6587(Response body)\u4f1a\u5305\u542b\u6709\u5173\u62a5\u9519\u7684\u4efb\u4f55\u989d\u5916\u4fe1\u606f\u3002 \u5927\u591a\u6570\u62a5\u9519\u54cd\u5e94\u90fd\u4f1a\u5728\u54cd\u5e94\u6b63\u6587\u91cc\u5305\u542b\u4e00\u4e2a detail \u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u8bf7\u6c42\uff1a DELETE http://api.example.com/foo/bar HTTP/1.1 Accept: application/json \u5c31\u53ef\u80fd\u4f1a\u6536\u5230\u4e00\u4e2a\u62a5\u9519\u54cd\u5e94\uff0c\u8868\u793a DELETE \u65b9\u6cd5\u5728\u8be5\u8d44\u6e90\u4e0a\u4e0d\u53ef\u4f7f\u7528\u3002 HTTP/1.1 405 Method Not Allowed Content-Type: application/json Content-Length: 42 {\"detail\": \"Method 'DELETE' not allowed.\"} \u9a8c\u8bc1\u7c7b\u7684\u62a5\u9519\u5728\u5904\u7406\u4e0a\u7565\u6709\u4e0d\u540c\uff0c\u4ed6\u4eec\u4f1a\u628a\u5b57\u6bb5\u540d\u4f5c\u4e3akeys\u5305\u542b\u5728\u54cd\u5e94\u6b63\u6587\u4e2d\u3002\u9a8c\u8bc1\u7c7b\u7684\u62a5\u9519\u5982\u679c\u5e76\u4e0d\u662f\u9488\u5bf9\u7279\u5b9a\u7684\u5b57\u6bb5\uff0c\u5219\u4f1a\u4f7f\u7528\"non_field_error\"\u6216\u8005\u662fsetting\u4e2d NON_FIELD_ERRORS_KEY \u7684\u503c\u4f5c\u4e3akeys\u8fd4\u56de\u3002 \u4e00\u4e2a\u9a8c\u8bc1\u7c7b\u9519\u8bef\u5927\u6982\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a HTTP/1.1 400 Bad Request Content-Type: application/json Content-Length: 94 {\"amount\": [\"A valid integer is required.\"], \"description\": [\"This field may not be blank.\"]} \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406 \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\uff0c\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u51fd\u6570\u5373\u53ef\uff0c\u5b83\u8981\u80fd\u591f\u5c06\u4f60API views\u91cc\u5f15\u53d1\u7684\u5f02\u5e38\u8f6c\u6362\u6210\u54cd\u5e94\u5bf9\u8c61\u3002\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u81ea\u5df1\u63a7\u5236\u4f60API\u7684\u62a5\u9519\u54cd\u5e94\u7684\u6837\u5f0f\u4e86\u3002 \u8fd9\u4e2a\u51fd\u6570\u5fc5\u987b\u63a5\u53d7\u4e00\u5bf9\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u9700\u8981\u5904\u7406\u7684\u5f02\u5e38\uff0c\u7b2c\u4e8c\u4e2a\u5219\u662f\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b\uff0c\u8fd9\u4e2a\u5b57\u5178\u9700\u8981\u5305\u542b\u4e00\u5207\u989d\u5916\u76f8\u5173\u4fe1\u606f\uff0c\u6bd4\u5982\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684view\u7b49\u3002\u5f02\u5e38\u5904\u7406\u51fd\u6570\u8981\u4e48\u8fd4\u56de\u4e00\u4e2a Response \u5bf9\u8c61\u8981\u4e48\u5c31\u76f4\u63a5\u8fd4\u56de None (\u6bd4\u5982\u5f02\u5e38\u65e0\u6cd5\u6b63\u5e38\u5904\u7406\u7684\u60c5\u51b5\u4e0b)\u3002\u5982\u679c\u5904\u7406\u51fd\u6570\u8fd4\u56de\u4e86 None \uff0c\u90a3\u4e48\u8fd9\u4e2a\u5f02\u5e38\u4f1a\u7ee7\u7eed\u5411\u4e0a\u62a5\u9519\uff0c\u5e76\u7531Django\u8fd4\u56de\u4e00\u4e2a\u6807\u51c6\u7684HTTP 500\u7684'server error'\u54cd\u5e94\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f60\u53ef\u80fd\u60f3\u786e\u4fdd\u4f60\u6240\u6709\u7684\u54cd\u5e94\u6b63\u6587\u91cc\u90fd\u4f1a\u5305\u542b\u8be5\u6b21\u8bf7\u6c42\u7684HTTP\u72b6\u6001\u7801\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a HTTP/1.1 405 Method Not Allowed Content-Type: application/json Content-Length: 62 {\"status_code\": 405, \"detail\": \"Method 'DELETE' not allowed.\"} \u60f3\u8981\u53d8\u6210\u8fd9\u6837\u7684\u54cd\u5e94\uff0c\u4f60\u53ef\u4ee5\u5199\u4e00\u4e2a\u50cf\u4e0b\u9762\u8fd9\u6837\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\uff1a from rest_framework.views import exception_handler def custom_exception_handler(exc, context): # \u9996\u5148\u8c03\u7528REST framework\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\uff0c # \u4ee5\u83b7\u5f97\u6807\u51c6\u7684\u9519\u8bef\u54cd\u5e94\u3002 response = exception_handler(exc, context) # \u63a5\u4e0b\u6765\u5c06HTTP\u72b6\u6001\u7801\u52a0\u5230\u54cd\u5e94\u4e2d\u3002 if response is not None: response.data['status_code'] = response.status_code return response \u8fd9\u91cc\u9ed8\u8ba4\u7684\u5904\u7406\u51fd\u6570\u5e76\u6ca1\u6709\u7528\u5230\u53c2\u6570context\uff0c\u4f46\u5982\u679c\u5f02\u5e38\u5904\u7406\u51fd\u6570\u9700\u8981\u66f4\u591a\u989d\u5916\u7684\u4fe1\u606f\u5c31\u53ef\u4ee5\u7528\u5230\u3002\u6bd4\u5982\u9700\u8981\u5f53\u524d\u5904\u7406\u5f02\u5e38\u7684view\u7684\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u7528 context['view'] \u6765\u83b7\u53d6\u3002 \u5f02\u5e38\u5904\u7406\u51fd\u6570\u8fd8\u5fc5\u987b\u901a\u8fc7settings\u6765\u914d\u7f6e\uff0c\u8bbe\u7f6e\u4e2d\u7684key\u662f EXCEPTION_HANDLER \uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a REST_FRAMEWORK = { 'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler' } \u5982\u679c\u6ca1\u6709\u7279\u522b\u6307\u51fa\uff0c 'EXCEPTION_HANDLER' \u8bbe\u7f6e\u9ed8\u8ba4\u4f7f\u7528REST framework\u63d0\u4f9b\u7684\u6807\u51c6\u5f02\u5e38\u5904\u7406\uff1a REST_FRAMEWORK = { 'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler' } \u8981\u6ce8\u610f\u7684\u662f\u5f02\u5e38\u5904\u7406\u53ea\u4f1a\u7531\u4ea7\u751f\u5f02\u5e38\u7684\u54cd\u5e94\u8c03\u7528\u3002\u5b83\u65e0\u6cd5\u5904\u7406view\u76f4\u63a5\u8fd4\u56de\u7684\u54cd\u5e94\uff0c\u6bd4\u5982generic views\u5728serializer\u9a8c\u8bc1\u51fa\u9519\u65f6\u8fd4\u56de\u7684\u54cd\u5e94 HTTP_400_BAD_REQUEST \u3002 API \u53c2\u8003 APIException \u7b7e\u540d: APIException() \u662f\u6240\u6709 APIView \u6216\u8005 @api_view \u4e2d\u4ea7\u751f\u7684\u5f02\u5e38\u7684 \u57fa\u7c7b \u3002 \u5982\u679c\u60f3\u81ea\u5b9a\u4e49\u4e00\u4e2a\u5f02\u5e38\u7c7b\uff0c\u9996\u5148\u8981\u7ee7\u627f APIException \uff0c\u7136\u540e\u5728\u8be5\u5f02\u5e38\u7c7b\u4e2d\u8bbe\u7f6e .status_code , .default_detail \u4ee5\u53ca default_code \u5c5e\u6027\u3002 \u4e3e\u4f8b\uff0c\u5982\u679c\u4f60\u7684API\u4f9d\u8d56\u67d0\u4e2a\u65f6\u4e0d\u65f6\u4f1a\u6389\u7ebf\u7684\u7b2c\u4e09\u65b9\u670d\u52a1\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u5f02\u5e38\"503 Service Unavailable\"\u7684HTTP\u54cd\u5e94\u7801\uff0c\u4f60\u53ef\u4ee5\u8fd9\u4e48\u5e72\uff1a from rest_framework.exceptions import APIException class ServiceUnavailable(APIException): status_code = 503 default_detail = 'Service temporarily unavailable, try again later.' default_code = 'service_unavailable' \u68c0\u67e5 API \u5f02\u5e38 \u6709\u5f88\u591a\u5c5e\u6027\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u4e00\u4e2aAPI\u5f02\u5e38\u7684\u72b6\u6001\uff0c\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e9b\u5c5e\u6027\u6765\u6784\u5efa\u4e13\u5c5e\u4f60\u9879\u76ee\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u3002 \u53ef\u7528\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u6709\uff1a .detail - \u4ee5\u6587\u5b57\u5f62\u5f0f\u8fd4\u56de\u62a5\u9519\u7684\u7ec6\u8282\u63cf\u8ff0\u3002 .get_codes() - \u8fd4\u56de\u62a5\u9519\u7684\u6807\u8bc6\u7801\u3002 .get_full_details() - \u8fd4\u56de\u62a5\u9519\u7684\u7ec6\u8282\u63cf\u8ff0\u4ee5\u53ca\u62a5\u9519\u7684\u6807\u8bc6\u7801\u3002 \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u62a5\u9519\u7684\u7ec6\u8282\u7684\u8fd4\u56de\u7ed3\u679c\u5f88\u7b80\u5355\uff1a >>> print(exc.detail) You do not have permission to perform this action. >>> print(exc.get_codes()) permission_denied >>> print(exc.get_full_details()) {'message':'You do not have permission to perform this action.','code':'permission_denied'} \u5982\u679c\u662f\u9a8c\u8bc1\u7c7b\u62a5\u9519\uff0c\u90a3\u62a5\u9519\u7ec6\u8282\u5c31\u4f1a\u662f\u4e00\u4e2a\u5217\u8868\u6216\u8005\u5b57\u5178\uff1a >>> print(exc.detail) {\"name\":\"This field is required.\",\"age\":\"A valid integer is required.\"} >>> print(exc.get_codes())Zh {\"name\":\"required\",\"age\":\"invalid\"} >>> print(exc.get_full_details()) {\"name\":{\"message\":\"This field is required.\",\"code\":\"required\"},\"age\":{\"message\":\"A valid integer is required.\",\"code\":\"invalid\"}} ParseError \u7b7e\u540d: ParseError(detail=None, code=None) \u5728\u8bbf\u95ee request.data \u65f6\uff0c\u5982\u679c\u8bf7\u6c42\u4e2d\u5305\u542b\u683c\u5f0f\u4e0d\u6b63\u786e\u7684\u6570\u636e\uff0c\u5219\u8be5\u5f02\u5e38\u4f1a\u88ab\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"400 Bad Request\"\u7684\u54cd\u5e94\u3002 AuthenticationFailed \u7b7e\u540d: AuthenticationFailed(detail=None, code=None) \u5f53\u8bf7\u6c42\u5305\u542b\u9519\u8bef\u7684\u8ba4\u8bc1\u4fe1\u606f\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"401 Unauthenticated\"\u7684\u54cd\u5e94\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\u8fd4\u56de\u72b6\u6001\u7801\u4e3a\"403 Forbidden\"\u7684\u54cd\u5e94\uff0c\u8fd9\u4e2a\u4e3b\u8981\u53d6\u51b3\u4e8e\u5f53\u524d\u4f7f\u7528\u7684\u8ba4\u8bc1\u6a21\u5f0f\u3002\u67e5\u770b authentication \u6587\u6863 \u4ee5\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002 NotAuthenticated \u7b7e\u540d: NotAuthenticated(detail=None, code=None) \u5f53\u672a\u5e26\u8ba4\u8bc1\u4fe1\u606f\u7684\u8bf7\u6c42\u68c0\u67e5\u6743\u9650\u51fa\u9519\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"401 Unauthenticated\"\u7684\u54cd\u5e94\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\u8fd4\u56de\u72b6\u6001\u7801\u4e3a\"403 Forbidden\"\u7684\u54cd\u5e94\uff0c\u8fd9\u4e2a\u4e3b\u8981\u53d6\u51b3\u4e8e\u5f53\u524d\u4f7f\u7528\u7684\u8ba4\u8bc1\u6a21\u5f0f\u3002\u67e5\u770b authentication \u6587\u6863 \u4ee5\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002 PermissionDenied \u7b7e\u540d: PermissionDenied(detail=None, code=None) Raised when an authenticated request fails the permission checks. \u5f53\u4e00\u4e2a\u5e26\u8ba4\u8bc1\u4fe1\u606f\u7684\u8bf7\u6c42\u68c0\u67e5\u6743\u9650\u51fa\u9519\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"403 Forbidden\"\u7684\u54cd\u5e94\u3002 NotFound \u7b7e\u540d: NotFound(detail=None, code=None) \u5f53\u7ed9\u5b9aURL\u7684\u8d44\u6e90\u4e0d\u5b58\u5728\u7684\u65f6\u5019\u629b\u51fa\u3002\u8fd9\u4e2a\u5f02\u5e38\u548cDjango\u6807\u51c6\u7684 Http404 \u5f02\u5e38\u7b49\u540c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"404 Not Found\"\u7684\u54cd\u5e94\u3002 MethodNotAllowed \u7b7e\u540d: MethodNotAllowed(method, detail=None, code=None) \u5f53\u4e00\u4e2a\u8bf7\u6c42\u4ea7\u751f\u4e14\u6ca1\u6709view\u6620\u5c04\u4e86\u8be5\u8bf7\u6c42\u9700\u8981\u7684\u5bf9\u5e94\u65b9\u6cd5\u6765\u5904\u7406\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"405 Method Not Allowed\"\u7684\u54cd\u5e94\u3002 NotAcceptable \u7b7e\u540d: NotAcceptable(detail=None, code=None) \u5f53\u4e00\u4e2a\u5e26\u6709 Accept \u5934\u7684\u8bf7\u6c42\u65e0\u6cd5\u88ab\u4efb\u4f55\u5f53\u524d\u53ef\u7528\u7684renderer\u6ee1\u8db3\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"406 Not Acceptable\"\u7684\u54cd\u5e94\u3002 UnsupportedMediaType \u7b7e\u540d: UnsupportedMediaType(media_type, detail=None, code=None) \u5f53\u6ca1\u6709\u89e3\u6790\u5668\u80fd\u591f\u5728\u8bbf\u95ee request.data \u65f6\u5904\u7406\u5176content type\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"415 Unsupported Media Type\"\u7684\u54cd\u5e94\u3002 Throttled \u7b7e\u540d: Throttled(wait=None, detail=None, code=None) \u5f53\u8bbf\u95ee\u7684\u8bf7\u6c42\u65e0\u6cd5\u901a\u8fc7throttling\u68c0\u67e5\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"429 Too Many Requests\"\u7684\u54cd\u5e94\u3002 ValidationError \u7b7e\u540d: ValidationError(detail, code=None) \u9a8c\u8bc1\u9519\u8bef\u7684\u5f02\u5e38\u8981\u548c\u5176\u4ed6 APIException \u7684\u7c7b\u6709\u6240\u4e0d\u540c\u3002 detail \u53c2\u6570\u662f\u5fc5\u987b\u7684\uff0c\u800c\u4e0d\u662f\u53ef\u9009\u7684\u3002 detail \u53c2\u6570\u53ef\u4ee5\u7528\u5217\u8868\u6216\u8005\u5b57\u5178\u6765\u5b58\u653e\u9519\u8bef\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5d4c\u5957\u7684\u6570\u636e\u7ed3\u6784\u3002 \u4f9d\u636e\u4e60\u60ef\uff0c\u4e3a\u4e86\u533a\u5206\u5b83\u4e0eDjango\u5185\u7f6e\u7684\u9a8c\u8bc1\u9519\u8bef\uff0c\u4f60\u5e94\u5f53\u5f15\u5165 serializers \u6a21\u5757\u5e76\u4e14\u7528\u4e00\u4e2a\u5b8c\u5168\u5408\u683c\u7684 ValidationError \u3002\u6bd4\u5982 raise serializers.ValidationError('This field must be an integer value.') \u3002 ValidationError \u7c7b\u5e94\u5f53\u88abserialzier, field validation\u548cvalidator\u7c7b\u4f7f\u7528\u3002\u5b83\u53ef\u4ee5\u5728\u8c03\u7528 serializer.is_valid \u65f6\u629b\u51fa\uff0c\u5f53\u7136\u524d\u63d0\u662f\u8981\u9644\u5e26\u6709 raise_exception \u5173\u952e\u5b57\u53c2\u6570\uff1a serializer.is_valid(raise_exception=True) REST framework\u7684generic views\u4f7f\u7528\u7684\u662f raise_exception=True \u6807\u5fd7\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u4f60\u7684API\u91cc\u5168\u5c40\u8986\u76d6\u9a8c\u8bc1\u7c7b\u9519\u8bef\u54cd\u5e94\u7684\u6837\u5f0f\u3002\u8981\u8fd9\u4e48\u505a\uff0c\u4f60\u9700\u8981\u50cf\u4e0a\u6587\u6240\u8ff0\u53bb\u81ea\u5b9a\u4e49\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u51fd\u6570\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"400 Bad Request\"\u7684\u54cd\u5e94\u3002 Generic Error Views Django REST Framework\u63d0\u4f9b\u4e24\u79cd\u5408\u9002\u7684\u65b9\u6cd5\u6765\u751f\u6210\u901a\u7528\u7684JSON\u683c\u5f0f\u7684 500 Server Error\u548c 400 Bad Request responses. (Django\u9ed8\u8ba4\u7684\u62a5\u9519views\u63d0\u4f9b\u7684\u662fHTML\u683c\u5f0f\u7684\u54cd\u5e94\uff0c\u4e00\u822c\u6765\u8bf4\u4e0d\u592a\u9002\u7528\u4e8eAPI-only\u7684web\u540e\u7aef\u3002) \u8bf7\u53c2\u8003 Django\u81ea\u5b9a\u4e49\u9519\u8befview\u6587\u6863 \u6765\u5206\u522b\u4f7f\u7528\u8fd9\u4e24\u79cd\u65b9\u6cd5\u3002 rest_framework.exceptions.server_error \u8fd4\u56de\u4e00\u4e2a\u5e26\u6709HTTP\u72b6\u6001\u7801 500 \u4e14content-type\u4e3a application/json \u7684\u54cd\u5e94\u3002 \u8bbe\u7f6e handler500 \u5982\u4e0b\uff1a handler500 = 'rest_framework.exceptions.server_error' rest_framework.exceptions.bad_request \u8fd4\u56de\u4e00\u4e2a\u5e26\u6709HTTP\u72b6\u6001\u7801 400 \u4e14content-type\u4e3a application/json \u7684\u54cd\u5e94\u3002 \u8bbe\u7f6e handler400 \u5982\u4e0b\uff1a handler400 = 'rest_framework.exceptions.bad_request'","title":"Exceptions"},{"location":"api-guide/exceptions_zh/#exceptions","text":"\u5f02\u5e38... \u8ba9\u9519\u8bef\u5904\u7406\u6e05\u6670\u5730\u4f4d\u4e8e\u7a0b\u5e8f\u67b6\u6784\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u6216\u9ad8\u5c42\u4f4d\u7f6e\u3002 \u2014 Doug Hellmann, Python \u5f02\u5e38\u5904\u7406\u65b9\u6cd5","title":"Exceptions"},{"location":"api-guide/exceptions_zh/#rest-framework-views","text":"REST framework\u7684\u89c6\u56fe\u80fd\u5904\u7406\u5404\u79cd\u5404\u6837\u7684\u5f02\u5e38\uff0c\u80fd\u5904\u7406\u5e76\u8fd4\u56de\u5408\u9002\u7684\u9519\u8bef\u54cd\u5e94\u3002 \u4ee5\u4e0b\u5f02\u5e38\u4f1a\u88ab\u5904\u7406\uff1a \u5728REST framework\u5185\u90e8\u4ea7\u751f\u7684 APIException \u7684\u5b50\u7c7b\u5f02\u5e38\u3002 \u539f\u751fDjango\u7684 Http404 \u5f02\u5e38. \u539f\u751fDjango\u7684 PermissionDenied \u5f02\u5e38. \u5728\u4e0a\u8ff0\u5404\u7c7b\u60c5\u51b5\u4e2d\uff0cREST framework\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u5408\u9002\u72b6\u6001\u7801\u4e0econtent-type\u7684\u54cd\u5e94\u3002\u54cd\u5e94\u6b63\u6587(Response body)\u4f1a\u5305\u542b\u6709\u5173\u62a5\u9519\u7684\u4efb\u4f55\u989d\u5916\u4fe1\u606f\u3002 \u5927\u591a\u6570\u62a5\u9519\u54cd\u5e94\u90fd\u4f1a\u5728\u54cd\u5e94\u6b63\u6587\u91cc\u5305\u542b\u4e00\u4e2a detail \u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u8bf7\u6c42\uff1a DELETE http://api.example.com/foo/bar HTTP/1.1 Accept: application/json \u5c31\u53ef\u80fd\u4f1a\u6536\u5230\u4e00\u4e2a\u62a5\u9519\u54cd\u5e94\uff0c\u8868\u793a DELETE \u65b9\u6cd5\u5728\u8be5\u8d44\u6e90\u4e0a\u4e0d\u53ef\u4f7f\u7528\u3002 HTTP/1.1 405 Method Not Allowed Content-Type: application/json Content-Length: 42 {\"detail\": \"Method 'DELETE' not allowed.\"} \u9a8c\u8bc1\u7c7b\u7684\u62a5\u9519\u5728\u5904\u7406\u4e0a\u7565\u6709\u4e0d\u540c\uff0c\u4ed6\u4eec\u4f1a\u628a\u5b57\u6bb5\u540d\u4f5c\u4e3akeys\u5305\u542b\u5728\u54cd\u5e94\u6b63\u6587\u4e2d\u3002\u9a8c\u8bc1\u7c7b\u7684\u62a5\u9519\u5982\u679c\u5e76\u4e0d\u662f\u9488\u5bf9\u7279\u5b9a\u7684\u5b57\u6bb5\uff0c\u5219\u4f1a\u4f7f\u7528\"non_field_error\"\u6216\u8005\u662fsetting\u4e2d NON_FIELD_ERRORS_KEY \u7684\u503c\u4f5c\u4e3akeys\u8fd4\u56de\u3002 \u4e00\u4e2a\u9a8c\u8bc1\u7c7b\u9519\u8bef\u5927\u6982\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a HTTP/1.1 400 Bad Request Content-Type: application/json Content-Length: 94 {\"amount\": [\"A valid integer is required.\"], \"description\": [\"This field may not be blank.\"]}","title":"\u5728REST framework views\u4e2d\u7684\u5f02\u5e38\u5904\u7406"},{"location":"api-guide/exceptions_zh/#_1","text":"\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\uff0c\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u51fd\u6570\u5373\u53ef\uff0c\u5b83\u8981\u80fd\u591f\u5c06\u4f60API views\u91cc\u5f15\u53d1\u7684\u5f02\u5e38\u8f6c\u6362\u6210\u54cd\u5e94\u5bf9\u8c61\u3002\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u81ea\u5df1\u63a7\u5236\u4f60API\u7684\u62a5\u9519\u54cd\u5e94\u7684\u6837\u5f0f\u4e86\u3002 \u8fd9\u4e2a\u51fd\u6570\u5fc5\u987b\u63a5\u53d7\u4e00\u5bf9\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u9700\u8981\u5904\u7406\u7684\u5f02\u5e38\uff0c\u7b2c\u4e8c\u4e2a\u5219\u662f\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b\uff0c\u8fd9\u4e2a\u5b57\u5178\u9700\u8981\u5305\u542b\u4e00\u5207\u989d\u5916\u76f8\u5173\u4fe1\u606f\uff0c\u6bd4\u5982\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684view\u7b49\u3002\u5f02\u5e38\u5904\u7406\u51fd\u6570\u8981\u4e48\u8fd4\u56de\u4e00\u4e2a Response \u5bf9\u8c61\u8981\u4e48\u5c31\u76f4\u63a5\u8fd4\u56de None (\u6bd4\u5982\u5f02\u5e38\u65e0\u6cd5\u6b63\u5e38\u5904\u7406\u7684\u60c5\u51b5\u4e0b)\u3002\u5982\u679c\u5904\u7406\u51fd\u6570\u8fd4\u56de\u4e86 None \uff0c\u90a3\u4e48\u8fd9\u4e2a\u5f02\u5e38\u4f1a\u7ee7\u7eed\u5411\u4e0a\u62a5\u9519\uff0c\u5e76\u7531Django\u8fd4\u56de\u4e00\u4e2a\u6807\u51c6\u7684HTTP 500\u7684'server error'\u54cd\u5e94\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f60\u53ef\u80fd\u60f3\u786e\u4fdd\u4f60\u6240\u6709\u7684\u54cd\u5e94\u6b63\u6587\u91cc\u90fd\u4f1a\u5305\u542b\u8be5\u6b21\u8bf7\u6c42\u7684HTTP\u72b6\u6001\u7801\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a HTTP/1.1 405 Method Not Allowed Content-Type: application/json Content-Length: 62 {\"status_code\": 405, \"detail\": \"Method 'DELETE' not allowed.\"} \u60f3\u8981\u53d8\u6210\u8fd9\u6837\u7684\u54cd\u5e94\uff0c\u4f60\u53ef\u4ee5\u5199\u4e00\u4e2a\u50cf\u4e0b\u9762\u8fd9\u6837\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\uff1a from rest_framework.views import exception_handler def custom_exception_handler(exc, context): # \u9996\u5148\u8c03\u7528REST framework\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\uff0c # \u4ee5\u83b7\u5f97\u6807\u51c6\u7684\u9519\u8bef\u54cd\u5e94\u3002 response = exception_handler(exc, context) # \u63a5\u4e0b\u6765\u5c06HTTP\u72b6\u6001\u7801\u52a0\u5230\u54cd\u5e94\u4e2d\u3002 if response is not None: response.data['status_code'] = response.status_code return response \u8fd9\u91cc\u9ed8\u8ba4\u7684\u5904\u7406\u51fd\u6570\u5e76\u6ca1\u6709\u7528\u5230\u53c2\u6570context\uff0c\u4f46\u5982\u679c\u5f02\u5e38\u5904\u7406\u51fd\u6570\u9700\u8981\u66f4\u591a\u989d\u5916\u7684\u4fe1\u606f\u5c31\u53ef\u4ee5\u7528\u5230\u3002\u6bd4\u5982\u9700\u8981\u5f53\u524d\u5904\u7406\u5f02\u5e38\u7684view\u7684\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u7528 context['view'] \u6765\u83b7\u53d6\u3002 \u5f02\u5e38\u5904\u7406\u51fd\u6570\u8fd8\u5fc5\u987b\u901a\u8fc7settings\u6765\u914d\u7f6e\uff0c\u8bbe\u7f6e\u4e2d\u7684key\u662f EXCEPTION_HANDLER \uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a REST_FRAMEWORK = { 'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler' } \u5982\u679c\u6ca1\u6709\u7279\u522b\u6307\u51fa\uff0c 'EXCEPTION_HANDLER' \u8bbe\u7f6e\u9ed8\u8ba4\u4f7f\u7528REST framework\u63d0\u4f9b\u7684\u6807\u51c6\u5f02\u5e38\u5904\u7406\uff1a REST_FRAMEWORK = { 'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler' } \u8981\u6ce8\u610f\u7684\u662f\u5f02\u5e38\u5904\u7406\u53ea\u4f1a\u7531\u4ea7\u751f\u5f02\u5e38\u7684\u54cd\u5e94\u8c03\u7528\u3002\u5b83\u65e0\u6cd5\u5904\u7406view\u76f4\u63a5\u8fd4\u56de\u7684\u54cd\u5e94\uff0c\u6bd4\u5982generic views\u5728serializer\u9a8c\u8bc1\u51fa\u9519\u65f6\u8fd4\u56de\u7684\u54cd\u5e94 HTTP_400_BAD_REQUEST \u3002","title":"\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406"},{"location":"api-guide/exceptions_zh/#api","text":"","title":"API \u53c2\u8003"},{"location":"api-guide/exceptions_zh/#apiexception","text":"\u7b7e\u540d: APIException() \u662f\u6240\u6709 APIView \u6216\u8005 @api_view \u4e2d\u4ea7\u751f\u7684\u5f02\u5e38\u7684 \u57fa\u7c7b \u3002 \u5982\u679c\u60f3\u81ea\u5b9a\u4e49\u4e00\u4e2a\u5f02\u5e38\u7c7b\uff0c\u9996\u5148\u8981\u7ee7\u627f APIException \uff0c\u7136\u540e\u5728\u8be5\u5f02\u5e38\u7c7b\u4e2d\u8bbe\u7f6e .status_code , .default_detail \u4ee5\u53ca default_code \u5c5e\u6027\u3002 \u4e3e\u4f8b\uff0c\u5982\u679c\u4f60\u7684API\u4f9d\u8d56\u67d0\u4e2a\u65f6\u4e0d\u65f6\u4f1a\u6389\u7ebf\u7684\u7b2c\u4e09\u65b9\u670d\u52a1\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u5f02\u5e38\"503 Service Unavailable\"\u7684HTTP\u54cd\u5e94\u7801\uff0c\u4f60\u53ef\u4ee5\u8fd9\u4e48\u5e72\uff1a from rest_framework.exceptions import APIException class ServiceUnavailable(APIException): status_code = 503 default_detail = 'Service temporarily unavailable, try again later.' default_code = 'service_unavailable'","title":"APIException"},{"location":"api-guide/exceptions_zh/#api_1","text":"\u6709\u5f88\u591a\u5c5e\u6027\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u4e00\u4e2aAPI\u5f02\u5e38\u7684\u72b6\u6001\uff0c\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e9b\u5c5e\u6027\u6765\u6784\u5efa\u4e13\u5c5e\u4f60\u9879\u76ee\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u3002 \u53ef\u7528\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u6709\uff1a .detail - \u4ee5\u6587\u5b57\u5f62\u5f0f\u8fd4\u56de\u62a5\u9519\u7684\u7ec6\u8282\u63cf\u8ff0\u3002 .get_codes() - \u8fd4\u56de\u62a5\u9519\u7684\u6807\u8bc6\u7801\u3002 .get_full_details() - \u8fd4\u56de\u62a5\u9519\u7684\u7ec6\u8282\u63cf\u8ff0\u4ee5\u53ca\u62a5\u9519\u7684\u6807\u8bc6\u7801\u3002 \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u62a5\u9519\u7684\u7ec6\u8282\u7684\u8fd4\u56de\u7ed3\u679c\u5f88\u7b80\u5355\uff1a >>> print(exc.detail) You do not have permission to perform this action. >>> print(exc.get_codes()) permission_denied >>> print(exc.get_full_details()) {'message':'You do not have permission to perform this action.','code':'permission_denied'} \u5982\u679c\u662f\u9a8c\u8bc1\u7c7b\u62a5\u9519\uff0c\u90a3\u62a5\u9519\u7ec6\u8282\u5c31\u4f1a\u662f\u4e00\u4e2a\u5217\u8868\u6216\u8005\u5b57\u5178\uff1a >>> print(exc.detail) {\"name\":\"This field is required.\",\"age\":\"A valid integer is required.\"} >>> print(exc.get_codes())Zh {\"name\":\"required\",\"age\":\"invalid\"} >>> print(exc.get_full_details()) {\"name\":{\"message\":\"This field is required.\",\"code\":\"required\"},\"age\":{\"message\":\"A valid integer is required.\",\"code\":\"invalid\"}}","title":"\u68c0\u67e5 API \u5f02\u5e38"},{"location":"api-guide/exceptions_zh/#parseerror","text":"\u7b7e\u540d: ParseError(detail=None, code=None) \u5728\u8bbf\u95ee request.data \u65f6\uff0c\u5982\u679c\u8bf7\u6c42\u4e2d\u5305\u542b\u683c\u5f0f\u4e0d\u6b63\u786e\u7684\u6570\u636e\uff0c\u5219\u8be5\u5f02\u5e38\u4f1a\u88ab\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"400 Bad Request\"\u7684\u54cd\u5e94\u3002","title":"ParseError"},{"location":"api-guide/exceptions_zh/#authenticationfailed","text":"\u7b7e\u540d: AuthenticationFailed(detail=None, code=None) \u5f53\u8bf7\u6c42\u5305\u542b\u9519\u8bef\u7684\u8ba4\u8bc1\u4fe1\u606f\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"401 Unauthenticated\"\u7684\u54cd\u5e94\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\u8fd4\u56de\u72b6\u6001\u7801\u4e3a\"403 Forbidden\"\u7684\u54cd\u5e94\uff0c\u8fd9\u4e2a\u4e3b\u8981\u53d6\u51b3\u4e8e\u5f53\u524d\u4f7f\u7528\u7684\u8ba4\u8bc1\u6a21\u5f0f\u3002\u67e5\u770b authentication \u6587\u6863 \u4ee5\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002","title":"AuthenticationFailed"},{"location":"api-guide/exceptions_zh/#notauthenticated","text":"\u7b7e\u540d: NotAuthenticated(detail=None, code=None) \u5f53\u672a\u5e26\u8ba4\u8bc1\u4fe1\u606f\u7684\u8bf7\u6c42\u68c0\u67e5\u6743\u9650\u51fa\u9519\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"401 Unauthenticated\"\u7684\u54cd\u5e94\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\u8fd4\u56de\u72b6\u6001\u7801\u4e3a\"403 Forbidden\"\u7684\u54cd\u5e94\uff0c\u8fd9\u4e2a\u4e3b\u8981\u53d6\u51b3\u4e8e\u5f53\u524d\u4f7f\u7528\u7684\u8ba4\u8bc1\u6a21\u5f0f\u3002\u67e5\u770b authentication \u6587\u6863 \u4ee5\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002","title":"NotAuthenticated"},{"location":"api-guide/exceptions_zh/#permissiondenied","text":"\u7b7e\u540d: PermissionDenied(detail=None, code=None) Raised when an authenticated request fails the permission checks. \u5f53\u4e00\u4e2a\u5e26\u8ba4\u8bc1\u4fe1\u606f\u7684\u8bf7\u6c42\u68c0\u67e5\u6743\u9650\u51fa\u9519\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"403 Forbidden\"\u7684\u54cd\u5e94\u3002","title":"PermissionDenied"},{"location":"api-guide/exceptions_zh/#notfound","text":"\u7b7e\u540d: NotFound(detail=None, code=None) \u5f53\u7ed9\u5b9aURL\u7684\u8d44\u6e90\u4e0d\u5b58\u5728\u7684\u65f6\u5019\u629b\u51fa\u3002\u8fd9\u4e2a\u5f02\u5e38\u548cDjango\u6807\u51c6\u7684 Http404 \u5f02\u5e38\u7b49\u540c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"404 Not Found\"\u7684\u54cd\u5e94\u3002","title":"NotFound"},{"location":"api-guide/exceptions_zh/#methodnotallowed","text":"\u7b7e\u540d: MethodNotAllowed(method, detail=None, code=None) \u5f53\u4e00\u4e2a\u8bf7\u6c42\u4ea7\u751f\u4e14\u6ca1\u6709view\u6620\u5c04\u4e86\u8be5\u8bf7\u6c42\u9700\u8981\u7684\u5bf9\u5e94\u65b9\u6cd5\u6765\u5904\u7406\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"405 Method Not Allowed\"\u7684\u54cd\u5e94\u3002","title":"MethodNotAllowed"},{"location":"api-guide/exceptions_zh/#notacceptable","text":"\u7b7e\u540d: NotAcceptable(detail=None, code=None) \u5f53\u4e00\u4e2a\u5e26\u6709 Accept \u5934\u7684\u8bf7\u6c42\u65e0\u6cd5\u88ab\u4efb\u4f55\u5f53\u524d\u53ef\u7528\u7684renderer\u6ee1\u8db3\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"406 Not Acceptable\"\u7684\u54cd\u5e94\u3002","title":"NotAcceptable"},{"location":"api-guide/exceptions_zh/#unsupportedmediatype","text":"\u7b7e\u540d: UnsupportedMediaType(media_type, detail=None, code=None) \u5f53\u6ca1\u6709\u89e3\u6790\u5668\u80fd\u591f\u5728\u8bbf\u95ee request.data \u65f6\u5904\u7406\u5176content type\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"415 Unsupported Media Type\"\u7684\u54cd\u5e94\u3002","title":"UnsupportedMediaType"},{"location":"api-guide/exceptions_zh/#throttled","text":"\u7b7e\u540d: Throttled(wait=None, detail=None, code=None) \u5f53\u8bbf\u95ee\u7684\u8bf7\u6c42\u65e0\u6cd5\u901a\u8fc7throttling\u68c0\u67e5\u65f6\u629b\u51fa\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"429 Too Many Requests\"\u7684\u54cd\u5e94\u3002","title":"Throttled"},{"location":"api-guide/exceptions_zh/#validationerror","text":"\u7b7e\u540d: ValidationError(detail, code=None) \u9a8c\u8bc1\u9519\u8bef\u7684\u5f02\u5e38\u8981\u548c\u5176\u4ed6 APIException \u7684\u7c7b\u6709\u6240\u4e0d\u540c\u3002 detail \u53c2\u6570\u662f\u5fc5\u987b\u7684\uff0c\u800c\u4e0d\u662f\u53ef\u9009\u7684\u3002 detail \u53c2\u6570\u53ef\u4ee5\u7528\u5217\u8868\u6216\u8005\u5b57\u5178\u6765\u5b58\u653e\u9519\u8bef\u4fe1\u606f\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5d4c\u5957\u7684\u6570\u636e\u7ed3\u6784\u3002 \u4f9d\u636e\u4e60\u60ef\uff0c\u4e3a\u4e86\u533a\u5206\u5b83\u4e0eDjango\u5185\u7f6e\u7684\u9a8c\u8bc1\u9519\u8bef\uff0c\u4f60\u5e94\u5f53\u5f15\u5165 serializers \u6a21\u5757\u5e76\u4e14\u7528\u4e00\u4e2a\u5b8c\u5168\u5408\u683c\u7684 ValidationError \u3002\u6bd4\u5982 raise serializers.ValidationError('This field must be an integer value.') \u3002 ValidationError \u7c7b\u5e94\u5f53\u88abserialzier, field validation\u548cvalidator\u7c7b\u4f7f\u7528\u3002\u5b83\u53ef\u4ee5\u5728\u8c03\u7528 serializer.is_valid \u65f6\u629b\u51fa\uff0c\u5f53\u7136\u524d\u63d0\u662f\u8981\u9644\u5e26\u6709 raise_exception \u5173\u952e\u5b57\u53c2\u6570\uff1a serializer.is_valid(raise_exception=True) REST framework\u7684generic views\u4f7f\u7528\u7684\u662f raise_exception=True \u6807\u5fd7\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u4f60\u7684API\u91cc\u5168\u5c40\u8986\u76d6\u9a8c\u8bc1\u7c7b\u9519\u8bef\u54cd\u5e94\u7684\u6837\u5f0f\u3002\u8981\u8fd9\u4e48\u505a\uff0c\u4f60\u9700\u8981\u50cf\u4e0a\u6587\u6240\u8ff0\u53bb\u81ea\u5b9a\u4e49\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u51fd\u6570\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8be5\u5f02\u5e38\u4f1a\u8fd4\u56deHTTP\u72b6\u6001\u7801\u4e3a\"400 Bad Request\"\u7684\u54cd\u5e94\u3002","title":"ValidationError"},{"location":"api-guide/exceptions_zh/#generic-error-views","text":"Django REST Framework\u63d0\u4f9b\u4e24\u79cd\u5408\u9002\u7684\u65b9\u6cd5\u6765\u751f\u6210\u901a\u7528\u7684JSON\u683c\u5f0f\u7684 500 Server Error\u548c 400 Bad Request responses. (Django\u9ed8\u8ba4\u7684\u62a5\u9519views\u63d0\u4f9b\u7684\u662fHTML\u683c\u5f0f\u7684\u54cd\u5e94\uff0c\u4e00\u822c\u6765\u8bf4\u4e0d\u592a\u9002\u7528\u4e8eAPI-only\u7684web\u540e\u7aef\u3002) \u8bf7\u53c2\u8003 Django\u81ea\u5b9a\u4e49\u9519\u8befview\u6587\u6863 \u6765\u5206\u522b\u4f7f\u7528\u8fd9\u4e24\u79cd\u65b9\u6cd5\u3002","title":"Generic Error Views"},{"location":"api-guide/exceptions_zh/#rest_frameworkexceptionsserver_error","text":"\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709HTTP\u72b6\u6001\u7801 500 \u4e14content-type\u4e3a application/json \u7684\u54cd\u5e94\u3002 \u8bbe\u7f6e handler500 \u5982\u4e0b\uff1a handler500 = 'rest_framework.exceptions.server_error'","title":"rest_framework.exceptions.server_error"},{"location":"api-guide/exceptions_zh/#rest_frameworkexceptionsbad_request","text":"\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709HTTP\u72b6\u6001\u7801 400 \u4e14content-type\u4e3a application/json \u7684\u54cd\u5e94\u3002 \u8bbe\u7f6e handler400 \u5982\u4e0b\uff1a handler400 = 'rest_framework.exceptions.bad_request'","title":"rest_framework.exceptions.bad_request"},{"location":"api-guide/fields/","text":"Serializer fields Each field in a Form class is responsible not only for validating data, but also for \"cleaning\" it \u2014 normalizing it to a consistent format. \u2014 Django documentation Serializer fields handle converting between primitive values and internal datatypes. They also deal with validating input values, as well as retrieving and setting the values from their parent objects. Note: The serializer fields are declared in fields.py , but by convention you should import them using from rest_framework import serializers and refer to fields as serializers.<FieldName> . Core arguments Each serializer field class constructor takes at least these arguments. Some Field classes take additional, field-specific arguments, but the following should always be accepted: read_only Read-only fields are included in the API output, but should not be included in the input during create or update operations. Any 'read_only' fields that are incorrectly included in the serializer input will be ignored. Set this to True to ensure that the field is used when serializing a representation, but is not used when creating or updating an instance during deserialization. Defaults to False write_only Set this to True to ensure that the field may be used when updating or creating an instance, but is not included when serializing the representation. Defaults to False required Normally an error will be raised if a field is not supplied during deserialization. Set to false if this field is not required to be present during deserialization. Setting this to False also allows the object attribute or dictionary key to be omitted from output when serializing the instance. If the key is not present it will simply not be included in the output representation. Defaults to True . default If set, this gives the default value that will be used for the field if no input value is supplied. If not set the default behaviour is to not populate the attribute at all. The default is not applied during partial update operations. In the partial update case only fields that are provided in the incoming data will have a validated value returned. May be set to a function or other callable, in which case the value will be evaluated each time it is used. When called, it will receive no arguments. If the callable has a requires_context = True attribute, then the serializer field will be passed as an argument. For example: class CurrentUserDefault: \"\"\" May be applied as a `default=...` value on a serializer field. Returns the current user. \"\"\" requires_context = True def __call__(self, serializer_field): return serializer_field.context['request'].user When serializing the instance, default will be used if the object attribute or dictionary key is not present in the instance. Note that setting a default value implies that the field is not required. Including both the default and required keyword arguments is invalid and will raise an error. allow_null Normally an error will be raised if None is passed to a serializer field. Set this keyword argument to True if None should be considered a valid value. Note that, without an explicit default , setting this argument to True will imply a default value of null for serialization output, but does not imply a default for input deserialization. Defaults to False source The name of the attribute that will be used to populate the field. May be a method that only takes a self argument, such as URLField(source='get_absolute_url') , or may use dotted notation to traverse attributes, such as EmailField(source='user.email') . When serializing fields with dotted notation, it may be necessary to provide a default value if any object is not present or is empty during attribute traversal. The value source='*' has a special meaning, and is used to indicate that the entire object should be passed through to the field. This can be useful for creating nested representations, or for fields which require access to the complete object in order to determine the output representation. Defaults to the name of the field. validators A list of validator functions which should be applied to the incoming field input, and which either raise a validation error or simply return. Validator functions should typically raise serializers.ValidationError , but Django's built-in ValidationError is also supported for compatibility with validators defined in the Django codebase or third party Django packages. error_messages A dictionary of error codes to error messages. label A short text string that may be used as the name of the field in HTML form fields or other descriptive elements. help_text A text string that may be used as a description of the field in HTML form fields or other descriptive elements. initial A value that should be used for pre-populating the value of HTML form fields. You may pass a callable to it, just as you may do with any regular Django Field : import datetime from rest_framework import serializers class ExampleSerializer(serializers.Serializer): day = serializers.DateField(initial=datetime.date.today) style A dictionary of key-value pairs that can be used to control how renderers should render the field. Two examples here are 'input_type' and 'base_template' : # Use <input type=\"password\"> for the input. password = serializers.CharField( style={'input_type': 'password'} ) # Use a radio input instead of a select input. color_channel = serializers.ChoiceField( choices=['red', 'green', 'blue'], style={'base_template': 'radio.html'} ) For more details see the HTML & Forms documentation. Boolean fields BooleanField A boolean representation. When using HTML encoded form input be aware that omitting a value will always be treated as setting a field to False , even if it has a default=True option specified. This is because HTML checkbox inputs represent the unchecked state by omitting the value, so REST framework treats omission as if it is an empty checkbox input. Note that Django 2.1 removed the blank kwarg from models.BooleanField . Prior to Django 2.1 models.BooleanField fields were always blank=True . Thus since Django 2.1 default serializers.BooleanField instances will be generated without the required kwarg (i.e. equivalent to required=True ) whereas with previous versions of Django, default BooleanField instances will be generated with a required=False option. If you want to control this behaviour manually, explicitly declare the BooleanField on the serializer class, or use the extra_kwargs option to set the required flag. Corresponds to django.db.models.fields.BooleanField . Signature: BooleanField() NullBooleanField A boolean representation that also accepts None as a valid value. Corresponds to django.db.models.fields.NullBooleanField . Signature: NullBooleanField() String fields CharField A text representation. Optionally validates the text to be shorter than max_length and longer than min_length . Corresponds to django.db.models.fields.CharField or django.db.models.fields.TextField . Signature: CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True) max_length - Validates that the input contains no more than this number of characters. min_length - Validates that the input contains no fewer than this number of characters. allow_blank - If set to True then the empty string should be considered a valid value. If set to False then the empty string is considered invalid and will raise a validation error. Defaults to False . trim_whitespace - If set to True then leading and trailing whitespace is trimmed. Defaults to True . The allow_null option is also available for string fields, although its usage is discouraged in favor of allow_blank . It is valid to set both allow_blank=True and allow_null=True , but doing so means that there will be two differing types of empty value permissible for string representations, which can lead to data inconsistencies and subtle application bugs. EmailField A text representation, validates the text to be a valid e-mail address. Corresponds to django.db.models.fields.EmailField Signature: EmailField(max_length=None, min_length=None, allow_blank=False) RegexField A text representation, that validates the given value matches against a certain regular expression. Corresponds to django.forms.fields.RegexField . Signature: RegexField(regex, max_length=None, min_length=None, allow_blank=False) The mandatory regex argument may either be a string, or a compiled python regular expression object. Uses Django's django.core.validators.RegexValidator for validation. SlugField A RegexField that validates the input against the pattern [a-zA-Z0-9_-]+ . Corresponds to django.db.models.fields.SlugField . Signature: SlugField(max_length=50, min_length=None, allow_blank=False) URLField A RegexField that validates the input against a URL matching pattern. Expects fully qualified URLs of the form http://<host>/<path> . Corresponds to django.db.models.fields.URLField . Uses Django's django.core.validators.URLValidator for validation. Signature: URLField(max_length=200, min_length=None, allow_blank=False) UUIDField A field that ensures the input is a valid UUID string. The to_internal_value method will return a uuid.UUID instance. On output the field will return a string in the canonical hyphenated format, for example: \"de305d54-75b4-431b-adb2-eb6b9e546013\" Signature: UUIDField(format='hex_verbose') format : Determines the representation format of the uuid value 'hex_verbose' - The canonical hex representation, including hyphens: \"5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" 'hex' - The compact hex representation of the UUID, not including hyphens: \"5ce0e9a55ffa654bcee01238041fb31a\" 'int' - A 128 bit integer representation of the UUID: \"123456789012312313134124512351145145114\" 'urn' - RFC 4122 URN representation of the UUID: \"urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" Changing the format parameters only affects representation values. All formats are accepted by to_internal_value FilePathField A field whose choices are limited to the filenames in a certain directory on the filesystem Corresponds to django.forms.fields.FilePathField . Signature: FilePathField(path, match=None, recursive=False, allow_files=True, allow_folders=False, required=None, **kwargs) path - The absolute filesystem path to a directory from which this FilePathField should get its choice. match - A regular expression, as a string, that FilePathField will use to filter filenames. recursive - Specifies whether all subdirectories of path should be included. Default is False . allow_files - Specifies whether files in the specified location should be included. Default is True . Either this or allow_folders must be True . allow_folders - Specifies whether folders in the specified location should be included. Default is False . Either this or allow_files must be True . IPAddressField A field that ensures the input is a valid IPv4 or IPv6 string. Corresponds to django.forms.fields.IPAddressField and django.forms.fields.GenericIPAddressField . Signature : IPAddressField(protocol='both', unpack_ipv4=False, **options) protocol Limits valid inputs to the specified protocol. Accepted values are 'both' (default), 'IPv4' or 'IPv6'. Matching is case insensitive. unpack_ipv4 Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'. Numeric fields IntegerField An integer representation. Corresponds to django.db.models.fields.IntegerField , django.db.models.fields.SmallIntegerField , django.db.models.fields.PositiveIntegerField and django.db.models.fields.PositiveSmallIntegerField . Signature : IntegerField(max_value=None, min_value=None) max_value Validate that the number provided is no greater than this value. min_value Validate that the number provided is no less than this value. FloatField A floating point representation. Corresponds to django.db.models.fields.FloatField . Signature : FloatField(max_value=None, min_value=None) max_value Validate that the number provided is no greater than this value. min_value Validate that the number provided is no less than this value. DecimalField A decimal representation, represented in Python by a Decimal instance. Corresponds to django.db.models.fields.DecimalField . Signature : DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None) max_digits The maximum number of digits allowed in the number. It must be either None or an integer greater than or equal to decimal_places . decimal_places The number of decimal places to store with the number. coerce_to_string Set to True if string values should be returned for the representation, or False if Decimal objects should be returned. Defaults to the same value as the COERCE_DECIMAL_TO_STRING settings key, which will be True unless overridden. If Decimal objects are returned by the serializer, then the final output format will be determined by the renderer. Note that setting localize will force the value to True . max_value Validate that the number provided is no greater than this value. min_value Validate that the number provided is no less than this value. localize Set to True to enable localization of input and output based on the current locale. This will also force coerce_to_string to True . Defaults to False . Note that data formatting is enabled if you have set USE_L10N=True in your settings file. rounding Sets the rounding mode used when quantising to the configured precision. Valid values are decimal module rounding modes . Defaults to None . Example usage To validate numbers up to 999 with a resolution of 2 decimal places, you would use: serializers.DecimalField(max_digits=5, decimal_places=2) And to validate numbers up to anything less than one billion with a resolution of 10 decimal places: serializers.DecimalField(max_digits=19, decimal_places=10) This field also takes an optional argument, coerce_to_string . If set to True the representation will be output as a string. If set to False the representation will be left as a Decimal instance and the final representation will be determined by the renderer. If unset, this will default to the same value as the COERCE_DECIMAL_TO_STRING setting, which is True unless set otherwise. Date and time fields DateTimeField A date and time representation. Corresponds to django.db.models.fields.DateTimeField . Signature: DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None, default_timezone=None) format - A string representing the output format. If not specified, this defaults to the same value as the DATETIME_FORMAT settings key, which will be 'iso-8601' unless set. Setting to a format string indicates that to_representation return values should be coerced to string output. Format strings are described below. Setting this value to None indicates that Python datetime objects should be returned by to_representation . In this case the datetime encoding will be determined by the renderer. input_formats - A list of strings representing the input formats which may be used to parse the date. If not specified, the DATETIME_INPUT_FORMATS setting will be used, which defaults to ['iso-8601'] . default_timezone - A pytz.timezone representing the timezone. If not specified and the USE_TZ setting is enabled, this defaults to the current timezone . If USE_TZ is disabled, then datetime objects will be naive. DateTimeField format strings. Format strings may either be Python strftime formats which explicitly specify the format, or the special string 'iso-8601' , which indicates that ISO 8601 style datetimes should be used. (eg '2013-01-29T12:34:56.000000Z' ) When a value of None is used for the format datetime objects will be returned by to_representation and the final output representation will determined by the renderer class. auto_now and auto_now_add model fields. When using ModelSerializer or HyperlinkedModelSerializer , note that any model fields with auto_now=True or auto_now_add=True will use serializer fields that are read_only=True by default. If you want to override this behavior, you'll need to declare the DateTimeField explicitly on the serializer. For example: class CommentSerializer(serializers.ModelSerializer): created = serializers.DateTimeField() class Meta: model = Comment DateField A date representation. Corresponds to django.db.models.fields.DateField Signature: DateField(format=api_settings.DATE_FORMAT, input_formats=None) format - A string representing the output format. If not specified, this defaults to the same value as the DATE_FORMAT settings key, which will be 'iso-8601' unless set. Setting to a format string indicates that to_representation return values should be coerced to string output. Format strings are described below. Setting this value to None indicates that Python date objects should be returned by to_representation . In this case the date encoding will be determined by the renderer. input_formats - A list of strings representing the input formats which may be used to parse the date. If not specified, the DATE_INPUT_FORMATS setting will be used, which defaults to ['iso-8601'] . DateField format strings Format strings may either be Python strftime formats which explicitly specify the format, or the special string 'iso-8601' , which indicates that ISO 8601 style dates should be used. (eg '2013-01-29' ) TimeField A time representation. Corresponds to django.db.models.fields.TimeField Signature: TimeField(format=api_settings.TIME_FORMAT, input_formats=None) format - A string representing the output format. If not specified, this defaults to the same value as the TIME_FORMAT settings key, which will be 'iso-8601' unless set. Setting to a format string indicates that to_representation return values should be coerced to string output. Format strings are described below. Setting this value to None indicates that Python time objects should be returned by to_representation . In this case the time encoding will be determined by the renderer. input_formats - A list of strings representing the input formats which may be used to parse the date. If not specified, the TIME_INPUT_FORMATS setting will be used, which defaults to ['iso-8601'] . TimeField format strings Format strings may either be Python strftime formats which explicitly specify the format, or the special string 'iso-8601' , which indicates that ISO 8601 style times should be used. (eg '12:34:56.000000' ) DurationField A Duration representation. Corresponds to django.db.models.fields.DurationField The validated_data for these fields will contain a datetime.timedelta instance. The representation is a string following this format '[DD] [HH:[MM:]]ss[.uuuuuu]' . Signature: DurationField(max_value=None, min_value=None) max_value Validate that the duration provided is no greater than this value. min_value Validate that the duration provided is no less than this value. Choice selection fields ChoiceField A field that can accept a value out of a limited set of choices. Used by ModelSerializer to automatically generate fields if the corresponding model field includes a choices=\u2026 argument. Signature: ChoiceField(choices) choices - A list of valid values, or a list of (key, display_name) tuples. allow_blank - If set to True then the empty string should be considered a valid value. If set to False then the empty string is considered invalid and will raise a validation error. Defaults to False . html_cutoff - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Can be used to ensure that automatically generated ChoiceFields with very large possible selections do not prevent a template from rendering. Defaults to None . html_cutoff_text - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to \"More than {count} items\u2026\" Both the allow_blank and allow_null are valid options on ChoiceField , although it is highly recommended that you only use one and not both. allow_blank should be preferred for textual choices, and allow_null should be preferred for numeric or other non-textual choices. MultipleChoiceField A field that can accept a set of zero, one or many values, chosen from a limited set of choices. Takes a single mandatory argument. to_internal_value returns a set containing the selected values. Signature: MultipleChoiceField(choices) choices - A list of valid values, or a list of (key, display_name) tuples. allow_blank - If set to True then the empty string should be considered a valid value. If set to False then the empty string is considered invalid and will raise a validation error. Defaults to False . html_cutoff - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Can be used to ensure that automatically generated ChoiceFields with very large possible selections do not prevent a template from rendering. Defaults to None . html_cutoff_text - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to \"More than {count} items\u2026\" As with ChoiceField , both the allow_blank and allow_null options are valid, although it is highly recommended that you only use one and not both. allow_blank should be preferred for textual choices, and allow_null should be preferred for numeric or other non-textual choices. File upload fields Parsers and file uploads. The FileField and ImageField classes are only suitable for use with MultiPartParser or FileUploadParser . Most parsers, such as e.g. JSON don't support file uploads. Django's regular FILE_UPLOAD_HANDLERS are used for handling uploaded files. FileField A file representation. Performs Django's standard FileField validation. Corresponds to django.forms.fields.FileField . Signature: FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL) max_length - Designates the maximum length for the file name. allow_empty_file - Designates if empty files are allowed. use_url - If set to True then URL string values will be used for the output representation. If set to False then filename string values will be used for the output representation. Defaults to the value of the UPLOADED_FILES_USE_URL settings key, which is True unless set otherwise. ImageField An image representation. Validates the uploaded file content as matching a known image format. Corresponds to django.forms.fields.ImageField . Signature: ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL) max_length - Designates the maximum length for the file name. allow_empty_file - Designates if empty files are allowed. use_url - If set to True then URL string values will be used for the output representation. If set to False then filename string values will be used for the output representation. Defaults to the value of the UPLOADED_FILES_USE_URL settings key, which is True unless set otherwise. Requires either the Pillow package or PIL package. The Pillow package is recommended, as PIL is no longer actively maintained. Composite fields ListField A field class that validates a list of objects. Signature : ListField(child=<A_FIELD_INSTANCE>, allow_empty=True, min_length=None, max_length=None) child - A field instance that should be used for validating the objects in the list. If this argument is not provided then objects in the list will not be validated. allow_empty - Designates if empty lists are allowed. min_length - Validates that the list contains no fewer than this number of elements. max_length - Validates that the list contains no more than this number of elements. For example, to validate a list of integers you might use something like the following: scores = serializers.ListField( child=serializers.IntegerField(min_value=0, max_value=100) ) The ListField class also supports a declarative style that allows you to write reusable list field classes. class StringListField(serializers.ListField): child = serializers.CharField() We can now reuse our custom StringListField class throughout our application, without having to provide a child argument to it. DictField A field class that validates a dictionary of objects. The keys in DictField are always assumed to be string values. Signature : DictField(child=<A_FIELD_INSTANCE>, allow_empty=True) child - A field instance that should be used for validating the values in the dictionary. If this argument is not provided then values in the mapping will not be validated. allow_empty - Designates if empty dictionaries are allowed. For example, to create a field that validates a mapping of strings to strings, you would write something like this: document = DictField(child=CharField()) You can also use the declarative style, as with ListField . For example: class DocumentField(DictField): child = CharField() HStoreField A preconfigured DictField that is compatible with Django's postgres HStoreField . Signature : HStoreField(child=<A_FIELD_INSTANCE>, allow_empty=True) child - A field instance that is used for validating the values in the dictionary. The default child field accepts both empty strings and null values. allow_empty - Designates if empty dictionaries are allowed. Note that the child field must be an instance of CharField , as the hstore extension stores values as strings. JSONField A field class that validates that the incoming data structure consists of valid JSON primitives. In its alternate binary mode, it will represent and validate JSON-encoded binary strings. Signature : JSONField(binary, encoder) binary - If set to True then the field will output and validate a JSON encoded string, rather than a primitive data structure. Defaults to False . encoder - Use this JSON encoder to serialize input object. Defaults to None . Miscellaneous fields ReadOnlyField A field class that simply returns the value of the field without modification. This field is used by default with ModelSerializer when including field names that relate to an attribute rather than a model field. Signature : ReadOnlyField() For example, if has_expired was a property on the Account model, then the following serializer would automatically generate it as a ReadOnlyField : class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ['id', 'account_name', 'has_expired'] HiddenField A field class that does not take a value based on user input, but instead takes its value from a default value or callable. Signature : HiddenField() For example, to include a field that always provides the current time as part of the serializer validated data, you would use the following: modified = serializers.HiddenField(default=timezone.now) The HiddenField class is usually only needed if you have some validation that needs to run based on some pre-provided field values, but you do not want to expose all of those fields to the end user. For further examples on HiddenField see the validators documentation. ModelField A generic field that can be tied to any arbitrary model field. The ModelField class delegates the task of serialization/deserialization to its associated model field. This field can be used to create serializer fields for custom model fields, without having to create a new custom serializer field. This field is used by ModelSerializer to correspond to custom model field classes. Signature: ModelField(model_field=<Django ModelField instance>) The ModelField class is generally intended for internal use, but can be used by your API if needed. In order to properly instantiate a ModelField , it must be passed a field that is attached to an instantiated model. For example: ModelField(model_field=MyModel()._meta.get_field('custom_field')) SerializerMethodField This is a read-only field. It gets its value by calling a method on the serializer class it is attached to. It can be used to add any sort of data to the serialized representation of your object. Signature : SerializerMethodField(method_name=None) method_name - The name of the method on the serializer to be called. If not included this defaults to get_<field_name> . The serializer method referred to by the method_name argument should accept a single argument (in addition to self ), which is the object being serialized. It should return whatever you want to be included in the serialized representation of the object. For example: from django.contrib.auth.models import User from django.utils.timezone import now from rest_framework import serializers class UserSerializer(serializers.ModelSerializer): days_since_joined = serializers.SerializerMethodField() class Meta: model = User def get_days_since_joined(self, obj): return (now() - obj.date_joined).days Custom fields If you want to create a custom field, you'll need to subclass Field and then override either one or both of the .to_representation() and .to_internal_value() methods. These two methods are used to convert between the initial datatype, and a primitive, serializable datatype. Primitive datatypes will typically be any of a number, string, boolean, date / time / datetime or None . They may also be any list or dictionary like object that only contains other primitive objects. Other types might be supported, depending on the renderer that you are using. The .to_representation() method is called to convert the initial datatype into a primitive, serializable datatype. The to_internal_value() method is called to restore a primitive datatype into its internal python representation. This method should raise a serializers.ValidationError if the data is invalid. Examples A Basic Custom Field Let's look at an example of serializing a class that represents an RGB color value: class Color: \"\"\" A color represented in the RGB colorspace. \"\"\" def __init__(self, red, green, blue): assert(red >= 0 and green >= 0 and blue >= 0) assert(red < 256 and green < 256 and blue < 256) self.red, self.green, self.blue = red, green, blue class ColorField(serializers.Field): \"\"\" Color objects are serialized into 'rgb(#, #, #)' notation. \"\"\" def to_representation(self, value): return \"rgb(%d, %d, %d)\" % (value.red, value.green, value.blue) def to_internal_value(self, data): data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] return Color(red, green, blue) By default field values are treated as mapping to an attribute on the object. If you need to customize how the field value is accessed and set you need to override .get_attribute() and/or .get_value() . As an example, let's create a field that can be used to represent the class name of the object being serialized: class ClassNameField(serializers.Field): def get_attribute(self, instance): # We pass the object instance onto `to_representation`, # not just the field attribute. return instance def to_representation(self, value): \"\"\" Serialize the value's class name. \"\"\" return value.__class__.__name__ Raising validation errors Our ColorField class above currently does not perform any data validation. To indicate invalid data, we should raise a serializers.ValidationError , like so: def to_internal_value(self, data): if not isinstance(data, str): msg = 'Incorrect type. Expected a string, but got %s' raise ValidationError(msg % type(data).__name__) if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data): raise ValidationError('Incorrect format. Expected `rgb(#,#,#)`.') data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] if any([col > 255 or col < 0 for col in (red, green, blue)]): raise ValidationError('Value out of range. Must be between 0 and 255.') return Color(red, green, blue) The .fail() method is a shortcut for raising ValidationError that takes a message string from the error_messages dictionary. For example: default_error_messages = { 'incorrect_type': 'Incorrect type. Expected a string, but got {input_type}', 'incorrect_format': 'Incorrect format. Expected `rgb(#,#,#)`.', 'out_of_range': 'Value out of range. Must be between 0 and 255.' } def to_internal_value(self, data): if not isinstance(data, str): self.fail('incorrect_type', input_type=type(data).__name__) if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data): self.fail('incorrect_format') data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] if any([col > 255 or col < 0 for col in (red, green, blue)]): self.fail('out_of_range') return Color(red, green, blue) This style keeps your error messages cleaner and more separated from your code, and should be preferred. Using source='*' Here we'll take an example of a flat DataPoint model with x_coordinate and y_coordinate attributes. class DataPoint(models.Model): label = models.CharField(max_length=50) x_coordinate = models.SmallIntegerField() y_coordinate = models.SmallIntegerField() Using a custom field and source='*' we can provide a nested representation of the coordinate pair: class CoordinateField(serializers.Field): def to_representation(self, value): ret = { \"x\": value.x_coordinate, \"y\": value.y_coordinate } return ret def to_internal_value(self, data): ret = { \"x_coordinate\": data[\"x\"], \"y_coordinate\": data[\"y\"], } return ret class DataPointSerializer(serializers.ModelSerializer): coordinates = CoordinateField(source='*') class Meta: model = DataPoint fields = ['label', 'coordinates'] Note that this example doesn't handle validation. Partly for that reason, in a real project, the coordinate nesting might be better handled with a nested serializer using source='*' , with two IntegerField instances, each with their own source pointing to the relevant field. The key points from the example, though, are: to_representation is passed the entire DataPoint object and must map from that to the desired output. >>> instance = DataPoint(label='Example', x_coordinate=1, y_coordinate=2) >>> out_serializer = DataPointSerializer(instance) >>> out_serializer.data ReturnDict([('label', 'Example'), ('coordinates', {'x': 1, 'y': 2})]) Unless our field is to be read-only, to_internal_value must map back to a dict suitable for updating our target object. With source='*' , the return from to_internal_value will update the root validated data dictionary, rather than a single key. >>> data = { ... \"label\": \"Second Example\", ... \"coordinates\": { ... \"x\": 3, ... \"y\": 4, ... } ... } >>> in_serializer = DataPointSerializer(data=data) >>> in_serializer.is_valid() True >>> in_serializer.validated_data OrderedDict([('label', 'Second Example'), ('y_coordinate', 4), ('x_coordinate', 3)]) For completeness lets do the same thing again but with the nested serializer approach suggested above: class NestedCoordinateSerializer(serializers.Serializer): x = serializers.IntegerField(source='x_coordinate') y = serializers.IntegerField(source='y_coordinate') class DataPointSerializer(serializers.ModelSerializer): coordinates = NestedCoordinateSerializer(source='*') class Meta: model = DataPoint fields = ['label', 'coordinates'] Here the mapping between the target and source attribute pairs ( x and x_coordinate , y and y_coordinate ) is handled in the IntegerField declarations. It's our NestedCoordinateSerializer that takes source='*' . Our new DataPointSerializer exhibits the same behaviour as the custom field approach. Serializing: >>> out_serializer = DataPointSerializer(instance) >>> out_serializer.data ReturnDict([('label', 'testing'), ('coordinates', OrderedDict([('x', 1), ('y', 2)]))]) Deserializing: >>> in_serializer = DataPointSerializer(data=data) >>> in_serializer.is_valid() True >>> in_serializer.validated_data OrderedDict([('label', 'still testing'), ('x_coordinate', 3), ('y_coordinate', 4)]) But we also get the built-in validation for free: >>> invalid_data = { ... \"label\": \"still testing\", ... \"coordinates\": { ... \"x\": 'a', ... \"y\": 'b', ... } ... } >>> invalid_serializer = DataPointSerializer(data=invalid_data) >>> invalid_serializer.is_valid() False >>> invalid_serializer.errors ReturnDict([('coordinates', {'x': ['A valid integer is required.'], 'y': ['A valid integer is required.']})]) For this reason, the nested serializer approach would be the first to try. You would use the custom field approach when the nested serializer becomes infeasible or overly complex. Third party packages The following third party packages are also available. DRF Compound Fields The drf-compound-fields package provides \"compound\" serializer fields, such as lists of simple values, which can be described by other fields rather than serializers with the many=True option. Also provided are fields for typed dictionaries and values that can be either a specific type or a list of items of that type. DRF Extra Fields The drf-extra-fields package provides extra serializer fields for REST framework, including Base64ImageField and PointField classes. djangorestframework-recursive the djangorestframework-recursive package provides a RecursiveField for serializing and deserializing recursive structures django-rest-framework-gis The django-rest-framework-gis package provides geographic addons for django rest framework like a GeometryField field and a GeoJSON serializer. django-rest-framework-hstore The django-rest-framework-hstore package provides an HStoreField to support django-hstore DictionaryField model field.","title":"Serializer fields"},{"location":"api-guide/fields/#serializer-fields","text":"Each field in a Form class is responsible not only for validating data, but also for \"cleaning\" it \u2014 normalizing it to a consistent format. \u2014 Django documentation Serializer fields handle converting between primitive values and internal datatypes. They also deal with validating input values, as well as retrieving and setting the values from their parent objects. Note: The serializer fields are declared in fields.py , but by convention you should import them using from rest_framework import serializers and refer to fields as serializers.<FieldName> .","title":"Serializer fields"},{"location":"api-guide/fields/#core-arguments","text":"Each serializer field class constructor takes at least these arguments. Some Field classes take additional, field-specific arguments, but the following should always be accepted:","title":"Core arguments"},{"location":"api-guide/fields/#read_only","text":"Read-only fields are included in the API output, but should not be included in the input during create or update operations. Any 'read_only' fields that are incorrectly included in the serializer input will be ignored. Set this to True to ensure that the field is used when serializing a representation, but is not used when creating or updating an instance during deserialization. Defaults to False","title":"read_only"},{"location":"api-guide/fields/#write_only","text":"Set this to True to ensure that the field may be used when updating or creating an instance, but is not included when serializing the representation. Defaults to False","title":"write_only"},{"location":"api-guide/fields/#required","text":"Normally an error will be raised if a field is not supplied during deserialization. Set to false if this field is not required to be present during deserialization. Setting this to False also allows the object attribute or dictionary key to be omitted from output when serializing the instance. If the key is not present it will simply not be included in the output representation. Defaults to True .","title":"required"},{"location":"api-guide/fields/#default","text":"If set, this gives the default value that will be used for the field if no input value is supplied. If not set the default behaviour is to not populate the attribute at all. The default is not applied during partial update operations. In the partial update case only fields that are provided in the incoming data will have a validated value returned. May be set to a function or other callable, in which case the value will be evaluated each time it is used. When called, it will receive no arguments. If the callable has a requires_context = True attribute, then the serializer field will be passed as an argument. For example: class CurrentUserDefault: \"\"\" May be applied as a `default=...` value on a serializer field. Returns the current user. \"\"\" requires_context = True def __call__(self, serializer_field): return serializer_field.context['request'].user When serializing the instance, default will be used if the object attribute or dictionary key is not present in the instance. Note that setting a default value implies that the field is not required. Including both the default and required keyword arguments is invalid and will raise an error.","title":"default"},{"location":"api-guide/fields/#allow_null","text":"Normally an error will be raised if None is passed to a serializer field. Set this keyword argument to True if None should be considered a valid value. Note that, without an explicit default , setting this argument to True will imply a default value of null for serialization output, but does not imply a default for input deserialization. Defaults to False","title":"allow_null"},{"location":"api-guide/fields/#source","text":"The name of the attribute that will be used to populate the field. May be a method that only takes a self argument, such as URLField(source='get_absolute_url') , or may use dotted notation to traverse attributes, such as EmailField(source='user.email') . When serializing fields with dotted notation, it may be necessary to provide a default value if any object is not present or is empty during attribute traversal. The value source='*' has a special meaning, and is used to indicate that the entire object should be passed through to the field. This can be useful for creating nested representations, or for fields which require access to the complete object in order to determine the output representation. Defaults to the name of the field.","title":"source"},{"location":"api-guide/fields/#validators","text":"A list of validator functions which should be applied to the incoming field input, and which either raise a validation error or simply return. Validator functions should typically raise serializers.ValidationError , but Django's built-in ValidationError is also supported for compatibility with validators defined in the Django codebase or third party Django packages.","title":"validators"},{"location":"api-guide/fields/#error_messages","text":"A dictionary of error codes to error messages.","title":"error_messages"},{"location":"api-guide/fields/#label","text":"A short text string that may be used as the name of the field in HTML form fields or other descriptive elements.","title":"label"},{"location":"api-guide/fields/#help_text","text":"A text string that may be used as a description of the field in HTML form fields or other descriptive elements.","title":"help_text"},{"location":"api-guide/fields/#initial","text":"A value that should be used for pre-populating the value of HTML form fields. You may pass a callable to it, just as you may do with any regular Django Field : import datetime from rest_framework import serializers class ExampleSerializer(serializers.Serializer): day = serializers.DateField(initial=datetime.date.today)","title":"initial"},{"location":"api-guide/fields/#style","text":"A dictionary of key-value pairs that can be used to control how renderers should render the field. Two examples here are 'input_type' and 'base_template' : # Use <input type=\"password\"> for the input. password = serializers.CharField( style={'input_type': 'password'} ) # Use a radio input instead of a select input. color_channel = serializers.ChoiceField( choices=['red', 'green', 'blue'], style={'base_template': 'radio.html'} ) For more details see the HTML & Forms documentation.","title":"style"},{"location":"api-guide/fields/#boolean-fields","text":"","title":"Boolean fields"},{"location":"api-guide/fields/#booleanfield","text":"A boolean representation. When using HTML encoded form input be aware that omitting a value will always be treated as setting a field to False , even if it has a default=True option specified. This is because HTML checkbox inputs represent the unchecked state by omitting the value, so REST framework treats omission as if it is an empty checkbox input. Note that Django 2.1 removed the blank kwarg from models.BooleanField . Prior to Django 2.1 models.BooleanField fields were always blank=True . Thus since Django 2.1 default serializers.BooleanField instances will be generated without the required kwarg (i.e. equivalent to required=True ) whereas with previous versions of Django, default BooleanField instances will be generated with a required=False option. If you want to control this behaviour manually, explicitly declare the BooleanField on the serializer class, or use the extra_kwargs option to set the required flag. Corresponds to django.db.models.fields.BooleanField . Signature: BooleanField()","title":"BooleanField"},{"location":"api-guide/fields/#nullbooleanfield","text":"A boolean representation that also accepts None as a valid value. Corresponds to django.db.models.fields.NullBooleanField . Signature: NullBooleanField()","title":"NullBooleanField"},{"location":"api-guide/fields/#string-fields","text":"","title":"String fields"},{"location":"api-guide/fields/#charfield","text":"A text representation. Optionally validates the text to be shorter than max_length and longer than min_length . Corresponds to django.db.models.fields.CharField or django.db.models.fields.TextField . Signature: CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True) max_length - Validates that the input contains no more than this number of characters. min_length - Validates that the input contains no fewer than this number of characters. allow_blank - If set to True then the empty string should be considered a valid value. If set to False then the empty string is considered invalid and will raise a validation error. Defaults to False . trim_whitespace - If set to True then leading and trailing whitespace is trimmed. Defaults to True . The allow_null option is also available for string fields, although its usage is discouraged in favor of allow_blank . It is valid to set both allow_blank=True and allow_null=True , but doing so means that there will be two differing types of empty value permissible for string representations, which can lead to data inconsistencies and subtle application bugs.","title":"CharField"},{"location":"api-guide/fields/#emailfield","text":"A text representation, validates the text to be a valid e-mail address. Corresponds to django.db.models.fields.EmailField Signature: EmailField(max_length=None, min_length=None, allow_blank=False)","title":"EmailField"},{"location":"api-guide/fields/#regexfield","text":"A text representation, that validates the given value matches against a certain regular expression. Corresponds to django.forms.fields.RegexField . Signature: RegexField(regex, max_length=None, min_length=None, allow_blank=False) The mandatory regex argument may either be a string, or a compiled python regular expression object. Uses Django's django.core.validators.RegexValidator for validation.","title":"RegexField"},{"location":"api-guide/fields/#slugfield","text":"A RegexField that validates the input against the pattern [a-zA-Z0-9_-]+ . Corresponds to django.db.models.fields.SlugField . Signature: SlugField(max_length=50, min_length=None, allow_blank=False)","title":"SlugField"},{"location":"api-guide/fields/#urlfield","text":"A RegexField that validates the input against a URL matching pattern. Expects fully qualified URLs of the form http://<host>/<path> . Corresponds to django.db.models.fields.URLField . Uses Django's django.core.validators.URLValidator for validation. Signature: URLField(max_length=200, min_length=None, allow_blank=False)","title":"URLField"},{"location":"api-guide/fields/#uuidfield","text":"A field that ensures the input is a valid UUID string. The to_internal_value method will return a uuid.UUID instance. On output the field will return a string in the canonical hyphenated format, for example: \"de305d54-75b4-431b-adb2-eb6b9e546013\" Signature: UUIDField(format='hex_verbose') format : Determines the representation format of the uuid value 'hex_verbose' - The canonical hex representation, including hyphens: \"5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" 'hex' - The compact hex representation of the UUID, not including hyphens: \"5ce0e9a55ffa654bcee01238041fb31a\" 'int' - A 128 bit integer representation of the UUID: \"123456789012312313134124512351145145114\" 'urn' - RFC 4122 URN representation of the UUID: \"urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" Changing the format parameters only affects representation values. All formats are accepted by to_internal_value","title":"UUIDField"},{"location":"api-guide/fields/#filepathfield","text":"A field whose choices are limited to the filenames in a certain directory on the filesystem Corresponds to django.forms.fields.FilePathField . Signature: FilePathField(path, match=None, recursive=False, allow_files=True, allow_folders=False, required=None, **kwargs) path - The absolute filesystem path to a directory from which this FilePathField should get its choice. match - A regular expression, as a string, that FilePathField will use to filter filenames. recursive - Specifies whether all subdirectories of path should be included. Default is False . allow_files - Specifies whether files in the specified location should be included. Default is True . Either this or allow_folders must be True . allow_folders - Specifies whether folders in the specified location should be included. Default is False . Either this or allow_files must be True .","title":"FilePathField"},{"location":"api-guide/fields/#ipaddressfield","text":"A field that ensures the input is a valid IPv4 or IPv6 string. Corresponds to django.forms.fields.IPAddressField and django.forms.fields.GenericIPAddressField . Signature : IPAddressField(protocol='both', unpack_ipv4=False, **options) protocol Limits valid inputs to the specified protocol. Accepted values are 'both' (default), 'IPv4' or 'IPv6'. Matching is case insensitive. unpack_ipv4 Unpacks IPv4 mapped addresses like ::ffff:192.0.2.1. If this option is enabled that address would be unpacked to 192.0.2.1. Default is disabled. Can only be used when protocol is set to 'both'.","title":"IPAddressField"},{"location":"api-guide/fields/#numeric-fields","text":"","title":"Numeric fields"},{"location":"api-guide/fields/#integerfield","text":"An integer representation. Corresponds to django.db.models.fields.IntegerField , django.db.models.fields.SmallIntegerField , django.db.models.fields.PositiveIntegerField and django.db.models.fields.PositiveSmallIntegerField . Signature : IntegerField(max_value=None, min_value=None) max_value Validate that the number provided is no greater than this value. min_value Validate that the number provided is no less than this value.","title":"IntegerField"},{"location":"api-guide/fields/#floatfield","text":"A floating point representation. Corresponds to django.db.models.fields.FloatField . Signature : FloatField(max_value=None, min_value=None) max_value Validate that the number provided is no greater than this value. min_value Validate that the number provided is no less than this value.","title":"FloatField"},{"location":"api-guide/fields/#decimalfield","text":"A decimal representation, represented in Python by a Decimal instance. Corresponds to django.db.models.fields.DecimalField . Signature : DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None) max_digits The maximum number of digits allowed in the number. It must be either None or an integer greater than or equal to decimal_places . decimal_places The number of decimal places to store with the number. coerce_to_string Set to True if string values should be returned for the representation, or False if Decimal objects should be returned. Defaults to the same value as the COERCE_DECIMAL_TO_STRING settings key, which will be True unless overridden. If Decimal objects are returned by the serializer, then the final output format will be determined by the renderer. Note that setting localize will force the value to True . max_value Validate that the number provided is no greater than this value. min_value Validate that the number provided is no less than this value. localize Set to True to enable localization of input and output based on the current locale. This will also force coerce_to_string to True . Defaults to False . Note that data formatting is enabled if you have set USE_L10N=True in your settings file. rounding Sets the rounding mode used when quantising to the configured precision. Valid values are decimal module rounding modes . Defaults to None .","title":"DecimalField"},{"location":"api-guide/fields/#example-usage","text":"To validate numbers up to 999 with a resolution of 2 decimal places, you would use: serializers.DecimalField(max_digits=5, decimal_places=2) And to validate numbers up to anything less than one billion with a resolution of 10 decimal places: serializers.DecimalField(max_digits=19, decimal_places=10) This field also takes an optional argument, coerce_to_string . If set to True the representation will be output as a string. If set to False the representation will be left as a Decimal instance and the final representation will be determined by the renderer. If unset, this will default to the same value as the COERCE_DECIMAL_TO_STRING setting, which is True unless set otherwise.","title":"Example usage"},{"location":"api-guide/fields/#date-and-time-fields","text":"","title":"Date and time fields"},{"location":"api-guide/fields/#datetimefield","text":"A date and time representation. Corresponds to django.db.models.fields.DateTimeField . Signature: DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None, default_timezone=None) format - A string representing the output format. If not specified, this defaults to the same value as the DATETIME_FORMAT settings key, which will be 'iso-8601' unless set. Setting to a format string indicates that to_representation return values should be coerced to string output. Format strings are described below. Setting this value to None indicates that Python datetime objects should be returned by to_representation . In this case the datetime encoding will be determined by the renderer. input_formats - A list of strings representing the input formats which may be used to parse the date. If not specified, the DATETIME_INPUT_FORMATS setting will be used, which defaults to ['iso-8601'] . default_timezone - A pytz.timezone representing the timezone. If not specified and the USE_TZ setting is enabled, this defaults to the current timezone . If USE_TZ is disabled, then datetime objects will be naive.","title":"DateTimeField"},{"location":"api-guide/fields/#datetimefield-format-strings","text":"Format strings may either be Python strftime formats which explicitly specify the format, or the special string 'iso-8601' , which indicates that ISO 8601 style datetimes should be used. (eg '2013-01-29T12:34:56.000000Z' ) When a value of None is used for the format datetime objects will be returned by to_representation and the final output representation will determined by the renderer class.","title":"DateTimeField format strings."},{"location":"api-guide/fields/#auto_now-and-auto_now_add-model-fields","text":"When using ModelSerializer or HyperlinkedModelSerializer , note that any model fields with auto_now=True or auto_now_add=True will use serializer fields that are read_only=True by default. If you want to override this behavior, you'll need to declare the DateTimeField explicitly on the serializer. For example: class CommentSerializer(serializers.ModelSerializer): created = serializers.DateTimeField() class Meta: model = Comment","title":"auto_now and auto_now_add model fields."},{"location":"api-guide/fields/#datefield","text":"A date representation. Corresponds to django.db.models.fields.DateField Signature: DateField(format=api_settings.DATE_FORMAT, input_formats=None) format - A string representing the output format. If not specified, this defaults to the same value as the DATE_FORMAT settings key, which will be 'iso-8601' unless set. Setting to a format string indicates that to_representation return values should be coerced to string output. Format strings are described below. Setting this value to None indicates that Python date objects should be returned by to_representation . In this case the date encoding will be determined by the renderer. input_formats - A list of strings representing the input formats which may be used to parse the date. If not specified, the DATE_INPUT_FORMATS setting will be used, which defaults to ['iso-8601'] .","title":"DateField"},{"location":"api-guide/fields/#datefield-format-strings","text":"Format strings may either be Python strftime formats which explicitly specify the format, or the special string 'iso-8601' , which indicates that ISO 8601 style dates should be used. (eg '2013-01-29' )","title":"DateField format strings"},{"location":"api-guide/fields/#timefield","text":"A time representation. Corresponds to django.db.models.fields.TimeField Signature: TimeField(format=api_settings.TIME_FORMAT, input_formats=None) format - A string representing the output format. If not specified, this defaults to the same value as the TIME_FORMAT settings key, which will be 'iso-8601' unless set. Setting to a format string indicates that to_representation return values should be coerced to string output. Format strings are described below. Setting this value to None indicates that Python time objects should be returned by to_representation . In this case the time encoding will be determined by the renderer. input_formats - A list of strings representing the input formats which may be used to parse the date. If not specified, the TIME_INPUT_FORMATS setting will be used, which defaults to ['iso-8601'] .","title":"TimeField"},{"location":"api-guide/fields/#timefield-format-strings","text":"Format strings may either be Python strftime formats which explicitly specify the format, or the special string 'iso-8601' , which indicates that ISO 8601 style times should be used. (eg '12:34:56.000000' )","title":"TimeField format strings"},{"location":"api-guide/fields/#durationfield","text":"A Duration representation. Corresponds to django.db.models.fields.DurationField The validated_data for these fields will contain a datetime.timedelta instance. The representation is a string following this format '[DD] [HH:[MM:]]ss[.uuuuuu]' . Signature: DurationField(max_value=None, min_value=None) max_value Validate that the duration provided is no greater than this value. min_value Validate that the duration provided is no less than this value.","title":"DurationField"},{"location":"api-guide/fields/#choice-selection-fields","text":"","title":"Choice selection fields"},{"location":"api-guide/fields/#choicefield","text":"A field that can accept a value out of a limited set of choices. Used by ModelSerializer to automatically generate fields if the corresponding model field includes a choices=\u2026 argument. Signature: ChoiceField(choices) choices - A list of valid values, or a list of (key, display_name) tuples. allow_blank - If set to True then the empty string should be considered a valid value. If set to False then the empty string is considered invalid and will raise a validation error. Defaults to False . html_cutoff - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Can be used to ensure that automatically generated ChoiceFields with very large possible selections do not prevent a template from rendering. Defaults to None . html_cutoff_text - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to \"More than {count} items\u2026\" Both the allow_blank and allow_null are valid options on ChoiceField , although it is highly recommended that you only use one and not both. allow_blank should be preferred for textual choices, and allow_null should be preferred for numeric or other non-textual choices.","title":"ChoiceField"},{"location":"api-guide/fields/#multiplechoicefield","text":"A field that can accept a set of zero, one or many values, chosen from a limited set of choices. Takes a single mandatory argument. to_internal_value returns a set containing the selected values. Signature: MultipleChoiceField(choices) choices - A list of valid values, or a list of (key, display_name) tuples. allow_blank - If set to True then the empty string should be considered a valid value. If set to False then the empty string is considered invalid and will raise a validation error. Defaults to False . html_cutoff - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Can be used to ensure that automatically generated ChoiceFields with very large possible selections do not prevent a template from rendering. Defaults to None . html_cutoff_text - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to \"More than {count} items\u2026\" As with ChoiceField , both the allow_blank and allow_null options are valid, although it is highly recommended that you only use one and not both. allow_blank should be preferred for textual choices, and allow_null should be preferred for numeric or other non-textual choices.","title":"MultipleChoiceField"},{"location":"api-guide/fields/#file-upload-fields","text":"","title":"File upload fields"},{"location":"api-guide/fields/#parsers-and-file-uploads","text":"The FileField and ImageField classes are only suitable for use with MultiPartParser or FileUploadParser . Most parsers, such as e.g. JSON don't support file uploads. Django's regular FILE_UPLOAD_HANDLERS are used for handling uploaded files.","title":"Parsers and file uploads."},{"location":"api-guide/fields/#filefield","text":"A file representation. Performs Django's standard FileField validation. Corresponds to django.forms.fields.FileField . Signature: FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL) max_length - Designates the maximum length for the file name. allow_empty_file - Designates if empty files are allowed. use_url - If set to True then URL string values will be used for the output representation. If set to False then filename string values will be used for the output representation. Defaults to the value of the UPLOADED_FILES_USE_URL settings key, which is True unless set otherwise.","title":"FileField"},{"location":"api-guide/fields/#imagefield","text":"An image representation. Validates the uploaded file content as matching a known image format. Corresponds to django.forms.fields.ImageField . Signature: ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL) max_length - Designates the maximum length for the file name. allow_empty_file - Designates if empty files are allowed. use_url - If set to True then URL string values will be used for the output representation. If set to False then filename string values will be used for the output representation. Defaults to the value of the UPLOADED_FILES_USE_URL settings key, which is True unless set otherwise. Requires either the Pillow package or PIL package. The Pillow package is recommended, as PIL is no longer actively maintained.","title":"ImageField"},{"location":"api-guide/fields/#composite-fields","text":"","title":"Composite fields"},{"location":"api-guide/fields/#listfield","text":"A field class that validates a list of objects. Signature : ListField(child=<A_FIELD_INSTANCE>, allow_empty=True, min_length=None, max_length=None) child - A field instance that should be used for validating the objects in the list. If this argument is not provided then objects in the list will not be validated. allow_empty - Designates if empty lists are allowed. min_length - Validates that the list contains no fewer than this number of elements. max_length - Validates that the list contains no more than this number of elements. For example, to validate a list of integers you might use something like the following: scores = serializers.ListField( child=serializers.IntegerField(min_value=0, max_value=100) ) The ListField class also supports a declarative style that allows you to write reusable list field classes. class StringListField(serializers.ListField): child = serializers.CharField() We can now reuse our custom StringListField class throughout our application, without having to provide a child argument to it.","title":"ListField"},{"location":"api-guide/fields/#dictfield","text":"A field class that validates a dictionary of objects. The keys in DictField are always assumed to be string values. Signature : DictField(child=<A_FIELD_INSTANCE>, allow_empty=True) child - A field instance that should be used for validating the values in the dictionary. If this argument is not provided then values in the mapping will not be validated. allow_empty - Designates if empty dictionaries are allowed. For example, to create a field that validates a mapping of strings to strings, you would write something like this: document = DictField(child=CharField()) You can also use the declarative style, as with ListField . For example: class DocumentField(DictField): child = CharField()","title":"DictField"},{"location":"api-guide/fields/#hstorefield","text":"A preconfigured DictField that is compatible with Django's postgres HStoreField . Signature : HStoreField(child=<A_FIELD_INSTANCE>, allow_empty=True) child - A field instance that is used for validating the values in the dictionary. The default child field accepts both empty strings and null values. allow_empty - Designates if empty dictionaries are allowed. Note that the child field must be an instance of CharField , as the hstore extension stores values as strings.","title":"HStoreField"},{"location":"api-guide/fields/#jsonfield","text":"A field class that validates that the incoming data structure consists of valid JSON primitives. In its alternate binary mode, it will represent and validate JSON-encoded binary strings. Signature : JSONField(binary, encoder) binary - If set to True then the field will output and validate a JSON encoded string, rather than a primitive data structure. Defaults to False . encoder - Use this JSON encoder to serialize input object. Defaults to None .","title":"JSONField"},{"location":"api-guide/fields/#miscellaneous-fields","text":"","title":"Miscellaneous fields"},{"location":"api-guide/fields/#readonlyfield","text":"A field class that simply returns the value of the field without modification. This field is used by default with ModelSerializer when including field names that relate to an attribute rather than a model field. Signature : ReadOnlyField() For example, if has_expired was a property on the Account model, then the following serializer would automatically generate it as a ReadOnlyField : class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ['id', 'account_name', 'has_expired']","title":"ReadOnlyField"},{"location":"api-guide/fields/#hiddenfield","text":"A field class that does not take a value based on user input, but instead takes its value from a default value or callable. Signature : HiddenField() For example, to include a field that always provides the current time as part of the serializer validated data, you would use the following: modified = serializers.HiddenField(default=timezone.now) The HiddenField class is usually only needed if you have some validation that needs to run based on some pre-provided field values, but you do not want to expose all of those fields to the end user. For further examples on HiddenField see the validators documentation.","title":"HiddenField"},{"location":"api-guide/fields/#modelfield","text":"A generic field that can be tied to any arbitrary model field. The ModelField class delegates the task of serialization/deserialization to its associated model field. This field can be used to create serializer fields for custom model fields, without having to create a new custom serializer field. This field is used by ModelSerializer to correspond to custom model field classes. Signature: ModelField(model_field=<Django ModelField instance>) The ModelField class is generally intended for internal use, but can be used by your API if needed. In order to properly instantiate a ModelField , it must be passed a field that is attached to an instantiated model. For example: ModelField(model_field=MyModel()._meta.get_field('custom_field'))","title":"ModelField"},{"location":"api-guide/fields/#serializermethodfield","text":"This is a read-only field. It gets its value by calling a method on the serializer class it is attached to. It can be used to add any sort of data to the serialized representation of your object. Signature : SerializerMethodField(method_name=None) method_name - The name of the method on the serializer to be called. If not included this defaults to get_<field_name> . The serializer method referred to by the method_name argument should accept a single argument (in addition to self ), which is the object being serialized. It should return whatever you want to be included in the serialized representation of the object. For example: from django.contrib.auth.models import User from django.utils.timezone import now from rest_framework import serializers class UserSerializer(serializers.ModelSerializer): days_since_joined = serializers.SerializerMethodField() class Meta: model = User def get_days_since_joined(self, obj): return (now() - obj.date_joined).days","title":"SerializerMethodField"},{"location":"api-guide/fields/#custom-fields","text":"If you want to create a custom field, you'll need to subclass Field and then override either one or both of the .to_representation() and .to_internal_value() methods. These two methods are used to convert between the initial datatype, and a primitive, serializable datatype. Primitive datatypes will typically be any of a number, string, boolean, date / time / datetime or None . They may also be any list or dictionary like object that only contains other primitive objects. Other types might be supported, depending on the renderer that you are using. The .to_representation() method is called to convert the initial datatype into a primitive, serializable datatype. The to_internal_value() method is called to restore a primitive datatype into its internal python representation. This method should raise a serializers.ValidationError if the data is invalid.","title":"Custom fields"},{"location":"api-guide/fields/#examples","text":"","title":"Examples"},{"location":"api-guide/fields/#a-basic-custom-field","text":"Let's look at an example of serializing a class that represents an RGB color value: class Color: \"\"\" A color represented in the RGB colorspace. \"\"\" def __init__(self, red, green, blue): assert(red >= 0 and green >= 0 and blue >= 0) assert(red < 256 and green < 256 and blue < 256) self.red, self.green, self.blue = red, green, blue class ColorField(serializers.Field): \"\"\" Color objects are serialized into 'rgb(#, #, #)' notation. \"\"\" def to_representation(self, value): return \"rgb(%d, %d, %d)\" % (value.red, value.green, value.blue) def to_internal_value(self, data): data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] return Color(red, green, blue) By default field values are treated as mapping to an attribute on the object. If you need to customize how the field value is accessed and set you need to override .get_attribute() and/or .get_value() . As an example, let's create a field that can be used to represent the class name of the object being serialized: class ClassNameField(serializers.Field): def get_attribute(self, instance): # We pass the object instance onto `to_representation`, # not just the field attribute. return instance def to_representation(self, value): \"\"\" Serialize the value's class name. \"\"\" return value.__class__.__name__","title":"A Basic Custom Field"},{"location":"api-guide/fields/#raising-validation-errors","text":"Our ColorField class above currently does not perform any data validation. To indicate invalid data, we should raise a serializers.ValidationError , like so: def to_internal_value(self, data): if not isinstance(data, str): msg = 'Incorrect type. Expected a string, but got %s' raise ValidationError(msg % type(data).__name__) if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data): raise ValidationError('Incorrect format. Expected `rgb(#,#,#)`.') data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] if any([col > 255 or col < 0 for col in (red, green, blue)]): raise ValidationError('Value out of range. Must be between 0 and 255.') return Color(red, green, blue) The .fail() method is a shortcut for raising ValidationError that takes a message string from the error_messages dictionary. For example: default_error_messages = { 'incorrect_type': 'Incorrect type. Expected a string, but got {input_type}', 'incorrect_format': 'Incorrect format. Expected `rgb(#,#,#)`.', 'out_of_range': 'Value out of range. Must be between 0 and 255.' } def to_internal_value(self, data): if not isinstance(data, str): self.fail('incorrect_type', input_type=type(data).__name__) if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data): self.fail('incorrect_format') data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] if any([col > 255 or col < 0 for col in (red, green, blue)]): self.fail('out_of_range') return Color(red, green, blue) This style keeps your error messages cleaner and more separated from your code, and should be preferred.","title":"Raising validation errors"},{"location":"api-guide/fields/#using-source","text":"Here we'll take an example of a flat DataPoint model with x_coordinate and y_coordinate attributes. class DataPoint(models.Model): label = models.CharField(max_length=50) x_coordinate = models.SmallIntegerField() y_coordinate = models.SmallIntegerField() Using a custom field and source='*' we can provide a nested representation of the coordinate pair: class CoordinateField(serializers.Field): def to_representation(self, value): ret = { \"x\": value.x_coordinate, \"y\": value.y_coordinate } return ret def to_internal_value(self, data): ret = { \"x_coordinate\": data[\"x\"], \"y_coordinate\": data[\"y\"], } return ret class DataPointSerializer(serializers.ModelSerializer): coordinates = CoordinateField(source='*') class Meta: model = DataPoint fields = ['label', 'coordinates'] Note that this example doesn't handle validation. Partly for that reason, in a real project, the coordinate nesting might be better handled with a nested serializer using source='*' , with two IntegerField instances, each with their own source pointing to the relevant field. The key points from the example, though, are: to_representation is passed the entire DataPoint object and must map from that to the desired output. >>> instance = DataPoint(label='Example', x_coordinate=1, y_coordinate=2) >>> out_serializer = DataPointSerializer(instance) >>> out_serializer.data ReturnDict([('label', 'Example'), ('coordinates', {'x': 1, 'y': 2})]) Unless our field is to be read-only, to_internal_value must map back to a dict suitable for updating our target object. With source='*' , the return from to_internal_value will update the root validated data dictionary, rather than a single key. >>> data = { ... \"label\": \"Second Example\", ... \"coordinates\": { ... \"x\": 3, ... \"y\": 4, ... } ... } >>> in_serializer = DataPointSerializer(data=data) >>> in_serializer.is_valid() True >>> in_serializer.validated_data OrderedDict([('label', 'Second Example'), ('y_coordinate', 4), ('x_coordinate', 3)]) For completeness lets do the same thing again but with the nested serializer approach suggested above: class NestedCoordinateSerializer(serializers.Serializer): x = serializers.IntegerField(source='x_coordinate') y = serializers.IntegerField(source='y_coordinate') class DataPointSerializer(serializers.ModelSerializer): coordinates = NestedCoordinateSerializer(source='*') class Meta: model = DataPoint fields = ['label', 'coordinates'] Here the mapping between the target and source attribute pairs ( x and x_coordinate , y and y_coordinate ) is handled in the IntegerField declarations. It's our NestedCoordinateSerializer that takes source='*' . Our new DataPointSerializer exhibits the same behaviour as the custom field approach. Serializing: >>> out_serializer = DataPointSerializer(instance) >>> out_serializer.data ReturnDict([('label', 'testing'), ('coordinates', OrderedDict([('x', 1), ('y', 2)]))]) Deserializing: >>> in_serializer = DataPointSerializer(data=data) >>> in_serializer.is_valid() True >>> in_serializer.validated_data OrderedDict([('label', 'still testing'), ('x_coordinate', 3), ('y_coordinate', 4)]) But we also get the built-in validation for free: >>> invalid_data = { ... \"label\": \"still testing\", ... \"coordinates\": { ... \"x\": 'a', ... \"y\": 'b', ... } ... } >>> invalid_serializer = DataPointSerializer(data=invalid_data) >>> invalid_serializer.is_valid() False >>> invalid_serializer.errors ReturnDict([('coordinates', {'x': ['A valid integer is required.'], 'y': ['A valid integer is required.']})]) For this reason, the nested serializer approach would be the first to try. You would use the custom field approach when the nested serializer becomes infeasible or overly complex.","title":"Using source='*'"},{"location":"api-guide/fields/#third-party-packages","text":"The following third party packages are also available.","title":"Third party packages"},{"location":"api-guide/fields/#drf-compound-fields","text":"The drf-compound-fields package provides \"compound\" serializer fields, such as lists of simple values, which can be described by other fields rather than serializers with the many=True option. Also provided are fields for typed dictionaries and values that can be either a specific type or a list of items of that type.","title":"DRF Compound Fields"},{"location":"api-guide/fields/#drf-extra-fields","text":"The drf-extra-fields package provides extra serializer fields for REST framework, including Base64ImageField and PointField classes.","title":"DRF Extra Fields"},{"location":"api-guide/fields/#djangorestframework-recursive","text":"the djangorestframework-recursive package provides a RecursiveField for serializing and deserializing recursive structures","title":"djangorestframework-recursive"},{"location":"api-guide/fields/#django-rest-framework-gis","text":"The django-rest-framework-gis package provides geographic addons for django rest framework like a GeometryField field and a GeoJSON serializer.","title":"django-rest-framework-gis"},{"location":"api-guide/fields/#django-rest-framework-hstore","text":"The django-rest-framework-hstore package provides an HStoreField to support django-hstore DictionaryField model field.","title":"django-rest-framework-hstore"},{"location":"api-guide/fields_zh/","text":"\u6e90\u6587\u4ef6\uff1a - fields.py \u5e8f\u5217\u5316\u5b57\u6bb5 \u6bcf\u4e00\u4e2aForm\u7c7b\u7684\u5b57\u6bb5\u4e0d\u4ec5\u8d1f\u8d23\u9a8c\u8bc1\u6570\u636e\uff0c\u540c\u6837\u9700\u8981\u201c\u6e05\u7406\u201d\u6570\u636e \u2014 \u6807\u51c6\u5316\u4e3a\u7edf\u4e00\u7684\u683c\u5f0f\u3002 \u2014 Django documentation \u5e8f\u5217\u5316\u5b57\u6bb5\u8d1f\u8d23\u5728\u539f\u59cb\u6570\u636e\u548c\u5185\u90e8\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u8f6c\u6362\u3002\u5b83\u4eec\u540c\u6837\u8d1f\u8d23\u6821\u9a8c\u8f93\u5165\u7684\u503c\uff0c\u4ee5\u53ca\u4ece\u7236\u7ea7\u5bf9\u8c61\u67e5\u8be2\u548c\u8bbe\u7f6e\u503c\u3002 NOTE: \u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u5728 fields.py \u4e2d\u5b9a\u4e49\uff0c\u4f46\u662f\u6839\u636e\u60ef\u4f8b\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 from rest_framework import serializers \u7136\u540e\u4f7f\u7528 serializers.<FieldName> \u6765\u5f15\u7528\u5b83\u4eec\u3002 \u6838\u5fc3\u53c2\u6570 \u6bcf\u4e00\u4e2a\u5e8f\u5217\u5316\u5b57\u6bb5\u7c7b\u7684\u6784\u9020\u51fd\u6570\u90fd\u81f3\u5c11\u63a5\u6536\u8fd9\u4e9b\u53c2\u6570\u3002\u4e00\u4e0b\u5b57\u6bb5\u7c7b\u63a5\u53e3\u989d\u5916\u7684\uff0c\u7279\u5b9a\u5b57\u6bb5\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u4f46\u662f\u4e0b\u9762\u8fd9\u4e9b\u53c2\u6570\u662f\u4e00\u5b9a\u4f1a\u63a5\u6536\u7684\u3002 read_only \u53ea\u8bfb\u5b57\u6bb5\u53ea\u80fd\u5305\u542b\u5728API\u7684\u8f93\u51fa\u4e2d\uff0c\u4f46\u662f\u4e0d\u5e94\u8be5\u5305\u542b\u5728\u521b\u5efa\u6216\u8005\u66f4\u65b0\u7684\u64cd\u4f5c\u3002\u4efb\u4f55\u9519\u8bef\u7684\u5305\u542b\u5728\u5e8f\u5217\u5316\u8f93\u5165\u7684\u53ea\u8bfb\u5b57\u6bb5\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002 \u5c06\u5176\u8bbe\u7f6e\u4e3a True \u786e\u4fdd\u5e8f\u5217\u5316\u65f6\u4f7f\u7528\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u4f46\u662f\u521b\u5efa\u6216\u8005\u66f4\u65b0\u7684\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c\u65f6\u4e0d\u4f1a\u4f7f\u7528\u3002 \u9ed8\u8ba4\u662f False Write_only \u5c06\u5176\u8bbe\u7f6e\u4e3a True \u786e\u4fdd\u5728\u521b\u5efa\u6216\u8005\u66f4\u65b0\u7684\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c\u65f6\u4f7f\u7528\uff0c\u4f46\u662f\u5e8f\u5217\u5316\u65f6\u4e0d\u9002\u7528\u8fd9\u4e2a\u5b57\u6bb5\u3002 required \u5982\u679c\u5728\u53cd\u5e8f\u5217\u5316\u65f6\u5019\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u901a\u5e38\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002\u5982\u679c\u5728\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c\u4e2d\u4e0d\u9700\u8981\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a False \u3002 \u5c06\u5176\u8bbe\u7f6e\u4e3a False \u540c\u6837\u5141\u8bb8\u5728\u5e8f\u5217\u5316\u5b9e\u4f8b\u65f6\u5ffd\u7565\u5bf9\u8c61\u5c5e\u6027\u6216\u8005\u5b57\u6bb5\u7684\u952e\u3002\u5982\u679c\u8fd9\u4e2a\u952e\u4e0d\u5b58\u5728\uff0c\u5219\u8be5\u952e\u6839\u672c\u4e0d\u4f1a\u51fa\u73b0\u5728\u8f93\u51fa\u4e2d\u3002 \u9ed8\u8ba4\u662f True default \u5982\u679c\u8bbe\u7f6e\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u63d0\u4f9b\u7684\u9ed8\u8ba4\u503c\u4f1a\u5728\u8fd9\u4e2a\u5b57\u6bb5\u6ca1\u6709\u63d0\u4f9b\u8f93\u5165\u503c\u7684\u65f6\u5019\u4f7f\u7528\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e0d\u586b\u5145\u8fd9\u4e2a\u5c5e\u6027\u3002 \u90e8\u5206\u66f4\u65b0\u64cd\u4f5c\u4e0d\u4f1a\u63a5\u53d7 default \u7684\u503c\uff0c\u90e8\u5206\u66f4\u65b0\u60c5\u51b5\u4e0b\uff0c\u4ec5\u8fd4\u56de\u8f93\u5165\u6570\u636e\u4e2d\u63d0\u4f9b\u5b57\u6bb5\u6821\u9a8c\u540e\u7684\u503c\u3002 \u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u51fd\u6570\u6216\u5176\u4ed6\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u4f7f\u7528\u8be5\u503c\u90fd\u4f1a\u5bf9\u5176\u8bc4\u4f30\u3002\u88ab\u8c03\u7528\u65f6\u4e0d\u63a5\u53d7\u53c2\u6570\uff0c\u5982\u679c\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\u6709 requires_context = True \u5c5e\u6027\uff0c\u5219\u5e8f\u5217\u5316\u5b57\u6bb5\u5c06\u4f5c\u4e3a\u53c2\u6570\u4f20\u8fdb\u53ef\u8c03\u7528\u5bf9\u8c61\u4e2d\u3002 \u4f8b\u5982\uff1a class CurrentUserDefault: \"\"\" \u53ef\u4ee5\u4f5c\u4e3a\u5e8f\u5217\u5316\u5b57\u6bb5\u53c2\u6570`default=...`\u7684\u503c\u3002 \u8fd4\u56de\u5f53\u524d\u7528\u6237 \"\"\" requires_context = True def __call__(self, serializer_field): return serializer_field.context['request'].user \u5f53\u5e8f\u5217\u5316\u5b9e\u4f8b\u65f6\uff0c\u5982\u679c\u5b9e\u4f8b\u6216\u8005\u5b57\u5178\u6ca1\u6709\u5bf9\u5e94\u7684\u5c5e\u6027\u6216\u952e\uff0c\u4f1a\u8fd4\u56de\u9ed8\u8ba4\u503c\u3002 \u8bb0\u4f4f\u8bbe\u7f6e\u5b57\u6bb5\u7684 default \u503c\uff0c\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u6bb5\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u540c\u65f6\u5305\u542b default \u548c required \u5173\u952e\u5b57\u53c2\u6570\u90fd\u662f\u65e0\u6548\u7684\uff0c\u5e76\u4e14\u4f1a\u5f15\u53d1\u9519\u8bef\u3002 allow_null \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5411\u5e8f\u5217\u5316\u5b57\u6bb5\u4f20\u9012 None \u662f\u4f1a\u629b\u51fa\u5f02\u5e38\u7684\u3002\u5982\u679c None \u53ef\u4ee5\u4f5c\u4e3a\u503c\uff0c\u5c06\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a True \u9ed8\u8ba4\u662f False source \u7528\u4e8e\u586b\u5145\u8fd9\u4e2a\u5b57\u6bb5\u7684\u5c5e\u6027\u540d\u79f0\u3002\u53ef\u4ee5\u662f\u4e00\u4e2a\u4ec5\u63a5\u53d7 self \u53c2\u6570\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 URLField(source='get_absolute_url') \uff0c\u6216\u8005\u4f7f\u7528\u70b9\u5206\u7b26\u904d\u5386\u5c5e\u6027\uff0c\u4f8b\u5982 EmailField(source='user.email') \u3002\u5f53\u4f7f\u7528\u70b9\u5206\u7b26\u5e8f\u5217\u5316\u5b57\u6bb5\u65f6\uff0c\u5982\u679c\u5728\u5c5e\u6027\u904d\u5386\u671f\u95f4\u4e0d\u5b58\u5728\u4efb\u4f55\u5bf9\u8c61\u6216\u8be5\u5bf9\u8c61\u4e3a\u7a7a\uff0c\u5219\u53ef\u80fd\u9700\u8981\u63d0\u4f9b\u201c\u9ed8\u8ba4\u201d\u503c\u3002 \u8be5\u503c source='*' \u5177\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u7528\u4e8e\u6307\u793a\u5e94\u5c06\u6574\u4e2a\u5bf9\u8c61\u4f20\u9012\u7ed9\u8be5\u5b57\u6bb5\u3002\u8fd9\u5bf9\u4e8e\u521b\u5efa\u5d4c\u5957\u8868\u793a\u6216\u5bf9\u4e8e\u9700\u8981\u8bbf\u95ee\u5b8c\u6574\u5bf9\u8c61\u624d\u80fd\u786e\u5b9a\u8f93\u51fa\u8868\u793a\u7684\u5b57\u6bb5\u5f88\u6709\u7528\u3002 \u9ed8\u8ba4\u4e3a\u5b57\u6bb5\u540d\u79f0\u3002 validators \u9a8c\u8bc1\u5668\u529f\u80fd\u5217\u8868\uff0c\u5e94\u5c06\u5176\u5e94\u7528\u4e8e\u8f93\u5165\u5b57\u6bb5\u8f93\u5165\uff0c\u5e76\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u6216\u7b80\u5355\u5730\u8fd4\u56de\u3002\u9a8c\u8bc1\u5668\u51fd\u6570\u901a\u5e38\u5e94\u8be5\u63d0\u9ad8 serializers.ValidationError \uff0c\u4f46\u662f ValidationError \u8fd8\u652f\u6301Django\u7684\u5185\u7f6e\u51fd\u6570\uff0c\u4ee5\u4fbf\u4e0eDjango\u4ee3\u7801\u5e93\u6216\u7b2c\u4e09\u65b9Django\u8f6f\u4ef6\u5305\u4e2d\u5b9a\u4e49\u7684\u9a8c\u8bc1\u5668\u517c\u5bb9\u3002 error_message \u9519\u8bef\u4ee3\u7801\u5230\u9519\u8bef\u6d88\u606f\u7684\u5b57\u5178\u3002 label \u4e00\u4e2a\u7b80\u77ed\u7684\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u53ef\u7528\u4f5cHTML\u8868\u5355\u5b57\u6bb5\u6216\u5176\u4ed6\u63cf\u8ff0\u6027\u5143\u7d20\u4e2d\u7684\u5b57\u6bb5\u540d\u79f0\u3002 help_text \u53ef\u7528\u4f5c\u5728HTML\u8868\u5355\u5b57\u6bb5\u6216\u5176\u4ed6\u63cf\u8ff0\u6027\u5143\u7d20\u4e2d\u5bf9\u8be5\u5b57\u6bb5\u8fdb\u884c\u63cf\u8ff0\u7684\u6587\u672c\u5b57\u7b26\u4e32\u3002 initial \u8be5\u503c\u5e94\u7528\u4e8e\u9884\u5148\u586b\u5145HTML\u8868\u5355\u5b57\u6bb5\u7684\u503c\u3002\u60a8\u53ef\u4ee5\u5c06callable\u4f20\u9012\u7ed9\u5b83\uff0c\u5c31\u50cf\u5904\u7406\u4efb\u4f55\u5e38\u89c4Django\u4e00\u6837 Field \uff1a import datetime from rest_framework import serializers class ExampleSerializer(serializers.Serializer): day = serializers.DateField(initial=datetime.date.today) style \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u53ef\u7528\u4e8e\u63a7\u5236\u6e32\u67d3\u5668\u5e94\u5982\u4f55\u6e32\u67d3\u5b57\u6bb5\u3002 \u8fd9\u91cc\u7684\u4e24\u4e2a\u4f8b\u5b50\u662f 'input_type' \u548c 'base_template' \uff1a # Use <input type=\"password\"> for the input. password = serializers.CharField( style={'input_type': 'password'} ) # Use a radio input instead of a select input. color_channel = serializers.ChoiceField( choices=['red', 'green', 'blue'], style={'base_template': 'radio.html'} ) \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 HTML & Forms \u6587\u6863\u3002 \u5e03\u5c14\u5b57\u6bb5 BooleanField \u5e03\u5c14\u503c\u7684\u8868\u793a\u3002 \u4f7f\u7528HTML\u7f16\u7801\u7684\u8868\u5355\u8f93\u5165\u65f6\uff0c\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u7701\u7565\u4e86\u503c\uff0c\u4e5f\u5c06\u59cb\u7ec8\u5c06\u5176\u8bbe\u7f6e\u4e3a False \uff0c\u5373\u4f7f\u8be5\u5b57\u6bb5 default=True \u6307\u5b9a\u4e86\u9009\u9879\u3002\u8fd9\u662f\u56e0\u4e3aHTML\u590d\u9009\u6846\u8f93\u5165\u901a\u8fc7\u5ffd\u7565\u8be5\u503c\u6765\u8868\u793a\u672a\u9009\u4e2d\u72b6\u6001\uff0c\u56e0\u6b64REST\u6846\u67b6\u5c06\u5ffd\u7565\u89c6\u4e3a\u5176\u4e3a\u7a7a\u590d\u9009\u6846\u8f93\u5165\u3002 \u6ce8\u610f\uff0cDjango2.1\u79fb\u9664\u4e86 models.BooleanField \u4e2d\u7684 blank \u5173\u952e\u5b57\u53c2\u6570\u3002\u5728Django 2.1\u4e4b\u524d\uff0c models.BooleanField \u5b57\u6bb5\u59cb\u7ec8\u4e3a blank = True \u3002\u6240\u4ee5\u4eceDjango2.1\u5f00\u59cb\uff0c\u9ed8\u8ba4\u7684 serializers.BooleanField \u5b9e\u4f8b\u5c06\u88ab\u751f\u6210\u6ca1\u6709 required \u5173\u952e\u5b57\u53c2\u6570\u7684\u503c\uff08\u5373\u7b49\u540c\u4e8e required = True \uff09\u800c\u4e4b\u524d\u7248\u672c\u7684Django\uff0c\u5c06\u751f\u6210\u9ed8\u8ba4\u7684BooleanField\u5b9e\u4f8b\u5e26\u6709 required = False \u9009\u9879\u3002\u5982\u679c\u4f60\u60f3\u624b\u52a8\u63a7\u5236\u5b83\u7684\u884c\u4e3a\uff0c\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u4e0a\u663e\u5f0f\u58f0\u660e BooleanField \uff0c\u6216\u8005\u4f7f\u7528 extra_kwargs \u9009\u9879\u6765\u8bbe\u7f6e required \u53c2\u6570\u3002 NullBooleanField \u8868\u793a\u5e03\u5c14\u503c\uff0c\u4e5f\u63a5\u53d7None\u4e3a\u6709\u6548\u503c\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.NullBooleanField . \u7b7e\u540d\uff1a NullBooleanField() \u5b57\u7b26\u4e32\u5b57\u6bb5 CharField \u8868\u793a\u6587\u672c\u3002\uff08\u53ef\u9009\uff09\u9a8c\u8bc1\u6587\u672c\u662f\u5426\u77ed\u4e8emax_length\u548c\u957f\u4e8emin_length\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.CharField \u6216 django.db.models.fields.TextField \u3002 \u7b7e\u540d\uff1a CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True) max_length - \u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u6570\u4e0d\u8d85\u8fc7\u6b64\u6570\u91cf\u3002 min_length - \u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u6570\u4e0d\u5c11\u4e8e\u6b64\u3002 allow_blank - \u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u5219\u5e94\u5c06\u7a7a\u5b57\u7b26\u4e32\u89c6\u4e3a\u6709\u6548\u503c\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a\uff0c False \u5219\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u65e0\u6548\uff0c\u5e76\u5c06\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a False \u3002 trim_whitespace - \u5982\u679c\u8bbe\u7f6e\u4e3a\uff0c True \u5219\u4fee\u526a\u524d\u540e\u7684\u7a7a\u767d\u3002\u9ed8\u8ba4\u4e3a True \u3002 \u8be5 allow_null \u9009\u9879\u4e5f\u53ef\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u6bb5\uff0c\u5c3d\u7ba1\u4e0d\u5efa\u8bae\u4f7f\u7528 allow_blank \u3002\u8bbe\u7f6e allow_blank=True \u548c allow_null=True \u90fd\u662f\u6709\u6548\u7684\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u610f\u5473\u7740\u5bf9\u4e8e\u5b57\u7b26\u4e32\u8868\u793a\u800c\u8a00\uff0c\u5c06\u5b58\u5728\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u7a7a\u503c\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u4e0d\u4e00\u81f4\u548c\u7ec6\u5fae\u7684\u5e94\u7528\u7a0b\u5e8f\u9519\u8bef\u3002 EmailField \u8868\u793a\u6587\u672c\u5f62\u5f0f\uff0c\u5c06\u6587\u672c\u9a8c\u8bc1\u4e3a\u6709\u6548\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.EmailField \u7b7e\u540d\uff1a EmailField(max_length=None, min_length=None, allow_blank=False) RegexField \u8868\u793a\u6587\u672c\u5f62\u5f0f\uff0c\u7528\u4e8e\u9a8c\u8bc1\u7ed9\u5b9a\u503c\u662f\u5426\u4e0e\u67d0\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 \u5bf9\u5e94\u4e8e django.forms.fields.RegexField \u3002 \u7b7e\u540d\uff1a RegexField(regex, max_length=None, min_length=None, allow_blank=False) \u5f3a\u5236 regex \u53c2\u6570\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5df2\u7f16\u8bd1\u7684python\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61\u3002 \u4f7f\u7528Django\u7684 django.core.validators.RegexValidator \u8fdb\u884c\u9a8c\u8bc1\u3002 SlugField \u4e00\u4e2a\u9a8c\u8bc1\u8f93\u5165\u6ee1\u8db3\u8868\u8fbe\u5f0f [a-zA-Z0-9_-]+ \u7684RegexField\u5b57\u6bb5\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.SlugField . \u7b7e\u540d\uff1a SlugField(max_length=50, min_length=None, allow_blank=False) URLField \u4e00\u4e2a\u9a8c\u8bc1\u8f93\u5165\u6ee1\u8db3URL\u683c\u5f0f\u7684 RegexField \u5b57\u6bb5\u3002\u8981\u6c42\u4f7f\u7528\u4ee5\u4e0b\u683c\u5f0f\u7684\u5b8c\u5168\u9650\u5b9a\u7f51\u5740 http://<host>/<path> . \u5bf9\u5e94\u4e8e django.db.models.fields.URLField \u3002 \u4f7f\u7528Django\u7684 django.core.validators.URLValidator \u8fdb\u884c\u9a8c\u8bc1\u3002 \u7b7e\u540d\uff1a URLField(max_length=200, min_length=None, allow_blank=False) UUIDField \u786e\u4fdd\u8f93\u5165\u4e3a\u6709\u6548UUID\u5b57\u7b26\u4e32\u7684\u5b57\u6bb5\u3002\u8be5 to_internal_value \u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a uuid.UUID \u5b9e\u4f8b\u3002\u5728\u8f93\u51fa\u65f6\uff0c\u8be5\u5b57\u6bb5\u5c06\u8fd4\u56de\u6807\u51c6\u8fde\u5b57\u7b26\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1a \"de305d54-75b4-431b-adb2-eb6b9e546013\" \u7b7e\u540d\uff1a UUIDField(format='hex_verbose') format: \u786e\u5b9auuid\u503c\u7684\u8868\u793a\u683c\u5f0f 'hex_verbose' - \u89c4\u8303\u7684\u5341\u516d\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\uff0c\u5305\u62ec\u8fde\u5b57\u7b26\uff1a \"5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" 'hex' - UUID\u7684\u7d27\u51d1\u5341\u516d\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\uff0c\u4e0d\u5305\u62ec\u8fde\u5b57\u7b26\uff1a \"5ce0e9a55ffa654bcee01238041fb31a\" 'int' - UUID\u7684128\u4f4d\u6574\u6570\u8868\u793a\uff1a \"123456789012312313134124512351145145114\" 'urn' - UUID\u7684RFC 4122 URN\u8868\u793a\u5f62\u5f0f\uff1a \"urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" \u66f4\u6539 format \u53c2\u6570\u4ec5\u5f71\u54cd\u8868\u793a\u5f62\u5f0f\u503c\u3002 \u6240\u6709\u683c\u5f0f\u5747\u88ab to_internal_value \u63a5\u53d7\u3002 FilePathField \u4e00\u4e2a\u5b57\u6bb5\uff0c\u5176\u9009\u62e9\u4ec5\u9650\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e0a\u67d0\u4e2a\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u540d \u5bf9\u5e94\u4e8e django.forms.fields.FilePathField . \u7b7e\u540d\uff1a FilePathField(path, match=None, recursive=False, allow_files=True, allow_folders=False, required=None, **kwargs) path - \u76ee\u5f55\u7684\u7edd\u5bf9\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\uff0c\u5e94\u4ece\u4e2d\u9009\u62e9\u6b64FilePathField\u3002 match - FilePathField\u5c06\u7528\u4e8e\u8fc7\u6ee4\u6587\u4ef6\u540d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff08\u4f5c\u4e3a\u5b57\u7b26\u4e32\uff09\u3002 recursive - \u6307\u5b9a\u662f\u5426\u5e94\u5305\u542b\u8def\u5f84\u7684\u6240\u6709\u5b50\u76ee\u5f55\u3002\u9ed8\u8ba4\u503c\u4e3a False \u3002 allow_files - \u6307\u5b9a\u662f\u5426\u5e94\u5305\u542b\u6307\u5b9a\u4f4d\u7f6e\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u503c\u4e3a True \u3002\u8fd9\u4e2a\u53c2\u6570\u548c\u4e0b\u9762\u7684 allow_folders \u5fc5\u987b\u6709\u4e00\u4e2a\u4e3a True \u3002 allow_folders - \u6307\u5b9a\u662f\u5426\u5e94\u5305\u542b\u6307\u5b9a\u4f4d\u7f6e\u7684\u6587\u4ef6\u5939\u3002\u9ed8\u8ba4\u503c\u4e3a False \u3002 \u8fd9\u4e2a\u53c2\u6570\u548c\u4e0a\u9762\u7684 allow_files \u5fc5\u987b\u6709\u4e00\u4e2a\u4e3a True \u3002 IPAddressField \u786e\u4fdd\u8f93\u5165\u4e3a\u6709\u6548IPv4\u6216IPv6\u5b57\u7b26\u4e32\u7684\u5b57\u6bb5\u3002 \u5bf9\u5e94\u4e8e django.forms.fields.IPAddressField \u548c django.forms.fields.GenericIPAddressField . \u7b7e\u540d\uff1a : IPAddressField(protocol='both', unpack_ipv4=False, **options) protocol \u5c06\u6709\u6548\u8f93\u5165\u9650\u5236\u4e3a\u6307\u5b9a\u7684\u534f\u8bae\u3002\u63a5\u53d7\u7684\u503c\u662f\u201c\u4e24\u4e2a\u201d\uff08\u9ed8\u8ba4\uff09\uff0c\u201c IPv4\u201d\u6216\u201c IPv6\u201d\u3002\u5339\u914d\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002 unpack_ipv4 \u89e3\u538b\u7f29IPv4\u6620\u5c04\u7684\u5730\u5740\uff0c\u5982:: ffff\uff1a192.0.2.1\u3002\u5982\u679c\u542f\u7528\u6b64\u9009\u9879\uff0c\u5219\u8be5\u5730\u5740\u5c06\u89e3\u538b\u7f29\u4e3a192.0.2.1\u3002\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u7981\u7528\u3002\u53ea\u80fd\u5728\u534f\u8bae\u8bbe\u7f6e\u4e3a\u201c both\u201d\u65f6\u4f7f\u7528\u3002 \u6570\u5b57\u5b57\u6bb5 IntegerField \u8868\u793a\u6574\u6570 \u5bf9\u5e94\u4e8e django.db.models.fields.IntegerField , django.db.models.fields.SmallIntegerField , django.db.models.fields.PositiveIntegerField \u548c django.db.models.fields.PositiveSmallIntegerField \u3002 \u7b7e\u540d : IntegerField(max_value=None, min_value=None) max_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5927\u4e8e\u6b64\u503c\u3002 min_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5c0f\u4e8e\u6b64\u503c\u3002 FloatField \u8868\u793a\u6d6e\u70b9 \u5bf9\u5e94\u4e8e django.db.models.fields.FloatField . Signature : FloatField(max_value=None, min_value=None) max_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5927\u4e8e\u6b64\u503c\u3002 min_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5c0f\u4e8e\u6b64\u503c\u3002 DecimalField \u8868\u793a\u5341\u8fdb\u5236\u5f62\u5f0f\uff0c\u5728Python\u4e2d\u7531Decimal\u5b9e\u4f8b\u8868\u793a\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.DecimalField \u3002 \u7b7e\u540d : DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None) max_digits \u6570\u5b57\u4e2d\u5141\u8bb8\u7684\u6700\u5927\u4f4d\u6570\u3002\u5b83\u5fc5\u987b\u662f None \u6216\u5927\u4e8e\u6216\u7b49\u4e8e\u7684\u6574\u6570 decimal_places \u3002 decimal_places \u4e0e\u6570\u5b57\u4e00\u8d77\u5b58\u50a8\u7684\u5c0f\u6570\u4f4d\u6570\u3002 coerce_to_string \u5982\u679c\u8868\u793a\u5f62\u5f0f\u5e94\u8be5\u8fd4\u56de\u5b57\u7b26\u4e32\u503c\u5c31\u8bbe\u7f6e\u4e3a True , \u6216\u8005\u5e94\u8be5\u8fd4\u56de Decimal \u5bf9\u8c61\u7684\u8bdd\u5c31\u8bbe\u7f6e\u4e3a False \u3002\u9664\u975e\u8986\u76d6\uff0c\u5426\u5219\u9ed8\u8ba4\u4e3a\u8bbe\u7f6e\u4e2d COERCE_DECIMAL_TO_STRING \u8bbe\u7f6e\u952e\u76f8\u540c\u503c\u7684 True \u503c\u3002 \u5982\u679c Decimal \u5bf9\u8c61\u7531\u5e8f\u5217\u5316\u7a0b\u5e8f\u8fd4\u56de\uff0c\u5219\u6700\u7ec8\u8f93\u51fa\u683c\u5f0f\u5c06\u7531\u6e32\u67d3\u5668\u786e\u5b9a\u3002\u8bf7\u6ce8\u610f\uff0c\u8bbe\u7f6e localize \u4f1a\u5c06\u503c\u5f3a\u5236\u8bbe\u4e3a True \u3002 max_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5927\u4e8e\u6b64\u503c\u3002 min_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5c0f\u4e8e\u6b64\u503c\u3002 localize \u8bbe\u7f6e\u4e3a True \u542f\u7528\u4ee5\u57fa\u4e8e\u5f53\u524d\u8bed\u8a00\u73af\u5883\u672c\u5730\u5316\u8f93\u5165\u548c\u8f93\u51fa\u3002\u8fd9\u4e5f\u5c06\u8feb\u4f7f coerce_to_string \u5230 True \u3002\u9ed8\u8ba4\u4e3a False \u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60 USE_L10N=True \u5728\u8bbe\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u4e86\u8bbe\u7f6e\uff0c\u5219\u4f1a\u542f\u7528\u6570\u636e\u683c\u5f0f\u8bbe\u7f6e\u3002 rounding \u8bbe\u7f6e\u53d6\u503c\u5230\u914d\u7f6e\u7cbe\u5ea6\u7684\u820d\u5165\u6a21\u5f0f\u3002\u6709\u6548\u503c\u662f[ decimal \u6a21\u5757\u7684\u820d\u5165\u6a21\u5f0f][python-decimal-rounding-modes]\u3002\u9ed8\u8ba4\u662f None \u3002 \u4f7f\u7528\u793a\u4f8b \u8981\u9a8c\u8bc1\u6700\u5927\u4e3a999\u4e14\u5206\u8fa8\u7387\u4e3a2\u4f4d\u5c0f\u6570\u7684\u6570\u5b57\uff0c\u8bf7\u4f7f\u7528\uff1a serializers.DecimalField(max_digits=5, decimal_places=2) \u5e76\u4f7f\u7528\u5341\u8fdb\u5236\u5c0f\u6570\u4f4d\u6570\u6765\u9a8c\u8bc1\u5c0f\u4e8e\u5341\u4ebf\u7684\u6570\u5b57\uff1a serializers.DecimalField(max_digits=19, decimal_places=10) \u8be5\u5b57\u6bb5\u8fd8\u5e26\u6709\u4e00\u4e2a\u53ef\u9009\u53c2\u6570 coerce_to_string \u3002\u5982\u679c\u8bbe\u7f6e\u4e3a True \u8868\u793a\u5c06\u4f5c\u4e3a\u5b57\u7b26\u4e32\u8f93\u51fa\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a False \uff0c\u8868\u793a\u5c06\u4f5c\u4e3a Decimal \u5b9e\u4f8b\u4fdd\u7559\uff0c\u6700\u7ec8\u8868\u793a\u5c06\u7531\u6e32\u67d3\u5668\u786e\u5b9a\u3002 \u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u9ed8\u8ba4\u4e3a\u4e0e COERCE_DECIMAL_TO_STRING \u8bbe\u7f6e\u76f8\u540c\u7684\u503c\uff0c True \u9664\u975e\u53e6\u884c\u8bbe\u7f6e\u3002 \u65e5\u671f\u65f6\u95f4\u5b57\u6bb5 DateTimeField \u8868\u793a\u65e5\u671f\u548c\u65f6\u95f4\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.DateTimeField . \u7b7e\u540d\uff1a DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None) format - \u4ee3\u8868\u8f93\u51fa\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a\u4e0e DATETIME_FORMAT \u8bbe\u7f6e\u952e\u76f8\u540c\u7684\u503c\uff0c 'iso-8601' \u9664\u975e\u8bbe\u7f6e\uff0c\u5426\u5219\u4e3a\u9ed8\u8ba4\u503c\u3002\u8bbe\u7f6e\u4e3a\u683c\u5f0f\u5b57\u7b26\u4e32\u8868\u793a to_representation \u5e94\u5c06\u8fd4\u56de\u503c\u5f3a\u5236\u4e3a\u5b57\u7b26\u4e32\u8f93\u51fa\u3002\u683c\u5f0f\u5b57\u7b26\u4e32\u5982\u4e0b\u6240\u8ff0\u3002\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a None \u8868\u793a\u5e94\u7531 to_representation \u8fd4\u56dePython datetime \u5bf9\u8c61\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65e5\u671f\u65f6\u95f4\u7f16\u7801\u5c06\u7531\u6e32\u67d3\u5668\u786e\u5b9a\u3002 input_formats - \u8868\u793a\u53ef\u7528\u4e8e\u89e3\u6790\u65e5\u671f\u7684\u8f93\u5165\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c DATETIME_INPUT_FORMATS \u5c06\u4f7f\u7528\u8be5\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a ['iso-8601'] \u3002 default_timezone - \u4e00\u4e2a pytz.timezone \u8868\u793a\u7684\u65f6\u533a\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5e76\u4e14 USE_TZ \u8bbe\u7f6e\u6253\u5f00\uff0c\u8fd9\u4e2a\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u662f[\u5f53\u524d\u65f6\u533a][django-current-timezone]\u3002\u5982\u679c USE_TZ \u6ca1\u6709\u6253\u5f00\uff0c\u4f1a\u4f7f\u7528\u539f\u59cb\u7684\u65e5\u671f\u5bf9\u8c61\u3002 DateTimeField format strings. \u683c\u5f0f\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f\u663e\u5f0f\u6307\u5b9a\u683c\u5f0f\u7684 Python strftime formats \uff0c\u4e5f\u53ef\u4ee5\u662f\u7279\u6b8a\u5b57\u7b26\u4e32 'iso-8601' \uff0c\u5b83\u6307\u793a\u5e94\u4f7f\u7528 ISO 8601 \u6837\u5f0f\u7684\u65e5\u671f\u65f6\u95f4\u3002\uff08\u4f8b\u5982 '2013-01-29T12:34:56.000000Z' \uff09 \u5f53\u5c06\u503c None \u7528\u4e8e\u683c\u5f0f\u65f6\uff0c datetime \u5bf9\u8c61\u5c06\u7531 to_representation \u8fd4\u56de\uff0c\u5e76\u4e14\u6700\u7ec8\u8f93\u51fa\u8868\u793a\u5f62\u5f0f\u5c06\u7531renderer\u7c7b\u786e\u5b9a\u3002 auto_now and auto_now_add model fields. \u4f7f\u7528 ModelSerializer \u6216 HyperlinkedModelSerializer \uff0c\u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e26\u6709 auto_now=True \u6216\u4efb\u4f55\u6a21\u578b\u5b57\u6bb5 auto_now_add=True \u90fd\u5c06\u4f7f\u7528 read_only=True \u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002 \u5982\u679c\u8981\u8986\u76d6\u6b64\u884c\u4e3a\uff0c\u5219\u9700\u8981 DateTimeField \u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e0a\u663e\u5f0f\u58f0\u660e\u3002\u4f8b\u5982\uff1a class CommentSerializer(serializers.ModelSerializer): created = serializers.DateTimeField() class Meta: model = Comment DateField \u8868\u793a\u65e5\u671f \u5bf9\u5e94\u4e8e django.db.models.fields.DateField \u7b7e\u540d\uff1a DateField(format=api_settings.DATE_FORMAT, input_formats=None) format - \u4ee3\u8868\u8f93\u51fa\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a\u4e0e DATE_FORMAT \u8bbe\u7f6e\u952e\u76f8\u540c\u7684\u503c\uff0c\u9664\u975e\u8bbe\u7f6e\uff0c\u5426\u5219\u9ed8\u8ba4\u503c\u4e3a 'iso-8601' \u3002\u8bbe\u7f6e\u4e3a\u683c\u5f0f\u5b57\u7b26\u4e32\u8868\u793a to_representation \u5e94\u5c06\u8fd4\u56de\u503c\u5f3a\u5236\u4e3a\u5b57\u7b26\u4e32\u8f93\u51fa\u3002\u683c\u5f0f\u5b57\u7b26\u4e32\u5982\u4e0b\u6240\u8ff0\u3002\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a None \u8868\u793aPython\u7684 date \u5bf9\u8c61\u5e94\u7531 to_representation \u8fd4\u56de\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u7f16\u7801\u5c06\u7531\u6e32\u67d3\u5668\u786e\u5b9a\u3002 input_formats - \u8868\u793a\u53ef\u7528\u4e8e\u89e3\u6790\u65e5\u671f\u7684\u8f93\u5165\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c DATE_INPUT_FORMATS \u5c06\u4f7f\u7528\u8be5\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a ['iso-8601'] \u3002 DateField \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u683c\u5f0f\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f\u663e\u5f0f\u6307\u5b9a\u683c\u5f0f\u7684 Python strftime formats \uff0c\u4e5f\u53ef\u4ee5\u662f\u7279\u6b8a\u5b57\u7b26\u4e32 'iso-8601' \uff0c\u5b83\u6307\u793a\u5e94\u4f7f\u7528 ISO 8601 \u6837\u5f0f\u65f6\u95f4\u3002\uff08\u4f8b\u5982 '2013-01-29' \uff09 TimeField \u8868\u793a\u65f6\u95f4 \u5bf9\u5e94\u4e8e django.db.models.fields.TimeField \u7b7e\u540d\uff1a TimeField(format=api_settings.TIME_FORMAT, input_formats=None) format - \u4ee3\u8868\u8f93\u51fa\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a\u4e0e TIME_FORMAT \u8bbe\u7f6e\u952e\u76f8\u540c\u7684\u503c\uff0c 'iso-8601' \u9664\u975e\u8bbe\u7f6e\uff0c\u5426\u5219\u4e3a\u9ed8\u8ba4\u503c\u3002\u8bbe\u7f6e\u4e3a\u683c\u5f0f\u5b57\u7b26\u4e32\u8868\u793a to_representation \u5e94\u5c06\u8fd4\u56de\u503c\u5f3a\u5236\u4e3a\u5b57\u7b26\u4e32\u8f93\u51fa\u3002\u683c\u5f0f\u5b57\u7b26\u4e32\u5982\u4e0b\u6240\u8ff0\u3002\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a None \u8868\u793aPython time \u5bf9\u8c61\u5e94\u7531 to_representation \u8fd4\u56de\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u7f16\u7801\u5c06\u7531\u6e32\u67d3\u5668\u786e\u5b9a\u3002 input_formats - \u8868\u793a\u53ef\u7528\u4e8e\u89e3\u6790\u65e5\u671f\u7684\u8f93\u5165\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c TIME_INPUT_FORMATS \u5c06\u4f7f\u7528\u8be5\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a ['iso-8601'] TimeField format strings \u683c\u5f0f\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f\u663e\u5f0f\u6307\u5b9a\u683c\u5f0f\u7684 Python strftime \u683c\u5f0f \uff0c\u4e5f\u53ef\u4ee5\u662f\u7279\u6b8a\u5b57\u7b26\u4e32 'iso-8601' \uff0c\u5b83\u6307\u793a\u5e94\u4f7f\u7528 ISO 8601 \u6837\u5f0f\u65f6\u95f4\u3002\uff08\u4f8b\u5982 '12:34:56.000000' \uff09 DurationField \u8868\u793a\u65f6\u95f4\u95f4\u9694 \u5bf9\u5e94\u4e8e django.db.models.fields.DurationField \u5728\u8fd9\u4e9b\u5b57\u6bb5\u7684 validated_data \u5c06\u5305\u542b\u4e00\u4e2a datetime.timedelta \u5b9e\u4f8b\u3002\u8be5\u8868\u793a\u5f62\u5f0f\u662f\u9075\u5faa\u6b64\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 '[DD] [HH:[MM:]]ss[.uuuuuu]' \u3002 \u7b7e\u540d\uff1a DurationField() max_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u95f4\u9694\u4e0d\u5927\u4e8e\u8fd9\u4e2a\u503c\u3002 min_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u95f4\u9694\u4e0d\u5c0f\u4e8e\u8fd9\u4e2a\u503c\u3002 \u9009\u62e9\u5b57\u6bb5 ChoiceField \u53ef\u4ee5\u63a5\u53d7\u6709\u9650\u9009\u62e9\u96c6\u4e2d\u7684\u503c\u7684\u5b57\u6bb5\u3002 ModelSerializer \u5982\u679c\u76f8\u5e94\u7684\u6a21\u578b\u5b57\u6bb5\u5305\u542b choices=\u2026 \u53c2\u6570\uff0c\u5219\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u5b57\u6bb5\u3002 \u7b7e\u540d\uff1a ChoiceField(choices) choices - \u6709\u6548\u503c\u5217\u8868\u6216 (key, display_name) \u5143\u7ec4\u5217\u8868\u3002 allow_blank - \u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u5219\u5e94\u5c06\u7a7a\u5b57\u7b26\u4e32\u89c6\u4e3a\u6709\u6548\u503c\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a\uff0c False \u5219\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u65e0\u6548\uff0c\u5e76\u5c06\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a False \u3002 html_cutoff - \u5982\u679c\u8bbe\u7f6e\uff0c\u5219\u5c06\u662fHTML select\u4e0b\u62c9\u5217\u8868\u5c06\u663e\u793a\u7684\u6700\u5927\u9009\u62e9\u6570\u3002\u53ef\u4ee5\u7528\u6765\u786e\u4fdd\u81ea\u52a8\u751f\u6210\u7684ChoiceFields\u5177\u6709\u975e\u5e38\u5927\u7684\u9009\u62e9\u8303\u56f4\uff0c\u4e0d\u4f1a\u963b\u6b62\u6a21\u677f\u7684\u5448\u73b0\u3002\u9ed8\u8ba4\u4e3a None \u3002 html_cutoff_text - \u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u9009\u9879\uff0c\u5219\u5982\u679c\u5728HTML\u9009\u62e9\u4e0b\u62c9\u5217\u8868\u4e2d\u5df2\u622a\u65ad\u6700\u5927\u6570\u91cf\u7684\u9879\u76ee\uff0c\u5219\u5b83\u5c06\u663e\u793a\u6587\u672c\u6307\u793a\u5668\u3002\u9ed8\u8ba4\u4e3a \"More than {count} items\u2026\" \u3002 \u65e0\u8bba\u662f allow_blank \u4e0e allow_null \u4e0a\u6709\u6548\u7684\u9009\u9879 ChoiceField \uff0c\u4f46\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u60a8\u53ea\u4f7f\u7528\u4e00\u4e2a\uff0c\u800c\u4e0d\u662f\u4e24\u4e2a\u3002 allow_blank \u5e94\u8be5\u9996\u9009\u7528\u4e8e\u6587\u672c\u9009\u62e9\uff0c\u5e76\u4e14 allow_null \u5e94\u8be5\u9996\u9009\u7528\u4e8e\u6570\u5b57\u6216\u5176\u4ed6\u975e\u6587\u672c\u9009\u62e9\u3002 MultipleChoiceField \u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u4e00\u7ec4\u96f6\u4e2a\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u503c\u7684\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u503c\u662f\u4ece\u4e00\u7ec4\u6709\u9650\u7684\u9009\u62e9\u4e2d\u9009\u62e9\u7684\u3002\u63a5\u53d7\u4e00\u4e2a\u5f3a\u5236\u6027\u53c2\u6570\u3002 to_internal_value \u8fd4\u56de set \u5305\u542b\u6240\u9009\u503c\u7684\u3002 \u7b7e\u540d\uff1a MultipleChoiceField(choices) choices - \u6709\u6548\u503c\u5217\u8868\u6216 (key, display_name) \u5143\u7ec4\u5217\u8868\u3002 allow_blank - \u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u5219\u5e94\u5c06\u7a7a\u5b57\u7b26\u4e32\u89c6\u4e3a\u6709\u6548\u503c\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a\uff0c False \u5219\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u65e0\u6548\uff0c\u5e76\u5c06\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a False \u3002 html_cutoff - \u5982\u679c\u8bbe\u7f6e\uff0c\u5219\u5c06\u662fHTML select\u4e0b\u62c9\u5217\u8868\u5c06\u663e\u793a\u7684\u6700\u5927\u9009\u62e9\u6570\u3002\u53ef\u4ee5\u7528\u6765\u786e\u4fdd\u81ea\u52a8\u751f\u6210\u7684ChoiceFields\u5177\u6709\u975e\u5e38\u5927\u7684\u9009\u62e9\u8303\u56f4\uff0c\u4e0d\u4f1a\u963b\u6b62\u6a21\u677f\u7684\u5448\u73b0\u3002\u9ed8\u8ba4\u4e3a None \u3002 html_cutoff_text - \u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u9009\u9879\uff0c\u5219\u5982\u679c\u5728HTML\u9009\u62e9\u4e0b\u62c9\u5217\u8868\u4e2d\u5df2\u622a\u65ad\u6700\u5927\u6570\u91cf\u7684\u9879\u76ee\uff0c\u5219\u5b83\u5c06\u663e\u793a\u6587\u672c\u6307\u793a\u5668\u3002\u9ed8\u8ba4\u4e3a \"More than {count} items\u2026\" \u3002 \u4e0e ChoiceField \u4e00\u6837\uff0c allow_blank \u548c allow_null \u9009\u9879\u90fd\u6709\u6548\uff0c\u5c3d\u7ba1\u5f3a\u70c8\u5efa\u8bae\u60a8\u4ec5\u4f7f\u7528\u4e00\u4e2a\uff0c\u800c\u4e0d\u8981\u540c\u65f6\u4f7f\u7528\u3002 allow_blank \u5e94\u8be5\u9996\u9009\u7528\u4e8e\u6587\u672c\u9009\u62e9\uff0c\u5e76\u4e14 allow_null \u5e94\u8be5\u9996\u9009\u7528\u4e8e\u6570\u5b57\u6216\u5176\u4ed6\u975e\u6587\u672c\u9009\u62e9\u3002 \u6587\u4ef6\u4e0a\u4f20\u5b57\u6bb5 \u89e3\u6790\u548c\u6587\u4ef6\u4e0a\u4f20 FileField \u548c ImageField \u7c7b\u662f\u4ec5\u9002\u7528\u4e8e\u4f7f\u7528 MultiPartParser \u6216 FileUploadParser \u7684\u3002\u5927\u591a\u6570\u89e3\u6790\u5668\uff08\u4f8b\u5982JSON\uff09\u4e0d\u652f\u6301\u6587\u4ef6\u4e0a\u4f20\u3002Django\u7684\u5e38\u89c4 FILE_UPLOAD_HANDLERS \u7528\u4e8e\u5904\u7406\u4e0a\u4f20\u7684\u6587\u4ef6\u3002 FileField \u8868\u793a\u6587\u4ef6\u3002\u6267\u884cDjango\u7684\u6807\u51c6FileField\u9a8c\u8bc1\u3002 \u5bf9\u5e94\u4e8e django.forms.fields.FileField . \u7b7e\u540d\uff1a FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL) max_length - \u6307\u5b9a\u6587\u4ef6\u540d\u7684\u6700\u5927\u957f\u5ea6\u3002 allow_empty_file - \u6307\u5b9a\u662f\u5426\u5141\u8bb8\u7a7a\u6587\u4ef6\u3002 use_url - \u5982\u679c\u8bbe\u7f6e\u4e3a True \u5219URL\u5b57\u7b26\u4e32\u503c\u5c06\u7528\u4e8e\u8f93\u51fa\u8868\u793a\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a False \u5219\u6587\u4ef6\u540d\u5b57\u7b26\u4e32\u503c\u5c06\u7528\u4e8e\u8f93\u51fa\u8868\u793a\u3002\u9ed8\u8ba4\u4e3a UPLOADED_FILES_USE_URL \u8bbe\u7f6e\u952e\u7684\u503c\uff0c\u9664\u975e\u53e6\u6709\u8bbe\u7f6e\uff0c\u5426\u5219\u4e3a\u9ed8\u8ba4\u503c True \u3002 ImageField \u8868\u793a\u56fe\u7247\u3002 \u9a8c\u8bc1\u4e0a\u4f20\u7684\u6587\u4ef6\u5185\u5bb9\u662f\u5426\u4e0e\u5df2\u77e5\u56fe\u50cf\u683c\u5f0f\u5339\u914d\u3002 \u5bf9\u5e94\u4e8e django.forms.fields.ImageField . \u7b7e\u540d\uff1a ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL) max_length - \u6307\u5b9a\u6587\u4ef6\u540d\u7684\u6700\u5927\u957f\u5ea6\u3002 allow_empty_file - \u6307\u5b9a\u662f\u5426\u5141\u8bb8\u7a7a\u6587\u4ef6\u3002 use_url - \u5982\u679c\u8bbe\u7f6e\u4e3a True \u5219URL\u5b57\u7b26\u4e32\u503c\u5c06\u7528\u4e8e\u8f93\u51fa\u8868\u793a\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a False \u5219\u6587\u4ef6\u540d\u5b57\u7b26\u4e32\u503c\u5c06\u7528\u4e8e\u8f93\u51fa\u8868\u793a\u3002\u9ed8\u8ba4\u4e3a UPLOADED_FILES_USE_URL \u8bbe\u7f6e\u952e\u7684\u503c\uff0c\u9664\u975e\u53e6\u6709\u8bbe\u7f6e\uff0c\u5426\u5219\u4e3a\u9ed8\u8ba4\u503c True \u3002 \u9700\u8981\u5b89\u88c5 Pillow \u5305\u6216 PIL \u5305\u3002\u63a8\u8350\u4f7f\u7528 Pillow \u5305\uff0c\u56e0\u4e3a PIL \u5305\u5df2\u7ecf\u4e0d\u79ef\u6781\u7ef4\u62a4\u3002 \u590d\u5408\u5b57\u6bb5 ListField \u9a8c\u8bc1\u5bf9\u8c61\u5217\u8868\u7684\u5b57\u6bb5\u7c7b\u3002 \u7b7e\u540d : ListField(child, min_length=None, max_length=None) child - \u5e94\u8be5\u7528\u4e8e\u9a8c\u8bc1\u5217\u8868\u4e2d\u5bf9\u8c61\u7684\u5b57\u6bb5\u5b9e\u4f8b\u3002\u5982\u679c\u672a\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5219\u5c06\u4e0d\u9a8c\u8bc1\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u3002 min_length - \u9a8c\u8bc1\u5217\u8868\u4e2d\u5305\u542b\u7684\u5143\u7d20\u4e0d\u5c11\u4e8e\u6b64\u6570\u91cf\u3002 max_length - \u9a8c\u8bc1\u5217\u8868\u4e2d\u6240\u5305\u542b\u7684\u5143\u7d20\u6570\u91cf\u4e0d\u8d85\u8fc7\u6b64\u6570\u91cf\u3002 \u4f8b\u5982\uff0c\u8981\u9a8c\u8bc1\u6574\u6570\u5217\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u6240\u793a\u7684\u5185\u5bb9\uff1a scores = serializers.ListField( child=serializers.IntegerField(min_value=0, max_value=100) ) ListField \u7c7b\u8fd8\u652f\u6301\u58f0\u660e\u5f0f\u6837\u5f0f\uff0c\u8be5\u6837\u5f0f\u5141\u8bb8\u4f60\u7f16\u5199\u53ef\u91cd\u7528\u7684\u5217\u8868\u5b57\u6bb5\u7c7b\u3002 class StringListField(serializers.ListField): child = serializers.CharField() \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u91cd\u7528\u81ea\u5b9a\u4e49\u7684 StringListField \u7c7b\uff0c\u800c\u4e0d\u5fc5\u4e3a\u5176\u63d0\u4f9b child \u53c2\u6570\u3002 DictField \u4e00\u4e2a\u9a8c\u8bc1\u5bf9\u8c61\u5b57\u5178\u7684\u5b57\u6bb5\u7c7b\u3002 DictField \u4e2d\u7684key\u90fd\u603b\u662f\u5047\u5b9a\u4e3a\u5b57\u7b26\u4e32\u503c\u3002 \u7b7e\u540d : DictField(child) child - \u5e94\u8be5\u7528\u4e8e\u9a8c\u8bc1\u5b57\u5178\u4e2d\u503c\u7684\u5b57\u6bb5\u5b9e\u4f8b\u3002\u5982\u679c\u672a\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5219\u5c06\u4e0d\u9a8c\u8bc1\u6620\u5c04\u4e2d\u7684\u503c\u3002 allow_empty - \u6307\u5b9a\u662f\u5426\u5141\u8bb8\u7a7a\u5b57\u5178\u3002 \u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u9a8c\u8bc1\u5b57\u7b26\u4e32\u5230\u5b57\u7b26\u4e32\u6620\u5c04\u7684\u5b57\u6bb5\uff0c\u4f60\u53ef\u4ee5\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\uff1a document = DictField(child=CharField()) \u4f60\u4e5f\u53ef\u4ee5\u50cf\u4f7f\u7528\u4e00\u6837\u4f7f\u7528\u58f0\u660e\u5f0f\u6837\u5f0f ListField \u3002\u4f8b\u5982\uff1a class DocumentField(DictField): child = CharField() HStoreField \u9884\u7559\u7684 DictField \u517c\u5bb9Django\u7684postgres HStoreField \u5b57\u6bb5\u3002 \u7b7e\u540d\uff1a HStoreField(child=<A_FIELD_INSTANCE>, allow_empty=True) child - \u5e94\u8be5\u7528\u4e8e\u9a8c\u8bc1\u5b57\u5178\u4e2d\u503c\u7684\u5b57\u6bb5\u5b9e\u4f8b\u3002\u5982\u679c\u672a\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5219\u5c06\u4e0d\u9a8c\u8bc1\u6620\u5c04\u4e2d\u7684\u503c\u3002 allow_empty - \u6307\u5b9a\u662f\u5426\u5141\u8bb8\u7a7a\u5b57\u5178\u3002 \u6ce8\u610f\u5b50\u5b57\u6bb5 \u5fc5\u987b \u662f CharField \u7684\u5b9e\u4f8b\uff0c\u56e0\u4e3ahstore\u7684\u6269\u5c55\u5b58\u50a8\u503c\u4e3a\u5b57\u7b26\u4e32\u3002 JSONField \u4e00\u4e2a\u5b57\u6bb5\u7c7b\uff0c\u7528\u4e8e\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u7ed3\u6784\u662f\u5426\u5305\u542b\u6709\u6548\u7684JSON\u539f\u8bed\u3002\u5728\u5176\u5907\u7528\u4e8c\u8fdb\u5236\u6a21\u5f0f\u4e0b\uff0c\u5b83\u5c06\u8868\u793a\u5e76\u9a8c\u8bc1JSON\u7f16\u7801\u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u3002 \u7b7e\u540d : JSONField(binary) binary - \u5982\u679c\u8bbe\u7f6e\u4e3a True \u5219\u8be5\u5b57\u6bb5\u5c06\u8f93\u51fa\u5e76\u9a8c\u8bc1JSON\u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u539f\u59cb\u6570\u636e\u7ed3\u6784\u3002\u9ed8\u8ba4\u4e3a False \u3002 encoder - \u4f7f\u7528\u8fd9\u4e2a\u7f16\u7801\u5668\u5e8f\u5217\u5316\u8f93\u5165\u7684\u5bf9\u8c61\u3002\u9ed8\u8ba4\u662f None \u3002 \u6742\u9879\u5b57\u6bb5 ReadOnlyField \u4e00\u4e2a\u5b57\u6bb5\u7c7b\uff0c\u4ec5\u8fd4\u56de\u8be5\u5b57\u6bb5\u7684\u503c\u800c\u65e0\u9700\u4fee\u6539\u3002 ModelSerializer \u5f53\u5305\u542b\u4e0e\u5c5e\u6027\u800c\u4e0d\u662f\u6a21\u578b\u5b57\u6bb5\u76f8\u5173\u7684\u5b57\u6bb5\u540d\u79f0\u65f6\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u6b64\u5b57\u6bb5\u3002 \u7b7e\u540d : ReadOnlyField() \u4f8b\u5982\uff0c\u5982\u679c has_expired \u662f Account \u6a21\u578b\u7684\u5c5e\u6027\uff0c\u5219\u4ee5\u4e0b\u5e8f\u5217\u5316\u5668\u5c06\u81ea\u52a8\u5c06\u5176\u751f\u6210\u4e3a ReadOnlyField \uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ('id', 'account_name', 'has_expired') HiddenField \u4e00\u4e2a\u5b57\u6bb5\u7c7b\uff0c\u5b83\u4e0d\u57fa\u4e8e\u7528\u6237\u8f93\u5165\u83b7\u53d6\u503c\uff0c\u800c\u662f\u4ece\u9ed8\u8ba4\u503c\u6216\u53ef\u8c03\u7528\u5bf9\u8c61\u83b7\u53d6\u5176\u503c\u3002 \u7b7e\u540d : HiddenField() \u4f8b\u5982\uff0c\u8981\u5305\u62ec\u4e00\u4e2a\u59cb\u7ec8\u63d0\u4f9b\u5f53\u524d\u65f6\u95f4\u7684\u5b57\u6bb5\u4f5c\u4e3a\u5e8f\u5217\u5316\u7a0b\u5e8f\u9a8c\u8bc1\u6570\u636e\u7684\u4e00\u90e8\u5206\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\uff1a modified = serializers.HiddenField(default=timezone.now) HiddenField \u901a\u5e38\u53ea\u6709\u5728\u4f60\u9700\u8981\u57fa\u4e8e\u67d0\u4e9b\u9884\u5148\u63d0\u4f9b\u7684\u5b57\u6bb5\u503c\u6765\u8fd0\u884c\u67d0\u4e9b\u9a8c\u8bc1\uff0c\u800c\u53c8\u4e0d\u60f3\u5c06\u6240\u6709\u8fd9\u4e9b\u5b57\u6bb5\u516c\u5f00\u7ed9\u6700\u7ec8\u7528\u6237\u65f6\uff0c\u624d\u9700\u8981\u4f7f\u7528\u8be5\u7c7b\u3002 \u6709\u5173 HiddenField \u7684\u66f4\u591a\u793a\u4f8b\uff0c\u8bf7\u53c2\u7167 validators \u6587\u6863\u3002 ModelField \u53ef\u4ee5\u7ed1\u5b9a\u5230\u4efb\u610f\u6a21\u578b\u5b57\u6bb5\u7684\u901a\u7528\u5b57\u6bb5\u3002 ModelField \u7c7b\u5c06\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u4efb\u52a1\u59d4\u6258\u7ed9\u4e0e\u5176\u5173\u8054\u7684model\u5b57\u6bb5\u3002 \u6b64\u5b57\u6bb5\u53ef\u7528\u4e8e\u4e3a\u81ea\u5b9a\u4e49\u6a21\u578b\u5b57\u6bb5\u521b\u5efa\u5e8f\u5217\u5316\u7a0b\u5e8f\u5b57\u6bb5\uff0c\u800c\u4e0d\u5fc5\u521b\u5efa\u65b0\u7684\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u7a0b\u5e8f\u5b57\u6bb5\u3002 \u8be5\u5b57\u6bb5\u7528\u4e8e ModelSerializer \u5bf9\u5e94\u4e8e\u81ea\u5b9a\u4e49\u6a21\u578b\u5b57\u6bb5\u7c7b\u3002 \u7b7e\u540d: ModelField(model_field=<Django ModelField instance>) ModelField \u4e00\u822c\u7528\u4e8e\u5185\u90e8\u4f7f\u7528\uff0c\u4f46\u5982\u679c\u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u901a\u8fc7\u4f60\u7684API\u4f7f\u7528\u3002\u4e3a\u4e86\u6b63\u786e\u5730\u5b9e\u4f8b\u5316 ModelField \uff0c\u5fc5\u987b\u4f20\u9012\u4e00\u4e2a\u9644\u52a0\u5230\u5b9e\u4f8b\u5316\u6a21\u578b\u7684\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a ModelField(model_field=MyModel()._meta.get_field('custom_field')) \u3002 SerializerMethodField \u8fd9\u662f\u4e00\u4e2a\u53ea\u8bfb\u5b57\u6bb5\u3002\u5b83\u901a\u8fc7\u5728\u9644\u52a0\u7684\u5e8f\u5217\u5316\u5668\u7c7b\u4e0a\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u6765\u83b7\u53d6\u5176\u503c\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u5c06\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u6dfb\u52a0\u5230\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4e2d\u3002 \u7b7e\u540d : SerializerMethodField(method_name=None) method_name - \u8981\u8c03\u7528\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e0a\u7684\u65b9\u6cd5\u7684\u540d\u79f0\u3002\u5982\u679c\u672a\u5305\u62ec\uff0c\u5219\u9ed8\u8ba4\u4e3a get_<field_name> \u3002 method_name \u53c2\u6570\u5f15\u7528\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u65b9\u6cd5\u5e94\u63a5\u53d7\u5355\u4e2a\u53c2\u6570\uff08\u9664\u4e86\u4e4b\u5916 self \uff09\uff0c\u8be5\u53c2\u6570\u662f\u8981\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u3002\u5b83\u5e94\u8be5\u8fd4\u56de\u8981\u5305\u542b\u5728\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4e2d\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u4f8b\u5982\uff1a from django.contrib.auth.models import User from django.utils.timezone import now from rest_framework import serializers class UserSerializer(serializers.ModelSerializer): days_since_joined = serializers.SerializerMethodField() class Meta: model = User def get_days_since_joined(self, obj): return (now() - obj.date_joined).days \u81ea\u5b9a\u4e49\u5b57\u6bb5 \u5982\u679c\u8981\u521b\u5efa\u81ea\u5b9a\u4e49\u5b57\u6bb5\uff0c\u5219\u9700\u8981\u7ee7\u627f Field \u7c7b\uff0c\u7136\u540e\u91cd\u5199 .to_representation() \u548c .to_internal_value() \u65b9\u6cd5\u4e4b\u4e00\u6216\u4e8c\u8005\u3002\u8fd9\u4e24\u79cd\u65b9\u6cd5\u7528\u4e8e\u5728\u521d\u59cb\u6570\u636e\u7c7b\u578b\u548c\u539f\u59cb\u7684\u53ef\u5e8f\u5217\u5316\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u57fa\u672c\u6570\u636e\u7c7b\u578b\u901a\u5e38\u662f\u4efb\u4f55\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\uff0c\u5e03\u5c14\uff0c date/time/datetime \u6216 None \u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u662f\u4ec5\u5305\u542b\u5176\u4ed6\u539f\u59cb\u5bf9\u8c61\u7684\u4efb\u4f55\u5217\u8868\u6216\u5b57\u5178\u4e4b\u7c7b\u7684\u5bf9\u8c61\u3002\u6839\u636e\u60a8\u4f7f\u7528\u7684\u6e32\u67d3\u5668\uff0c\u53ef\u80fd\u652f\u6301\u5176\u4ed6\u7c7b\u578b\u3002 .to_representation() \u8c03\u7528\u8be5\u65b9\u6cd5\u53ef\u5c06\u521d\u59cb\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a\u539f\u59cb\u7684\u53ef\u5e8f\u5217\u5316\u6570\u636e\u7c7b\u578b\u3002 to_internal_value() \u8c03\u7528\u8be5\u65b9\u6cd5\u53ef\u5c06\u539f\u59cb\u6570\u636e\u7c7b\u578b\u6062\u590d\u4e3a\u5176\u5185\u90e8python\u8868\u793a\u5f62\u5f0f\u3002\u5982\u679c\u6570\u636e\u65e0\u6548\uff0c\u5219\u6b64\u65b9\u6cd5\u5e94\u629b\u51fa\u4e00\u4e2a serializers.ValidationError \u3002 \u793a\u4f8b \u57fa\u7840\u81ea\u5b9a\u4e49\u5b57\u6bb5 \u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u5e8f\u5217\u5316\u4ee3\u8868RGB\u989c\u8272\u503c\u7684\u7c7b\u7684\u793a\u4f8b\uff1a class Color: \"\"\" A color represented in the RGB colorspace. \"\"\" def __init__(self, red, green, blue): assert(red >= 0 and green >= 0 and blue >= 0) assert(red < 256 and green < 256 and blue < 256) self.red, self.green, self.blue = red, green, blue class ColorField(serializers.Field): \"\"\" Color objects are serialized into 'rgb(#, #, #)' notation. \"\"\" def to_representation(self, value): return \"rgb(%d, %d, %d)\" % (value.red, value.green, value.blue) def to_internal_value(self, data): data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] return Color(red, green, blue) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b57\u6bb5\u503c\u88ab\u89c6\u4e3a\u6620\u5c04\u5230\u5bf9\u8c61\u4e0a\u7684\u5c5e\u6027\u3002\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u5982\u4f55\u8bbf\u95ee\u548c\u8bbe\u7f6e\u5b57\u6bb5\u503c\uff0c\u5219\u9700\u8981\u8986\u76d6 .get_attribute() \u548c/\u6216 .get_value() \u3002 \u4f8b\u5982\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u53ef\u7528\u6765\u8868\u793a\u8981\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u7684\u7c7b\u540d\uff1a class ClassNameField(serializers.Field): def get_attribute(self, instance): # We pass the object instance onto `to_representation`, # not just the field attribute. return instance def to_representation(self, value): \"\"\" Serialize the value's class name. \"\"\" return value.__class__.__name__ \u629b\u51fa\u9a8c\u8bc1\u5f02\u5e38 \u6211\u4eec\u4e0a\u9762\u7684 ColorField \u7c7b\u76ee\u524d\u4e0d\u6267\u884c\u4efb\u4f55\u6570\u636e\u9a8c\u8bc1\u3002 \u4e3a\u4e86\u6307\u793a\u65e0\u6548\u6570\u636e\uff0c\u6211\u4eec\u5e94\u8be5\u5f15\u53d1\u4e00\u4e2a serializers.ValidationError \uff0c\u5982\u4e0b\u6240\u793a\uff1a def to_internal_value(self, data): if not isinstance(data, str): msg = 'Incorrect type. Expected a string, but got %s' raise ValidationError(msg % type(data).__name__) if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data): raise ValidationError('Incorrect format. Expected `rgb(#,#,#)`.') data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] if any([col > 255 or col < 0 for col in (red, green, blue)]): raise ValidationError('Value out of range. Must be between 0 and 255.') return Color(red, green, blue) .fail() \u65b9\u6cd5\u662f\u5f15\u53d1\u7684\u5feb\u6377\u65b9\u5f0f ValidationError \uff0c\u5b83\u4ece error_messages \u5b57\u5178\u4e2d\u83b7\u53d6\u6d88\u606f\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff1a default_error_messages = { 'incorrect_type': 'Incorrect type. Expected a string, but got {input_type}', 'incorrect_format': 'Incorrect format. Expected `rgb(#,#,#)`.', 'out_of_range': 'Value out of range. Must be between 0 and 255.' } def to_internal_value(self, data): if not isinstance(data, str): self.fail('incorrect_type', input_type=type(data).__name__) if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data): self.fail('incorrect_format') data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] if any([col > 255 or col < 0 for col in (red, green, blue)]): self.fail('out_of_range') return Color(red, green, blue) \u8fd9\u79cd\u6837\u5f0f\u4f7f\u60a8\u7684\u9519\u8bef\u6d88\u606f\u4e0e\u4ee3\u7801\u66f4\u6e05\u6670\u5730\u5206\u5f00\uff0c\u56e0\u6b64\u5e94\u9996\u9009\u3002 \u4f7f\u7528 source='*' \u8fd9\u91cc\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a \u5e73\u9762 \u7684 DataPoint \u6a21\u578b\uff0c\u6709 x_coordinate \u548c y_coordinate \u5b57\u6bb5\u3002 class DataPoint(models.Model): label = models.CharField(max_length=50) x_coordinate = models.SmallIntegerField() y_coordinate = models.SmallIntegerField() \u4f7f\u7528\u81ea\u5b9a\u4e49\u5b57\u6bb5\u548c source='*' \uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210\u5750\u6807\u5bf9\u7684\u5d4c\u5957\u8868\u793a\uff1a class CoordinateField(serializers.Field): def to_representation(self, value): ret = { \"x\": value.x_coordinate, \"y\": value.y_coordinate } return ret def to_internal_value(self, data): ret = { \"x_coordinate\": data[\"x\"], \"y_coordinate\": data[\"y\"], } return ret class DataPointSerializer(serializers.ModelSerializer): coordinates = CoordinateField(source='*') class Meta: model = DataPoint fields = ['label', 'coordinates'] \u6ce8\u610f\u8fd9\u4e2a\u4f8b\u5b50\u4e0d\u80fd\u8fdb\u884c\u9a8c\u8bc1\u3002\u90e8\u5206\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u5728\u771f\u5b9e\u7684\u9879\u76ee\u4e2d\uff0c\u4f7f\u7528\u6709 source='*' \u53c2\u6570\u7684\u5e8f\u5217\u5316\u5668\u548c\u4e24\u4e2a\u6709\u81ea\u5df1\u7684 source \u53c2\u6570\u6307\u5411\u5173\u8054\u7684\u5b57\u6bb5\u7684 IntegerField \u5b9e\u4f8b\u6765\u8868\u793a\u5d4c\u5957\u5750\u6807\u66f4\u597d\u3002 to_representation \u4f20\u5165\u6574\u4e2a DataPoint \u5bf9\u8c61\uff0c\u5fc5\u987b\u5c06\u5176\u6620\u5c04\u5230\u6240\u9700\u7684\u8f93\u51fa\u3002 >>> instance = DataPoint(label='Example', x_coordinate=1, y_coordinate=2) >>> out_serializer = DataPointSerializer(instance) >>> out_serializer.data ReturnDict([('label', 'Example'), ('coordinates', {'x': 1, 'y': 2})]) \u9664\u975e\u6211\u4eec\u7684\u5b57\u6bb5\u65f6\u53ea\u8bfb\u7684\uff0c to_internal_value \u5fc5\u987b\u6620\u5c04\u56de\u9002\u5408\u66f4\u65b0\u76ee\u6807\u5bf9\u8c61\u7684\u5b57\u5178\u3002\u4f7f\u7528 source='*' \uff0c to_internal_value \u7684\u8fd4\u56de\u53ef\u4ee5\u66f4\u65b0\u9a8c\u8bc1\u7684\u6570\u636e\u5b57\u5178\uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u952e\u3002 >>> data = { ... \"label\": \"Second Example\", ... \"coordinates\": { ... \"x\": 3, ... \"y\": 4, ... } ... } >>> in_serializer = DataPointSerializer(data=data) >>> in_serializer.is_valid() True >>> in_serializer.validated_data OrderedDict([('label', 'Second Example'), ('y_coordinate', 4), ('x_coordinate', 3)]) \u4e3a\u4e86\u5b8c\u6574\u6027\uff0c\u8ba9\u6211\u4eec\u518d\u6b21\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u4f46\u4f7f\u7528\u4e0a\u9762\u5efa\u8bae\u7684\u5d4c\u5957\u5e8f\u5217\u5316\u7a0b\u5e8f\u65b9\u6cd5\uff1a class NestedCoordinateSerializer(serializers.Serializer): x = serializers.IntegerField(source='x_coordinate') y = serializers.IntegerField(source='y_coordinate') class DataPointSerializer(serializers.ModelSerializer): coordinates = NestedCoordinateSerializer(source='*') class Meta: model = DataPoint fields = ['label', 'coordinates'] \u8fd9\u91cc\u5728 IntegerField \u58f0\u660e\u4e2d\u5904\u7406\u76ee\u6807\u548c\u6e90\u5c5e\u6027\u5bf9( x \u548c x_coherate \uff0c y \u548c y_cocoate )\u4e4b\u95f4\u7684\u6620\u5c04\u3002\u5b83\u5c31\u662f\u63a5\u53d7 source=\u2018*\u2019 \u7684 NestedConsulateSerializer \u3002 \u6211\u4eec\u7684\u65b0 DataPointSerializer \u4e0e\u81ea\u5b9a\u4e49\u5b57\u6bb5\u65b9\u6cd5\u884c\u4e3a\u76f8\u540c\u3002 \u5e8f\u5217\u5316\uff1a >>> out_serializer.data ReturnDict([('label', 'testing'), ('coordinates', OrderedDict([('x', 1), ('y', 2)]))]) \u53cd\u5e8f\u5217\u5316\uff1a >>> in_serializer = DataPointSerializer(data=data) >>> in_serializer.is_valid() True >>> in_serializer.validated_data OrderedDict([('label', 'still testing'), ('x_coordinate', 3), ('y_coordinate', 4)]) \u6211\u4eec\u540c\u6837\u6709\u5185\u7f6e\u7684\u9a8c\u8bc1\u5668\uff1a >>> invalid_data = { ... \"label\": \"still testing\", ... \"coordinates\": { ... \"x\": 'a', ... \"y\": 'b', ... } ... } >>> invalid_serializer = DataPointSerializer(data=invalid_data) >>> invalid_serializer.is_valid() False >>> invalid_serializer.errors ReturnDict([('coordinates', {'x': ['A valid integer is required.'], 'y': ['A valid integer is required.']})]) \u56e0\u6b64\uff0c\u5d4c\u5957\u5e8f\u5217\u5316\u7a0b\u5e8f\u65b9\u6cd5\u5c06\u662f\u7b2c\u4e00\u4e2a\u5c1d\u8bd5\u7684\u65b9\u6cd5\u3002\u5f53\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u53d8\u5f97\u4e0d\u53ef\u884c\u6216\u8fc7\u4e8e\u590d\u6742\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u5b57\u6bb5\u65b9\u6cd5\u3002 \u7b2c\u4e09\u65b9\u5305 \u4ee5\u4e0b\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u4e5f\u53ef\u4f7f\u7528\u3002 DRF Compound Fields drf-compound-fields \u5305\u63d0\u4f9b\u4e86\u201c\u590d\u5408\u201d\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\uff0c\u4f8b\u5982\u7b80\u5355\u503c\u5217\u8868\uff0c\u53ef\u4ee5\u7531\u5176\u4ed6\u5b57\u6bb5\u6765\u63cf\u8ff0\uff0c\u800c\u4e0d\u662f\u5e26\u6709 many = True \u9009\u9879\u7684\u5e8f\u5217\u5316\u5668\u3002 \u8fd8\u63d0\u4f9b\u4e86\u7528\u4e8e\u952e\u5165\u5b57\u5178\u548c\u503c\u7684\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u53ef\u4ee5\u662f\u7279\u5b9a\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u8be5\u7c7b\u578b\u7684\u9879\u76ee\u7684\u5217\u8868\u3002 DRF Extra Fields drf-extra-fields \u5305\u4e3aREST\u6846\u67b6\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\uff0c\u5305\u62ec Base64ImageField \u548c PointField \u7c7b\u3002 djangrestframework-recursive djangorestframework-recursive \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a RecursiveField \uff0c\u7528\u4e8e\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u9012\u5f52\u7ed3\u6784 django-rest-framework-gis django-rest-framework-gis \u5305\u4e3adjango rest\u6846\u67b6\u63d0\u4f9b\u4e86\u5730\u7406\u63d2\u4ef6\uff0c\u4f8b\u5982 GeometryField \u5b57\u6bb5\u548cGeoJSON\u5e8f\u5217\u5316\u5668\u3002 django-rest-framework-hstore The django-rest-framework-hstore \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a HStoreField \u6765\u652f\u6301 django-hstore DictionaryField \u6a21\u578b\u5b57\u6bb5\u3002","title":"Serializer fields"},{"location":"api-guide/fields_zh/#_1","text":"\u6bcf\u4e00\u4e2aForm\u7c7b\u7684\u5b57\u6bb5\u4e0d\u4ec5\u8d1f\u8d23\u9a8c\u8bc1\u6570\u636e\uff0c\u540c\u6837\u9700\u8981\u201c\u6e05\u7406\u201d\u6570\u636e \u2014 \u6807\u51c6\u5316\u4e3a\u7edf\u4e00\u7684\u683c\u5f0f\u3002 \u2014 Django documentation \u5e8f\u5217\u5316\u5b57\u6bb5\u8d1f\u8d23\u5728\u539f\u59cb\u6570\u636e\u548c\u5185\u90e8\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u8f6c\u6362\u3002\u5b83\u4eec\u540c\u6837\u8d1f\u8d23\u6821\u9a8c\u8f93\u5165\u7684\u503c\uff0c\u4ee5\u53ca\u4ece\u7236\u7ea7\u5bf9\u8c61\u67e5\u8be2\u548c\u8bbe\u7f6e\u503c\u3002 NOTE: \u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u5728 fields.py \u4e2d\u5b9a\u4e49\uff0c\u4f46\u662f\u6839\u636e\u60ef\u4f8b\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 from rest_framework import serializers \u7136\u540e\u4f7f\u7528 serializers.<FieldName> \u6765\u5f15\u7528\u5b83\u4eec\u3002","title":"\u5e8f\u5217\u5316\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#_2","text":"\u6bcf\u4e00\u4e2a\u5e8f\u5217\u5316\u5b57\u6bb5\u7c7b\u7684\u6784\u9020\u51fd\u6570\u90fd\u81f3\u5c11\u63a5\u6536\u8fd9\u4e9b\u53c2\u6570\u3002\u4e00\u4e0b\u5b57\u6bb5\u7c7b\u63a5\u53e3\u989d\u5916\u7684\uff0c\u7279\u5b9a\u5b57\u6bb5\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u4f46\u662f\u4e0b\u9762\u8fd9\u4e9b\u53c2\u6570\u662f\u4e00\u5b9a\u4f1a\u63a5\u6536\u7684\u3002","title":"\u6838\u5fc3\u53c2\u6570"},{"location":"api-guide/fields_zh/#read_only","text":"\u53ea\u8bfb\u5b57\u6bb5\u53ea\u80fd\u5305\u542b\u5728API\u7684\u8f93\u51fa\u4e2d\uff0c\u4f46\u662f\u4e0d\u5e94\u8be5\u5305\u542b\u5728\u521b\u5efa\u6216\u8005\u66f4\u65b0\u7684\u64cd\u4f5c\u3002\u4efb\u4f55\u9519\u8bef\u7684\u5305\u542b\u5728\u5e8f\u5217\u5316\u8f93\u5165\u7684\u53ea\u8bfb\u5b57\u6bb5\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002 \u5c06\u5176\u8bbe\u7f6e\u4e3a True \u786e\u4fdd\u5e8f\u5217\u5316\u65f6\u4f7f\u7528\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u4f46\u662f\u521b\u5efa\u6216\u8005\u66f4\u65b0\u7684\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c\u65f6\u4e0d\u4f1a\u4f7f\u7528\u3002 \u9ed8\u8ba4\u662f False","title":"read_only"},{"location":"api-guide/fields_zh/#write_only","text":"\u5c06\u5176\u8bbe\u7f6e\u4e3a True \u786e\u4fdd\u5728\u521b\u5efa\u6216\u8005\u66f4\u65b0\u7684\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c\u65f6\u4f7f\u7528\uff0c\u4f46\u662f\u5e8f\u5217\u5316\u65f6\u4e0d\u9002\u7528\u8fd9\u4e2a\u5b57\u6bb5\u3002","title":"Write_only"},{"location":"api-guide/fields_zh/#required","text":"\u5982\u679c\u5728\u53cd\u5e8f\u5217\u5316\u65f6\u5019\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u901a\u5e38\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002\u5982\u679c\u5728\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c\u4e2d\u4e0d\u9700\u8981\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a False \u3002 \u5c06\u5176\u8bbe\u7f6e\u4e3a False \u540c\u6837\u5141\u8bb8\u5728\u5e8f\u5217\u5316\u5b9e\u4f8b\u65f6\u5ffd\u7565\u5bf9\u8c61\u5c5e\u6027\u6216\u8005\u5b57\u6bb5\u7684\u952e\u3002\u5982\u679c\u8fd9\u4e2a\u952e\u4e0d\u5b58\u5728\uff0c\u5219\u8be5\u952e\u6839\u672c\u4e0d\u4f1a\u51fa\u73b0\u5728\u8f93\u51fa\u4e2d\u3002 \u9ed8\u8ba4\u662f True","title":"required"},{"location":"api-guide/fields_zh/#default","text":"\u5982\u679c\u8bbe\u7f6e\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u63d0\u4f9b\u7684\u9ed8\u8ba4\u503c\u4f1a\u5728\u8fd9\u4e2a\u5b57\u6bb5\u6ca1\u6709\u63d0\u4f9b\u8f93\u5165\u503c\u7684\u65f6\u5019\u4f7f\u7528\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e0d\u586b\u5145\u8fd9\u4e2a\u5c5e\u6027\u3002 \u90e8\u5206\u66f4\u65b0\u64cd\u4f5c\u4e0d\u4f1a\u63a5\u53d7 default \u7684\u503c\uff0c\u90e8\u5206\u66f4\u65b0\u60c5\u51b5\u4e0b\uff0c\u4ec5\u8fd4\u56de\u8f93\u5165\u6570\u636e\u4e2d\u63d0\u4f9b\u5b57\u6bb5\u6821\u9a8c\u540e\u7684\u503c\u3002 \u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u51fd\u6570\u6216\u5176\u4ed6\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u4f7f\u7528\u8be5\u503c\u90fd\u4f1a\u5bf9\u5176\u8bc4\u4f30\u3002\u88ab\u8c03\u7528\u65f6\u4e0d\u63a5\u53d7\u53c2\u6570\uff0c\u5982\u679c\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\u6709 requires_context = True \u5c5e\u6027\uff0c\u5219\u5e8f\u5217\u5316\u5b57\u6bb5\u5c06\u4f5c\u4e3a\u53c2\u6570\u4f20\u8fdb\u53ef\u8c03\u7528\u5bf9\u8c61\u4e2d\u3002 \u4f8b\u5982\uff1a class CurrentUserDefault: \"\"\" \u53ef\u4ee5\u4f5c\u4e3a\u5e8f\u5217\u5316\u5b57\u6bb5\u53c2\u6570`default=...`\u7684\u503c\u3002 \u8fd4\u56de\u5f53\u524d\u7528\u6237 \"\"\" requires_context = True def __call__(self, serializer_field): return serializer_field.context['request'].user \u5f53\u5e8f\u5217\u5316\u5b9e\u4f8b\u65f6\uff0c\u5982\u679c\u5b9e\u4f8b\u6216\u8005\u5b57\u5178\u6ca1\u6709\u5bf9\u5e94\u7684\u5c5e\u6027\u6216\u952e\uff0c\u4f1a\u8fd4\u56de\u9ed8\u8ba4\u503c\u3002 \u8bb0\u4f4f\u8bbe\u7f6e\u5b57\u6bb5\u7684 default \u503c\uff0c\u610f\u5473\u7740\u8fd9\u4e2a\u5b57\u6bb5\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u540c\u65f6\u5305\u542b default \u548c required \u5173\u952e\u5b57\u53c2\u6570\u90fd\u662f\u65e0\u6548\u7684\uff0c\u5e76\u4e14\u4f1a\u5f15\u53d1\u9519\u8bef\u3002","title":"default"},{"location":"api-guide/fields_zh/#allow_null","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5411\u5e8f\u5217\u5316\u5b57\u6bb5\u4f20\u9012 None \u662f\u4f1a\u629b\u51fa\u5f02\u5e38\u7684\u3002\u5982\u679c None \u53ef\u4ee5\u4f5c\u4e3a\u503c\uff0c\u5c06\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a True \u9ed8\u8ba4\u662f False","title":"allow_null"},{"location":"api-guide/fields_zh/#source","text":"\u7528\u4e8e\u586b\u5145\u8fd9\u4e2a\u5b57\u6bb5\u7684\u5c5e\u6027\u540d\u79f0\u3002\u53ef\u4ee5\u662f\u4e00\u4e2a\u4ec5\u63a5\u53d7 self \u53c2\u6570\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 URLField(source='get_absolute_url') \uff0c\u6216\u8005\u4f7f\u7528\u70b9\u5206\u7b26\u904d\u5386\u5c5e\u6027\uff0c\u4f8b\u5982 EmailField(source='user.email') \u3002\u5f53\u4f7f\u7528\u70b9\u5206\u7b26\u5e8f\u5217\u5316\u5b57\u6bb5\u65f6\uff0c\u5982\u679c\u5728\u5c5e\u6027\u904d\u5386\u671f\u95f4\u4e0d\u5b58\u5728\u4efb\u4f55\u5bf9\u8c61\u6216\u8be5\u5bf9\u8c61\u4e3a\u7a7a\uff0c\u5219\u53ef\u80fd\u9700\u8981\u63d0\u4f9b\u201c\u9ed8\u8ba4\u201d\u503c\u3002 \u8be5\u503c source='*' \u5177\u6709\u7279\u6b8a\u542b\u4e49\uff0c\u7528\u4e8e\u6307\u793a\u5e94\u5c06\u6574\u4e2a\u5bf9\u8c61\u4f20\u9012\u7ed9\u8be5\u5b57\u6bb5\u3002\u8fd9\u5bf9\u4e8e\u521b\u5efa\u5d4c\u5957\u8868\u793a\u6216\u5bf9\u4e8e\u9700\u8981\u8bbf\u95ee\u5b8c\u6574\u5bf9\u8c61\u624d\u80fd\u786e\u5b9a\u8f93\u51fa\u8868\u793a\u7684\u5b57\u6bb5\u5f88\u6709\u7528\u3002 \u9ed8\u8ba4\u4e3a\u5b57\u6bb5\u540d\u79f0\u3002","title":"source"},{"location":"api-guide/fields_zh/#validators","text":"\u9a8c\u8bc1\u5668\u529f\u80fd\u5217\u8868\uff0c\u5e94\u5c06\u5176\u5e94\u7528\u4e8e\u8f93\u5165\u5b57\u6bb5\u8f93\u5165\uff0c\u5e76\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u6216\u7b80\u5355\u5730\u8fd4\u56de\u3002\u9a8c\u8bc1\u5668\u51fd\u6570\u901a\u5e38\u5e94\u8be5\u63d0\u9ad8 serializers.ValidationError \uff0c\u4f46\u662f ValidationError \u8fd8\u652f\u6301Django\u7684\u5185\u7f6e\u51fd\u6570\uff0c\u4ee5\u4fbf\u4e0eDjango\u4ee3\u7801\u5e93\u6216\u7b2c\u4e09\u65b9Django\u8f6f\u4ef6\u5305\u4e2d\u5b9a\u4e49\u7684\u9a8c\u8bc1\u5668\u517c\u5bb9\u3002","title":"validators"},{"location":"api-guide/fields_zh/#error_message","text":"\u9519\u8bef\u4ee3\u7801\u5230\u9519\u8bef\u6d88\u606f\u7684\u5b57\u5178\u3002","title":"error_message"},{"location":"api-guide/fields_zh/#label","text":"\u4e00\u4e2a\u7b80\u77ed\u7684\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u53ef\u7528\u4f5cHTML\u8868\u5355\u5b57\u6bb5\u6216\u5176\u4ed6\u63cf\u8ff0\u6027\u5143\u7d20\u4e2d\u7684\u5b57\u6bb5\u540d\u79f0\u3002","title":"label"},{"location":"api-guide/fields_zh/#help_text","text":"\u53ef\u7528\u4f5c\u5728HTML\u8868\u5355\u5b57\u6bb5\u6216\u5176\u4ed6\u63cf\u8ff0\u6027\u5143\u7d20\u4e2d\u5bf9\u8be5\u5b57\u6bb5\u8fdb\u884c\u63cf\u8ff0\u7684\u6587\u672c\u5b57\u7b26\u4e32\u3002","title":"help_text"},{"location":"api-guide/fields_zh/#initial","text":"\u8be5\u503c\u5e94\u7528\u4e8e\u9884\u5148\u586b\u5145HTML\u8868\u5355\u5b57\u6bb5\u7684\u503c\u3002\u60a8\u53ef\u4ee5\u5c06callable\u4f20\u9012\u7ed9\u5b83\uff0c\u5c31\u50cf\u5904\u7406\u4efb\u4f55\u5e38\u89c4Django\u4e00\u6837 Field \uff1a import datetime from rest_framework import serializers class ExampleSerializer(serializers.Serializer): day = serializers.DateField(initial=datetime.date.today)","title":"initial"},{"location":"api-guide/fields_zh/#style","text":"\u952e\u503c\u5bf9\u5b57\u5178\uff0c\u53ef\u7528\u4e8e\u63a7\u5236\u6e32\u67d3\u5668\u5e94\u5982\u4f55\u6e32\u67d3\u5b57\u6bb5\u3002 \u8fd9\u91cc\u7684\u4e24\u4e2a\u4f8b\u5b50\u662f 'input_type' \u548c 'base_template' \uff1a # Use <input type=\"password\"> for the input. password = serializers.CharField( style={'input_type': 'password'} ) # Use a radio input instead of a select input. color_channel = serializers.ChoiceField( choices=['red', 'green', 'blue'], style={'base_template': 'radio.html'} ) \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 HTML & Forms \u6587\u6863\u3002","title":"style"},{"location":"api-guide/fields_zh/#_3","text":"","title":"\u5e03\u5c14\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#booleanfield","text":"\u5e03\u5c14\u503c\u7684\u8868\u793a\u3002 \u4f7f\u7528HTML\u7f16\u7801\u7684\u8868\u5355\u8f93\u5165\u65f6\uff0c\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u7701\u7565\u4e86\u503c\uff0c\u4e5f\u5c06\u59cb\u7ec8\u5c06\u5176\u8bbe\u7f6e\u4e3a False \uff0c\u5373\u4f7f\u8be5\u5b57\u6bb5 default=True \u6307\u5b9a\u4e86\u9009\u9879\u3002\u8fd9\u662f\u56e0\u4e3aHTML\u590d\u9009\u6846\u8f93\u5165\u901a\u8fc7\u5ffd\u7565\u8be5\u503c\u6765\u8868\u793a\u672a\u9009\u4e2d\u72b6\u6001\uff0c\u56e0\u6b64REST\u6846\u67b6\u5c06\u5ffd\u7565\u89c6\u4e3a\u5176\u4e3a\u7a7a\u590d\u9009\u6846\u8f93\u5165\u3002 \u6ce8\u610f\uff0cDjango2.1\u79fb\u9664\u4e86 models.BooleanField \u4e2d\u7684 blank \u5173\u952e\u5b57\u53c2\u6570\u3002\u5728Django 2.1\u4e4b\u524d\uff0c models.BooleanField \u5b57\u6bb5\u59cb\u7ec8\u4e3a blank = True \u3002\u6240\u4ee5\u4eceDjango2.1\u5f00\u59cb\uff0c\u9ed8\u8ba4\u7684 serializers.BooleanField \u5b9e\u4f8b\u5c06\u88ab\u751f\u6210\u6ca1\u6709 required \u5173\u952e\u5b57\u53c2\u6570\u7684\u503c\uff08\u5373\u7b49\u540c\u4e8e required = True \uff09\u800c\u4e4b\u524d\u7248\u672c\u7684Django\uff0c\u5c06\u751f\u6210\u9ed8\u8ba4\u7684BooleanField\u5b9e\u4f8b\u5e26\u6709 required = False \u9009\u9879\u3002\u5982\u679c\u4f60\u60f3\u624b\u52a8\u63a7\u5236\u5b83\u7684\u884c\u4e3a\uff0c\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u4e0a\u663e\u5f0f\u58f0\u660e BooleanField \uff0c\u6216\u8005\u4f7f\u7528 extra_kwargs \u9009\u9879\u6765\u8bbe\u7f6e required \u53c2\u6570\u3002","title":"BooleanField"},{"location":"api-guide/fields_zh/#nullbooleanfield","text":"\u8868\u793a\u5e03\u5c14\u503c\uff0c\u4e5f\u63a5\u53d7None\u4e3a\u6709\u6548\u503c\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.NullBooleanField . \u7b7e\u540d\uff1a NullBooleanField()","title":"NullBooleanField"},{"location":"api-guide/fields_zh/#_4","text":"","title":"\u5b57\u7b26\u4e32\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#charfield","text":"\u8868\u793a\u6587\u672c\u3002\uff08\u53ef\u9009\uff09\u9a8c\u8bc1\u6587\u672c\u662f\u5426\u77ed\u4e8emax_length\u548c\u957f\u4e8emin_length\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.CharField \u6216 django.db.models.fields.TextField \u3002 \u7b7e\u540d\uff1a CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True) max_length - \u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u6570\u4e0d\u8d85\u8fc7\u6b64\u6570\u91cf\u3002 min_length - \u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u6570\u4e0d\u5c11\u4e8e\u6b64\u3002 allow_blank - \u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u5219\u5e94\u5c06\u7a7a\u5b57\u7b26\u4e32\u89c6\u4e3a\u6709\u6548\u503c\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a\uff0c False \u5219\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u65e0\u6548\uff0c\u5e76\u5c06\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a False \u3002 trim_whitespace - \u5982\u679c\u8bbe\u7f6e\u4e3a\uff0c True \u5219\u4fee\u526a\u524d\u540e\u7684\u7a7a\u767d\u3002\u9ed8\u8ba4\u4e3a True \u3002 \u8be5 allow_null \u9009\u9879\u4e5f\u53ef\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u6bb5\uff0c\u5c3d\u7ba1\u4e0d\u5efa\u8bae\u4f7f\u7528 allow_blank \u3002\u8bbe\u7f6e allow_blank=True \u548c allow_null=True \u90fd\u662f\u6709\u6548\u7684\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u610f\u5473\u7740\u5bf9\u4e8e\u5b57\u7b26\u4e32\u8868\u793a\u800c\u8a00\uff0c\u5c06\u5b58\u5728\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u7a7a\u503c\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u4e0d\u4e00\u81f4\u548c\u7ec6\u5fae\u7684\u5e94\u7528\u7a0b\u5e8f\u9519\u8bef\u3002","title":"CharField"},{"location":"api-guide/fields_zh/#emailfield","text":"\u8868\u793a\u6587\u672c\u5f62\u5f0f\uff0c\u5c06\u6587\u672c\u9a8c\u8bc1\u4e3a\u6709\u6548\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.EmailField \u7b7e\u540d\uff1a EmailField(max_length=None, min_length=None, allow_blank=False)","title":"EmailField"},{"location":"api-guide/fields_zh/#regexfield","text":"\u8868\u793a\u6587\u672c\u5f62\u5f0f\uff0c\u7528\u4e8e\u9a8c\u8bc1\u7ed9\u5b9a\u503c\u662f\u5426\u4e0e\u67d0\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 \u5bf9\u5e94\u4e8e django.forms.fields.RegexField \u3002 \u7b7e\u540d\uff1a RegexField(regex, max_length=None, min_length=None, allow_blank=False) \u5f3a\u5236 regex \u53c2\u6570\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u5df2\u7f16\u8bd1\u7684python\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61\u3002 \u4f7f\u7528Django\u7684 django.core.validators.RegexValidator \u8fdb\u884c\u9a8c\u8bc1\u3002","title":"RegexField"},{"location":"api-guide/fields_zh/#slugfield","text":"\u4e00\u4e2a\u9a8c\u8bc1\u8f93\u5165\u6ee1\u8db3\u8868\u8fbe\u5f0f [a-zA-Z0-9_-]+ \u7684RegexField\u5b57\u6bb5\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.SlugField . \u7b7e\u540d\uff1a SlugField(max_length=50, min_length=None, allow_blank=False)","title":"SlugField"},{"location":"api-guide/fields_zh/#urlfield","text":"\u4e00\u4e2a\u9a8c\u8bc1\u8f93\u5165\u6ee1\u8db3URL\u683c\u5f0f\u7684 RegexField \u5b57\u6bb5\u3002\u8981\u6c42\u4f7f\u7528\u4ee5\u4e0b\u683c\u5f0f\u7684\u5b8c\u5168\u9650\u5b9a\u7f51\u5740 http://<host>/<path> . \u5bf9\u5e94\u4e8e django.db.models.fields.URLField \u3002 \u4f7f\u7528Django\u7684 django.core.validators.URLValidator \u8fdb\u884c\u9a8c\u8bc1\u3002 \u7b7e\u540d\uff1a URLField(max_length=200, min_length=None, allow_blank=False)","title":"URLField"},{"location":"api-guide/fields_zh/#uuidfield","text":"\u786e\u4fdd\u8f93\u5165\u4e3a\u6709\u6548UUID\u5b57\u7b26\u4e32\u7684\u5b57\u6bb5\u3002\u8be5 to_internal_value \u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a uuid.UUID \u5b9e\u4f8b\u3002\u5728\u8f93\u51fa\u65f6\uff0c\u8be5\u5b57\u6bb5\u5c06\u8fd4\u56de\u6807\u51c6\u8fde\u5b57\u7b26\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1a \"de305d54-75b4-431b-adb2-eb6b9e546013\" \u7b7e\u540d\uff1a UUIDField(format='hex_verbose') format: \u786e\u5b9auuid\u503c\u7684\u8868\u793a\u683c\u5f0f 'hex_verbose' - \u89c4\u8303\u7684\u5341\u516d\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\uff0c\u5305\u62ec\u8fde\u5b57\u7b26\uff1a \"5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" 'hex' - UUID\u7684\u7d27\u51d1\u5341\u516d\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\uff0c\u4e0d\u5305\u62ec\u8fde\u5b57\u7b26\uff1a \"5ce0e9a55ffa654bcee01238041fb31a\" 'int' - UUID\u7684128\u4f4d\u6574\u6570\u8868\u793a\uff1a \"123456789012312313134124512351145145114\" 'urn' - UUID\u7684RFC 4122 URN\u8868\u793a\u5f62\u5f0f\uff1a \"urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a\" \u66f4\u6539 format \u53c2\u6570\u4ec5\u5f71\u54cd\u8868\u793a\u5f62\u5f0f\u503c\u3002 \u6240\u6709\u683c\u5f0f\u5747\u88ab to_internal_value \u63a5\u53d7\u3002","title":"UUIDField"},{"location":"api-guide/fields_zh/#filepathfield","text":"\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5176\u9009\u62e9\u4ec5\u9650\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e0a\u67d0\u4e2a\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u540d \u5bf9\u5e94\u4e8e django.forms.fields.FilePathField . \u7b7e\u540d\uff1a FilePathField(path, match=None, recursive=False, allow_files=True, allow_folders=False, required=None, **kwargs) path - \u76ee\u5f55\u7684\u7edd\u5bf9\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\uff0c\u5e94\u4ece\u4e2d\u9009\u62e9\u6b64FilePathField\u3002 match - FilePathField\u5c06\u7528\u4e8e\u8fc7\u6ee4\u6587\u4ef6\u540d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff08\u4f5c\u4e3a\u5b57\u7b26\u4e32\uff09\u3002 recursive - \u6307\u5b9a\u662f\u5426\u5e94\u5305\u542b\u8def\u5f84\u7684\u6240\u6709\u5b50\u76ee\u5f55\u3002\u9ed8\u8ba4\u503c\u4e3a False \u3002 allow_files - \u6307\u5b9a\u662f\u5426\u5e94\u5305\u542b\u6307\u5b9a\u4f4d\u7f6e\u7684\u6587\u4ef6\u3002\u9ed8\u8ba4\u503c\u4e3a True \u3002\u8fd9\u4e2a\u53c2\u6570\u548c\u4e0b\u9762\u7684 allow_folders \u5fc5\u987b\u6709\u4e00\u4e2a\u4e3a True \u3002 allow_folders - \u6307\u5b9a\u662f\u5426\u5e94\u5305\u542b\u6307\u5b9a\u4f4d\u7f6e\u7684\u6587\u4ef6\u5939\u3002\u9ed8\u8ba4\u503c\u4e3a False \u3002 \u8fd9\u4e2a\u53c2\u6570\u548c\u4e0a\u9762\u7684 allow_files \u5fc5\u987b\u6709\u4e00\u4e2a\u4e3a True \u3002","title":"FilePathField"},{"location":"api-guide/fields_zh/#ipaddressfield","text":"\u786e\u4fdd\u8f93\u5165\u4e3a\u6709\u6548IPv4\u6216IPv6\u5b57\u7b26\u4e32\u7684\u5b57\u6bb5\u3002 \u5bf9\u5e94\u4e8e django.forms.fields.IPAddressField \u548c django.forms.fields.GenericIPAddressField . \u7b7e\u540d\uff1a : IPAddressField(protocol='both', unpack_ipv4=False, **options) protocol \u5c06\u6709\u6548\u8f93\u5165\u9650\u5236\u4e3a\u6307\u5b9a\u7684\u534f\u8bae\u3002\u63a5\u53d7\u7684\u503c\u662f\u201c\u4e24\u4e2a\u201d\uff08\u9ed8\u8ba4\uff09\uff0c\u201c IPv4\u201d\u6216\u201c IPv6\u201d\u3002\u5339\u914d\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002 unpack_ipv4 \u89e3\u538b\u7f29IPv4\u6620\u5c04\u7684\u5730\u5740\uff0c\u5982:: ffff\uff1a192.0.2.1\u3002\u5982\u679c\u542f\u7528\u6b64\u9009\u9879\uff0c\u5219\u8be5\u5730\u5740\u5c06\u89e3\u538b\u7f29\u4e3a192.0.2.1\u3002\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u7981\u7528\u3002\u53ea\u80fd\u5728\u534f\u8bae\u8bbe\u7f6e\u4e3a\u201c both\u201d\u65f6\u4f7f\u7528\u3002","title":"IPAddressField"},{"location":"api-guide/fields_zh/#_5","text":"","title":"\u6570\u5b57\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#integerfield","text":"\u8868\u793a\u6574\u6570 \u5bf9\u5e94\u4e8e django.db.models.fields.IntegerField , django.db.models.fields.SmallIntegerField , django.db.models.fields.PositiveIntegerField \u548c django.db.models.fields.PositiveSmallIntegerField \u3002 \u7b7e\u540d : IntegerField(max_value=None, min_value=None) max_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5927\u4e8e\u6b64\u503c\u3002 min_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5c0f\u4e8e\u6b64\u503c\u3002","title":"IntegerField"},{"location":"api-guide/fields_zh/#floatfield","text":"\u8868\u793a\u6d6e\u70b9 \u5bf9\u5e94\u4e8e django.db.models.fields.FloatField . Signature : FloatField(max_value=None, min_value=None) max_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5927\u4e8e\u6b64\u503c\u3002 min_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5c0f\u4e8e\u6b64\u503c\u3002","title":"FloatField"},{"location":"api-guide/fields_zh/#decimalfield","text":"\u8868\u793a\u5341\u8fdb\u5236\u5f62\u5f0f\uff0c\u5728Python\u4e2d\u7531Decimal\u5b9e\u4f8b\u8868\u793a\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.DecimalField \u3002 \u7b7e\u540d : DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None) max_digits \u6570\u5b57\u4e2d\u5141\u8bb8\u7684\u6700\u5927\u4f4d\u6570\u3002\u5b83\u5fc5\u987b\u662f None \u6216\u5927\u4e8e\u6216\u7b49\u4e8e\u7684\u6574\u6570 decimal_places \u3002 decimal_places \u4e0e\u6570\u5b57\u4e00\u8d77\u5b58\u50a8\u7684\u5c0f\u6570\u4f4d\u6570\u3002 coerce_to_string \u5982\u679c\u8868\u793a\u5f62\u5f0f\u5e94\u8be5\u8fd4\u56de\u5b57\u7b26\u4e32\u503c\u5c31\u8bbe\u7f6e\u4e3a True , \u6216\u8005\u5e94\u8be5\u8fd4\u56de Decimal \u5bf9\u8c61\u7684\u8bdd\u5c31\u8bbe\u7f6e\u4e3a False \u3002\u9664\u975e\u8986\u76d6\uff0c\u5426\u5219\u9ed8\u8ba4\u4e3a\u8bbe\u7f6e\u4e2d COERCE_DECIMAL_TO_STRING \u8bbe\u7f6e\u952e\u76f8\u540c\u503c\u7684 True \u503c\u3002 \u5982\u679c Decimal \u5bf9\u8c61\u7531\u5e8f\u5217\u5316\u7a0b\u5e8f\u8fd4\u56de\uff0c\u5219\u6700\u7ec8\u8f93\u51fa\u683c\u5f0f\u5c06\u7531\u6e32\u67d3\u5668\u786e\u5b9a\u3002\u8bf7\u6ce8\u610f\uff0c\u8bbe\u7f6e localize \u4f1a\u5c06\u503c\u5f3a\u5236\u8bbe\u4e3a True \u3002 max_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5927\u4e8e\u6b64\u503c\u3002 min_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u6570\u5b57\u4e0d\u5c0f\u4e8e\u6b64\u503c\u3002 localize \u8bbe\u7f6e\u4e3a True \u542f\u7528\u4ee5\u57fa\u4e8e\u5f53\u524d\u8bed\u8a00\u73af\u5883\u672c\u5730\u5316\u8f93\u5165\u548c\u8f93\u51fa\u3002\u8fd9\u4e5f\u5c06\u8feb\u4f7f coerce_to_string \u5230 True \u3002\u9ed8\u8ba4\u4e3a False \u3002\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60 USE_L10N=True \u5728\u8bbe\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u4e86\u8bbe\u7f6e\uff0c\u5219\u4f1a\u542f\u7528\u6570\u636e\u683c\u5f0f\u8bbe\u7f6e\u3002 rounding \u8bbe\u7f6e\u53d6\u503c\u5230\u914d\u7f6e\u7cbe\u5ea6\u7684\u820d\u5165\u6a21\u5f0f\u3002\u6709\u6548\u503c\u662f[ decimal \u6a21\u5757\u7684\u820d\u5165\u6a21\u5f0f][python-decimal-rounding-modes]\u3002\u9ed8\u8ba4\u662f None \u3002","title":"DecimalField"},{"location":"api-guide/fields_zh/#_6","text":"\u8981\u9a8c\u8bc1\u6700\u5927\u4e3a999\u4e14\u5206\u8fa8\u7387\u4e3a2\u4f4d\u5c0f\u6570\u7684\u6570\u5b57\uff0c\u8bf7\u4f7f\u7528\uff1a serializers.DecimalField(max_digits=5, decimal_places=2) \u5e76\u4f7f\u7528\u5341\u8fdb\u5236\u5c0f\u6570\u4f4d\u6570\u6765\u9a8c\u8bc1\u5c0f\u4e8e\u5341\u4ebf\u7684\u6570\u5b57\uff1a serializers.DecimalField(max_digits=19, decimal_places=10) \u8be5\u5b57\u6bb5\u8fd8\u5e26\u6709\u4e00\u4e2a\u53ef\u9009\u53c2\u6570 coerce_to_string \u3002\u5982\u679c\u8bbe\u7f6e\u4e3a True \u8868\u793a\u5c06\u4f5c\u4e3a\u5b57\u7b26\u4e32\u8f93\u51fa\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a False \uff0c\u8868\u793a\u5c06\u4f5c\u4e3a Decimal \u5b9e\u4f8b\u4fdd\u7559\uff0c\u6700\u7ec8\u8868\u793a\u5c06\u7531\u6e32\u67d3\u5668\u786e\u5b9a\u3002 \u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u9ed8\u8ba4\u4e3a\u4e0e COERCE_DECIMAL_TO_STRING \u8bbe\u7f6e\u76f8\u540c\u7684\u503c\uff0c True \u9664\u975e\u53e6\u884c\u8bbe\u7f6e\u3002","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"api-guide/fields_zh/#_7","text":"","title":"\u65e5\u671f\u65f6\u95f4\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#datetimefield","text":"\u8868\u793a\u65e5\u671f\u548c\u65f6\u95f4\u3002 \u5bf9\u5e94\u4e8e django.db.models.fields.DateTimeField . \u7b7e\u540d\uff1a DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None) format - \u4ee3\u8868\u8f93\u51fa\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a\u4e0e DATETIME_FORMAT \u8bbe\u7f6e\u952e\u76f8\u540c\u7684\u503c\uff0c 'iso-8601' \u9664\u975e\u8bbe\u7f6e\uff0c\u5426\u5219\u4e3a\u9ed8\u8ba4\u503c\u3002\u8bbe\u7f6e\u4e3a\u683c\u5f0f\u5b57\u7b26\u4e32\u8868\u793a to_representation \u5e94\u5c06\u8fd4\u56de\u503c\u5f3a\u5236\u4e3a\u5b57\u7b26\u4e32\u8f93\u51fa\u3002\u683c\u5f0f\u5b57\u7b26\u4e32\u5982\u4e0b\u6240\u8ff0\u3002\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a None \u8868\u793a\u5e94\u7531 to_representation \u8fd4\u56dePython datetime \u5bf9\u8c61\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65e5\u671f\u65f6\u95f4\u7f16\u7801\u5c06\u7531\u6e32\u67d3\u5668\u786e\u5b9a\u3002 input_formats - \u8868\u793a\u53ef\u7528\u4e8e\u89e3\u6790\u65e5\u671f\u7684\u8f93\u5165\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c DATETIME_INPUT_FORMATS \u5c06\u4f7f\u7528\u8be5\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a ['iso-8601'] \u3002 default_timezone - \u4e00\u4e2a pytz.timezone \u8868\u793a\u7684\u65f6\u533a\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5e76\u4e14 USE_TZ \u8bbe\u7f6e\u6253\u5f00\uff0c\u8fd9\u4e2a\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u662f[\u5f53\u524d\u65f6\u533a][django-current-timezone]\u3002\u5982\u679c USE_TZ \u6ca1\u6709\u6253\u5f00\uff0c\u4f1a\u4f7f\u7528\u539f\u59cb\u7684\u65e5\u671f\u5bf9\u8c61\u3002","title":"DateTimeField"},{"location":"api-guide/fields_zh/#datetimefield-format-strings","text":"\u683c\u5f0f\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f\u663e\u5f0f\u6307\u5b9a\u683c\u5f0f\u7684 Python strftime formats \uff0c\u4e5f\u53ef\u4ee5\u662f\u7279\u6b8a\u5b57\u7b26\u4e32 'iso-8601' \uff0c\u5b83\u6307\u793a\u5e94\u4f7f\u7528 ISO 8601 \u6837\u5f0f\u7684\u65e5\u671f\u65f6\u95f4\u3002\uff08\u4f8b\u5982 '2013-01-29T12:34:56.000000Z' \uff09 \u5f53\u5c06\u503c None \u7528\u4e8e\u683c\u5f0f\u65f6\uff0c datetime \u5bf9\u8c61\u5c06\u7531 to_representation \u8fd4\u56de\uff0c\u5e76\u4e14\u6700\u7ec8\u8f93\u51fa\u8868\u793a\u5f62\u5f0f\u5c06\u7531renderer\u7c7b\u786e\u5b9a\u3002","title":"DateTimeField format strings."},{"location":"api-guide/fields_zh/#auto_now-and-auto_now_add-model-fields","text":"\u4f7f\u7528 ModelSerializer \u6216 HyperlinkedModelSerializer \uff0c\u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e26\u6709 auto_now=True \u6216\u4efb\u4f55\u6a21\u578b\u5b57\u6bb5 auto_now_add=True \u90fd\u5c06\u4f7f\u7528 read_only=True \u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002 \u5982\u679c\u8981\u8986\u76d6\u6b64\u884c\u4e3a\uff0c\u5219\u9700\u8981 DateTimeField \u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e0a\u663e\u5f0f\u58f0\u660e\u3002\u4f8b\u5982\uff1a class CommentSerializer(serializers.ModelSerializer): created = serializers.DateTimeField() class Meta: model = Comment","title":"auto_now and auto_now_add model fields."},{"location":"api-guide/fields_zh/#datefield","text":"\u8868\u793a\u65e5\u671f \u5bf9\u5e94\u4e8e django.db.models.fields.DateField \u7b7e\u540d\uff1a DateField(format=api_settings.DATE_FORMAT, input_formats=None) format - \u4ee3\u8868\u8f93\u51fa\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a\u4e0e DATE_FORMAT \u8bbe\u7f6e\u952e\u76f8\u540c\u7684\u503c\uff0c\u9664\u975e\u8bbe\u7f6e\uff0c\u5426\u5219\u9ed8\u8ba4\u503c\u4e3a 'iso-8601' \u3002\u8bbe\u7f6e\u4e3a\u683c\u5f0f\u5b57\u7b26\u4e32\u8868\u793a to_representation \u5e94\u5c06\u8fd4\u56de\u503c\u5f3a\u5236\u4e3a\u5b57\u7b26\u4e32\u8f93\u51fa\u3002\u683c\u5f0f\u5b57\u7b26\u4e32\u5982\u4e0b\u6240\u8ff0\u3002\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a None \u8868\u793aPython\u7684 date \u5bf9\u8c61\u5e94\u7531 to_representation \u8fd4\u56de\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u7f16\u7801\u5c06\u7531\u6e32\u67d3\u5668\u786e\u5b9a\u3002 input_formats - \u8868\u793a\u53ef\u7528\u4e8e\u89e3\u6790\u65e5\u671f\u7684\u8f93\u5165\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c DATE_INPUT_FORMATS \u5c06\u4f7f\u7528\u8be5\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a ['iso-8601'] \u3002","title":"DateField"},{"location":"api-guide/fields_zh/#datefield_1","text":"\u683c\u5f0f\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f\u663e\u5f0f\u6307\u5b9a\u683c\u5f0f\u7684 Python strftime formats \uff0c\u4e5f\u53ef\u4ee5\u662f\u7279\u6b8a\u5b57\u7b26\u4e32 'iso-8601' \uff0c\u5b83\u6307\u793a\u5e94\u4f7f\u7528 ISO 8601 \u6837\u5f0f\u65f6\u95f4\u3002\uff08\u4f8b\u5982 '2013-01-29' \uff09","title":"DateField \u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"api-guide/fields_zh/#timefield","text":"\u8868\u793a\u65f6\u95f4 \u5bf9\u5e94\u4e8e django.db.models.fields.TimeField \u7b7e\u540d\uff1a TimeField(format=api_settings.TIME_FORMAT, input_formats=None) format - \u4ee3\u8868\u8f93\u51fa\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e3a\u4e0e TIME_FORMAT \u8bbe\u7f6e\u952e\u76f8\u540c\u7684\u503c\uff0c 'iso-8601' \u9664\u975e\u8bbe\u7f6e\uff0c\u5426\u5219\u4e3a\u9ed8\u8ba4\u503c\u3002\u8bbe\u7f6e\u4e3a\u683c\u5f0f\u5b57\u7b26\u4e32\u8868\u793a to_representation \u5e94\u5c06\u8fd4\u56de\u503c\u5f3a\u5236\u4e3a\u5b57\u7b26\u4e32\u8f93\u51fa\u3002\u683c\u5f0f\u5b57\u7b26\u4e32\u5982\u4e0b\u6240\u8ff0\u3002\u5c06\u6b64\u503c\u8bbe\u7f6e\u4e3a None \u8868\u793aPython time \u5bf9\u8c61\u5e94\u7531 to_representation \u8fd4\u56de\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u7f16\u7801\u5c06\u7531\u6e32\u67d3\u5668\u786e\u5b9a\u3002 input_formats - \u8868\u793a\u53ef\u7528\u4e8e\u89e3\u6790\u65e5\u671f\u7684\u8f93\u5165\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c TIME_INPUT_FORMATS \u5c06\u4f7f\u7528\u8be5\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a ['iso-8601']","title":"TimeField"},{"location":"api-guide/fields_zh/#timefield-format-strings","text":"\u683c\u5f0f\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f\u663e\u5f0f\u6307\u5b9a\u683c\u5f0f\u7684 Python strftime \u683c\u5f0f \uff0c\u4e5f\u53ef\u4ee5\u662f\u7279\u6b8a\u5b57\u7b26\u4e32 'iso-8601' \uff0c\u5b83\u6307\u793a\u5e94\u4f7f\u7528 ISO 8601 \u6837\u5f0f\u65f6\u95f4\u3002\uff08\u4f8b\u5982 '12:34:56.000000' \uff09","title":"TimeField format strings"},{"location":"api-guide/fields_zh/#durationfield","text":"\u8868\u793a\u65f6\u95f4\u95f4\u9694 \u5bf9\u5e94\u4e8e django.db.models.fields.DurationField \u5728\u8fd9\u4e9b\u5b57\u6bb5\u7684 validated_data \u5c06\u5305\u542b\u4e00\u4e2a datetime.timedelta \u5b9e\u4f8b\u3002\u8be5\u8868\u793a\u5f62\u5f0f\u662f\u9075\u5faa\u6b64\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 '[DD] [HH:[MM:]]ss[.uuuuuu]' \u3002 \u7b7e\u540d\uff1a DurationField() max_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u95f4\u9694\u4e0d\u5927\u4e8e\u8fd9\u4e2a\u503c\u3002 min_value \u9a8c\u8bc1\u63d0\u4f9b\u7684\u95f4\u9694\u4e0d\u5c0f\u4e8e\u8fd9\u4e2a\u503c\u3002","title":"DurationField"},{"location":"api-guide/fields_zh/#_8","text":"","title":"\u9009\u62e9\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#choicefield","text":"\u53ef\u4ee5\u63a5\u53d7\u6709\u9650\u9009\u62e9\u96c6\u4e2d\u7684\u503c\u7684\u5b57\u6bb5\u3002 ModelSerializer \u5982\u679c\u76f8\u5e94\u7684\u6a21\u578b\u5b57\u6bb5\u5305\u542b choices=\u2026 \u53c2\u6570\uff0c\u5219\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u5b57\u6bb5\u3002 \u7b7e\u540d\uff1a ChoiceField(choices) choices - \u6709\u6548\u503c\u5217\u8868\u6216 (key, display_name) \u5143\u7ec4\u5217\u8868\u3002 allow_blank - \u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u5219\u5e94\u5c06\u7a7a\u5b57\u7b26\u4e32\u89c6\u4e3a\u6709\u6548\u503c\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a\uff0c False \u5219\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u65e0\u6548\uff0c\u5e76\u5c06\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a False \u3002 html_cutoff - \u5982\u679c\u8bbe\u7f6e\uff0c\u5219\u5c06\u662fHTML select\u4e0b\u62c9\u5217\u8868\u5c06\u663e\u793a\u7684\u6700\u5927\u9009\u62e9\u6570\u3002\u53ef\u4ee5\u7528\u6765\u786e\u4fdd\u81ea\u52a8\u751f\u6210\u7684ChoiceFields\u5177\u6709\u975e\u5e38\u5927\u7684\u9009\u62e9\u8303\u56f4\uff0c\u4e0d\u4f1a\u963b\u6b62\u6a21\u677f\u7684\u5448\u73b0\u3002\u9ed8\u8ba4\u4e3a None \u3002 html_cutoff_text - \u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u9009\u9879\uff0c\u5219\u5982\u679c\u5728HTML\u9009\u62e9\u4e0b\u62c9\u5217\u8868\u4e2d\u5df2\u622a\u65ad\u6700\u5927\u6570\u91cf\u7684\u9879\u76ee\uff0c\u5219\u5b83\u5c06\u663e\u793a\u6587\u672c\u6307\u793a\u5668\u3002\u9ed8\u8ba4\u4e3a \"More than {count} items\u2026\" \u3002 \u65e0\u8bba\u662f allow_blank \u4e0e allow_null \u4e0a\u6709\u6548\u7684\u9009\u9879 ChoiceField \uff0c\u4f46\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u60a8\u53ea\u4f7f\u7528\u4e00\u4e2a\uff0c\u800c\u4e0d\u662f\u4e24\u4e2a\u3002 allow_blank \u5e94\u8be5\u9996\u9009\u7528\u4e8e\u6587\u672c\u9009\u62e9\uff0c\u5e76\u4e14 allow_null \u5e94\u8be5\u9996\u9009\u7528\u4e8e\u6570\u5b57\u6216\u5176\u4ed6\u975e\u6587\u672c\u9009\u62e9\u3002","title":"ChoiceField"},{"location":"api-guide/fields_zh/#multiplechoicefield","text":"\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u4e00\u7ec4\u96f6\u4e2a\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u503c\u7684\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u503c\u662f\u4ece\u4e00\u7ec4\u6709\u9650\u7684\u9009\u62e9\u4e2d\u9009\u62e9\u7684\u3002\u63a5\u53d7\u4e00\u4e2a\u5f3a\u5236\u6027\u53c2\u6570\u3002 to_internal_value \u8fd4\u56de set \u5305\u542b\u6240\u9009\u503c\u7684\u3002 \u7b7e\u540d\uff1a MultipleChoiceField(choices) choices - \u6709\u6548\u503c\u5217\u8868\u6216 (key, display_name) \u5143\u7ec4\u5217\u8868\u3002 allow_blank - \u5982\u679c\u8bbe\u7f6e\u4e3a True \uff0c\u5219\u5e94\u5c06\u7a7a\u5b57\u7b26\u4e32\u89c6\u4e3a\u6709\u6548\u503c\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a\uff0c False \u5219\u8ba4\u4e3a\u7a7a\u5b57\u7b26\u4e32\u65e0\u6548\uff0c\u5e76\u5c06\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a False \u3002 html_cutoff - \u5982\u679c\u8bbe\u7f6e\uff0c\u5219\u5c06\u662fHTML select\u4e0b\u62c9\u5217\u8868\u5c06\u663e\u793a\u7684\u6700\u5927\u9009\u62e9\u6570\u3002\u53ef\u4ee5\u7528\u6765\u786e\u4fdd\u81ea\u52a8\u751f\u6210\u7684ChoiceFields\u5177\u6709\u975e\u5e38\u5927\u7684\u9009\u62e9\u8303\u56f4\uff0c\u4e0d\u4f1a\u963b\u6b62\u6a21\u677f\u7684\u5448\u73b0\u3002\u9ed8\u8ba4\u4e3a None \u3002 html_cutoff_text - \u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u9009\u9879\uff0c\u5219\u5982\u679c\u5728HTML\u9009\u62e9\u4e0b\u62c9\u5217\u8868\u4e2d\u5df2\u622a\u65ad\u6700\u5927\u6570\u91cf\u7684\u9879\u76ee\uff0c\u5219\u5b83\u5c06\u663e\u793a\u6587\u672c\u6307\u793a\u5668\u3002\u9ed8\u8ba4\u4e3a \"More than {count} items\u2026\" \u3002 \u4e0e ChoiceField \u4e00\u6837\uff0c allow_blank \u548c allow_null \u9009\u9879\u90fd\u6709\u6548\uff0c\u5c3d\u7ba1\u5f3a\u70c8\u5efa\u8bae\u60a8\u4ec5\u4f7f\u7528\u4e00\u4e2a\uff0c\u800c\u4e0d\u8981\u540c\u65f6\u4f7f\u7528\u3002 allow_blank \u5e94\u8be5\u9996\u9009\u7528\u4e8e\u6587\u672c\u9009\u62e9\uff0c\u5e76\u4e14 allow_null \u5e94\u8be5\u9996\u9009\u7528\u4e8e\u6570\u5b57\u6216\u5176\u4ed6\u975e\u6587\u672c\u9009\u62e9\u3002","title":"MultipleChoiceField"},{"location":"api-guide/fields_zh/#_9","text":"","title":"\u6587\u4ef6\u4e0a\u4f20\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#_10","text":"FileField \u548c ImageField \u7c7b\u662f\u4ec5\u9002\u7528\u4e8e\u4f7f\u7528 MultiPartParser \u6216 FileUploadParser \u7684\u3002\u5927\u591a\u6570\u89e3\u6790\u5668\uff08\u4f8b\u5982JSON\uff09\u4e0d\u652f\u6301\u6587\u4ef6\u4e0a\u4f20\u3002Django\u7684\u5e38\u89c4 FILE_UPLOAD_HANDLERS \u7528\u4e8e\u5904\u7406\u4e0a\u4f20\u7684\u6587\u4ef6\u3002","title":"\u89e3\u6790\u548c\u6587\u4ef6\u4e0a\u4f20"},{"location":"api-guide/fields_zh/#filefield","text":"\u8868\u793a\u6587\u4ef6\u3002\u6267\u884cDjango\u7684\u6807\u51c6FileField\u9a8c\u8bc1\u3002 \u5bf9\u5e94\u4e8e django.forms.fields.FileField . \u7b7e\u540d\uff1a FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL) max_length - \u6307\u5b9a\u6587\u4ef6\u540d\u7684\u6700\u5927\u957f\u5ea6\u3002 allow_empty_file - \u6307\u5b9a\u662f\u5426\u5141\u8bb8\u7a7a\u6587\u4ef6\u3002 use_url - \u5982\u679c\u8bbe\u7f6e\u4e3a True \u5219URL\u5b57\u7b26\u4e32\u503c\u5c06\u7528\u4e8e\u8f93\u51fa\u8868\u793a\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a False \u5219\u6587\u4ef6\u540d\u5b57\u7b26\u4e32\u503c\u5c06\u7528\u4e8e\u8f93\u51fa\u8868\u793a\u3002\u9ed8\u8ba4\u4e3a UPLOADED_FILES_USE_URL \u8bbe\u7f6e\u952e\u7684\u503c\uff0c\u9664\u975e\u53e6\u6709\u8bbe\u7f6e\uff0c\u5426\u5219\u4e3a\u9ed8\u8ba4\u503c True \u3002","title":"FileField"},{"location":"api-guide/fields_zh/#imagefield","text":"\u8868\u793a\u56fe\u7247\u3002 \u9a8c\u8bc1\u4e0a\u4f20\u7684\u6587\u4ef6\u5185\u5bb9\u662f\u5426\u4e0e\u5df2\u77e5\u56fe\u50cf\u683c\u5f0f\u5339\u914d\u3002 \u5bf9\u5e94\u4e8e django.forms.fields.ImageField . \u7b7e\u540d\uff1a ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL) max_length - \u6307\u5b9a\u6587\u4ef6\u540d\u7684\u6700\u5927\u957f\u5ea6\u3002 allow_empty_file - \u6307\u5b9a\u662f\u5426\u5141\u8bb8\u7a7a\u6587\u4ef6\u3002 use_url - \u5982\u679c\u8bbe\u7f6e\u4e3a True \u5219URL\u5b57\u7b26\u4e32\u503c\u5c06\u7528\u4e8e\u8f93\u51fa\u8868\u793a\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a False \u5219\u6587\u4ef6\u540d\u5b57\u7b26\u4e32\u503c\u5c06\u7528\u4e8e\u8f93\u51fa\u8868\u793a\u3002\u9ed8\u8ba4\u4e3a UPLOADED_FILES_USE_URL \u8bbe\u7f6e\u952e\u7684\u503c\uff0c\u9664\u975e\u53e6\u6709\u8bbe\u7f6e\uff0c\u5426\u5219\u4e3a\u9ed8\u8ba4\u503c True \u3002 \u9700\u8981\u5b89\u88c5 Pillow \u5305\u6216 PIL \u5305\u3002\u63a8\u8350\u4f7f\u7528 Pillow \u5305\uff0c\u56e0\u4e3a PIL \u5305\u5df2\u7ecf\u4e0d\u79ef\u6781\u7ef4\u62a4\u3002","title":"ImageField"},{"location":"api-guide/fields_zh/#_11","text":"","title":"\u590d\u5408\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#listfield","text":"\u9a8c\u8bc1\u5bf9\u8c61\u5217\u8868\u7684\u5b57\u6bb5\u7c7b\u3002 \u7b7e\u540d : ListField(child, min_length=None, max_length=None) child - \u5e94\u8be5\u7528\u4e8e\u9a8c\u8bc1\u5217\u8868\u4e2d\u5bf9\u8c61\u7684\u5b57\u6bb5\u5b9e\u4f8b\u3002\u5982\u679c\u672a\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5219\u5c06\u4e0d\u9a8c\u8bc1\u5217\u8868\u4e2d\u7684\u5bf9\u8c61\u3002 min_length - \u9a8c\u8bc1\u5217\u8868\u4e2d\u5305\u542b\u7684\u5143\u7d20\u4e0d\u5c11\u4e8e\u6b64\u6570\u91cf\u3002 max_length - \u9a8c\u8bc1\u5217\u8868\u4e2d\u6240\u5305\u542b\u7684\u5143\u7d20\u6570\u91cf\u4e0d\u8d85\u8fc7\u6b64\u6570\u91cf\u3002 \u4f8b\u5982\uff0c\u8981\u9a8c\u8bc1\u6574\u6570\u5217\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u6240\u793a\u7684\u5185\u5bb9\uff1a scores = serializers.ListField( child=serializers.IntegerField(min_value=0, max_value=100) ) ListField \u7c7b\u8fd8\u652f\u6301\u58f0\u660e\u5f0f\u6837\u5f0f\uff0c\u8be5\u6837\u5f0f\u5141\u8bb8\u4f60\u7f16\u5199\u53ef\u91cd\u7528\u7684\u5217\u8868\u5b57\u6bb5\u7c7b\u3002 class StringListField(serializers.ListField): child = serializers.CharField() \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u91cd\u7528\u81ea\u5b9a\u4e49\u7684 StringListField \u7c7b\uff0c\u800c\u4e0d\u5fc5\u4e3a\u5176\u63d0\u4f9b child \u53c2\u6570\u3002","title":"ListField"},{"location":"api-guide/fields_zh/#dictfield","text":"\u4e00\u4e2a\u9a8c\u8bc1\u5bf9\u8c61\u5b57\u5178\u7684\u5b57\u6bb5\u7c7b\u3002 DictField \u4e2d\u7684key\u90fd\u603b\u662f\u5047\u5b9a\u4e3a\u5b57\u7b26\u4e32\u503c\u3002 \u7b7e\u540d : DictField(child) child - \u5e94\u8be5\u7528\u4e8e\u9a8c\u8bc1\u5b57\u5178\u4e2d\u503c\u7684\u5b57\u6bb5\u5b9e\u4f8b\u3002\u5982\u679c\u672a\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5219\u5c06\u4e0d\u9a8c\u8bc1\u6620\u5c04\u4e2d\u7684\u503c\u3002 allow_empty - \u6307\u5b9a\u662f\u5426\u5141\u8bb8\u7a7a\u5b57\u5178\u3002 \u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u9a8c\u8bc1\u5b57\u7b26\u4e32\u5230\u5b57\u7b26\u4e32\u6620\u5c04\u7684\u5b57\u6bb5\uff0c\u4f60\u53ef\u4ee5\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\uff1a document = DictField(child=CharField()) \u4f60\u4e5f\u53ef\u4ee5\u50cf\u4f7f\u7528\u4e00\u6837\u4f7f\u7528\u58f0\u660e\u5f0f\u6837\u5f0f ListField \u3002\u4f8b\u5982\uff1a class DocumentField(DictField): child = CharField()","title":"DictField"},{"location":"api-guide/fields_zh/#hstorefield","text":"\u9884\u7559\u7684 DictField \u517c\u5bb9Django\u7684postgres HStoreField \u5b57\u6bb5\u3002 \u7b7e\u540d\uff1a HStoreField(child=<A_FIELD_INSTANCE>, allow_empty=True) child - \u5e94\u8be5\u7528\u4e8e\u9a8c\u8bc1\u5b57\u5178\u4e2d\u503c\u7684\u5b57\u6bb5\u5b9e\u4f8b\u3002\u5982\u679c\u672a\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5219\u5c06\u4e0d\u9a8c\u8bc1\u6620\u5c04\u4e2d\u7684\u503c\u3002 allow_empty - \u6307\u5b9a\u662f\u5426\u5141\u8bb8\u7a7a\u5b57\u5178\u3002 \u6ce8\u610f\u5b50\u5b57\u6bb5 \u5fc5\u987b \u662f CharField \u7684\u5b9e\u4f8b\uff0c\u56e0\u4e3ahstore\u7684\u6269\u5c55\u5b58\u50a8\u503c\u4e3a\u5b57\u7b26\u4e32\u3002","title":"HStoreField"},{"location":"api-guide/fields_zh/#jsonfield","text":"\u4e00\u4e2a\u5b57\u6bb5\u7c7b\uff0c\u7528\u4e8e\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u7ed3\u6784\u662f\u5426\u5305\u542b\u6709\u6548\u7684JSON\u539f\u8bed\u3002\u5728\u5176\u5907\u7528\u4e8c\u8fdb\u5236\u6a21\u5f0f\u4e0b\uff0c\u5b83\u5c06\u8868\u793a\u5e76\u9a8c\u8bc1JSON\u7f16\u7801\u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u3002 \u7b7e\u540d : JSONField(binary) binary - \u5982\u679c\u8bbe\u7f6e\u4e3a True \u5219\u8be5\u5b57\u6bb5\u5c06\u8f93\u51fa\u5e76\u9a8c\u8bc1JSON\u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u539f\u59cb\u6570\u636e\u7ed3\u6784\u3002\u9ed8\u8ba4\u4e3a False \u3002 encoder - \u4f7f\u7528\u8fd9\u4e2a\u7f16\u7801\u5668\u5e8f\u5217\u5316\u8f93\u5165\u7684\u5bf9\u8c61\u3002\u9ed8\u8ba4\u662f None \u3002","title":"JSONField"},{"location":"api-guide/fields_zh/#_12","text":"","title":"\u6742\u9879\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#readonlyfield","text":"\u4e00\u4e2a\u5b57\u6bb5\u7c7b\uff0c\u4ec5\u8fd4\u56de\u8be5\u5b57\u6bb5\u7684\u503c\u800c\u65e0\u9700\u4fee\u6539\u3002 ModelSerializer \u5f53\u5305\u542b\u4e0e\u5c5e\u6027\u800c\u4e0d\u662f\u6a21\u578b\u5b57\u6bb5\u76f8\u5173\u7684\u5b57\u6bb5\u540d\u79f0\u65f6\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u6b64\u5b57\u6bb5\u3002 \u7b7e\u540d : ReadOnlyField() \u4f8b\u5982\uff0c\u5982\u679c has_expired \u662f Account \u6a21\u578b\u7684\u5c5e\u6027\uff0c\u5219\u4ee5\u4e0b\u5e8f\u5217\u5316\u5668\u5c06\u81ea\u52a8\u5c06\u5176\u751f\u6210\u4e3a ReadOnlyField \uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ('id', 'account_name', 'has_expired')","title":"ReadOnlyField"},{"location":"api-guide/fields_zh/#hiddenfield","text":"\u4e00\u4e2a\u5b57\u6bb5\u7c7b\uff0c\u5b83\u4e0d\u57fa\u4e8e\u7528\u6237\u8f93\u5165\u83b7\u53d6\u503c\uff0c\u800c\u662f\u4ece\u9ed8\u8ba4\u503c\u6216\u53ef\u8c03\u7528\u5bf9\u8c61\u83b7\u53d6\u5176\u503c\u3002 \u7b7e\u540d : HiddenField() \u4f8b\u5982\uff0c\u8981\u5305\u62ec\u4e00\u4e2a\u59cb\u7ec8\u63d0\u4f9b\u5f53\u524d\u65f6\u95f4\u7684\u5b57\u6bb5\u4f5c\u4e3a\u5e8f\u5217\u5316\u7a0b\u5e8f\u9a8c\u8bc1\u6570\u636e\u7684\u4e00\u90e8\u5206\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\uff1a modified = serializers.HiddenField(default=timezone.now) HiddenField \u901a\u5e38\u53ea\u6709\u5728\u4f60\u9700\u8981\u57fa\u4e8e\u67d0\u4e9b\u9884\u5148\u63d0\u4f9b\u7684\u5b57\u6bb5\u503c\u6765\u8fd0\u884c\u67d0\u4e9b\u9a8c\u8bc1\uff0c\u800c\u53c8\u4e0d\u60f3\u5c06\u6240\u6709\u8fd9\u4e9b\u5b57\u6bb5\u516c\u5f00\u7ed9\u6700\u7ec8\u7528\u6237\u65f6\uff0c\u624d\u9700\u8981\u4f7f\u7528\u8be5\u7c7b\u3002 \u6709\u5173 HiddenField \u7684\u66f4\u591a\u793a\u4f8b\uff0c\u8bf7\u53c2\u7167 validators \u6587\u6863\u3002","title":"HiddenField"},{"location":"api-guide/fields_zh/#modelfield","text":"\u53ef\u4ee5\u7ed1\u5b9a\u5230\u4efb\u610f\u6a21\u578b\u5b57\u6bb5\u7684\u901a\u7528\u5b57\u6bb5\u3002 ModelField \u7c7b\u5c06\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u4efb\u52a1\u59d4\u6258\u7ed9\u4e0e\u5176\u5173\u8054\u7684model\u5b57\u6bb5\u3002 \u6b64\u5b57\u6bb5\u53ef\u7528\u4e8e\u4e3a\u81ea\u5b9a\u4e49\u6a21\u578b\u5b57\u6bb5\u521b\u5efa\u5e8f\u5217\u5316\u7a0b\u5e8f\u5b57\u6bb5\uff0c\u800c\u4e0d\u5fc5\u521b\u5efa\u65b0\u7684\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u7a0b\u5e8f\u5b57\u6bb5\u3002 \u8be5\u5b57\u6bb5\u7528\u4e8e ModelSerializer \u5bf9\u5e94\u4e8e\u81ea\u5b9a\u4e49\u6a21\u578b\u5b57\u6bb5\u7c7b\u3002 \u7b7e\u540d: ModelField(model_field=<Django ModelField instance>) ModelField \u4e00\u822c\u7528\u4e8e\u5185\u90e8\u4f7f\u7528\uff0c\u4f46\u5982\u679c\u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u901a\u8fc7\u4f60\u7684API\u4f7f\u7528\u3002\u4e3a\u4e86\u6b63\u786e\u5730\u5b9e\u4f8b\u5316 ModelField \uff0c\u5fc5\u987b\u4f20\u9012\u4e00\u4e2a\u9644\u52a0\u5230\u5b9e\u4f8b\u5316\u6a21\u578b\u7684\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a ModelField(model_field=MyModel()._meta.get_field('custom_field')) \u3002","title":"ModelField"},{"location":"api-guide/fields_zh/#serializermethodfield","text":"\u8fd9\u662f\u4e00\u4e2a\u53ea\u8bfb\u5b57\u6bb5\u3002\u5b83\u901a\u8fc7\u5728\u9644\u52a0\u7684\u5e8f\u5217\u5316\u5668\u7c7b\u4e0a\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u6765\u83b7\u53d6\u5176\u503c\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u5c06\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u6dfb\u52a0\u5230\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4e2d\u3002 \u7b7e\u540d : SerializerMethodField(method_name=None) method_name - \u8981\u8c03\u7528\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e0a\u7684\u65b9\u6cd5\u7684\u540d\u79f0\u3002\u5982\u679c\u672a\u5305\u62ec\uff0c\u5219\u9ed8\u8ba4\u4e3a get_<field_name> \u3002 method_name \u53c2\u6570\u5f15\u7528\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u65b9\u6cd5\u5e94\u63a5\u53d7\u5355\u4e2a\u53c2\u6570\uff08\u9664\u4e86\u4e4b\u5916 self \uff09\uff0c\u8be5\u53c2\u6570\u662f\u8981\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u3002\u5b83\u5e94\u8be5\u8fd4\u56de\u8981\u5305\u542b\u5728\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4e2d\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u4f8b\u5982\uff1a from django.contrib.auth.models import User from django.utils.timezone import now from rest_framework import serializers class UserSerializer(serializers.ModelSerializer): days_since_joined = serializers.SerializerMethodField() class Meta: model = User def get_days_since_joined(self, obj): return (now() - obj.date_joined).days","title":"SerializerMethodField"},{"location":"api-guide/fields_zh/#_13","text":"\u5982\u679c\u8981\u521b\u5efa\u81ea\u5b9a\u4e49\u5b57\u6bb5\uff0c\u5219\u9700\u8981\u7ee7\u627f Field \u7c7b\uff0c\u7136\u540e\u91cd\u5199 .to_representation() \u548c .to_internal_value() \u65b9\u6cd5\u4e4b\u4e00\u6216\u4e8c\u8005\u3002\u8fd9\u4e24\u79cd\u65b9\u6cd5\u7528\u4e8e\u5728\u521d\u59cb\u6570\u636e\u7c7b\u578b\u548c\u539f\u59cb\u7684\u53ef\u5e8f\u5217\u5316\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u57fa\u672c\u6570\u636e\u7c7b\u578b\u901a\u5e38\u662f\u4efb\u4f55\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\uff0c\u5e03\u5c14\uff0c date/time/datetime \u6216 None \u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u662f\u4ec5\u5305\u542b\u5176\u4ed6\u539f\u59cb\u5bf9\u8c61\u7684\u4efb\u4f55\u5217\u8868\u6216\u5b57\u5178\u4e4b\u7c7b\u7684\u5bf9\u8c61\u3002\u6839\u636e\u60a8\u4f7f\u7528\u7684\u6e32\u67d3\u5668\uff0c\u53ef\u80fd\u652f\u6301\u5176\u4ed6\u7c7b\u578b\u3002 .to_representation() \u8c03\u7528\u8be5\u65b9\u6cd5\u53ef\u5c06\u521d\u59cb\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a\u539f\u59cb\u7684\u53ef\u5e8f\u5217\u5316\u6570\u636e\u7c7b\u578b\u3002 to_internal_value() \u8c03\u7528\u8be5\u65b9\u6cd5\u53ef\u5c06\u539f\u59cb\u6570\u636e\u7c7b\u578b\u6062\u590d\u4e3a\u5176\u5185\u90e8python\u8868\u793a\u5f62\u5f0f\u3002\u5982\u679c\u6570\u636e\u65e0\u6548\uff0c\u5219\u6b64\u65b9\u6cd5\u5e94\u629b\u51fa\u4e00\u4e2a serializers.ValidationError \u3002","title":"\u81ea\u5b9a\u4e49\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#_14","text":"","title":"\u793a\u4f8b"},{"location":"api-guide/fields_zh/#_15","text":"\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u5e8f\u5217\u5316\u4ee3\u8868RGB\u989c\u8272\u503c\u7684\u7c7b\u7684\u793a\u4f8b\uff1a class Color: \"\"\" A color represented in the RGB colorspace. \"\"\" def __init__(self, red, green, blue): assert(red >= 0 and green >= 0 and blue >= 0) assert(red < 256 and green < 256 and blue < 256) self.red, self.green, self.blue = red, green, blue class ColorField(serializers.Field): \"\"\" Color objects are serialized into 'rgb(#, #, #)' notation. \"\"\" def to_representation(self, value): return \"rgb(%d, %d, %d)\" % (value.red, value.green, value.blue) def to_internal_value(self, data): data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] return Color(red, green, blue) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b57\u6bb5\u503c\u88ab\u89c6\u4e3a\u6620\u5c04\u5230\u5bf9\u8c61\u4e0a\u7684\u5c5e\u6027\u3002\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u5982\u4f55\u8bbf\u95ee\u548c\u8bbe\u7f6e\u5b57\u6bb5\u503c\uff0c\u5219\u9700\u8981\u8986\u76d6 .get_attribute() \u548c/\u6216 .get_value() \u3002 \u4f8b\u5982\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u53ef\u7528\u6765\u8868\u793a\u8981\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u7684\u7c7b\u540d\uff1a class ClassNameField(serializers.Field): def get_attribute(self, instance): # We pass the object instance onto `to_representation`, # not just the field attribute. return instance def to_representation(self, value): \"\"\" Serialize the value's class name. \"\"\" return value.__class__.__name__","title":"\u57fa\u7840\u81ea\u5b9a\u4e49\u5b57\u6bb5"},{"location":"api-guide/fields_zh/#_16","text":"\u6211\u4eec\u4e0a\u9762\u7684 ColorField \u7c7b\u76ee\u524d\u4e0d\u6267\u884c\u4efb\u4f55\u6570\u636e\u9a8c\u8bc1\u3002 \u4e3a\u4e86\u6307\u793a\u65e0\u6548\u6570\u636e\uff0c\u6211\u4eec\u5e94\u8be5\u5f15\u53d1\u4e00\u4e2a serializers.ValidationError \uff0c\u5982\u4e0b\u6240\u793a\uff1a def to_internal_value(self, data): if not isinstance(data, str): msg = 'Incorrect type. Expected a string, but got %s' raise ValidationError(msg % type(data).__name__) if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data): raise ValidationError('Incorrect format. Expected `rgb(#,#,#)`.') data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] if any([col > 255 or col < 0 for col in (red, green, blue)]): raise ValidationError('Value out of range. Must be between 0 and 255.') return Color(red, green, blue) .fail() \u65b9\u6cd5\u662f\u5f15\u53d1\u7684\u5feb\u6377\u65b9\u5f0f ValidationError \uff0c\u5b83\u4ece error_messages \u5b57\u5178\u4e2d\u83b7\u53d6\u6d88\u606f\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff1a default_error_messages = { 'incorrect_type': 'Incorrect type. Expected a string, but got {input_type}', 'incorrect_format': 'Incorrect format. Expected `rgb(#,#,#)`.', 'out_of_range': 'Value out of range. Must be between 0 and 255.' } def to_internal_value(self, data): if not isinstance(data, str): self.fail('incorrect_type', input_type=type(data).__name__) if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data): self.fail('incorrect_format') data = data.strip('rgb(').rstrip(')') red, green, blue = [int(col) for col in data.split(',')] if any([col > 255 or col < 0 for col in (red, green, blue)]): self.fail('out_of_range') return Color(red, green, blue) \u8fd9\u79cd\u6837\u5f0f\u4f7f\u60a8\u7684\u9519\u8bef\u6d88\u606f\u4e0e\u4ee3\u7801\u66f4\u6e05\u6670\u5730\u5206\u5f00\uff0c\u56e0\u6b64\u5e94\u9996\u9009\u3002","title":"\u629b\u51fa\u9a8c\u8bc1\u5f02\u5e38"},{"location":"api-guide/fields_zh/#source_1","text":"\u8fd9\u91cc\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a \u5e73\u9762 \u7684 DataPoint \u6a21\u578b\uff0c\u6709 x_coordinate \u548c y_coordinate \u5b57\u6bb5\u3002 class DataPoint(models.Model): label = models.CharField(max_length=50) x_coordinate = models.SmallIntegerField() y_coordinate = models.SmallIntegerField() \u4f7f\u7528\u81ea\u5b9a\u4e49\u5b57\u6bb5\u548c source='*' \uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210\u5750\u6807\u5bf9\u7684\u5d4c\u5957\u8868\u793a\uff1a class CoordinateField(serializers.Field): def to_representation(self, value): ret = { \"x\": value.x_coordinate, \"y\": value.y_coordinate } return ret def to_internal_value(self, data): ret = { \"x_coordinate\": data[\"x\"], \"y_coordinate\": data[\"y\"], } return ret class DataPointSerializer(serializers.ModelSerializer): coordinates = CoordinateField(source='*') class Meta: model = DataPoint fields = ['label', 'coordinates'] \u6ce8\u610f\u8fd9\u4e2a\u4f8b\u5b50\u4e0d\u80fd\u8fdb\u884c\u9a8c\u8bc1\u3002\u90e8\u5206\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u5728\u771f\u5b9e\u7684\u9879\u76ee\u4e2d\uff0c\u4f7f\u7528\u6709 source='*' \u53c2\u6570\u7684\u5e8f\u5217\u5316\u5668\u548c\u4e24\u4e2a\u6709\u81ea\u5df1\u7684 source \u53c2\u6570\u6307\u5411\u5173\u8054\u7684\u5b57\u6bb5\u7684 IntegerField \u5b9e\u4f8b\u6765\u8868\u793a\u5d4c\u5957\u5750\u6807\u66f4\u597d\u3002 to_representation \u4f20\u5165\u6574\u4e2a DataPoint \u5bf9\u8c61\uff0c\u5fc5\u987b\u5c06\u5176\u6620\u5c04\u5230\u6240\u9700\u7684\u8f93\u51fa\u3002 >>> instance = DataPoint(label='Example', x_coordinate=1, y_coordinate=2) >>> out_serializer = DataPointSerializer(instance) >>> out_serializer.data ReturnDict([('label', 'Example'), ('coordinates', {'x': 1, 'y': 2})]) \u9664\u975e\u6211\u4eec\u7684\u5b57\u6bb5\u65f6\u53ea\u8bfb\u7684\uff0c to_internal_value \u5fc5\u987b\u6620\u5c04\u56de\u9002\u5408\u66f4\u65b0\u76ee\u6807\u5bf9\u8c61\u7684\u5b57\u5178\u3002\u4f7f\u7528 source='*' \uff0c to_internal_value \u7684\u8fd4\u56de\u53ef\u4ee5\u66f4\u65b0\u9a8c\u8bc1\u7684\u6570\u636e\u5b57\u5178\uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u952e\u3002 >>> data = { ... \"label\": \"Second Example\", ... \"coordinates\": { ... \"x\": 3, ... \"y\": 4, ... } ... } >>> in_serializer = DataPointSerializer(data=data) >>> in_serializer.is_valid() True >>> in_serializer.validated_data OrderedDict([('label', 'Second Example'), ('y_coordinate', 4), ('x_coordinate', 3)]) \u4e3a\u4e86\u5b8c\u6574\u6027\uff0c\u8ba9\u6211\u4eec\u518d\u6b21\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u4f46\u4f7f\u7528\u4e0a\u9762\u5efa\u8bae\u7684\u5d4c\u5957\u5e8f\u5217\u5316\u7a0b\u5e8f\u65b9\u6cd5\uff1a class NestedCoordinateSerializer(serializers.Serializer): x = serializers.IntegerField(source='x_coordinate') y = serializers.IntegerField(source='y_coordinate') class DataPointSerializer(serializers.ModelSerializer): coordinates = NestedCoordinateSerializer(source='*') class Meta: model = DataPoint fields = ['label', 'coordinates'] \u8fd9\u91cc\u5728 IntegerField \u58f0\u660e\u4e2d\u5904\u7406\u76ee\u6807\u548c\u6e90\u5c5e\u6027\u5bf9( x \u548c x_coherate \uff0c y \u548c y_cocoate )\u4e4b\u95f4\u7684\u6620\u5c04\u3002\u5b83\u5c31\u662f\u63a5\u53d7 source=\u2018*\u2019 \u7684 NestedConsulateSerializer \u3002 \u6211\u4eec\u7684\u65b0 DataPointSerializer \u4e0e\u81ea\u5b9a\u4e49\u5b57\u6bb5\u65b9\u6cd5\u884c\u4e3a\u76f8\u540c\u3002 \u5e8f\u5217\u5316\uff1a >>> out_serializer.data ReturnDict([('label', 'testing'), ('coordinates', OrderedDict([('x', 1), ('y', 2)]))]) \u53cd\u5e8f\u5217\u5316\uff1a >>> in_serializer = DataPointSerializer(data=data) >>> in_serializer.is_valid() True >>> in_serializer.validated_data OrderedDict([('label', 'still testing'), ('x_coordinate', 3), ('y_coordinate', 4)]) \u6211\u4eec\u540c\u6837\u6709\u5185\u7f6e\u7684\u9a8c\u8bc1\u5668\uff1a >>> invalid_data = { ... \"label\": \"still testing\", ... \"coordinates\": { ... \"x\": 'a', ... \"y\": 'b', ... } ... } >>> invalid_serializer = DataPointSerializer(data=invalid_data) >>> invalid_serializer.is_valid() False >>> invalid_serializer.errors ReturnDict([('coordinates', {'x': ['A valid integer is required.'], 'y': ['A valid integer is required.']})]) \u56e0\u6b64\uff0c\u5d4c\u5957\u5e8f\u5217\u5316\u7a0b\u5e8f\u65b9\u6cd5\u5c06\u662f\u7b2c\u4e00\u4e2a\u5c1d\u8bd5\u7684\u65b9\u6cd5\u3002\u5f53\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u53d8\u5f97\u4e0d\u53ef\u884c\u6216\u8fc7\u4e8e\u590d\u6742\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u5b57\u6bb5\u65b9\u6cd5\u3002","title":"\u4f7f\u7528source='*'"},{"location":"api-guide/fields_zh/#_17","text":"\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u4e5f\u53ef\u4f7f\u7528\u3002","title":"\u7b2c\u4e09\u65b9\u5305"},{"location":"api-guide/fields_zh/#drf-compound-fields","text":"drf-compound-fields \u5305\u63d0\u4f9b\u4e86\u201c\u590d\u5408\u201d\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\uff0c\u4f8b\u5982\u7b80\u5355\u503c\u5217\u8868\uff0c\u53ef\u4ee5\u7531\u5176\u4ed6\u5b57\u6bb5\u6765\u63cf\u8ff0\uff0c\u800c\u4e0d\u662f\u5e26\u6709 many = True \u9009\u9879\u7684\u5e8f\u5217\u5316\u5668\u3002 \u8fd8\u63d0\u4f9b\u4e86\u7528\u4e8e\u952e\u5165\u5b57\u5178\u548c\u503c\u7684\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u53ef\u4ee5\u662f\u7279\u5b9a\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u8be5\u7c7b\u578b\u7684\u9879\u76ee\u7684\u5217\u8868\u3002","title":"DRF Compound Fields"},{"location":"api-guide/fields_zh/#drf-extra-fields","text":"drf-extra-fields \u5305\u4e3aREST\u6846\u67b6\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\uff0c\u5305\u62ec Base64ImageField \u548c PointField \u7c7b\u3002","title":"DRF Extra Fields"},{"location":"api-guide/fields_zh/#djangrestframework-recursive","text":"djangorestframework-recursive \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a RecursiveField \uff0c\u7528\u4e8e\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u9012\u5f52\u7ed3\u6784","title":"djangrestframework-recursive"},{"location":"api-guide/fields_zh/#django-rest-framework-gis","text":"django-rest-framework-gis \u5305\u4e3adjango rest\u6846\u67b6\u63d0\u4f9b\u4e86\u5730\u7406\u63d2\u4ef6\uff0c\u4f8b\u5982 GeometryField \u5b57\u6bb5\u548cGeoJSON\u5e8f\u5217\u5316\u5668\u3002","title":"django-rest-framework-gis"},{"location":"api-guide/fields_zh/#django-rest-framework-hstore","text":"The django-rest-framework-hstore \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a HStoreField \u6765\u652f\u6301 django-hstore DictionaryField \u6a21\u578b\u5b57\u6bb5\u3002","title":"django-rest-framework-hstore"},{"location":"api-guide/filtering/","text":"Filtering The root QuerySet provided by the Manager describes all objects in the database table. Usually, though, you'll need to select only a subset of the complete set of objects. \u2014 Django documentation The default behavior of REST framework's generic list views is to return the entire queryset for a model manager. Often you will want your API to restrict the items that are returned by the queryset. The simplest way to filter the queryset of any view that subclasses GenericAPIView is to override the .get_queryset() method. Overriding this method allows you to customize the queryset returned by the view in a number of different ways. Filtering against the current user You might want to filter the queryset to ensure that only results relevant to the currently authenticated user making the request are returned. You can do so by filtering based on the value of request.user . For example: from myapp.models import Purchase from myapp.serializers import PurchaseSerializer from rest_framework import generics class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" This view should return a list of all the purchases for the currently authenticated user. \"\"\" user = self.request.user return Purchase.objects.filter(purchaser=user) Filtering against the URL Another style of filtering might involve restricting the queryset based on some part of the URL. For example if your URL config contained an entry like this: re_path('^purchases/(?P<username>.+)/$', PurchaseList.as_view()), You could then write a view that returned a purchase queryset filtered by the username portion of the URL: class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" This view should return a list of all the purchases for the user as determined by the username portion of the URL. \"\"\" username = self.kwargs['username'] return Purchase.objects.filter(purchaser__username=username) Filtering against query parameters A final example of filtering the initial queryset would be to determine the initial queryset based on query parameters in the url. We can override .get_queryset() to deal with URLs such as http://example.com/api/purchases?username=denvercoder9 , and filter the queryset only if the username parameter is included in the URL: class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" Optionally restricts the returned purchases to a given user, by filtering against a `username` query parameter in the URL. \"\"\" queryset = Purchase.objects.all() username = self.request.query_params.get('username', None) if username is not None: queryset = queryset.filter(purchaser__username=username) return queryset Generic Filtering As well as being able to override the default queryset, REST framework also includes support for generic filtering backends that allow you to easily construct complex searches and filters. Generic filters can also present themselves as HTML controls in the browsable API and admin API. Setting filter backends The default filter backends may be set globally, using the DEFAULT_FILTER_BACKENDS setting. For example. REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'] } You can also set the filter backends on a per-view, or per-viewset basis, using the GenericAPIView class-based views. import django_filters.rest_framework from django.contrib.auth.models import User from myapp.serializers import UserSerializer from rest_framework import generics class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = [django_filters.rest_framework.DjangoFilterBackend] Filtering and object lookups Note that if a filter backend is configured for a view, then as well as being used to filter list views, it will also be used to filter the querysets used for returning a single object. For instance, given the previous example, and a product with an id of 4675 , the following URL would either return the corresponding object, or return a 404 response, depending on if the filtering conditions were met by the given product instance: http://example.com/api/products/4675/?category=clothing&max_price=10.00 Overriding the initial queryset Note that you can use both an overridden .get_queryset() and generic filtering together, and everything will work as expected. For example, if Product had a many-to-many relationship with User , named purchase , you might want to write a view like this: class PurchasedProductsList(generics.ListAPIView): \"\"\" Return a list of all the products that the authenticated user has ever purchased, with optional filtering. \"\"\" model = Product serializer_class = ProductSerializer filterset_class = ProductFilter def get_queryset(self): user = self.request.user return user.purchase_set.all() API Guide DjangoFilterBackend The django-filter library includes a DjangoFilterBackend class which supports highly customizable field filtering for REST framework. To use DjangoFilterBackend , first install django-filter . pip install django-filter Then add 'django_filters' to Django's INSTALLED_APPS : INSTALLED_APPS = [ ... 'django_filters', ... ] You should now either add the filter backend to your settings: REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'] } Or add the filter backend to an individual View or ViewSet. from django_filters.rest_framework import DjangoFilterBackend class UserListView(generics.ListAPIView): ... filter_backends = [DjangoFilterBackend] If all you need is simple equality-based filtering, you can set a filterset_fields attribute on the view, or viewset, listing the set of fields you wish to filter against. class ProductList(generics.ListAPIView): queryset = Product.objects.all() serializer_class = ProductSerializer filter_backends = [DjangoFilterBackend] filterset_fields = ['category', 'in_stock'] This will automatically create a FilterSet class for the given fields, and will allow you to make requests such as: http://example.com/api/products?category=clothing&in_stock=True For more advanced filtering requirements you can specify a FilterSet class that should be used by the view. You can read more about FilterSet s in the django-filter documentation . It's also recommended that you read the section on DRF integration . SearchFilter The SearchFilter class supports simple single query parameter based searching, and is based on the Django admin's search functionality . When in use, the browsable API will include a SearchFilter control: The SearchFilter class will only be applied if the view has a search_fields attribute set. The search_fields attribute should be a list of names of text type fields on the model, such as CharField or TextField . from rest_framework import filters class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = [filters.SearchFilter] search_fields = ['username', 'email'] This will allow the client to filter the items in the list by making queries such as: http://example.com/api/users?search=russell You can also perform a related lookup on a ForeignKey or ManyToManyField with the lookup API double-underscore notation: search_fields = ['username', 'email', 'profile__profession'] For JSONField and HStoreField fields you can filter based on nested values within the data structure using the same double-underscore notation: search_fields = ['data__breed', 'data__owner__other_pets__0__name'] By default, searches will use case-insensitive partial matches. The search parameter may contain multiple search terms, which should be whitespace and/or comma separated. If multiple search terms are used then objects will be returned in the list only if all the provided terms are matched. The search behavior may be restricted by prepending various characters to the search_fields . '^' Starts-with search. '=' Exact matches. '@' Full-text search. (Currently only supported Django's PostgreSQL backend .) '$' Regex search. For example: search_fields = ['=username', '=email'] By default, the search parameter is named 'search' , but this may be overridden with the SEARCH_PARAM setting. To dynamically change search fields based on request content, it's possible to subclass the SearchFilter and override the get_search_fields() function. For example, the following subclass will only search on title if the query parameter title_only is in the request: from rest_framework import filters class CustomSearchFilter(filters.SearchFilter): def get_search_fields(self, view, request): if request.query_params.get('title_only'): return ['title'] return super(CustomSearchFilter, self).get_search_fields(view, request) For more details, see the Django documentation . OrderingFilter The OrderingFilter class supports simple query parameter controlled ordering of results. By default, the query parameter is named 'ordering' , but this may by overridden with the ORDERING_PARAM setting. For example, to order users by username: http://example.com/api/users?ordering=username The client may also specify reverse orderings by prefixing the field name with '-', like so: http://example.com/api/users?ordering=-username Multiple orderings may also be specified: http://example.com/api/users?ordering=account,username Specifying which fields may be ordered against It's recommended that you explicitly specify which fields the API should allowing in the ordering filter. You can do this by setting an ordering_fields attribute on the view, like so: class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = [filters.OrderingFilter] ordering_fields = ['username', 'email'] This helps prevent unexpected data leakage, such as allowing users to order against a password hash field or other sensitive data. If you don't specify an ordering_fields attribute on the view, the filter class will default to allowing the user to filter on any readable fields on the serializer specified by the serializer_class attribute. If you are confident that the queryset being used by the view doesn't contain any sensitive data, you can also explicitly specify that a view should allow ordering on any model field or queryset aggregate, by using the special value '__all__' . class BookingsListView(generics.ListAPIView): queryset = Booking.objects.all() serializer_class = BookingSerializer filter_backends = [filters.OrderingFilter] ordering_fields = '__all__' Specifying a default ordering If an ordering attribute is set on the view, this will be used as the default ordering. Typically you'd instead control this by setting order_by on the initial queryset, but using the ordering parameter on the view allows you to specify the ordering in a way that it can then be passed automatically as context to a rendered template. This makes it possible to automatically render column headers differently if they are being used to order the results. class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = [filters.OrderingFilter] ordering_fields = ['username', 'email'] ordering = ['username'] The ordering attribute may be either a string or a list/tuple of strings. Custom generic filtering You can also provide your own generic filtering backend, or write an installable app for other developers to use. To do so override BaseFilterBackend , and override the .filter_queryset(self, request, queryset, view) method. The method should return a new, filtered queryset. As well as allowing clients to perform searches and filtering, generic filter backends can be useful for restricting which objects should be visible to any given request or user. Example For example, you might need to restrict users to only being able to see objects they created. class IsOwnerFilterBackend(filters.BaseFilterBackend): \"\"\" Filter that only allows users to see their own objects. \"\"\" def filter_queryset(self, request, queryset, view): return queryset.filter(owner=request.user) We could achieve the same behavior by overriding get_queryset() on the views, but using a filter backend allows you to more easily add this restriction to multiple views, or to apply it across the entire API. Customizing the interface Generic filters may also present an interface in the browsable API. To do so you should implement a to_html() method which returns a rendered HTML representation of the filter. This method should have the following signature: to_html(self, request, queryset, view) The method should return a rendered HTML string. Pagination & schemas You can also make the filter controls available to the schema autogeneration that REST framework provides, by implementing a get_schema_fields() method. This method should have the following signature: get_schema_fields(self, view) The method should return a list of coreapi.Field instances. Third party packages The following third party packages provide additional filter implementations. Django REST framework filters package The django-rest-framework-filters package works together with the DjangoFilterBackend class, and allows you to easily create filters across relationships, or create multiple filter lookup types for a given field. Django REST framework full word search filter The djangorestframework-word-filter developed as alternative to filters.SearchFilter which will search full word in text, or exact match. Django URL Filter django-url-filter provides a safe way to filter data via human-friendly URLs. It works very similar to DRF serializers and fields in a sense that they can be nested except they are called filtersets and filters. That provides easy way to filter related data. Also this library is generic-purpose so it can be used to filter other sources of data and not only Django QuerySet s. drf-url-filters drf-url-filter is a simple Django app to apply filters on drf ModelViewSet 's Queryset in a clean, simple and configurable way. It also supports validations on incoming query params and their values. A beautiful python package Voluptuous is being used for validations on the incoming query parameters. The best part about voluptuous is you can define your own validations as per your query params requirements.","title":"Filtering"},{"location":"api-guide/filtering/#filtering","text":"The root QuerySet provided by the Manager describes all objects in the database table. Usually, though, you'll need to select only a subset of the complete set of objects. \u2014 Django documentation The default behavior of REST framework's generic list views is to return the entire queryset for a model manager. Often you will want your API to restrict the items that are returned by the queryset. The simplest way to filter the queryset of any view that subclasses GenericAPIView is to override the .get_queryset() method. Overriding this method allows you to customize the queryset returned by the view in a number of different ways.","title":"Filtering"},{"location":"api-guide/filtering/#filtering-against-the-current-user","text":"You might want to filter the queryset to ensure that only results relevant to the currently authenticated user making the request are returned. You can do so by filtering based on the value of request.user . For example: from myapp.models import Purchase from myapp.serializers import PurchaseSerializer from rest_framework import generics class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" This view should return a list of all the purchases for the currently authenticated user. \"\"\" user = self.request.user return Purchase.objects.filter(purchaser=user)","title":"Filtering against the current user"},{"location":"api-guide/filtering/#filtering-against-the-url","text":"Another style of filtering might involve restricting the queryset based on some part of the URL. For example if your URL config contained an entry like this: re_path('^purchases/(?P<username>.+)/$', PurchaseList.as_view()), You could then write a view that returned a purchase queryset filtered by the username portion of the URL: class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" This view should return a list of all the purchases for the user as determined by the username portion of the URL. \"\"\" username = self.kwargs['username'] return Purchase.objects.filter(purchaser__username=username)","title":"Filtering against the URL"},{"location":"api-guide/filtering/#filtering-against-query-parameters","text":"A final example of filtering the initial queryset would be to determine the initial queryset based on query parameters in the url. We can override .get_queryset() to deal with URLs such as http://example.com/api/purchases?username=denvercoder9 , and filter the queryset only if the username parameter is included in the URL: class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" Optionally restricts the returned purchases to a given user, by filtering against a `username` query parameter in the URL. \"\"\" queryset = Purchase.objects.all() username = self.request.query_params.get('username', None) if username is not None: queryset = queryset.filter(purchaser__username=username) return queryset","title":"Filtering against query parameters"},{"location":"api-guide/filtering/#generic-filtering","text":"As well as being able to override the default queryset, REST framework also includes support for generic filtering backends that allow you to easily construct complex searches and filters. Generic filters can also present themselves as HTML controls in the browsable API and admin API.","title":"Generic Filtering"},{"location":"api-guide/filtering/#setting-filter-backends","text":"The default filter backends may be set globally, using the DEFAULT_FILTER_BACKENDS setting. For example. REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'] } You can also set the filter backends on a per-view, or per-viewset basis, using the GenericAPIView class-based views. import django_filters.rest_framework from django.contrib.auth.models import User from myapp.serializers import UserSerializer from rest_framework import generics class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = [django_filters.rest_framework.DjangoFilterBackend]","title":"Setting filter backends"},{"location":"api-guide/filtering/#filtering-and-object-lookups","text":"Note that if a filter backend is configured for a view, then as well as being used to filter list views, it will also be used to filter the querysets used for returning a single object. For instance, given the previous example, and a product with an id of 4675 , the following URL would either return the corresponding object, or return a 404 response, depending on if the filtering conditions were met by the given product instance: http://example.com/api/products/4675/?category=clothing&max_price=10.00","title":"Filtering and object lookups"},{"location":"api-guide/filtering/#overriding-the-initial-queryset","text":"Note that you can use both an overridden .get_queryset() and generic filtering together, and everything will work as expected. For example, if Product had a many-to-many relationship with User , named purchase , you might want to write a view like this: class PurchasedProductsList(generics.ListAPIView): \"\"\" Return a list of all the products that the authenticated user has ever purchased, with optional filtering. \"\"\" model = Product serializer_class = ProductSerializer filterset_class = ProductFilter def get_queryset(self): user = self.request.user return user.purchase_set.all()","title":"Overriding the initial queryset"},{"location":"api-guide/filtering/#api-guide","text":"","title":"API Guide"},{"location":"api-guide/filtering/#djangofilterbackend","text":"The django-filter library includes a DjangoFilterBackend class which supports highly customizable field filtering for REST framework. To use DjangoFilterBackend , first install django-filter . pip install django-filter Then add 'django_filters' to Django's INSTALLED_APPS : INSTALLED_APPS = [ ... 'django_filters', ... ] You should now either add the filter backend to your settings: REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'] } Or add the filter backend to an individual View or ViewSet. from django_filters.rest_framework import DjangoFilterBackend class UserListView(generics.ListAPIView): ... filter_backends = [DjangoFilterBackend] If all you need is simple equality-based filtering, you can set a filterset_fields attribute on the view, or viewset, listing the set of fields you wish to filter against. class ProductList(generics.ListAPIView): queryset = Product.objects.all() serializer_class = ProductSerializer filter_backends = [DjangoFilterBackend] filterset_fields = ['category', 'in_stock'] This will automatically create a FilterSet class for the given fields, and will allow you to make requests such as: http://example.com/api/products?category=clothing&in_stock=True For more advanced filtering requirements you can specify a FilterSet class that should be used by the view. You can read more about FilterSet s in the django-filter documentation . It's also recommended that you read the section on DRF integration .","title":"DjangoFilterBackend"},{"location":"api-guide/filtering/#searchfilter","text":"The SearchFilter class supports simple single query parameter based searching, and is based on the Django admin's search functionality . When in use, the browsable API will include a SearchFilter control: The SearchFilter class will only be applied if the view has a search_fields attribute set. The search_fields attribute should be a list of names of text type fields on the model, such as CharField or TextField . from rest_framework import filters class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = [filters.SearchFilter] search_fields = ['username', 'email'] This will allow the client to filter the items in the list by making queries such as: http://example.com/api/users?search=russell You can also perform a related lookup on a ForeignKey or ManyToManyField with the lookup API double-underscore notation: search_fields = ['username', 'email', 'profile__profession'] For JSONField and HStoreField fields you can filter based on nested values within the data structure using the same double-underscore notation: search_fields = ['data__breed', 'data__owner__other_pets__0__name'] By default, searches will use case-insensitive partial matches. The search parameter may contain multiple search terms, which should be whitespace and/or comma separated. If multiple search terms are used then objects will be returned in the list only if all the provided terms are matched. The search behavior may be restricted by prepending various characters to the search_fields . '^' Starts-with search. '=' Exact matches. '@' Full-text search. (Currently only supported Django's PostgreSQL backend .) '$' Regex search. For example: search_fields = ['=username', '=email'] By default, the search parameter is named 'search' , but this may be overridden with the SEARCH_PARAM setting. To dynamically change search fields based on request content, it's possible to subclass the SearchFilter and override the get_search_fields() function. For example, the following subclass will only search on title if the query parameter title_only is in the request: from rest_framework import filters class CustomSearchFilter(filters.SearchFilter): def get_search_fields(self, view, request): if request.query_params.get('title_only'): return ['title'] return super(CustomSearchFilter, self).get_search_fields(view, request) For more details, see the Django documentation .","title":"SearchFilter"},{"location":"api-guide/filtering/#orderingfilter","text":"The OrderingFilter class supports simple query parameter controlled ordering of results. By default, the query parameter is named 'ordering' , but this may by overridden with the ORDERING_PARAM setting. For example, to order users by username: http://example.com/api/users?ordering=username The client may also specify reverse orderings by prefixing the field name with '-', like so: http://example.com/api/users?ordering=-username Multiple orderings may also be specified: http://example.com/api/users?ordering=account,username","title":"OrderingFilter"},{"location":"api-guide/filtering/#specifying-which-fields-may-be-ordered-against","text":"It's recommended that you explicitly specify which fields the API should allowing in the ordering filter. You can do this by setting an ordering_fields attribute on the view, like so: class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = [filters.OrderingFilter] ordering_fields = ['username', 'email'] This helps prevent unexpected data leakage, such as allowing users to order against a password hash field or other sensitive data. If you don't specify an ordering_fields attribute on the view, the filter class will default to allowing the user to filter on any readable fields on the serializer specified by the serializer_class attribute. If you are confident that the queryset being used by the view doesn't contain any sensitive data, you can also explicitly specify that a view should allow ordering on any model field or queryset aggregate, by using the special value '__all__' . class BookingsListView(generics.ListAPIView): queryset = Booking.objects.all() serializer_class = BookingSerializer filter_backends = [filters.OrderingFilter] ordering_fields = '__all__'","title":"Specifying which fields may be ordered against"},{"location":"api-guide/filtering/#specifying-a-default-ordering","text":"If an ordering attribute is set on the view, this will be used as the default ordering. Typically you'd instead control this by setting order_by on the initial queryset, but using the ordering parameter on the view allows you to specify the ordering in a way that it can then be passed automatically as context to a rendered template. This makes it possible to automatically render column headers differently if they are being used to order the results. class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = [filters.OrderingFilter] ordering_fields = ['username', 'email'] ordering = ['username'] The ordering attribute may be either a string or a list/tuple of strings.","title":"Specifying a default ordering"},{"location":"api-guide/filtering/#custom-generic-filtering","text":"You can also provide your own generic filtering backend, or write an installable app for other developers to use. To do so override BaseFilterBackend , and override the .filter_queryset(self, request, queryset, view) method. The method should return a new, filtered queryset. As well as allowing clients to perform searches and filtering, generic filter backends can be useful for restricting which objects should be visible to any given request or user.","title":"Custom generic filtering"},{"location":"api-guide/filtering/#example","text":"For example, you might need to restrict users to only being able to see objects they created. class IsOwnerFilterBackend(filters.BaseFilterBackend): \"\"\" Filter that only allows users to see their own objects. \"\"\" def filter_queryset(self, request, queryset, view): return queryset.filter(owner=request.user) We could achieve the same behavior by overriding get_queryset() on the views, but using a filter backend allows you to more easily add this restriction to multiple views, or to apply it across the entire API.","title":"Example"},{"location":"api-guide/filtering/#customizing-the-interface","text":"Generic filters may also present an interface in the browsable API. To do so you should implement a to_html() method which returns a rendered HTML representation of the filter. This method should have the following signature: to_html(self, request, queryset, view) The method should return a rendered HTML string.","title":"Customizing the interface"},{"location":"api-guide/filtering/#pagination-schemas","text":"You can also make the filter controls available to the schema autogeneration that REST framework provides, by implementing a get_schema_fields() method. This method should have the following signature: get_schema_fields(self, view) The method should return a list of coreapi.Field instances.","title":"Pagination &amp; schemas"},{"location":"api-guide/filtering/#third-party-packages","text":"The following third party packages provide additional filter implementations.","title":"Third party packages"},{"location":"api-guide/filtering/#django-rest-framework-filters-package","text":"The django-rest-framework-filters package works together with the DjangoFilterBackend class, and allows you to easily create filters across relationships, or create multiple filter lookup types for a given field.","title":"Django REST framework filters package"},{"location":"api-guide/filtering/#django-rest-framework-full-word-search-filter","text":"The djangorestframework-word-filter developed as alternative to filters.SearchFilter which will search full word in text, or exact match.","title":"Django REST framework full word search filter"},{"location":"api-guide/filtering/#django-url-filter","text":"django-url-filter provides a safe way to filter data via human-friendly URLs. It works very similar to DRF serializers and fields in a sense that they can be nested except they are called filtersets and filters. That provides easy way to filter related data. Also this library is generic-purpose so it can be used to filter other sources of data and not only Django QuerySet s.","title":"Django URL Filter"},{"location":"api-guide/filtering/#drf-url-filters","text":"drf-url-filter is a simple Django app to apply filters on drf ModelViewSet 's Queryset in a clean, simple and configurable way. It also supports validations on incoming query params and their values. A beautiful python package Voluptuous is being used for validations on the incoming query parameters. The best part about voluptuous is you can define your own validations as per your query params requirements.","title":"drf-url-filters"},{"location":"api-guide/filtering_zh/","text":"Filtering \u201c \u7531Django Manager\u63d0\u4f9b\u7684\u6839QuerySet\u63cf\u8ff0\u4e86\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u3002\u53ef\u662f\u901a\u5e38\u4f60\u9700\u8981\u7684\u53ea\u662f\u9009\u62e9\u5b8c\u6574\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5b50\u96c6\u800c\u5df2\u3002 \u2014\u2014 Django\u6587\u6863 \u201d REST framework\u5217\u8868\u89c6\u56fe\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u8fd4\u56de\u4e00\u4e2amodel\u7684\u5168\u90e8queryset\u3002\u901a\u5e38\u4f60\u5374\u60f3\u8981\u4f60\u7684API\u6765\u9650\u5236queryset\u8fd4\u56de\u7684\u6570\u636e\u3002 \u6700\u7b80\u5355\u7684\u8fc7\u6ee4\u4efb\u610f GenericAPIView \u5b50\u89c6\u56fequeryset\u7684\u65b9\u6cd5\u5c31\u662f\u91cd\u5199\u5b83\u7684 .get_queryset() \u65b9\u6cd5\u3002 \u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u5141\u8bb8\u4f60\u4f7f\u7528\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u5b9a\u5236\u89c6\u56fe\u8fd4\u56de\u7684queryset\u3002 Filtering against the current user\uff08\u6839\u636e\u5f53\u524d\u7528\u6237\u8fdb\u884c\u8fc7\u6ee4\uff09 \u60a8\u53ef\u80fd\u60f3\u8981\u8fc7\u6ee4queryset\uff0c\u4ee5\u786e\u4fdd\u53ea\u8fd4\u56de\u4e0e\u53d1\u51fa\u8bf7\u6c42\u7684\u5f53\u524d\u5df2\u9a8c\u8bc1\u7528\u6237\u76f8\u5173\u7684\u7ed3\u679c\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u57fa\u4e8erequest.user\u7684\u503c\u8fdb\u884c\u8fc7\u6ee4\u6765\u5b9e\u73b0\u3002 \u6bd4\u5982\uff1a from myapp.models import Purchase from myapp.serializers import PurchaseSerializer from rest_framework import generics class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" This view should return a list of all the purchases for the currently authenticated user. \"\"\" user = self.request.user return Purchase.objects.filter(purchaser=user) Filtering against the URL\uff08\u6839\u636eURL\u8fdb\u884c\u8fc7\u6ee4\uff09 \u53e6\u4e00\u79cd\u8fc7\u6ee4\u65b9\u5f0f\u53ef\u80fd\u5305\u62ec\u57fa\u4e8eURL\u7684\u67d0\u4e9b\u90e8\u5206\u6765\u9650\u5236queryset\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684URL\u914d\u7f6e\u5305\u542b\u4e00\u4e2a\u53c2\u6570\u5982\u4e0b: url('^purchases/(?P<username>.+)/$', PurchaseList.as_view()), \u4f60\u5c31\u53ef\u4ee5\u5199\u4e00\u4e2aview\uff0c\u8fd4\u56de\u57fa\u4e8eURL\u4e2d\u7684username\u53c2\u6570\u8fdb\u884c\u8fc7\u6ee4\u7684\u7ed3\u679c\u3002 class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" This view should return a list of all the purchases for the user as determined by the username portion of the URL. \"\"\" username = self.kwargs['username'] return Purchase.objects.filter(purchaser__username=username) Filtering against query parameters\uff08\u6839\u636e\u67e5\u8be2\u53c2\u6570\u8fdb\u884c\u8fc7\u6ee4\uff09 \u8fc7\u6ee4\u521d\u59cb\u67e5\u8be2\u96c6\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u662f\u57fa\u4e8eurl\u4e2d\u7684\u67e5\u8be2\u53c2\u6570\u786e\u5b9a\u521d\u59cb\u67e5\u8be2\u96c6\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 .get_queryset() \u65b9\u6cd5\u6765\u5904\u7406\u50cf http://example.com/api/purchases?username=denvercoder9 \u8fd9\u6837\u7684\u7f51\u5740\uff0c\u5e76\u4e14\u53ea\u6709\u5728URL\u4e2d\u5305\u542b username \u53c2\u6570\u65f6\uff0c\u624d\u8fc7\u6ee4queryset\uff1a class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" Optionally restricts the returned purchases to a given user, by filtering against a `username` query parameter in the URL. \"\"\" queryset = Purchase.objects.all() username = self.request.query_params.get('username', None) if username is not None: queryset = queryset.filter(purchaser__username=username) return queryset Generic Filtering\uff08\u901a\u7528\u8fc7\u6ee4\uff09 \u9664\u4e86\u80fd\u591f\u91cd\u5199\u9ed8\u8ba4\u7684queryset\uff0cREST\u6846\u67b6\u8fd8\u5305\u62ec\u5bf9\u901a\u7528\u8fc7\u6ee4\u540e\u7aef\u7684\u652f\u6301\uff0c\u5141\u8bb8\u4f60\u8f7b\u677e\u6784\u5efa\u590d\u6742\u7684\u68c0\u7d22\u5668\u548c\u8fc7\u6ee4\u5668\u3002 \u901a\u7528\u8fc7\u6ee4\u5668\u4e5f\u53ef\u4ee5\u5728browsable API\u548cadmin API\u4e2d\u663e\u793a\u4e3aHTML\u63a7\u4ef6\u3002 Setting filter backends\uff08\u8bbe\u7f6e\u901a\u7528\u8fc7\u6ee4\u540e\u7aef\uff09 \u9ed8\u8ba4\u8fc7\u6ee4\u5668\u540e\u7aef\u53ef\u4ee5\u5728\u5168\u5c40\u8bbe\u7f6e\u4e2d\u4f7f\u7528 DEFAULT_FILTER_BACKENDS \u6765\u914d\u7f6e\u3002\u4f8b\u5982\u3002 REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',) } \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e GenericAPIView \u7c7b\u7684\u89c6\u56fe\u5728\u6bcf\u4e2aview\u6216\u6bcf\u4e2aviewset\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8fc7\u6ee4\u5668\u540e\u7aef\u3002 import django_filters.rest_framework from django.contrib.auth.models import User from myapp.serializers import UserSerializer from rest_framework import generics class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = (django_filters.rest_framework.DjangoFilterBackend,) Filtering and object lookups\uff08\u8fc7\u6ee4\u548c\u5bf9\u8c61\u67e5\u627e\uff09 \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4e3aview\u914d\u7f6e\u8fc7\u6ee4\u5668\u540e\u7aef\uff0c\u5e76\u4e14\u7528\u4e8e\u8fc7\u6ee4list views\uff0c\u5219\u5b83\u4e5f\u5c06\u7528\u4e8e\u8fc7\u6ee4\u7528\u4e8e\u8fd4\u56de\u5355\u4e2a\u5bf9\u8c61\u7684queryset\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u524d\u9762\u7684\u793a\u4f8b\u4ee5\u53ca\u4e00\u4e2aID\u4e3a 4675 \u7684\u4ea7\u54c1\uff0c\u4ee5\u4e0bURL\u5c06\u8fd4\u56de\u76f8\u5e94\u7684\u5bf9\u8c61\u6216\u8005\u8fd4\u56de404\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u7ed9\u5b9a\u7684\u4ea7\u54c1\u5b9e\u4f8b\u662f\u5426\u6ee1\u8db3\u7b5b\u9009\u6761\u4ef6\u3002 http://example.com/api/products/4675/?category=clothing&max_price=10.00 Overriding the initial queryset\uff08\u8986\u76d6\u521d\u59cbqueryset\uff09 \u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u91cd\u5199 .get_queryset() \u65b9\u6cd5\u6216\u4f7f\u7528\u901a\u7528\u8fc7\u6ee4\uff0c\u5e76\u4e14\u4e00\u5207\u90fd\u4f1a\u6309\u7167\u9884\u671f\u751f\u6548\u3002 \u4f8b\u5982\uff0c\u5982\u679c Product \u4e0e User \uff08\u540d\u4e3a purchase \uff09\u5177\u6709\u591a\u5bf9\u591a\u5173\u7cfb\uff0c\u5219\u53ef\u80fd\u9700\u8981\u7f16\u5199\u5982\u4e0b\u6240\u793a\u7684view\uff1a class PurchasedProductsList(generics.ListAPIView): \"\"\" Return a list of all the products that the authenticated user has ever purchased, with optional filtering. \"\"\" model = Product serializer_class = ProductSerializer filter_class = ProductFilter def get_queryset(self): user = self.request.user return user.purchase_set.all() API Guide DjangoFilterBackend\uff08Django\u8fc7\u6ee4\u540e\u7aef\uff09 django-filter \u5e93\u5305\u542b\u4e00\u4e2a\u4e3aREST framework\u63d0\u4f9b\u9ad8\u5ea6\u53ef\u5b9a\u5236\u5b57\u6bb5\u8fc7\u6ee4\u7684 DjangoFilterBackend \u7c7b\u3002 \u8981\u4f7f\u7528 DjangoFilterBackend \uff0c\u9996\u5148\u8981\u5148\u5b89\u88c5 django-filter \u3002 pip install django-filter \u73b0\u5728\uff0c\u4f60\u9700\u8981\u5c06filter backend \u6dfb\u52a0\u5230\u4f60django project\u7684settings\u4e2d\uff1a REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'] } \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u5c06filter backend\u6dfb\u52a0\u5230\u4e00\u4e2a\u5355\u72ec\u7684view\u6216viewSet\u4e2d\uff1a from django_filters.rest_framework import DjangoFilterBackend class UserListView(generics.ListAPIView): ... filter_backends = [DjangoFilterBackend] \u5982\u679c\u53ea\u9700\u8981\u7b80\u5355\u7684\u6839\u636e\u662f\u5426\u76f8\u7b49\u7684\u8fc7\u6ee4\uff0c\u5219\u53ef\u4ee5\u5728\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u4e0a\u8bbe\u7f6e filterset_fields \u5c5e\u6027\uff0c\u5217\u51fa\u8981\u8fc7\u6ee4\u7684\u5b57\u6bb5\u96c6\u5408\u3002 class ProductList(generics.ListAPIView): queryset = Product.objects.all() serializer_class = ProductSerializer filter_backends = [DjangoFilterBackend] filterset_fields = ['category', 'in_stock'] \u8fd9\u5c06\u81ea\u52a8\u4e3a\u7ed9\u5b9a\u7684\u5b57\u6bb5\u521b\u5efa\u4e00\u4e2a FilterSet \u7c7b\uff0c\u5e76\u5141\u8bb8\u4f60\u53d1\u51fa\u5982\u4e0b\u8bf7\u6c42\uff1a http://example.com/api/products?category=clothing&in_stock=True \u5bf9\u4e8e\u66f4\u9ad8\u7ea7\u7684\u8fc7\u6ee4\u8981\u6c42\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u89c6\u56fe\u5e94\u4f7f\u7528\u7684 FilterSet \u7c7b\u3002\u4f60\u53ef\u4ee5\u5728 django-filter \u6587\u6863\u4e2d\u9605\u8bfb\u6709\u5173FilterSets\u7684\u66f4\u591a\u4fe1\u606f\u3002\u8fd8\u5efa\u8bae\u4f60\u9605\u8bfb\u6709\u5173 DRF\u96c6\u6210 \u7684\u90e8\u5206\u3002 Specifying filter fields\uff08\u6307\u5b9a\u7b5b\u9009\u5b57\u6bb5\uff09 \u5982\u679c\u4f60\u7684\u9700\u6c42\u90fd\u662f\u4e9b\u7b80\u5355\u76f8\u7b49\u7c7b\u578b\u7684\u7b5b\u9009\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u4f60\u7684view\u6216viewSet\u91cc\u9762\u8bbe\u7f6e\u4e00\u4e2a filter_fields \u5c5e\u6027\uff0c\u5217\u51fa\u6240\u6709\u4f60\u60f3\u4f9d\u9760\u7b5b\u9009\u7684\u5b57\u6bb5\u96c6\u5408\u3002 class ProductList(generics.ListAPIView): queryset = Product.objects.all() serializer_class = ProductSerializer filter_backends = (filters.DjangoFilterBackend,) filter_fields = ('category', 'in_stock') \u8fd9\u5c06\u4e3a\u4f60\u5217\u51fa\u6765\u7684\u5b57\u6bb5\u81ea\u52a8\u521b\u5efa\u4e00\u4e2afilterSet\uff0c\u5141\u8bb8\u4f60\u60f3\u4e0b\u9762\u8fd9\u6837\u8bf7\u6c42\u7b5b\u9009\u7ed3\u679c\uff1a http://example.com/api/products?category=clothing&in_stock=True Specifying a FilterSet\uff08\u6307\u5b9aFilterSet\uff09 \u5bf9\u4e8e\u66f4\u9ad8\u7ea7\u7684\u8fc7\u6ee4\u8981\u6c42\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u5728view\u4e2d\u5e94\u8be5\u4f7f\u7528\u7684 FilterSet \u7c7b\u3002\u4f8b\u5982\uff1a import django_filters from myapp.models import Product from myapp.serializers import ProductSerializer from rest_framework import generics class ProductFilter(django_filters.rest_framework.FilterSet): min_price = django_filters.NumberFilter(name=\"price\", lookup_expr='gte') max_price = django_filters.NumberFilter(name=\"price\", lookup_expr='lte') class Meta: model = Product fields = ['category', 'in_stock', 'min_price', 'max_price'] class ProductList(generics.ListAPIView): queryset = Product.objects.all() serializer_class = ProductSerializer filter_backends = (django_filters.rest_framework.DjangoFilterBackend,) filter_class = ProductFilter \u8fd9\u5c06\u5141\u8bb8\u4f60\u5411\u4e0b\u9762\u4e00\u6837\u53d1\u51fa\u8bf7\u6c42\uff0c\u5982\uff1a http://example.com/api/products?category=clothing&max_price=10.00 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 django-filter \u8de8\u8d8a\u5173\u7cfb\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u4ea7\u54c1\u90fd\u6709 Manufacturer \u6a21\u578b\u7684\u5916\u952e\uff0c\u6240\u4ee5\u6211\u4eec\u521b\u5efa\u8fc7\u6ee4\u5668\u4f7f\u7528 Manufacturer \u540d\u79f0\u8fc7\u6ee4\u3002\u4f8b\u5982\uff1a import django_filters from myapp.models import Product from myapp.serializers import ProductSerializer from rest_framework import generics class ProductFilter(django_filters.rest_framework.FilterSet): class Meta: model = Product fields = ['category', 'in_stock', 'manufacturer__name'] \u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u8fdb\u884c\u5982\u4e0b\u67e5\u8be2\uff1a http://example.com/api/products?manufacturer__name=foo \u8fd9\u5f88\u597d\uff0c\u4f46\u5b83\u5c06Django\u7684\u53cc\u4e0b\u5212\u7ebf\u7ea6\u5b9a\u4f5c\u4e3aAPI\u7684\u4e00\u90e8\u5206\u66b4\u9732\u51fa\u6765\u3002\u5982\u679c\u4f60\u60f3\u663e\u5f0f\u5730\u547d\u540d\u8fc7\u6ee4\u5668\u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u663e\u5f0f\u5730\u5c06\u5b83\u5305\u542b\u5728 FilterSet \u7c7b\u4e2d\uff1a import django_filters from myapp.models import Product from myapp.serializers import ProductSerializer from rest_framework import generics class ProductFilter(django_filters.rest_framework.FilterSet): manufacturer = django_filters.CharFilter(name=\"manufacturer__name\") class Meta: model = Product fields = ['category', 'in_stock', 'manufacturer'] \u73b0\u5728\u4f60\u53ef\u4ee5\u4e0b\u9762\u8fd9\u6837\u6267\u884c\uff1a http://example.com/api/products?manufacturer=foo \u6709\u5173\u4f7f\u7528\u8fc7\u6ee4\u5668\u96c6\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 django-filter\u6587\u6863 \u3002 Hints & Tips\uff08\u63d0\u793a\uff09 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528\u8fc7\u6ee4\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528 DjangoFilterBackend \u8bb0\u5f97\u786e\u4fdd\u5b83\u662f\u901a\u8fc7\u4f7f\u7528 DEFAULT_FILTER_BACKENDS \u8bbe\u7f6e\u5b89\u88c5\u7684\u3002 \u4f7f\u7528\u5e03\u5c14\u5b57\u6bb5\u65f6\uff0c\u60a8\u5e94\u8be5\u5728\u7f51\u5740\u67e5\u8be2\u53c2\u6570\u4e2d\u4f7f\u7528 True \u548c False \u503c\uff0c\u800c\u4e0d\u662f 0 \uff0c 1 \uff0c true \u6216 false \u3002 \uff08\u5141\u8bb8\u7684\u5e03\u5c14\u503c\u76ee\u524d\u786c\u8fde\u7ebf\u5728Django\u7684 NullBooleanSelect\u5b9e\u73b0\u4e2d \u3002\uff09 django-filter \u652f\u6301\u4f7f\u7528Django\u7684\u53cc\u4e0b\u5212\u7ebf\u8bed\u6cd5\u5bf9\u5173\u7cfb\u8fdb\u884c\u8fc7\u6ee4\u3002 SearchFilter\uff08\u641c\u7d22\u8fc7\u6ee4\uff09 SearchFilter \u7c7b\u652f\u6301\u57fa\u4e8e\u7b80\u5355\u5355\u67e5\u8be2\u53c2\u6570\u7684\u641c\u7d22\uff0c\u5e76\u4e14\u57fa\u4e8e Django admin\u7684\u641c\u7d22\u529f\u80fd \u3002 \u5728\u4f7f\u7528\u65f6\uff0c browsable API\u5c06\u5305\u62ec\u4e00\u4e2a SearchFilter \u63a7\u4ef6\uff1a \u4ec5\u5f53view\u4e2d\u8bbe\u7f6e\u4e86 search_fields \u5c5e\u6027\u65f6\uff0c\u624d\u5e94\u7528 SearchFilter \u7c7b\u3002 search_fields \u5c5e\u6027\u5e94\u8be5\u662fmodel\u4e2d\u6587\u672c\u7c7b\u578b\u5b57\u6bb5\u7684\u540d\u79f0\u5217\u8868\uff0c\u4f8b\u5982 CharField \u6216 TextField \u3002 class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = (filters.SearchFilter,) search_fields = ('username', 'email') \u8fd9\u5c06\u5141\u8bb8\u5ba2\u6237\u7aef\u901a\u8fc7\u8fdb\u884c\u4ee5\u4e0b\u67e5\u8be2\u6765\u8fc7\u6ee4\u5217\u8868\u4e2d\u7684\u9879\u76ee\uff1a http://example.com/api/users?search=russell \u4f60\u8fd8\u53ef\u4ee5\u5728\u67e5\u627eAPI\u4e2d\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u7b26\u53f7\u5bf9ForeignKey\u6216ManyToManyField\u6267\u884c\u76f8\u5173\u67e5\u627e\uff1a search_fields = ('username', 'email', 'profile__profession') \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u5c06\u4f7f\u7528\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u90e8\u5206\u5339\u914d\u3002 \u641c\u7d22\u53c2\u6570\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u641c\u7d22\u9879\uff0c\u5176\u5e94\u8be5\u662f\u7a7a\u683c\u548c/\u6216\u9017\u53f7\u5206\u9694\u3002 \u5982\u679c\u4f7f\u7528\u591a\u4e2a\u641c\u7d22\u672f\u8bed\uff0c\u5219\u4ec5\u5f53\u6240\u6709\u63d0\u4f9b\u7684\u672f\u8bed\u90fd\u5339\u914d\u65f6\u624d\u5728\u5217\u8868\u4e2d\u8fd4\u56de\u5bf9\u8c61\u3002 \u53ef\u4ee5\u901a\u8fc7\u5728 search_fields \u524d\u9762\u6dfb\u52a0\u5404\u79cd\u5b57\u7b26\u6765\u9650\u5236\u641c\u7d22\u884c\u4e3a\u3002 '^' \u4ee5\u6307\u5b9a\u5185\u5bb9\u5f00\u59cb. '=' \u5b8c\u5168\u5339\u914d '@' \u5168\u6587\u641c\u7d22\uff08\u76ee\u524d\u53ea\u652f\u6301Django\u7684MySQL\u540e\u7aef\uff09 '$' \u6b63\u5219\u641c\u7d22 \u4f8b\u5982\uff1a search_fields = ('=username', '=email') \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u53c2\u6570\u540d\u4e3a 'search' \uff0c\u4f46\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 SEARCH_PARAM \u8bbe\u7f6e\u8986\u76d6\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Django\u6587\u6863 \u3002 OrderingFilter\uff08\u6392\u5e8f\u7b5b\u9009\uff09 OrderingFilter \u7c7b\u652f\u6301\u7b80\u5355\u7684\u67e5\u8be2\u53c2\u6570\u63a7\u5236\u7ed3\u679c\u6392\u5e8f\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u67e5\u8be2\u53c2\u6570\u540d\u4e3a 'ordering' \uff0c\u4f46\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ORDERING_PARAM \u8bbe\u7f6e\u8986\u76d6\u3002 \u4f8b\u5982\uff0c\u6309\u7528\u6237\u540d\u6392\u5e8f\u7528\u6237\uff1a http://example.com/api/users?ordering=username \u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4e3a\u5b57\u6bb5\u540d\u79f0\u52a0\u4e0a'-'\u6765\u6307\u5b9a\u53cd\u5411\u6392\u5e8f\uff0c\u5982\u4e0b\u6240\u793a\uff1a http://example.com/api/users?ordering=-username \u8fd8\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u6392\u5e8f\uff1a http://example.com/api/users?ordering=account,username Specifying which fields may be ordered against\uff08\u6307\u5b9a\u652f\u6301\u6392\u5e8f\u7684\u5b57\u6bb5\uff09 \u5efa\u8bae\u4f60\u660e\u786e\u6307\u5b9aAPI\u5e94\u5728ordering filter\u4e2d\u5141\u8bb8\u54ea\u4e9b\u5b57\u6bb5\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728view\u4e2d\u8bbe\u7f6e ordering_fields \u5c5e\u6027\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5982\u4e0b\u6240\u793a\uff1a class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = (filters.OrderingFilter,) ordering_fields = ('username', 'email') \u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u610f\u5916\u7684\u6570\u636e\u6cc4\u6f0f\uff0c\u4f8b\u5982\u5141\u8bb8\u7528\u6237\u9488\u5bf9\u5bc6\u7801\u54c8\u5e0c\u5b57\u6bb5\u6216\u5176\u4ed6\u654f\u611f\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 \u5982\u679c\u4e0d\u5728\u89c6\u56fe\u4e0a\u6307\u5b9a ordering_fields \u5c5e\u6027\uff0c\u8fc7\u6ee4\u5668\u7c7b\u5c06\u9ed8\u8ba4\u5141\u8bb8\u7528\u6237\u5bf9 serializer_class \u5c5e\u6027\u6307\u5b9a\u7684serializer\u4e0a\u7684\u4efb\u4f55\u53ef\u8bfb\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\u3002 \u5982\u679c\u4f60\u786e\u4fe1\u89c6\u56fe\u6b63\u5728\u4f7f\u7528\u7684queryset\u4e0d\u5305\u542b\u4efb\u4f55\u654f\u611f\u6570\u636e\uff0c\u5219\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7279\u6b8a\u503c '__all__' \u6765\u660e\u786e\u6307\u5b9aview\u5e94\u5141\u8bb8\u5bf9\u4efb\u4f55model\u5b57\u6bb5\u6216queryset\u8fdb\u884c\u6392\u5e8f\u3002 class BookingsListView(generics.ListAPIView): queryset = Booking.objects.all() serializer_class = BookingSerializer filter_backends = (filters.OrderingFilter,) ordering_fields = '__all__' Specifying a default ordering\uff08\u6307\u5b9a\u9ed8\u8ba4\u6392\u5e8f\uff09 \u5982\u679c\u5728view\u4e2d\u8bbe\u7f6e\u4e86 ordering \u5c5e\u6027\uff0c\u5219\u5c06\u628a\u5b83\u7528\u4f5c\u9ed8\u8ba4\u6392\u5e8f\u3002 \u901a\u5e38\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u521d\u59cbqueryset\u4e0a\u8bbe\u7f6e order_by \u6765\u63a7\u5236\u6b64\u64cd\u4f5c\uff0c\u4f46\u662f\u4f7f\u7528view\u4e2d\u7684 ordering \u53c2\u6570\u5141\u8bb8\u4f60\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6307\u5b9a\u6392\u5e8f\uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u81ea\u52a8\u4f20\u9012\u5230\u5448\u73b0\u7684\u6a21\u677f\u3002\u5982\u679c\u5b83\u4eec\u7528\u4e8e\u6392\u5e8f\u7ed3\u679c\u7684\u8bdd\u5c31\u80fd\u4f7f\u81ea\u52a8\u6e32\u67d3\u4e0d\u540c\u7684\u5217\u6807\u9898\u6210\u4e3a\u53ef\u80fd\u3002 class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = (filters.OrderingFilter,) ordering_fields = ('username', 'email') ordering = ('username',) ordering \u5c5e\u6027\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\u7684\u5217\u8868/\u5143\u7ec4\u3002 DjangoObjectPermissionsFilte\uff08Django\u5bf9\u8c61\u6743\u9650\u8fc7\u6ee4\uff09","title":"Filtering"},{"location":"api-guide/filtering_zh/#filtering","text":"\u201c \u7531Django Manager\u63d0\u4f9b\u7684\u6839QuerySet\u63cf\u8ff0\u4e86\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u3002\u53ef\u662f\u901a\u5e38\u4f60\u9700\u8981\u7684\u53ea\u662f\u9009\u62e9\u5b8c\u6574\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5b50\u96c6\u800c\u5df2\u3002 \u2014\u2014 Django\u6587\u6863 \u201d REST framework\u5217\u8868\u89c6\u56fe\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u8fd4\u56de\u4e00\u4e2amodel\u7684\u5168\u90e8queryset\u3002\u901a\u5e38\u4f60\u5374\u60f3\u8981\u4f60\u7684API\u6765\u9650\u5236queryset\u8fd4\u56de\u7684\u6570\u636e\u3002 \u6700\u7b80\u5355\u7684\u8fc7\u6ee4\u4efb\u610f GenericAPIView \u5b50\u89c6\u56fequeryset\u7684\u65b9\u6cd5\u5c31\u662f\u91cd\u5199\u5b83\u7684 .get_queryset() \u65b9\u6cd5\u3002 \u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u5141\u8bb8\u4f60\u4f7f\u7528\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u5b9a\u5236\u89c6\u56fe\u8fd4\u56de\u7684queryset\u3002","title":"Filtering"},{"location":"api-guide/filtering_zh/#filtering-against-the-current-user","text":"\u60a8\u53ef\u80fd\u60f3\u8981\u8fc7\u6ee4queryset\uff0c\u4ee5\u786e\u4fdd\u53ea\u8fd4\u56de\u4e0e\u53d1\u51fa\u8bf7\u6c42\u7684\u5f53\u524d\u5df2\u9a8c\u8bc1\u7528\u6237\u76f8\u5173\u7684\u7ed3\u679c\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u57fa\u4e8erequest.user\u7684\u503c\u8fdb\u884c\u8fc7\u6ee4\u6765\u5b9e\u73b0\u3002 \u6bd4\u5982\uff1a from myapp.models import Purchase from myapp.serializers import PurchaseSerializer from rest_framework import generics class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" This view should return a list of all the purchases for the currently authenticated user. \"\"\" user = self.request.user return Purchase.objects.filter(purchaser=user)","title":"Filtering against the current user\uff08\u6839\u636e\u5f53\u524d\u7528\u6237\u8fdb\u884c\u8fc7\u6ee4\uff09"},{"location":"api-guide/filtering_zh/#filtering-against-the-urlurl","text":"\u53e6\u4e00\u79cd\u8fc7\u6ee4\u65b9\u5f0f\u53ef\u80fd\u5305\u62ec\u57fa\u4e8eURL\u7684\u67d0\u4e9b\u90e8\u5206\u6765\u9650\u5236queryset\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684URL\u914d\u7f6e\u5305\u542b\u4e00\u4e2a\u53c2\u6570\u5982\u4e0b: url('^purchases/(?P<username>.+)/$', PurchaseList.as_view()), \u4f60\u5c31\u53ef\u4ee5\u5199\u4e00\u4e2aview\uff0c\u8fd4\u56de\u57fa\u4e8eURL\u4e2d\u7684username\u53c2\u6570\u8fdb\u884c\u8fc7\u6ee4\u7684\u7ed3\u679c\u3002 class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" This view should return a list of all the purchases for the user as determined by the username portion of the URL. \"\"\" username = self.kwargs['username'] return Purchase.objects.filter(purchaser__username=username)","title":"Filtering against the URL\uff08\u6839\u636eURL\u8fdb\u884c\u8fc7\u6ee4\uff09"},{"location":"api-guide/filtering_zh/#filtering-against-query-parameters","text":"\u8fc7\u6ee4\u521d\u59cb\u67e5\u8be2\u96c6\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u662f\u57fa\u4e8eurl\u4e2d\u7684\u67e5\u8be2\u53c2\u6570\u786e\u5b9a\u521d\u59cb\u67e5\u8be2\u96c6\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 .get_queryset() \u65b9\u6cd5\u6765\u5904\u7406\u50cf http://example.com/api/purchases?username=denvercoder9 \u8fd9\u6837\u7684\u7f51\u5740\uff0c\u5e76\u4e14\u53ea\u6709\u5728URL\u4e2d\u5305\u542b username \u53c2\u6570\u65f6\uff0c\u624d\u8fc7\u6ee4queryset\uff1a class PurchaseList(generics.ListAPIView): serializer_class = PurchaseSerializer def get_queryset(self): \"\"\" Optionally restricts the returned purchases to a given user, by filtering against a `username` query parameter in the URL. \"\"\" queryset = Purchase.objects.all() username = self.request.query_params.get('username', None) if username is not None: queryset = queryset.filter(purchaser__username=username) return queryset","title":"Filtering against query parameters\uff08\u6839\u636e\u67e5\u8be2\u53c2\u6570\u8fdb\u884c\u8fc7\u6ee4\uff09"},{"location":"api-guide/filtering_zh/#generic-filtering","text":"\u9664\u4e86\u80fd\u591f\u91cd\u5199\u9ed8\u8ba4\u7684queryset\uff0cREST\u6846\u67b6\u8fd8\u5305\u62ec\u5bf9\u901a\u7528\u8fc7\u6ee4\u540e\u7aef\u7684\u652f\u6301\uff0c\u5141\u8bb8\u4f60\u8f7b\u677e\u6784\u5efa\u590d\u6742\u7684\u68c0\u7d22\u5668\u548c\u8fc7\u6ee4\u5668\u3002 \u901a\u7528\u8fc7\u6ee4\u5668\u4e5f\u53ef\u4ee5\u5728browsable API\u548cadmin API\u4e2d\u663e\u793a\u4e3aHTML\u63a7\u4ef6\u3002","title":"Generic Filtering\uff08\u901a\u7528\u8fc7\u6ee4\uff09"},{"location":"api-guide/filtering_zh/#setting-filter-backends","text":"\u9ed8\u8ba4\u8fc7\u6ee4\u5668\u540e\u7aef\u53ef\u4ee5\u5728\u5168\u5c40\u8bbe\u7f6e\u4e2d\u4f7f\u7528 DEFAULT_FILTER_BACKENDS \u6765\u914d\u7f6e\u3002\u4f8b\u5982\u3002 REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',) } \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e GenericAPIView \u7c7b\u7684\u89c6\u56fe\u5728\u6bcf\u4e2aview\u6216\u6bcf\u4e2aviewset\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8fc7\u6ee4\u5668\u540e\u7aef\u3002 import django_filters.rest_framework from django.contrib.auth.models import User from myapp.serializers import UserSerializer from rest_framework import generics class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = (django_filters.rest_framework.DjangoFilterBackend,)","title":"Setting filter backends\uff08\u8bbe\u7f6e\u901a\u7528\u8fc7\u6ee4\u540e\u7aef\uff09"},{"location":"api-guide/filtering_zh/#filtering-and-object-lookups","text":"\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4e3aview\u914d\u7f6e\u8fc7\u6ee4\u5668\u540e\u7aef\uff0c\u5e76\u4e14\u7528\u4e8e\u8fc7\u6ee4list views\uff0c\u5219\u5b83\u4e5f\u5c06\u7528\u4e8e\u8fc7\u6ee4\u7528\u4e8e\u8fd4\u56de\u5355\u4e2a\u5bf9\u8c61\u7684queryset\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u524d\u9762\u7684\u793a\u4f8b\u4ee5\u53ca\u4e00\u4e2aID\u4e3a 4675 \u7684\u4ea7\u54c1\uff0c\u4ee5\u4e0bURL\u5c06\u8fd4\u56de\u76f8\u5e94\u7684\u5bf9\u8c61\u6216\u8005\u8fd4\u56de404\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u7ed9\u5b9a\u7684\u4ea7\u54c1\u5b9e\u4f8b\u662f\u5426\u6ee1\u8db3\u7b5b\u9009\u6761\u4ef6\u3002 http://example.com/api/products/4675/?category=clothing&max_price=10.00","title":"Filtering and object lookups\uff08\u8fc7\u6ee4\u548c\u5bf9\u8c61\u67e5\u627e\uff09"},{"location":"api-guide/filtering_zh/#overriding-the-initial-querysetqueryset","text":"\u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u91cd\u5199 .get_queryset() \u65b9\u6cd5\u6216\u4f7f\u7528\u901a\u7528\u8fc7\u6ee4\uff0c\u5e76\u4e14\u4e00\u5207\u90fd\u4f1a\u6309\u7167\u9884\u671f\u751f\u6548\u3002 \u4f8b\u5982\uff0c\u5982\u679c Product \u4e0e User \uff08\u540d\u4e3a purchase \uff09\u5177\u6709\u591a\u5bf9\u591a\u5173\u7cfb\uff0c\u5219\u53ef\u80fd\u9700\u8981\u7f16\u5199\u5982\u4e0b\u6240\u793a\u7684view\uff1a class PurchasedProductsList(generics.ListAPIView): \"\"\" Return a list of all the products that the authenticated user has ever purchased, with optional filtering. \"\"\" model = Product serializer_class = ProductSerializer filter_class = ProductFilter def get_queryset(self): user = self.request.user return user.purchase_set.all()","title":"Overriding the initial queryset\uff08\u8986\u76d6\u521d\u59cbqueryset\uff09"},{"location":"api-guide/filtering_zh/#api-guide","text":"","title":"API Guide"},{"location":"api-guide/filtering_zh/#djangofilterbackenddjango","text":"django-filter \u5e93\u5305\u542b\u4e00\u4e2a\u4e3aREST framework\u63d0\u4f9b\u9ad8\u5ea6\u53ef\u5b9a\u5236\u5b57\u6bb5\u8fc7\u6ee4\u7684 DjangoFilterBackend \u7c7b\u3002 \u8981\u4f7f\u7528 DjangoFilterBackend \uff0c\u9996\u5148\u8981\u5148\u5b89\u88c5 django-filter \u3002 pip install django-filter \u73b0\u5728\uff0c\u4f60\u9700\u8981\u5c06filter backend \u6dfb\u52a0\u5230\u4f60django project\u7684settings\u4e2d\uff1a REST_FRAMEWORK = { 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'] } \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u5c06filter backend\u6dfb\u52a0\u5230\u4e00\u4e2a\u5355\u72ec\u7684view\u6216viewSet\u4e2d\uff1a from django_filters.rest_framework import DjangoFilterBackend class UserListView(generics.ListAPIView): ... filter_backends = [DjangoFilterBackend] \u5982\u679c\u53ea\u9700\u8981\u7b80\u5355\u7684\u6839\u636e\u662f\u5426\u76f8\u7b49\u7684\u8fc7\u6ee4\uff0c\u5219\u53ef\u4ee5\u5728\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u4e0a\u8bbe\u7f6e filterset_fields \u5c5e\u6027\uff0c\u5217\u51fa\u8981\u8fc7\u6ee4\u7684\u5b57\u6bb5\u96c6\u5408\u3002 class ProductList(generics.ListAPIView): queryset = Product.objects.all() serializer_class = ProductSerializer filter_backends = [DjangoFilterBackend] filterset_fields = ['category', 'in_stock'] \u8fd9\u5c06\u81ea\u52a8\u4e3a\u7ed9\u5b9a\u7684\u5b57\u6bb5\u521b\u5efa\u4e00\u4e2a FilterSet \u7c7b\uff0c\u5e76\u5141\u8bb8\u4f60\u53d1\u51fa\u5982\u4e0b\u8bf7\u6c42\uff1a http://example.com/api/products?category=clothing&in_stock=True \u5bf9\u4e8e\u66f4\u9ad8\u7ea7\u7684\u8fc7\u6ee4\u8981\u6c42\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u89c6\u56fe\u5e94\u4f7f\u7528\u7684 FilterSet \u7c7b\u3002\u4f60\u53ef\u4ee5\u5728 django-filter \u6587\u6863\u4e2d\u9605\u8bfb\u6709\u5173FilterSets\u7684\u66f4\u591a\u4fe1\u606f\u3002\u8fd8\u5efa\u8bae\u4f60\u9605\u8bfb\u6709\u5173 DRF\u96c6\u6210 \u7684\u90e8\u5206\u3002","title":"DjangoFilterBackend\uff08Django\u8fc7\u6ee4\u540e\u7aef\uff09"},{"location":"api-guide/filtering_zh/#specifying-filter-fields","text":"\u5982\u679c\u4f60\u7684\u9700\u6c42\u90fd\u662f\u4e9b\u7b80\u5355\u76f8\u7b49\u7c7b\u578b\u7684\u7b5b\u9009\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u4f60\u7684view\u6216viewSet\u91cc\u9762\u8bbe\u7f6e\u4e00\u4e2a filter_fields \u5c5e\u6027\uff0c\u5217\u51fa\u6240\u6709\u4f60\u60f3\u4f9d\u9760\u7b5b\u9009\u7684\u5b57\u6bb5\u96c6\u5408\u3002 class ProductList(generics.ListAPIView): queryset = Product.objects.all() serializer_class = ProductSerializer filter_backends = (filters.DjangoFilterBackend,) filter_fields = ('category', 'in_stock') \u8fd9\u5c06\u4e3a\u4f60\u5217\u51fa\u6765\u7684\u5b57\u6bb5\u81ea\u52a8\u521b\u5efa\u4e00\u4e2afilterSet\uff0c\u5141\u8bb8\u4f60\u60f3\u4e0b\u9762\u8fd9\u6837\u8bf7\u6c42\u7b5b\u9009\u7ed3\u679c\uff1a http://example.com/api/products?category=clothing&in_stock=True","title":"Specifying filter fields\uff08\u6307\u5b9a\u7b5b\u9009\u5b57\u6bb5\uff09"},{"location":"api-guide/filtering_zh/#specifying-a-filtersetfilterset","text":"\u5bf9\u4e8e\u66f4\u9ad8\u7ea7\u7684\u8fc7\u6ee4\u8981\u6c42\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u5728view\u4e2d\u5e94\u8be5\u4f7f\u7528\u7684 FilterSet \u7c7b\u3002\u4f8b\u5982\uff1a import django_filters from myapp.models import Product from myapp.serializers import ProductSerializer from rest_framework import generics class ProductFilter(django_filters.rest_framework.FilterSet): min_price = django_filters.NumberFilter(name=\"price\", lookup_expr='gte') max_price = django_filters.NumberFilter(name=\"price\", lookup_expr='lte') class Meta: model = Product fields = ['category', 'in_stock', 'min_price', 'max_price'] class ProductList(generics.ListAPIView): queryset = Product.objects.all() serializer_class = ProductSerializer filter_backends = (django_filters.rest_framework.DjangoFilterBackend,) filter_class = ProductFilter \u8fd9\u5c06\u5141\u8bb8\u4f60\u5411\u4e0b\u9762\u4e00\u6837\u53d1\u51fa\u8bf7\u6c42\uff0c\u5982\uff1a http://example.com/api/products?category=clothing&max_price=10.00 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 django-filter \u8de8\u8d8a\u5173\u7cfb\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u4ea7\u54c1\u90fd\u6709 Manufacturer \u6a21\u578b\u7684\u5916\u952e\uff0c\u6240\u4ee5\u6211\u4eec\u521b\u5efa\u8fc7\u6ee4\u5668\u4f7f\u7528 Manufacturer \u540d\u79f0\u8fc7\u6ee4\u3002\u4f8b\u5982\uff1a import django_filters from myapp.models import Product from myapp.serializers import ProductSerializer from rest_framework import generics class ProductFilter(django_filters.rest_framework.FilterSet): class Meta: model = Product fields = ['category', 'in_stock', 'manufacturer__name'] \u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u8fdb\u884c\u5982\u4e0b\u67e5\u8be2\uff1a http://example.com/api/products?manufacturer__name=foo \u8fd9\u5f88\u597d\uff0c\u4f46\u5b83\u5c06Django\u7684\u53cc\u4e0b\u5212\u7ebf\u7ea6\u5b9a\u4f5c\u4e3aAPI\u7684\u4e00\u90e8\u5206\u66b4\u9732\u51fa\u6765\u3002\u5982\u679c\u4f60\u60f3\u663e\u5f0f\u5730\u547d\u540d\u8fc7\u6ee4\u5668\u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u663e\u5f0f\u5730\u5c06\u5b83\u5305\u542b\u5728 FilterSet \u7c7b\u4e2d\uff1a import django_filters from myapp.models import Product from myapp.serializers import ProductSerializer from rest_framework import generics class ProductFilter(django_filters.rest_framework.FilterSet): manufacturer = django_filters.CharFilter(name=\"manufacturer__name\") class Meta: model = Product fields = ['category', 'in_stock', 'manufacturer'] \u73b0\u5728\u4f60\u53ef\u4ee5\u4e0b\u9762\u8fd9\u6837\u6267\u884c\uff1a http://example.com/api/products?manufacturer=foo \u6709\u5173\u4f7f\u7528\u8fc7\u6ee4\u5668\u96c6\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 django-filter\u6587\u6863 \u3002","title":"Specifying a FilterSet\uff08\u6307\u5b9aFilterSet\uff09"},{"location":"api-guide/filtering_zh/#hints-tips","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528\u8fc7\u6ee4\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528 DjangoFilterBackend \u8bb0\u5f97\u786e\u4fdd\u5b83\u662f\u901a\u8fc7\u4f7f\u7528 DEFAULT_FILTER_BACKENDS \u8bbe\u7f6e\u5b89\u88c5\u7684\u3002 \u4f7f\u7528\u5e03\u5c14\u5b57\u6bb5\u65f6\uff0c\u60a8\u5e94\u8be5\u5728\u7f51\u5740\u67e5\u8be2\u53c2\u6570\u4e2d\u4f7f\u7528 True \u548c False \u503c\uff0c\u800c\u4e0d\u662f 0 \uff0c 1 \uff0c true \u6216 false \u3002 \uff08\u5141\u8bb8\u7684\u5e03\u5c14\u503c\u76ee\u524d\u786c\u8fde\u7ebf\u5728Django\u7684 NullBooleanSelect\u5b9e\u73b0\u4e2d \u3002\uff09 django-filter \u652f\u6301\u4f7f\u7528Django\u7684\u53cc\u4e0b\u5212\u7ebf\u8bed\u6cd5\u5bf9\u5173\u7cfb\u8fdb\u884c\u8fc7\u6ee4\u3002","title":"Hints &amp; Tips\uff08\u63d0\u793a\uff09"},{"location":"api-guide/filtering_zh/#searchfilter","text":"SearchFilter \u7c7b\u652f\u6301\u57fa\u4e8e\u7b80\u5355\u5355\u67e5\u8be2\u53c2\u6570\u7684\u641c\u7d22\uff0c\u5e76\u4e14\u57fa\u4e8e Django admin\u7684\u641c\u7d22\u529f\u80fd \u3002 \u5728\u4f7f\u7528\u65f6\uff0c browsable API\u5c06\u5305\u62ec\u4e00\u4e2a SearchFilter \u63a7\u4ef6\uff1a \u4ec5\u5f53view\u4e2d\u8bbe\u7f6e\u4e86 search_fields \u5c5e\u6027\u65f6\uff0c\u624d\u5e94\u7528 SearchFilter \u7c7b\u3002 search_fields \u5c5e\u6027\u5e94\u8be5\u662fmodel\u4e2d\u6587\u672c\u7c7b\u578b\u5b57\u6bb5\u7684\u540d\u79f0\u5217\u8868\uff0c\u4f8b\u5982 CharField \u6216 TextField \u3002 class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = (filters.SearchFilter,) search_fields = ('username', 'email') \u8fd9\u5c06\u5141\u8bb8\u5ba2\u6237\u7aef\u901a\u8fc7\u8fdb\u884c\u4ee5\u4e0b\u67e5\u8be2\u6765\u8fc7\u6ee4\u5217\u8868\u4e2d\u7684\u9879\u76ee\uff1a http://example.com/api/users?search=russell \u4f60\u8fd8\u53ef\u4ee5\u5728\u67e5\u627eAPI\u4e2d\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u7b26\u53f7\u5bf9ForeignKey\u6216ManyToManyField\u6267\u884c\u76f8\u5173\u67e5\u627e\uff1a search_fields = ('username', 'email', 'profile__profession') \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u5c06\u4f7f\u7528\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u90e8\u5206\u5339\u914d\u3002 \u641c\u7d22\u53c2\u6570\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u641c\u7d22\u9879\uff0c\u5176\u5e94\u8be5\u662f\u7a7a\u683c\u548c/\u6216\u9017\u53f7\u5206\u9694\u3002 \u5982\u679c\u4f7f\u7528\u591a\u4e2a\u641c\u7d22\u672f\u8bed\uff0c\u5219\u4ec5\u5f53\u6240\u6709\u63d0\u4f9b\u7684\u672f\u8bed\u90fd\u5339\u914d\u65f6\u624d\u5728\u5217\u8868\u4e2d\u8fd4\u56de\u5bf9\u8c61\u3002 \u53ef\u4ee5\u901a\u8fc7\u5728 search_fields \u524d\u9762\u6dfb\u52a0\u5404\u79cd\u5b57\u7b26\u6765\u9650\u5236\u641c\u7d22\u884c\u4e3a\u3002 '^' \u4ee5\u6307\u5b9a\u5185\u5bb9\u5f00\u59cb. '=' \u5b8c\u5168\u5339\u914d '@' \u5168\u6587\u641c\u7d22\uff08\u76ee\u524d\u53ea\u652f\u6301Django\u7684MySQL\u540e\u7aef\uff09 '$' \u6b63\u5219\u641c\u7d22 \u4f8b\u5982\uff1a search_fields = ('=username', '=email') \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u641c\u7d22\u53c2\u6570\u540d\u4e3a 'search' \uff0c\u4f46\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 SEARCH_PARAM \u8bbe\u7f6e\u8986\u76d6\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Django\u6587\u6863 \u3002","title":"SearchFilter\uff08\u641c\u7d22\u8fc7\u6ee4\uff09"},{"location":"api-guide/filtering_zh/#orderingfilter","text":"OrderingFilter \u7c7b\u652f\u6301\u7b80\u5355\u7684\u67e5\u8be2\u53c2\u6570\u63a7\u5236\u7ed3\u679c\u6392\u5e8f\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u67e5\u8be2\u53c2\u6570\u540d\u4e3a 'ordering' \uff0c\u4f46\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ORDERING_PARAM \u8bbe\u7f6e\u8986\u76d6\u3002 \u4f8b\u5982\uff0c\u6309\u7528\u6237\u540d\u6392\u5e8f\u7528\u6237\uff1a http://example.com/api/users?ordering=username \u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4e3a\u5b57\u6bb5\u540d\u79f0\u52a0\u4e0a'-'\u6765\u6307\u5b9a\u53cd\u5411\u6392\u5e8f\uff0c\u5982\u4e0b\u6240\u793a\uff1a http://example.com/api/users?ordering=-username \u8fd8\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u6392\u5e8f\uff1a http://example.com/api/users?ordering=account,username","title":"OrderingFilter\uff08\u6392\u5e8f\u7b5b\u9009\uff09"},{"location":"api-guide/filtering_zh/#specifying-which-fields-may-be-ordered-against","text":"\u5efa\u8bae\u4f60\u660e\u786e\u6307\u5b9aAPI\u5e94\u5728ordering filter\u4e2d\u5141\u8bb8\u54ea\u4e9b\u5b57\u6bb5\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728view\u4e2d\u8bbe\u7f6e ordering_fields \u5c5e\u6027\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5982\u4e0b\u6240\u793a\uff1a class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = (filters.OrderingFilter,) ordering_fields = ('username', 'email') \u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u610f\u5916\u7684\u6570\u636e\u6cc4\u6f0f\uff0c\u4f8b\u5982\u5141\u8bb8\u7528\u6237\u9488\u5bf9\u5bc6\u7801\u54c8\u5e0c\u5b57\u6bb5\u6216\u5176\u4ed6\u654f\u611f\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 \u5982\u679c\u4e0d\u5728\u89c6\u56fe\u4e0a\u6307\u5b9a ordering_fields \u5c5e\u6027\uff0c\u8fc7\u6ee4\u5668\u7c7b\u5c06\u9ed8\u8ba4\u5141\u8bb8\u7528\u6237\u5bf9 serializer_class \u5c5e\u6027\u6307\u5b9a\u7684serializer\u4e0a\u7684\u4efb\u4f55\u53ef\u8bfb\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\u3002 \u5982\u679c\u4f60\u786e\u4fe1\u89c6\u56fe\u6b63\u5728\u4f7f\u7528\u7684queryset\u4e0d\u5305\u542b\u4efb\u4f55\u654f\u611f\u6570\u636e\uff0c\u5219\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7279\u6b8a\u503c '__all__' \u6765\u660e\u786e\u6307\u5b9aview\u5e94\u5141\u8bb8\u5bf9\u4efb\u4f55model\u5b57\u6bb5\u6216queryset\u8fdb\u884c\u6392\u5e8f\u3002 class BookingsListView(generics.ListAPIView): queryset = Booking.objects.all() serializer_class = BookingSerializer filter_backends = (filters.OrderingFilter,) ordering_fields = '__all__'","title":"Specifying which fields may be ordered against\uff08\u6307\u5b9a\u652f\u6301\u6392\u5e8f\u7684\u5b57\u6bb5\uff09"},{"location":"api-guide/filtering_zh/#specifying-a-default-ordering","text":"\u5982\u679c\u5728view\u4e2d\u8bbe\u7f6e\u4e86 ordering \u5c5e\u6027\uff0c\u5219\u5c06\u628a\u5b83\u7528\u4f5c\u9ed8\u8ba4\u6392\u5e8f\u3002 \u901a\u5e38\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u521d\u59cbqueryset\u4e0a\u8bbe\u7f6e order_by \u6765\u63a7\u5236\u6b64\u64cd\u4f5c\uff0c\u4f46\u662f\u4f7f\u7528view\u4e2d\u7684 ordering \u53c2\u6570\u5141\u8bb8\u4f60\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6307\u5b9a\u6392\u5e8f\uff0c\u7136\u540e\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u81ea\u52a8\u4f20\u9012\u5230\u5448\u73b0\u7684\u6a21\u677f\u3002\u5982\u679c\u5b83\u4eec\u7528\u4e8e\u6392\u5e8f\u7ed3\u679c\u7684\u8bdd\u5c31\u80fd\u4f7f\u81ea\u52a8\u6e32\u67d3\u4e0d\u540c\u7684\u5217\u6807\u9898\u6210\u4e3a\u53ef\u80fd\u3002 class UserListView(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer filter_backends = (filters.OrderingFilter,) ordering_fields = ('username', 'email') ordering = ('username',) ordering \u5c5e\u6027\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\u7684\u5217\u8868/\u5143\u7ec4\u3002","title":"Specifying a default ordering\uff08\u6307\u5b9a\u9ed8\u8ba4\u6392\u5e8f\uff09"},{"location":"api-guide/filtering_zh/#djangoobjectpermissionsfiltedjango","text":"","title":"DjangoObjectPermissionsFilte\uff08Django\u5bf9\u8c61\u6743\u9650\u8fc7\u6ee4\uff09"},{"location":"api-guide/format-suffixes/","text":"Format suffixes Section 6.2.1 does not say that content negotiation should be used all the time. \u2014 Roy Fielding, REST discuss mailing list A common pattern for Web APIs is to use filename extensions on URLs to provide an endpoint for a given media type. For example, 'http://example.com/api/users.json' to serve a JSON representation. Adding format-suffix patterns to each individual entry in the URLconf for your API is error-prone and non-DRY, so REST framework provides a shortcut to adding these patterns to your URLConf. format_suffix_patterns Signature : format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None) Returns a URL pattern list which includes format suffix patterns appended to each of the URL patterns provided. Arguments: urlpatterns : Required. A URL pattern list. suffix_required : Optional. A boolean indicating if suffixes in the URLs should be optional or mandatory. Defaults to False , meaning that suffixes are optional by default. allowed : Optional. A list or tuple of valid format suffixes. If not provided, a wildcard format suffix pattern will be used. Example: from rest_framework.urlpatterns import format_suffix_patterns from blog import views urlpatterns = [ url(r'^/$', views.apt_root), url(r'^comments/$', views.comment_list), url(r'^comments/(?P<pk>[0-9]+)/$', views.comment_detail) ] urlpatterns = format_suffix_patterns(urlpatterns, allowed=['json', 'html']) When using format_suffix_patterns , you must make sure to add the 'format' keyword argument to the corresponding views. For example: @api_view(['GET', 'POST']) def comment_list(request, format=None): # do stuff... Or with class-based views: class CommentList(APIView): def get(self, request, format=None): # do stuff... def post(self, request, format=None): # do stuff... The name of the kwarg used may be modified by using the FORMAT_SUFFIX_KWARG setting. Also note that format_suffix_patterns does not support descending into include URL patterns. Using with i18n_patterns If using the i18n_patterns function provided by Django, as well as format_suffix_patterns you should make sure that the i18n_patterns function is applied as the final, or outermost function. For example: url patterns = [ \u2026 ] urlpatterns = i18n_patterns( format_suffix_patterns(urlpatterns, allowed=['json', 'html']) ) Query parameter formats An alternative to the format suffixes is to include the requested format in a query parameter. REST framework provides this option by default, and it is used in the browsable API to switch between differing available representations. To select a representation using its short format, use the format query parameter. For example: http://example.com/organizations/?format=csv . The name of this query parameter can be modified using the URL_FORMAT_OVERRIDE setting. Set the value to None to disable this behavior. Accept headers vs. format suffixes There seems to be a view among some of the Web community that filename extensions are not a RESTful pattern, and that HTTP Accept headers should always be used instead. It is actually a misconception. For example, take the following quote from Roy Fielding discussing the relative merits of query parameter media-type indicators vs. file extension media-type indicators: \u201cThat's why I always prefer extensions. Neither choice has anything to do with REST.\u201d \u2014 Roy Fielding, REST discuss mailing list The quote does not mention Accept headers, but it does make it clear that format suffixes should be considered an acceptable pattern.","title":"Format suffixes"},{"location":"api-guide/format-suffixes/#format-suffixes","text":"Section 6.2.1 does not say that content negotiation should be used all the time. \u2014 Roy Fielding, REST discuss mailing list A common pattern for Web APIs is to use filename extensions on URLs to provide an endpoint for a given media type. For example, 'http://example.com/api/users.json' to serve a JSON representation. Adding format-suffix patterns to each individual entry in the URLconf for your API is error-prone and non-DRY, so REST framework provides a shortcut to adding these patterns to your URLConf.","title":"Format suffixes"},{"location":"api-guide/format-suffixes/#format_suffix_patterns","text":"Signature : format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None) Returns a URL pattern list which includes format suffix patterns appended to each of the URL patterns provided. Arguments: urlpatterns : Required. A URL pattern list. suffix_required : Optional. A boolean indicating if suffixes in the URLs should be optional or mandatory. Defaults to False , meaning that suffixes are optional by default. allowed : Optional. A list or tuple of valid format suffixes. If not provided, a wildcard format suffix pattern will be used. Example: from rest_framework.urlpatterns import format_suffix_patterns from blog import views urlpatterns = [ url(r'^/$', views.apt_root), url(r'^comments/$', views.comment_list), url(r'^comments/(?P<pk>[0-9]+)/$', views.comment_detail) ] urlpatterns = format_suffix_patterns(urlpatterns, allowed=['json', 'html']) When using format_suffix_patterns , you must make sure to add the 'format' keyword argument to the corresponding views. For example: @api_view(['GET', 'POST']) def comment_list(request, format=None): # do stuff... Or with class-based views: class CommentList(APIView): def get(self, request, format=None): # do stuff... def post(self, request, format=None): # do stuff... The name of the kwarg used may be modified by using the FORMAT_SUFFIX_KWARG setting. Also note that format_suffix_patterns does not support descending into include URL patterns.","title":"format_suffix_patterns"},{"location":"api-guide/format-suffixes/#using-with-i18n_patterns","text":"If using the i18n_patterns function provided by Django, as well as format_suffix_patterns you should make sure that the i18n_patterns function is applied as the final, or outermost function. For example: url patterns = [ \u2026 ] urlpatterns = i18n_patterns( format_suffix_patterns(urlpatterns, allowed=['json', 'html']) )","title":"Using with i18n_patterns"},{"location":"api-guide/format-suffixes/#query-parameter-formats","text":"An alternative to the format suffixes is to include the requested format in a query parameter. REST framework provides this option by default, and it is used in the browsable API to switch between differing available representations. To select a representation using its short format, use the format query parameter. For example: http://example.com/organizations/?format=csv . The name of this query parameter can be modified using the URL_FORMAT_OVERRIDE setting. Set the value to None to disable this behavior.","title":"Query parameter formats"},{"location":"api-guide/format-suffixes/#accept-headers-vs-format-suffixes","text":"There seems to be a view among some of the Web community that filename extensions are not a RESTful pattern, and that HTTP Accept headers should always be used instead. It is actually a misconception. For example, take the following quote from Roy Fielding discussing the relative merits of query parameter media-type indicators vs. file extension media-type indicators: \u201cThat's why I always prefer extensions. Neither choice has anything to do with REST.\u201d \u2014 Roy Fielding, REST discuss mailing list The quote does not mention Accept headers, but it does make it clear that format suffixes should be considered an acceptable pattern.","title":"Accept headers vs. format suffixes"},{"location":"api-guide/format-suffixes_zh/","text":"Format suffixes \uff08\u683c\u5f0f\u540e\u7f00\uff09 Section 6.2.1 \u5e76\u6ca1\u6709\u8bf4\u5e94\u5f53\u603b\u662f\u4f7f\u7528\u5185\u5bb9\u534f\u5546 \u2014 Roy Fielding, REST discuss mailing list webapi\u7684\u4e00\u79cd\u5e38\u89c1\u6a21\u5f0f\u662f\u5728url\u4e0a\u4f7f\u7528\u6587\u4ef6\u6269\u5c55\u540d\u6765\u4e3a\u7ed9\u5b9a\u7684\u5a92\u4f53\u7c7b\u578b\u63d0\u4f9b\u7aef\u70b9\u3002\u4f8b\u5982\uff0c'http://example.com/api/users.json'\u6765\u63d0\u4f9bJSON\u663e\u793a\u3002 \u5c06\u683c\u5f0f\u540e\u7f00\u6a21\u5f0f\u6dfb\u52a0\u5230API\u7684URLconf\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u662f\u5bb9\u6613\u51fa\u9519\u7684\uff0c\u800c\u4e14\u662f\u4e0dDRY\u7684\uff0c\u56e0\u6b64REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u6a21\u5f0f\u6dfb\u52a0\u5230URLconf\u4e2d\u3002 format_suffix_patterns \uff08\u683c\u5f0f\u540e\u7f00\u6a21\u5f0f\uff09 Signature : format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None) \u8fd4\u56de\u4e00\u4e2aURL\u6a21\u5f0f\u5217\u8868\uff0c\u5176\u4e2d\u7684\u6240\u63d0\u4f9b\u7684\u6bcf\u4e2aURL\u6a21\u5f0f\u9644\u52a0\u4e86\u683c\u5f0f\u540e\u7f00 \u53c2\u6570\uff1a urlpatterns : \u5fc5\u9700\u3002\u4e00\u4e2aURL\u6a21\u5f0f\u5217\u8868\u3002 suffix_required : \u53ef\u9009\u3002\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793aURL\u4e2d\u7684\u540e\u7f00\u662f\u53ef\u9009\u7684\u8fd8\u662f\u5fc5\u9700\u7684\u3002\u9ed8\u8ba4\u503c\u4e3aFalse\uff0c\u8fd9\u610f\u5473\u7740\u540e\u7f00\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u53ef\u9009\u7684\u3002 allowed : Optional. \u53ef\u9009\u3002\u4e00\u4e2a\u6709\u6548\u683c\u5f0f\u540e\u7f00\u7684\u5217\u8868\u6216\u5143\u7ec4\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5c06\u4f7f\u7528\u901a\u914d\u7b26\u683c\u5f0f\u540e\u7f00\u6a21\u5f0f\u3002 Example: from rest_framework.urlpatterns import format_suffix_patterns from blog import views urlpatterns = [ url(r'^/$', views.apt_root), url(r'^comments/$', views.comment_list), url(r'^comments/(?P<pk>[0-9]+)/$', views.comment_detail) ] urlpatterns = format_suffix_patterns(urlpatterns, allowed=['json', 'html']) \u5f53\u4f7f\u7528 format_suffix_patterns \u65f6\uff0c\u5fc5\u987b\u786e\u4fdd\u5c06 'format' \u5173\u952e\u5b57\u53c2\u6570\u6dfb\u52a0\u5230\u76f8\u5e94\u7684\u89c6\u56fe\u4e2d\u3002\u4f8b\u5982\uff1a @api_view(('GET', 'POST')) def comment_list(request, format=None): # do stuff... \u6216\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff1a class CommentList(APIView): def get(self, request, format=None): # do stuff... def post(self, request, format=None): # do stuff... \u4f7f\u7528\u7684kwarg\u540d\u79f0\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 FORMAT_SUFFIX_KWARG \u8bbe\u7f6e\u8fdb\u884c\u4fee\u6539\u3002 \u8fd8\u8981\u6ce8\u610f\uff0c format_suffix_patterns \u4e0d\u652f\u6301\u964d\u4e3a include URL\u6a21\u5f0f\u3002 Using with i18n_patterns (\u4e0ei18n_\u6a21\u5f0f\u4e00\u540c\u4f7f\u7528) \u5982\u679c\u4f7f\u7528Django\u63d0\u4f9b\u7684 i18n_patterns \u51fd\u6570\uff0c\u4ee5\u53ca format_suffix_patterns \uff0c\u5219\u5e94\u786e\u4fdd\u5c06 i18n_patterns \u51fd\u6570\u88ab\u5e94\u7528\u4e3a\u6700\u7ec8\u51fd\u6570\u6216\u6700\u5916\u5c42\u51fd\u6570\u3002\u4f8b\u5982\uff1a url patterns = [ \u2026 ] urlpatterns = i18n_patterns( format_suffix_patterns(urlpatterns, allowed=['json', 'html']) ) Query parameter formats (\u67e5\u8be2\u53c2\u6570\u683c\u5f0f) \u683c\u5f0f\u540e\u7f00\u7684\u66ff\u4ee3\u65b9\u6cd5\u662f\u5728\u67e5\u8be2\u53c2\u6570\u4e2d\u5305\u542b\u8bf7\u6c42\u7684\u683c\u5f0f\u3002REST\u6846\u67b6\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u9009\u9879\uff0c\u5e76\u4e14\u5728\u53ef\u6d4f\u89c8API\u4e2d\u4f7f\u7528\u4ee5\u5728\u4e0d\u540c\u7684\u53ef\u7528\u8868\u73b0\u5f62\u5f0f\u4e4b\u95f4\u5207\u6362\u3002 \u4e3a\u4e86\u4f7f\u7528\u5176\u7b80\u77ed\u683c\u5f0f\u9009\u62e9\u8868\u793a\u5f62\u5f0f\uff0c\u8bf7\u4f7f\u7528 format \u53c2\u6570\u67e5\u8be2\u3002\u4f8b\u5982\uff1a http://example.com/organizations/\uff1fformat=csv \u3002 \u53ef\u4ee5\u4f7f\u7528 URL_FORMAT_OVERRIDE \u8bbe\u7f6e\u6765\u4fee\u6539\u6b64\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002\u5c06\u8be5\u503c\u8bbe\u7f6e\u4e3a None \u53ef\u7981\u7528\u6b64\u884c\u4e3a\u3002 Accept headers vs. format suffixes \u4e00\u4e9bWeb\u793e\u533a\u4f3c\u4e4e\u6709\u4e00\u79cd\u89c2\u70b9\uff0c\u5373\u6587\u4ef6\u540d\u6269\u5c55\u540d\u4e0d\u662fRESTful\u6a21\u5f0f\uff0c\u5e94\u5f53\u59cb\u7ec8\u4f7f\u7528 HTTP Accept \u62a5\u6587\u5934\u3002 \u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u8bef\u89e3\u3002\u4f8b\u5982\uff0c\u5f15\u7528Roy Fielding\u7684\u4ee5\u4e0b\u8ba8\u8bba\u4e86\u67e5\u8be2\u53c2\u6570media type indicators\u4e0efile extension media type indicators\u7684\u76f8\u5bf9\u4f18\u70b9\u8a00\u8bba\uff1a \u201c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u603b\u662f\u559c\u6b22\u6269\u5c55\u3002\u8fd9\u4e24\u4e2a\u9009\u62e9\u90fd\u4e0eREST\u65e0\u5173\u3002\u201c \u2014 \u7f57\u4f0a\u83f2\u5c14\u4e01\uff0c REST discuss mailing list \u8fd9\u6bb5\u5f15\u6587\u6ca1\u6709\u63d0\u5230Accept headers\uff0c\u4f46\u5b83\u660e\u786e\u8868\u793a\u683c\u5f0f\u540e\u7f00\u5e94\u8be5\u88ab\u89c6\u4e3a\u53ef\u63a5\u53d7\u7684\u6a21\u5f0f\u3002","title":"Format suffixes \uff08\u683c\u5f0f\u540e\u7f00\uff09"},{"location":"api-guide/format-suffixes_zh/#format-suffixes","text":"Section 6.2.1 \u5e76\u6ca1\u6709\u8bf4\u5e94\u5f53\u603b\u662f\u4f7f\u7528\u5185\u5bb9\u534f\u5546 \u2014 Roy Fielding, REST discuss mailing list webapi\u7684\u4e00\u79cd\u5e38\u89c1\u6a21\u5f0f\u662f\u5728url\u4e0a\u4f7f\u7528\u6587\u4ef6\u6269\u5c55\u540d\u6765\u4e3a\u7ed9\u5b9a\u7684\u5a92\u4f53\u7c7b\u578b\u63d0\u4f9b\u7aef\u70b9\u3002\u4f8b\u5982\uff0c'http://example.com/api/users.json'\u6765\u63d0\u4f9bJSON\u663e\u793a\u3002 \u5c06\u683c\u5f0f\u540e\u7f00\u6a21\u5f0f\u6dfb\u52a0\u5230API\u7684URLconf\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u662f\u5bb9\u6613\u51fa\u9519\u7684\uff0c\u800c\u4e14\u662f\u4e0dDRY\u7684\uff0c\u56e0\u6b64REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u6a21\u5f0f\u6dfb\u52a0\u5230URLconf\u4e2d\u3002","title":"Format suffixes \uff08\u683c\u5f0f\u540e\u7f00\uff09"},{"location":"api-guide/format-suffixes_zh/#format_suffix_patterns","text":"Signature : format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None) \u8fd4\u56de\u4e00\u4e2aURL\u6a21\u5f0f\u5217\u8868\uff0c\u5176\u4e2d\u7684\u6240\u63d0\u4f9b\u7684\u6bcf\u4e2aURL\u6a21\u5f0f\u9644\u52a0\u4e86\u683c\u5f0f\u540e\u7f00 \u53c2\u6570\uff1a urlpatterns : \u5fc5\u9700\u3002\u4e00\u4e2aURL\u6a21\u5f0f\u5217\u8868\u3002 suffix_required : \u53ef\u9009\u3002\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793aURL\u4e2d\u7684\u540e\u7f00\u662f\u53ef\u9009\u7684\u8fd8\u662f\u5fc5\u9700\u7684\u3002\u9ed8\u8ba4\u503c\u4e3aFalse\uff0c\u8fd9\u610f\u5473\u7740\u540e\u7f00\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u53ef\u9009\u7684\u3002 allowed : Optional. \u53ef\u9009\u3002\u4e00\u4e2a\u6709\u6548\u683c\u5f0f\u540e\u7f00\u7684\u5217\u8868\u6216\u5143\u7ec4\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5c06\u4f7f\u7528\u901a\u914d\u7b26\u683c\u5f0f\u540e\u7f00\u6a21\u5f0f\u3002 Example: from rest_framework.urlpatterns import format_suffix_patterns from blog import views urlpatterns = [ url(r'^/$', views.apt_root), url(r'^comments/$', views.comment_list), url(r'^comments/(?P<pk>[0-9]+)/$', views.comment_detail) ] urlpatterns = format_suffix_patterns(urlpatterns, allowed=['json', 'html']) \u5f53\u4f7f\u7528 format_suffix_patterns \u65f6\uff0c\u5fc5\u987b\u786e\u4fdd\u5c06 'format' \u5173\u952e\u5b57\u53c2\u6570\u6dfb\u52a0\u5230\u76f8\u5e94\u7684\u89c6\u56fe\u4e2d\u3002\u4f8b\u5982\uff1a @api_view(('GET', 'POST')) def comment_list(request, format=None): # do stuff... \u6216\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff1a class CommentList(APIView): def get(self, request, format=None): # do stuff... def post(self, request, format=None): # do stuff... \u4f7f\u7528\u7684kwarg\u540d\u79f0\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 FORMAT_SUFFIX_KWARG \u8bbe\u7f6e\u8fdb\u884c\u4fee\u6539\u3002 \u8fd8\u8981\u6ce8\u610f\uff0c format_suffix_patterns \u4e0d\u652f\u6301\u964d\u4e3a include URL\u6a21\u5f0f\u3002","title":"format_suffix_patterns \uff08\u683c\u5f0f\u540e\u7f00\u6a21\u5f0f\uff09"},{"location":"api-guide/format-suffixes_zh/#using-with-i18n_patterns-i18n_","text":"\u5982\u679c\u4f7f\u7528Django\u63d0\u4f9b\u7684 i18n_patterns \u51fd\u6570\uff0c\u4ee5\u53ca format_suffix_patterns \uff0c\u5219\u5e94\u786e\u4fdd\u5c06 i18n_patterns \u51fd\u6570\u88ab\u5e94\u7528\u4e3a\u6700\u7ec8\u51fd\u6570\u6216\u6700\u5916\u5c42\u51fd\u6570\u3002\u4f8b\u5982\uff1a url patterns = [ \u2026 ] urlpatterns = i18n_patterns( format_suffix_patterns(urlpatterns, allowed=['json', 'html']) )","title":"Using with i18n_patterns (\u4e0ei18n_\u6a21\u5f0f\u4e00\u540c\u4f7f\u7528)"},{"location":"api-guide/format-suffixes_zh/#query-parameter-formats","text":"\u683c\u5f0f\u540e\u7f00\u7684\u66ff\u4ee3\u65b9\u6cd5\u662f\u5728\u67e5\u8be2\u53c2\u6570\u4e2d\u5305\u542b\u8bf7\u6c42\u7684\u683c\u5f0f\u3002REST\u6846\u67b6\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u9009\u9879\uff0c\u5e76\u4e14\u5728\u53ef\u6d4f\u89c8API\u4e2d\u4f7f\u7528\u4ee5\u5728\u4e0d\u540c\u7684\u53ef\u7528\u8868\u73b0\u5f62\u5f0f\u4e4b\u95f4\u5207\u6362\u3002 \u4e3a\u4e86\u4f7f\u7528\u5176\u7b80\u77ed\u683c\u5f0f\u9009\u62e9\u8868\u793a\u5f62\u5f0f\uff0c\u8bf7\u4f7f\u7528 format \u53c2\u6570\u67e5\u8be2\u3002\u4f8b\u5982\uff1a http://example.com/organizations/\uff1fformat=csv \u3002 \u53ef\u4ee5\u4f7f\u7528 URL_FORMAT_OVERRIDE \u8bbe\u7f6e\u6765\u4fee\u6539\u6b64\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002\u5c06\u8be5\u503c\u8bbe\u7f6e\u4e3a None \u53ef\u7981\u7528\u6b64\u884c\u4e3a\u3002","title":"Query parameter formats (\u67e5\u8be2\u53c2\u6570\u683c\u5f0f)"},{"location":"api-guide/format-suffixes_zh/#accept-headers-vs-format-suffixes","text":"\u4e00\u4e9bWeb\u793e\u533a\u4f3c\u4e4e\u6709\u4e00\u79cd\u89c2\u70b9\uff0c\u5373\u6587\u4ef6\u540d\u6269\u5c55\u540d\u4e0d\u662fRESTful\u6a21\u5f0f\uff0c\u5e94\u5f53\u59cb\u7ec8\u4f7f\u7528 HTTP Accept \u62a5\u6587\u5934\u3002 \u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u8bef\u89e3\u3002\u4f8b\u5982\uff0c\u5f15\u7528Roy Fielding\u7684\u4ee5\u4e0b\u8ba8\u8bba\u4e86\u67e5\u8be2\u53c2\u6570media type indicators\u4e0efile extension media type indicators\u7684\u76f8\u5bf9\u4f18\u70b9\u8a00\u8bba\uff1a \u201c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u603b\u662f\u559c\u6b22\u6269\u5c55\u3002\u8fd9\u4e24\u4e2a\u9009\u62e9\u90fd\u4e0eREST\u65e0\u5173\u3002\u201c \u2014 \u7f57\u4f0a\u83f2\u5c14\u4e01\uff0c REST discuss mailing list \u8fd9\u6bb5\u5f15\u6587\u6ca1\u6709\u63d0\u5230Accept headers\uff0c\u4f46\u5b83\u660e\u786e\u8868\u793a\u683c\u5f0f\u540e\u7f00\u5e94\u8be5\u88ab\u89c6\u4e3a\u53ef\u63a5\u53d7\u7684\u6a21\u5f0f\u3002","title":"Accept headers vs. format suffixes"},{"location":"api-guide/generic-views/","text":"Generic views Django\u2019s generic views... were developed as a shortcut for common usage patterns... They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to repeat yourself. \u2014 Django Documentation One of the key benefits of class-based views is the way they allow you to compose bits of reusable behavior. REST framework takes advantage of this by providing a number of pre-built views that provide for commonly used patterns. The generic views provided by REST framework allow you to quickly build API views that map closely to your database models. If the generic views don't suit the needs of your API, you can drop down to using the regular APIView class, or reuse the mixins and base classes used by the generic views to compose your own set of reusable generic views. Examples Typically when using the generic views, you'll override the view, and set several class attributes. from django.contrib.auth.models import User from myapp.serializers import UserSerializer from rest_framework import generics from rest_framework.permissions import IsAdminUser class UserList(generics.ListCreateAPIView): queryset = User.objects.all() serializer_class = UserSerializer permission_classes = [IsAdminUser] For more complex cases you might also want to override various methods on the view class. For example. class UserList(generics.ListCreateAPIView): queryset = User.objects.all() serializer_class = UserSerializer permission_classes = [IsAdminUser] def list(self, request): # Note the use of `get_queryset()` instead of `self.queryset` queryset = self.get_queryset() serializer = UserSerializer(queryset, many=True) return Response(serializer.data) For very simple cases you might want to pass through any class attributes using the .as_view() method. For example, your URLconf might include something like the following entry: url(r'^/users/', ListCreateAPIView.as_view(queryset=User.objects.all(), serializer_class=UserSerializer), name='user-list') API Reference GenericAPIView This class extends REST framework's APIView class, adding commonly required behavior for standard list and detail views. Each of the concrete generic views provided is built by combining GenericAPIView , with one or more mixin classes. Attributes Basic settings : The following attributes control the basic view behavior. queryset - The queryset that should be used for returning objects from this view. Typically, you must either set this attribute, or override the get_queryset() method. If you are overriding a view method, it is important that you call get_queryset() instead of accessing this property directly, as queryset will get evaluated once, and those results will be cached for all subsequent requests. serializer_class - The serializer class that should be used for validating and deserializing input, and for serializing output. Typically, you must either set this attribute, or override the get_serializer_class() method. lookup_field - The model field that should be used to for performing object lookup of individual model instances. Defaults to 'pk' . Note that when using hyperlinked APIs you'll need to ensure that both the API views and the serializer classes set the lookup fields if you need to use a custom value. lookup_url_kwarg - The URL keyword argument that should be used for object lookup. The URL conf should include a keyword argument corresponding to this value. If unset this defaults to using the same value as lookup_field . Pagination : The following attributes are used to control pagination when used with list views. pagination_class - The pagination class that should be used when paginating list results. Defaults to the same value as the DEFAULT_PAGINATION_CLASS setting, which is 'rest_framework.pagination.PageNumberPagination' . Setting pagination_class=None will disable pagination on this view. Filtering : filter_backends - A list of filter backend classes that should be used for filtering the queryset. Defaults to the same value as the DEFAULT_FILTER_BACKENDS setting. Methods Base methods : get_queryset(self) Returns the queryset that should be used for list views, and that should be used as the base for lookups in detail views. Defaults to returning the queryset specified by the queryset attribute. This method should always be used rather than accessing self.queryset directly, as self.queryset gets evaluated only once, and those results are cached for all subsequent requests. May be overridden to provide dynamic behavior, such as returning a queryset, that is specific to the user making the request. For example: def get_queryset(self): user = self.request.user return user.accounts.all() get_object(self) Returns an object instance that should be used for detail views. Defaults to using the lookup_field parameter to filter the base queryset. May be overridden to provide more complex behavior, such as object lookups based on more than one URL kwarg. For example: def get_object(self): queryset = self.get_queryset() filter = {} for field in self.multiple_lookup_fields: filter[field] = self.kwargs[field] obj = get_object_or_404(queryset, **filter) self.check_object_permissions(self.request, obj) return obj Note that if your API doesn't include any object level permissions, you may optionally exclude the self.check_object_permissions , and simply return the object from the get_object_or_404 lookup. filter_queryset(self, queryset) Given a queryset, filter it with whichever filter backends are in use, returning a new queryset. For example: def filter_queryset(self, queryset): filter_backends = [CategoryFilter] if 'geo_route' in self.request.query_params: filter_backends = [GeoRouteFilter, CategoryFilter] elif 'geo_point' in self.request.query_params: filter_backends = [GeoPointFilter, CategoryFilter] for backend in list(filter_backends): queryset = backend().filter_queryset(self.request, queryset, view=self) return queryset get_serializer_class(self) Returns the class that should be used for the serializer. Defaults to returning the serializer_class attribute. May be overridden to provide dynamic behavior, such as using different serializers for read and write operations, or providing different serializers to different types of users. For example: def get_serializer_class(self): if self.request.user.is_staff: return FullAccountSerializer return BasicAccountSerializer Save and deletion hooks : The following methods are provided by the mixin classes, and provide easy overriding of the object save or deletion behavior. perform_create(self, serializer) - Called by CreateModelMixin when saving a new object instance. perform_update(self, serializer) - Called by UpdateModelMixin when saving an existing object instance. perform_destroy(self, instance) - Called by DestroyModelMixin when deleting an object instance. These hooks are particularly useful for setting attributes that are implicit in the request, but are not part of the request data. For instance, you might set an attribute on the object based on the request user, or based on a URL keyword argument. def perform_create(self, serializer): serializer.save(user=self.request.user) These override points are also particularly useful for adding behavior that occurs before or after saving an object, such as emailing a confirmation, or logging the update. def perform_update(self, serializer): instance = serializer.save() send_email_confirmation(user=self.request.user, modified=instance) You can also use these hooks to provide additional validation, by raising a ValidationError() . This can be useful if you need some validation logic to apply at the point of database save. For example: def perform_create(self, serializer): queryset = SignupRequest.objects.filter(user=self.request.user) if queryset.exists(): raise ValidationError('You have already signed up') serializer.save(user=self.request.user) Other methods : You won't typically need to override the following methods, although you might need to call into them if you're writing custom views using GenericAPIView . get_serializer_context(self) - Returns a dictionary containing any extra context that should be supplied to the serializer. Defaults to including 'request' , 'view' and 'format' keys. get_serializer(self, instance=None, data=None, many=False, partial=False) - Returns a serializer instance. get_paginated_response(self, data) - Returns a paginated style Response object. paginate_queryset(self, queryset) - Paginate a queryset if required, either returning a page object, or None if pagination is not configured for this view. filter_queryset(self, queryset) - Given a queryset, filter it with whichever filter backends are in use, returning a new queryset. Mixins The mixin classes provide the actions that are used to provide the basic view behavior. Note that the mixin classes provide action methods rather than defining the handler methods, such as .get() and .post() , directly. This allows for more flexible composition of behavior. The mixin classes can be imported from rest_framework.mixins . ListModelMixin Provides a .list(request, *args, **kwargs) method, that implements listing a queryset. If the queryset is populated, this returns a 200 OK response, with a serialized representation of the queryset as the body of the response. The response data may optionally be paginated. CreateModelMixin Provides a .create(request, *args, **kwargs) method, that implements creating and saving a new model instance. If an object is created this returns a 201 Created response, with a serialized representation of the object as the body of the response. If the representation contains a key named url , then the Location header of the response will be populated with that value. If the request data provided for creating the object was invalid, a 400 Bad Request response will be returned, with the error details as the body of the response. RetrieveModelMixin Provides a .retrieve(request, *args, **kwargs) method, that implements returning an existing model instance in a response. If an object can be retrieved this returns a 200 OK response, with a serialized representation of the object as the body of the response. Otherwise it will return a 404 Not Found . UpdateModelMixin Provides a .update(request, *args, **kwargs) method, that implements updating and saving an existing model instance. Also provides a .partial_update(request, *args, **kwargs) method, which is similar to the update method, except that all fields for the update will be optional. This allows support for HTTP PATCH requests. If an object is updated this returns a 200 OK response, with a serialized representation of the object as the body of the response. If the request data provided for updating the object was invalid, a 400 Bad Request response will be returned, with the error details as the body of the response. DestroyModelMixin Provides a .destroy(request, *args, **kwargs) method, that implements deletion of an existing model instance. If an object is deleted this returns a 204 No Content response, otherwise it will return a 404 Not Found . Concrete View Classes The following classes are the concrete generic views. If you're using generic views this is normally the level you'll be working at unless you need heavily customized behavior. The view classes can be imported from rest_framework.generics . CreateAPIView Used for create-only endpoints. Provides a post method handler. Extends: GenericAPIView , CreateModelMixin ListAPIView Used for read-only endpoints to represent a collection of model instances . Provides a get method handler. Extends: GenericAPIView , ListModelMixin RetrieveAPIView Used for read-only endpoints to represent a single model instance . Provides a get method handler. Extends: GenericAPIView , RetrieveModelMixin DestroyAPIView Used for delete-only endpoints for a single model instance . Provides a delete method handler. Extends: GenericAPIView , DestroyModelMixin UpdateAPIView Used for update-only endpoints for a single model instance . Provides put and patch method handlers. Extends: GenericAPIView , UpdateModelMixin ListCreateAPIView Used for read-write endpoints to represent a collection of model instances . Provides get and post method handlers. Extends: GenericAPIView , ListModelMixin , CreateModelMixin RetrieveUpdateAPIView Used for read or update endpoints to represent a single model instance . Provides get , put and patch method handlers. Extends: GenericAPIView , RetrieveModelMixin , UpdateModelMixin RetrieveDestroyAPIView Used for read or delete endpoints to represent a single model instance . Provides get and delete method handlers. Extends: GenericAPIView , RetrieveModelMixin , DestroyModelMixin RetrieveUpdateDestroyAPIView Used for read-write-delete endpoints to represent a single model instance . Provides get , put , patch and delete method handlers. Extends: GenericAPIView , RetrieveModelMixin , UpdateModelMixin , DestroyModelMixin Customizing the generic views Often you'll want to use the existing generic views, but use some slightly customized behavior. If you find yourself reusing some bit of customized behavior in multiple places, you might want to refactor the behavior into a common class that you can then just apply to any view or viewset as needed. Creating custom mixins For example, if you need to lookup objects based on multiple fields in the URL conf, you could create a mixin class like the following: class MultipleFieldLookupMixin: \"\"\" Apply this mixin to any view or viewset to get multiple field filtering based on a `lookup_fields` attribute, instead of the default single field filtering. \"\"\" def get_object(self): queryset = self.get_queryset() # Get the base queryset queryset = self.filter_queryset(queryset) # Apply any filter backends filter = {} for field in self.lookup_fields: if self.kwargs[field]: # Ignore empty fields. filter[field] = self.kwargs[field] obj = get_object_or_404(queryset, **filter) # Lookup the object self.check_object_permissions(self.request, obj) return obj You can then simply apply this mixin to a view or viewset anytime you need to apply the custom behavior. class RetrieveUserView(MultipleFieldLookupMixin, generics.RetrieveAPIView): queryset = User.objects.all() serializer_class = UserSerializer lookup_fields = ['account', 'username'] Using custom mixins is a good option if you have custom behavior that needs to be used. Creating custom base classes If you are using a mixin across multiple views, you can take this a step further and create your own set of base views that can then be used throughout your project. For example: class BaseRetrieveView(MultipleFieldLookupMixin, generics.RetrieveAPIView): pass class BaseRetrieveUpdateDestroyView(MultipleFieldLookupMixin, generics.RetrieveUpdateDestroyAPIView): pass Using custom base classes is a good option if you have custom behavior that consistently needs to be repeated across a large number of views throughout your project. PUT as create Prior to version 3.0 the REST framework mixins treated PUT as either an update or a create operation, depending on if the object already existed or not. Allowing PUT as create operations is problematic, as it necessarily exposes information about the existence or non-existence of objects. It's also not obvious that transparently allowing re-creating of previously deleted instances is necessarily a better default behavior than simply returning 404 responses. Both styles \" PUT as 404\" and \" PUT as create\" can be valid in different circumstances, but from version 3.0 onwards we now use 404 behavior as the default, due to it being simpler and more obvious. If you need to generic PUT-as-create behavior you may want to include something like this AllowPUTAsCreateMixin class as a mixin to your views. Third party packages The following third party packages provide additional generic view implementations. Django Rest Multiple Models Django Rest Multiple Models provides a generic view (and mixin) for sending multiple serialized models and/or querysets via a single API request.","title":"Generic views"},{"location":"api-guide/generic-views/#generic-views","text":"Django\u2019s generic views... were developed as a shortcut for common usage patterns... They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to repeat yourself. \u2014 Django Documentation One of the key benefits of class-based views is the way they allow you to compose bits of reusable behavior. REST framework takes advantage of this by providing a number of pre-built views that provide for commonly used patterns. The generic views provided by REST framework allow you to quickly build API views that map closely to your database models. If the generic views don't suit the needs of your API, you can drop down to using the regular APIView class, or reuse the mixins and base classes used by the generic views to compose your own set of reusable generic views.","title":"Generic views"},{"location":"api-guide/generic-views/#examples","text":"Typically when using the generic views, you'll override the view, and set several class attributes. from django.contrib.auth.models import User from myapp.serializers import UserSerializer from rest_framework import generics from rest_framework.permissions import IsAdminUser class UserList(generics.ListCreateAPIView): queryset = User.objects.all() serializer_class = UserSerializer permission_classes = [IsAdminUser] For more complex cases you might also want to override various methods on the view class. For example. class UserList(generics.ListCreateAPIView): queryset = User.objects.all() serializer_class = UserSerializer permission_classes = [IsAdminUser] def list(self, request): # Note the use of `get_queryset()` instead of `self.queryset` queryset = self.get_queryset() serializer = UserSerializer(queryset, many=True) return Response(serializer.data) For very simple cases you might want to pass through any class attributes using the .as_view() method. For example, your URLconf might include something like the following entry: url(r'^/users/', ListCreateAPIView.as_view(queryset=User.objects.all(), serializer_class=UserSerializer), name='user-list')","title":"Examples"},{"location":"api-guide/generic-views/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/generic-views/#genericapiview","text":"This class extends REST framework's APIView class, adding commonly required behavior for standard list and detail views. Each of the concrete generic views provided is built by combining GenericAPIView , with one or more mixin classes.","title":"GenericAPIView"},{"location":"api-guide/generic-views/#attributes","text":"Basic settings : The following attributes control the basic view behavior. queryset - The queryset that should be used for returning objects from this view. Typically, you must either set this attribute, or override the get_queryset() method. If you are overriding a view method, it is important that you call get_queryset() instead of accessing this property directly, as queryset will get evaluated once, and those results will be cached for all subsequent requests. serializer_class - The serializer class that should be used for validating and deserializing input, and for serializing output. Typically, you must either set this attribute, or override the get_serializer_class() method. lookup_field - The model field that should be used to for performing object lookup of individual model instances. Defaults to 'pk' . Note that when using hyperlinked APIs you'll need to ensure that both the API views and the serializer classes set the lookup fields if you need to use a custom value. lookup_url_kwarg - The URL keyword argument that should be used for object lookup. The URL conf should include a keyword argument corresponding to this value. If unset this defaults to using the same value as lookup_field . Pagination : The following attributes are used to control pagination when used with list views. pagination_class - The pagination class that should be used when paginating list results. Defaults to the same value as the DEFAULT_PAGINATION_CLASS setting, which is 'rest_framework.pagination.PageNumberPagination' . Setting pagination_class=None will disable pagination on this view. Filtering : filter_backends - A list of filter backend classes that should be used for filtering the queryset. Defaults to the same value as the DEFAULT_FILTER_BACKENDS setting.","title":"Attributes"},{"location":"api-guide/generic-views/#methods","text":"Base methods :","title":"Methods"},{"location":"api-guide/generic-views/#get_querysetself","text":"Returns the queryset that should be used for list views, and that should be used as the base for lookups in detail views. Defaults to returning the queryset specified by the queryset attribute. This method should always be used rather than accessing self.queryset directly, as self.queryset gets evaluated only once, and those results are cached for all subsequent requests. May be overridden to provide dynamic behavior, such as returning a queryset, that is specific to the user making the request. For example: def get_queryset(self): user = self.request.user return user.accounts.all()","title":"get_queryset(self)"},{"location":"api-guide/generic-views/#get_objectself","text":"Returns an object instance that should be used for detail views. Defaults to using the lookup_field parameter to filter the base queryset. May be overridden to provide more complex behavior, such as object lookups based on more than one URL kwarg. For example: def get_object(self): queryset = self.get_queryset() filter = {} for field in self.multiple_lookup_fields: filter[field] = self.kwargs[field] obj = get_object_or_404(queryset, **filter) self.check_object_permissions(self.request, obj) return obj Note that if your API doesn't include any object level permissions, you may optionally exclude the self.check_object_permissions , and simply return the object from the get_object_or_404 lookup.","title":"get_object(self)"},{"location":"api-guide/generic-views/#filter_querysetself-queryset","text":"Given a queryset, filter it with whichever filter backends are in use, returning a new queryset. For example: def filter_queryset(self, queryset): filter_backends = [CategoryFilter] if 'geo_route' in self.request.query_params: filter_backends = [GeoRouteFilter, CategoryFilter] elif 'geo_point' in self.request.query_params: filter_backends = [GeoPointFilter, CategoryFilter] for backend in list(filter_backends): queryset = backend().filter_queryset(self.request, queryset, view=self) return queryset","title":"filter_queryset(self, queryset)"},{"location":"api-guide/generic-views/#get_serializer_classself","text":"Returns the class that should be used for the serializer. Defaults to returning the serializer_class attribute. May be overridden to provide dynamic behavior, such as using different serializers for read and write operations, or providing different serializers to different types of users. For example: def get_serializer_class(self): if self.request.user.is_staff: return FullAccountSerializer return BasicAccountSerializer Save and deletion hooks : The following methods are provided by the mixin classes, and provide easy overriding of the object save or deletion behavior. perform_create(self, serializer) - Called by CreateModelMixin when saving a new object instance. perform_update(self, serializer) - Called by UpdateModelMixin when saving an existing object instance. perform_destroy(self, instance) - Called by DestroyModelMixin when deleting an object instance. These hooks are particularly useful for setting attributes that are implicit in the request, but are not part of the request data. For instance, you might set an attribute on the object based on the request user, or based on a URL keyword argument. def perform_create(self, serializer): serializer.save(user=self.request.user) These override points are also particularly useful for adding behavior that occurs before or after saving an object, such as emailing a confirmation, or logging the update. def perform_update(self, serializer): instance = serializer.save() send_email_confirmation(user=self.request.user, modified=instance) You can also use these hooks to provide additional validation, by raising a ValidationError() . This can be useful if you need some validation logic to apply at the point of database save. For example: def perform_create(self, serializer): queryset = SignupRequest.objects.filter(user=self.request.user) if queryset.exists(): raise ValidationError('You have already signed up') serializer.save(user=self.request.user) Other methods : You won't typically need to override the following methods, although you might need to call into them if you're writing custom views using GenericAPIView . get_serializer_context(self) - Returns a dictionary containing any extra context that should be supplied to the serializer. Defaults to including 'request' , 'view' and 'format' keys. get_serializer(self, instance=None, data=None, many=False, partial=False) - Returns a serializer instance. get_paginated_response(self, data) - Returns a paginated style Response object. paginate_queryset(self, queryset) - Paginate a queryset if required, either returning a page object, or None if pagination is not configured for this view. filter_queryset(self, queryset) - Given a queryset, filter it with whichever filter backends are in use, returning a new queryset.","title":"get_serializer_class(self)"},{"location":"api-guide/generic-views/#mixins","text":"The mixin classes provide the actions that are used to provide the basic view behavior. Note that the mixin classes provide action methods rather than defining the handler methods, such as .get() and .post() , directly. This allows for more flexible composition of behavior. The mixin classes can be imported from rest_framework.mixins .","title":"Mixins"},{"location":"api-guide/generic-views/#listmodelmixin","text":"Provides a .list(request, *args, **kwargs) method, that implements listing a queryset. If the queryset is populated, this returns a 200 OK response, with a serialized representation of the queryset as the body of the response. The response data may optionally be paginated.","title":"ListModelMixin"},{"location":"api-guide/generic-views/#createmodelmixin","text":"Provides a .create(request, *args, **kwargs) method, that implements creating and saving a new model instance. If an object is created this returns a 201 Created response, with a serialized representation of the object as the body of the response. If the representation contains a key named url , then the Location header of the response will be populated with that value. If the request data provided for creating the object was invalid, a 400 Bad Request response will be returned, with the error details as the body of the response.","title":"CreateModelMixin"},{"location":"api-guide/generic-views/#retrievemodelmixin","text":"Provides a .retrieve(request, *args, **kwargs) method, that implements returning an existing model instance in a response. If an object can be retrieved this returns a 200 OK response, with a serialized representation of the object as the body of the response. Otherwise it will return a 404 Not Found .","title":"RetrieveModelMixin"},{"location":"api-guide/generic-views/#updatemodelmixin","text":"Provides a .update(request, *args, **kwargs) method, that implements updating and saving an existing model instance. Also provides a .partial_update(request, *args, **kwargs) method, which is similar to the update method, except that all fields for the update will be optional. This allows support for HTTP PATCH requests. If an object is updated this returns a 200 OK response, with a serialized representation of the object as the body of the response. If the request data provided for updating the object was invalid, a 400 Bad Request response will be returned, with the error details as the body of the response.","title":"UpdateModelMixin"},{"location":"api-guide/generic-views/#destroymodelmixin","text":"Provides a .destroy(request, *args, **kwargs) method, that implements deletion of an existing model instance. If an object is deleted this returns a 204 No Content response, otherwise it will return a 404 Not Found .","title":"DestroyModelMixin"},{"location":"api-guide/generic-views/#concrete-view-classes","text":"The following classes are the concrete generic views. If you're using generic views this is normally the level you'll be working at unless you need heavily customized behavior. The view classes can be imported from rest_framework.generics .","title":"Concrete View Classes"},{"location":"api-guide/generic-views/#createapiview","text":"Used for create-only endpoints. Provides a post method handler. Extends: GenericAPIView , CreateModelMixin","title":"CreateAPIView"},{"location":"api-guide/generic-views/#listapiview","text":"Used for read-only endpoints to represent a collection of model instances . Provides a get method handler. Extends: GenericAPIView , ListModelMixin","title":"ListAPIView"},{"location":"api-guide/generic-views/#retrieveapiview","text":"Used for read-only endpoints to represent a single model instance . Provides a get method handler. Extends: GenericAPIView , RetrieveModelMixin","title":"RetrieveAPIView"},{"location":"api-guide/generic-views/#destroyapiview","text":"Used for delete-only endpoints for a single model instance . Provides a delete method handler. Extends: GenericAPIView , DestroyModelMixin","title":"DestroyAPIView"},{"location":"api-guide/generic-views/#updateapiview","text":"Used for update-only endpoints for a single model instance . Provides put and patch method handlers. Extends: GenericAPIView , UpdateModelMixin","title":"UpdateAPIView"},{"location":"api-guide/generic-views/#listcreateapiview","text":"Used for read-write endpoints to represent a collection of model instances . Provides get and post method handlers. Extends: GenericAPIView , ListModelMixin , CreateModelMixin","title":"ListCreateAPIView"},{"location":"api-guide/generic-views/#retrieveupdateapiview","text":"Used for read or update endpoints to represent a single model instance . Provides get , put and patch method handlers. Extends: GenericAPIView , RetrieveModelMixin , UpdateModelMixin","title":"RetrieveUpdateAPIView"},{"location":"api-guide/generic-views/#retrievedestroyapiview","text":"Used for read or delete endpoints to represent a single model instance . Provides get and delete method handlers. Extends: GenericAPIView , RetrieveModelMixin , DestroyModelMixin","title":"RetrieveDestroyAPIView"},{"location":"api-guide/generic-views/#retrieveupdatedestroyapiview","text":"Used for read-write-delete endpoints to represent a single model instance . Provides get , put , patch and delete method handlers. Extends: GenericAPIView , RetrieveModelMixin , UpdateModelMixin , DestroyModelMixin","title":"RetrieveUpdateDestroyAPIView"},{"location":"api-guide/generic-views/#customizing-the-generic-views","text":"Often you'll want to use the existing generic views, but use some slightly customized behavior. If you find yourself reusing some bit of customized behavior in multiple places, you might want to refactor the behavior into a common class that you can then just apply to any view or viewset as needed.","title":"Customizing the generic views"},{"location":"api-guide/generic-views/#creating-custom-mixins","text":"For example, if you need to lookup objects based on multiple fields in the URL conf, you could create a mixin class like the following: class MultipleFieldLookupMixin: \"\"\" Apply this mixin to any view or viewset to get multiple field filtering based on a `lookup_fields` attribute, instead of the default single field filtering. \"\"\" def get_object(self): queryset = self.get_queryset() # Get the base queryset queryset = self.filter_queryset(queryset) # Apply any filter backends filter = {} for field in self.lookup_fields: if self.kwargs[field]: # Ignore empty fields. filter[field] = self.kwargs[field] obj = get_object_or_404(queryset, **filter) # Lookup the object self.check_object_permissions(self.request, obj) return obj You can then simply apply this mixin to a view or viewset anytime you need to apply the custom behavior. class RetrieveUserView(MultipleFieldLookupMixin, generics.RetrieveAPIView): queryset = User.objects.all() serializer_class = UserSerializer lookup_fields = ['account', 'username'] Using custom mixins is a good option if you have custom behavior that needs to be used.","title":"Creating custom mixins"},{"location":"api-guide/generic-views/#creating-custom-base-classes","text":"If you are using a mixin across multiple views, you can take this a step further and create your own set of base views that can then be used throughout your project. For example: class BaseRetrieveView(MultipleFieldLookupMixin, generics.RetrieveAPIView): pass class BaseRetrieveUpdateDestroyView(MultipleFieldLookupMixin, generics.RetrieveUpdateDestroyAPIView): pass Using custom base classes is a good option if you have custom behavior that consistently needs to be repeated across a large number of views throughout your project.","title":"Creating custom base classes"},{"location":"api-guide/generic-views/#put-as-create","text":"Prior to version 3.0 the REST framework mixins treated PUT as either an update or a create operation, depending on if the object already existed or not. Allowing PUT as create operations is problematic, as it necessarily exposes information about the existence or non-existence of objects. It's also not obvious that transparently allowing re-creating of previously deleted instances is necessarily a better default behavior than simply returning 404 responses. Both styles \" PUT as 404\" and \" PUT as create\" can be valid in different circumstances, but from version 3.0 onwards we now use 404 behavior as the default, due to it being simpler and more obvious. If you need to generic PUT-as-create behavior you may want to include something like this AllowPUTAsCreateMixin class as a mixin to your views.","title":"PUT as create"},{"location":"api-guide/generic-views/#third-party-packages","text":"The following third party packages provide additional generic view implementations.","title":"Third party packages"},{"location":"api-guide/generic-views/#django-rest-multiple-models","text":"Django Rest Multiple Models provides a generic view (and mixin) for sending multiple serialized models and/or querysets via a single API request.","title":"Django Rest Multiple Models"},{"location":"api-guide/generic-views_zh/","text":"Generic views Django\u7684\u6807\u51c6 views...\u662f\u4e3a\u66f4\u5feb\u6377\u5730\u4f7f\u7528\u5e38\u89c1\u7684\u4f7f\u7528\u6a21\u5f0f\u800c\u5f00\u53d1\u7684... \u5b83\u4eec\u91c7\u7528\u5728view\u5f00\u53d1\u4e2d\u627e\u5230\u7684\u67d0\u4e9b\u5e38\u89c1\u8bed\u6cd5\u548c\u6a21\u5f0f\uff0c\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u62bd\u8c61\uff0c\u4ee5\u4fbf\u4f60\u53ef\u4ee5\u5feb\u901f\u5199\u51fa\u6570\u636e\u7684\u5e38\u89c1\u89c6\u56fe\uff0c\u800c\u65e0\u9700\u91cd\u590d\u81ea\u5df1\u3002 \u2014 Django \u6587\u6863 \u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u7684\u4e3b\u8981\u4f18\u70b9\u4e4b\u4e00\u662f\u5b83\u4eec\u5141\u8bb8\u4f60\u7ec4\u5408\u4e00\u4e9b\u53ef\u91cd\u7528\u7684\u884c\u4e3a\u3002 REST framework\u901a\u8fc7\u63d0\u4f9b\u8bb8\u591a\u9884\u5148\u6784\u5efa\u7684\u89c6\u56fe\u6765\u63d0\u4f9b\u5e38\u7528\u7684\u6a21\u5f0f\u6765\u5229\u7528\u8fd9\u4e00\u4f18\u70b9\u3002 REST framework \u63d0\u4f9b\u7684\u901a\u7528\u89c6\u56fe\u5141\u8bb8\u60a8\u5feb\u901f\u6784\u5efa\u4e0e\u6570\u636e\u5e93\u6a21\u578b\u5bc6\u5207\u6620\u5c04\u7684API\u89c6\u56fe\u3002 \u5982\u679c\u901a\u7528\u89c6\u56fe\u4e0d\u9002\u5408\u4f60\u7684API\u7684\u9700\u6c42\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5e38\u89c4 APIView \u7c7b\uff0c\u6216\u91cd\u7528\u901a\u7528\u89c6\u56fe\u4f7f\u7528\u7684mixins\u548c\u57fa\u7c7b\u6765\u7ec4\u6210\u4f60\u81ea\u5df1\u7684\u4e00\u7ec4\u53ef\u91cd\u7528\u7684\u901a\u7528\u89c6\u56fe\u3002 \u4e3e\u4e2a\u4f8b\u5b50 \u901a\u5e38\u5728\u4f7f\u7528\u901a\u7528\u89c6\u56fe\u65f6\uff0c\u4f60\u5c06\u8986\u76d6\u89c6\u56fe\uff0c\u5e76\u8bbe\u7f6e\u591a\u4e2a\u7c7b\u5c5e\u6027\u3002 from django.contrib.auth.models import User from myapp.serializers import UserSerializer from rest_framework import generics from rest_framework.permissions import IsAdminUser class UserList(generics.ListCreateAPIView): queryset = User.objects.all() serializer_class = UserSerializer permission_classes = (IsAdminUser, ) \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff0c\u60a8\u53ef\u80fd\u8fd8\u60f3\u8986\u76d6\u89c6\u56fe\u7c7b\u4e0a\u7684\u5404\u79cd\u65b9\u6cd5\u3002\u6bd4\u5982\uff1a class UserList(generics.ListCreateAPIView): queryset = User.objects.all() serializer_class = UserSerializer permission_classes = (IsAdminUser, ) def list(self, request): # Note the use of `get_queryset()` instead of `self.queryset` queryset = self.get_queryset() serializer = UserSerializer(queryset, many=True) return Response(serializer.data) \u5bf9\u4e8e\u975e\u5e38\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u4f60\u53ef\u80fd\u60f3\u4f7f\u7528 .as_view() \u65b9\u6cd5\u4f20\u9012\u4efb\u4f55\u7c7b\u5c5e\u6027\u3002 \u6bd4\u5982\uff1a\u4f60\u7684URLconf\u53ef\u80fd\u5305\u62ec\u7c7b\u4f3c\u4ee5\u4e0b\u6761\u76ee\uff1a url(r'^/users/', ListCreateAPIView.as_view\\(queryset=User.objects.all(), serializer_class=UserSerializer), name='user-list') API Reference GenericAPIView \u6b64\u7c7b\u6269\u5c55\u4e86REST\u6846\u67b6\u7684 APIView \u7c7b\uff0c\u4e3a\u6807\u51c6list\u548cdetail view \u6dfb\u52a0\u4e86\u901a\u5e38\u9700\u8981\u7684\u884c\u4e3a\u3002 \u63d0\u4f9b\u7684\u6bcf\u4e2a\u5177\u4f53\u901a\u7528\u89c6\u56fe\u662f\u901a\u8fc7\u5c06 GenericAPIView \u4e0e\u4e00\u4e2a\u6216\u591a\u4e2amixin\u7c7b\u7ec4\u5408\u6765\u6784\u5efa\u7684\u3002 Attributes \u57fa\u672c\u8bbe\u7f6e : \u4ee5\u4e0b\u5c5e\u6027\u63a7\u5236\u7740\u57fa\u672c\u89c6\u56fe\u7684\u884c\u4e3a\u3002 queryset - \u7528\u4e8e\u4ece\u89c6\u56fe\u8fd4\u56de\u5bf9\u8c61\u7684\u67e5\u8be2\u7ed3\u679c\u96c6\u3002\u901a\u5e38\uff0c\u4f60\u5fc5\u987b\u8bbe\u7f6e\u6b64\u5c5e\u6027\u6216\u8005\u91cd\u5199 get_queryset() \u65b9\u6cd5\u3002\u5982\u679c\u4f60\u91cd\u5199\u4e86\u4e00\u4e2a\u89c6\u56fe\u7684\u65b9\u6cd5\uff0c\u91cd\u8981\u7684\u662f\u4f60\u5e94\u8be5\u8c03\u7528 get_queryset() \u65b9\u6cd5\u800c\u4e0d\u662f\u76f4\u63a5\u8bbf\u95ee\u8be5\u5c5e\u6027\uff0c\u56e0\u4e3a queryset \u5c06\u88ab\u8ba1\u7b97\u4e00\u6b21\uff0c\u8fd9\u4e9b\u7ed3\u679c\u5c06\u4e3a\u540e\u7eed\u8bf7\u6c42\u7f13\u5b58\u8d77\u6765\u3002 serializer_class - \u7528\u4e8e\u9a8c\u8bc1\u548c\u53cd\u5e8f\u5217\u5316\u8f93\u5165\u4ee5\u53ca\u7528\u4e8e\u5e8f\u5217\u5316\u8f93\u51fa\u7684Serializer\u7c7b\u3002 \u901a\u5e38\uff0c\u4f60\u5fc5\u987b\u8bbe\u7f6e\u6b64\u5c5e\u6027\u6216\u8005\u91cd\u5199 get_serializer_class() \u65b9\u6cd5\u3002 lookup_field - \u7528\u4e8e\u6267\u884c\u5404\u4e2amodel\u5b9e\u4f8b\u7684\u5bf9\u8c61\u67e5\u627e\u7684model\u5b57\u6bb5\u3002\u9ed8\u8ba4\u4e3a 'pk' \u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u4f7f\u7528\u8d85\u94fe\u63a5API\u65f6\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u503c\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5728API\u89c6\u56fe \u548c \u5e8f\u5217\u5316\u7c7b \u90fd \u8bbe\u7f6e\u67e5\u627e\u5b57\u6bb5\u3002 lookup_url_kwarg - \u5e94\u7528\u4e8e\u5bf9\u8c61\u67e5\u627e\u7684URL\u5173\u952e\u5b57\u53c2\u6570\u3002\u5b83\u7684 URL conf \u5e94\u8be5\u5305\u62ec\u4e00\u4e2a\u4e0e\u8fd9\u4e2a\u503c\u76f8\u5bf9\u5e94\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\u5982\u679c\u53d6\u6d88\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e0e lookup_field \u76f8\u540c\u7684\u503c\u3002 Pagination : \u4ee5\u4e0b\u5c5e\u6027\u7528\u4e8e\u5728\u4e0e\u5217\u8868\u89c6\u56fe\u4e00\u8d77\u4f7f\u7528\u65f6\u63a7\u5236\u5206\u9875\u3002 pagination_class - \u5f53\u5206\u9875\u5217\u51fa\u7ed3\u679c\u65f6\u5e94\u4f7f\u7528\u7684\u5206\u9875\u7c7b\u3002\u9ed8\u8ba4\u503c\u4e0e DEFAULT_PAGINATION_CLASS \u8bbe\u7f6e\u7684\u503c\u76f8\u540c\uff0c\u5373 'rest_framework.pagination.PageNumberPagination' \u3002 Filtering : filter_backends - \u7528\u4e8e\u8fc7\u6ee4\u67e5\u8be2\u96c6\u7684\u8fc7\u6ee4\u5668\u540e\u7aef\u7c7b\u7684\u5217\u8868\u3002\u9ed8\u8ba4\u503c\u4e0e DEFAULT_FILTER_BACKENDS \u8bbe\u7f6e\u7684\u503c\u76f8\u540c\u3002 Methods Base methods : get_queryset(self) \u8fd4\u56de\u5217\u8868\u89c6\u56fe\u4e2d\u5b9e\u7528\u7684\u67e5\u8be2\u96c6\uff0c\u8be5\u67e5\u8be2\u96c6\u8fd8\u7528\u4f5c\u8be6\u7ec6\u89c6\u56fe\u4e2d\u7684\u67e5\u627e\u57fa\u7840\u3002\u9ed8\u8ba4\u8fd4\u56de\u7531 queryset \u5c5e\u6027\u6307\u5b9a\u7684\u67e5\u8be2\u96c6\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u5e94\u8be5\u603b\u662f\u88ab\u8c03\u7528\u800c\u4e0d\u662f\u76f4\u63a5\u8bbf\u95ee self.queryset \uff0c\u56e0\u4e3a self.queryset \u53ea\u4f1a\u88ab\u8ba1\u7b97\u4e00\u8d77\uff0c\u7136\u540e\u8fd9\u4e9b\u7ed3\u679c\u5c06\u4e3a\u540e\u7eed\u7684\u8bf7\u6c42\u7f13\u5b58\u8d77\u6765\u3002 \u8be5\u65b9\u6cd5\u53ef\u80fd\u4f1a\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u52a8\u6001\u884c\u4e3a\uff0c\u6bd4\u5982\u8fd4\u56de\u57fa\u4e8e\u53d1\u51fa\u8bf7\u6c42\u7684\u7528\u6237\u7684\u7ed3\u679c\u96c6\u3002 \u4f8b\u5982: def get_queryset(self): user = self.request.user return user.accounts.all() get_object(self) \u8fd4\u56de\u5e94\u7528\u4e8e\u8be6\u7ec6\u89c6\u56fe\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002\u9ed8\u8ba4\u4f7f\u7528 lookup_field \u53c2\u6570\u8fc7\u6ee4\u57fa\u672c\u7684\u67e5\u8be2\u96c6\u3002 \u8be5\u65b9\u6cd5\u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u66f4\u590d\u6742\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u57fa\u4e8e\u591a\u4e2a URL \u53c2\u6570\u7684\u5bf9\u8c61\u67e5\u627e\u3002 \u4f8b\u5982: def get_object(self): queryset = self.get_queryset() filter = {} for field in self.multiple_lookup_fields: filter[field] = self.kwargs[field] obj = get_object_or_404(queryset, **filter) self.check_object_permissions(self.request, obj) return obj \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u7684API\u4e0d\u5305\u542b\u4efb\u4f55\u5bf9\u8c61\u7ea7\u7684\u6743\u9650\u63a7\u5236\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e0d\u6267\u884c self.check_object_permissions \uff0c\u7b80\u5355\u7684\u8fd4\u56de get_object_or_404 \u67e5\u627e\u7684\u5bf9\u8c61\u5373\u53ef\u3002 filter_queryset(self, queryset) \u7ed9\u5b9a\u4e00\u4e2aqueryset\uff0c\u4f7f\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684queryset\u3002 \u4f8b\u5982: def filter_queryset(self, queryset): filter_backends = (CategoryFilter, ) if 'geo_route' in self.request.query_params: filter_backends = (GeoRouteFilter, CategoryFilter) elif 'geo_point' in self.request.query_params: filter_backends = (GeoPointFilter, CategoryFilter) for backend in list(filter_backends): queryset = backend().filter_queryset(self.request, queryset, view=self) return queryset get_serializer_class(self) \u8fd4\u56de\u5e94\u7528\u4e8e\u5e8f\u5217\u5316\u7684\u7c7b\u3002\u9ed8\u8ba4\u4e3a\u8fd4\u56de serializer_class \u5c5e\u6027\u7684\u503c\u3002 \u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u52a8\u6001\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u5bf9\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\u64cd\u4f5c\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\uff0c\u6216\u8005\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u7528\u6237\u63d0\u4f9b\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\u3002 \u4f8b\u5982: def get_serializer_class(self\\): if self.request.user.is_staff: return FullAccountSerializer return BasicAccountSerializer Save and deletion hooks : \u4ee5\u4e0b\u65b9\u6cd5\u7531mixin\u7c7b\u63d0\u4f9b\uff0c\u5e76\u63d0\u4f9b\u5bf9\u8c61\u4fdd\u5b58\u6216\u5220\u9664\u884c\u4e3a\u7684\u7b80\u5355\u91cd\u5199\u3002 perform_create(self, serializer) - \u5728\u4fdd\u5b58\u65b0\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531 CreateModelMixin \u8c03\u7528\u3002 perform_update(self, serializer) - \u5728\u4fdd\u5b58\u73b0\u6709\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531 UpdateModelMixin \u8c03\u7528\u3002 perform_destroy(self, instance) - \u5728\u5220\u9664\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531 DestroyModelMixin \u8c03\u7528\u3002 \u8fd9\u4e9b\u94a9\u5b50\u5bf9\u4e8e\u8bbe\u7f6e\u8bf7\u6c42\u4e2d\u9690\u542b\u7684\u4f46\u4e0d\u662f\u8bf7\u6c42\u6570\u636e\u7684\u4e00\u90e8\u5206\u7684\u5c5e\u6027\u7279\u522b\u6709\u7528\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u7528\u6237\u6216\u57fa\u4e8eURL\u5173\u952e\u5b57\u53c2\u6570\u5728\u5bf9\u8c61\u4e0a\u8bbe\u7f6e\u5c5e\u6027\u3002 def perform_create(self, serializer): serializer.save(user=self.request.user) \u8fd9\u4e9b\u53ef\u91cd\u5199\u7684\u5173\u952e\u70b9\u5bf9\u4e8e\u6dfb\u52a0\u5728\u4fdd\u5b58\u5bf9\u8c61\u4e4b\u524d\u6216\u4e4b\u540e\u53d1\u751f\u7684\u884c\u4e3a\uff08\u4f8b\u5982\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u786e\u8ba4\u6216\u8bb0\u5f55\u66f4\u65b0\u65e5\u5fd7\uff09\u4e5f\u7279\u522b\u6709\u7528\u3002 def perform_update(self, serializer): instance = serializer.save() send_email_confirmation(user=self.request.user, modified=instance) \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u94a9\u5b50\u901a\u8fc7\u629b\u51fa ValidationError() \u6765\u63d0\u4f9b\u989d\u5916\u7684\u9a8c\u8bc1\u3002\u5f53\u4f60\u9700\u8981\u5728\u6570\u636e\u5e93\u4fdd\u5b58\u65f6\u5e94\u7528\u4e00\u4e9b\u9a8c\u8bc1\u903b\u8f91\u65f6\uff0c\u8fd9\u4f1a\u5f88\u6709\u7528\u3002 \u4f8b\u5982: def perform_create(self, serializer): queryset = SignupRequest.objects.filter(user=self.request.user) if queryset.exists(): raise ValidationError('You have already signed up') serializer.save(user=self.request.user) \u6ce8\u610f : \u8fd9\u4e9b\u65b9\u6cd5\u66ff\u6362\u4e86\u65e7\u7248\u672c2.x\u4e2d\u7684 pre_save , post_save , pre_delete \u548c post_delete \u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u518d\u53ef\u7528\u3002 \u5176\u4ed6\u65b9\u6cd5 : \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u91cd\u5199\u4ee5\u4e0b\u65b9\u6cd5\uff0c\u867d\u7136\u5728\u4f60\u4f7f\u7528 GenericAPIView \u7f16\u5199\u81ea\u5b9a\u4e49\u89c6\u56fe\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u8c03\u7528\u5b83\u4eec\u3002 get_serializer_context(self) - \u8fd4\u56de\u5305\u542b\u5e94\u8be5\u63d0\u4f9b\u7ed9\u5e8f\u5217\u5316\u7a0b\u5e8f\u7684\u4efb\u4f55\u989d\u5916\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u3002\u9ed8\u8ba4\u5305\u542b 'request' , 'view' \u548c 'format' \u8fd9\u4e9bkeys\u3002. get_serializer(self, instance=None, data=None, many=False, partial=False) - \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7684\u5b9e\u4f8b\u3002 get_paginated_response(self, data) - \u8fd4\u56de\u5206\u9875\u6837\u5f0f\u7684 Response \u5bf9\u8c61\u3002 paginate_queryset(self, queryset) - \u5982\u679c\u9700\u8981\u5206\u9875\u67e5\u8be2\uff0c\u8fd4\u56de\u9875\u9762\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u4e3a\u6b64\u89c6\u56fe\u914d\u7f6e\u5206\u9875\uff0c\u5219\u8fd4\u56de None \u3002 filter_queryset(self, queryset) - \u7ed9\u5b9a\u67e5\u8be2\u96c6\uff0c\u4f7f\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u67e5\u8be2\u96c6\u3002 Mixins Mixin \u7c7b\u63d0\u4f9b\u7528\u4e8e\u63d0\u4f9b\u57fa\u672c\u89c6\u56fe\u884c\u4e3a\u7684\u64cd\u4f5c\u3002\u6ce8\u610fmixin\u7c7b\u63d0\u4f9b\u52a8\u4f5c\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\uff0c\u4f8b\u5982 .get() \u548c .post() \uff0c \u8fd9\u5141\u8bb8\u66f4\u7075\u6d3b\u7684\u884c\u4e3a\u7ec4\u6210\u3002 Mixin \u7c7b\u53ef\u4ee5\u4ece rest_framework.mixins \u5bfc\u5165\u3002 ListModelMixin \u63d0\u4f9b\u4e00\u4e2a .list(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u5b9e\u73b0\u5217\u51fa\u7ed3\u679c\u96c6\u3002 \u5982\u679c\u67e5\u8be2\u96c6\u88ab\u586b\u5145\u4e86\u6570\u636e\uff0c\u5219\u8fd4\u56de 200 OK \u54cd\u5e94\uff0c\u5c06\u67e5\u8be2\u96c6\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u76f8\u5e94\u6570\u636e\u53ef\u4ee5\u4efb\u610f\u5206\u9875\u3002 CreateModelMixin \u63d0\u4f9b .create(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u5b9e\u73b0\u521b\u5efa\u548c\u4fdd\u5b58\u4e00\u4e2a\u65b0\u7684model\u5b9e\u4f8b\u3002 \u5982\u679c\u521b\u5efa\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a 201 Created \u54cd\u5e94\uff0c\u5c06\u8be5\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u5982\u679c\u5e8f\u5217\u5316\u7684\u8868\u793a\u4e2d\u5305\u542b\u540d\u4e3a url \u7684\u952e\uff0c\u5219\u54cd\u5e94\u7684 Location \u5934\u5c06\u586b\u5145\u8be5\u503c\u3002 \u5982\u679c\u4e3a\u521b\u5efa\u5bf9\u8c61\u63d0\u4f9b\u7684\u8bf7\u6c42\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de 400 Bad Request \uff0c\u5176\u4e2d\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u4f5c\u4e3a\u54cd\u5e94\u7684\u6b63\u6587\u3002 RetrieveModelMixin \u63d0\u4f9b\u4e00\u4e2a .retrieve(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u5b9e\u73b0\u8fd4\u56de\u54cd\u5e94\u4e2d\u73b0\u6709\u6a21\u578b\u7684\u5b9e\u4f8b\u3002 \u5982\u679c\u53ef\u4ee5\u68c0\u7d22\u5bf9\u8c61\uff0c\u5219\u8fd4\u56de 200 OK \u54cd\u5e94\uff0c\u5c06\u8be5\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u5426\u5219\u5c06\u8fd4\u56de 404 Not Found \u3002 UpdateModelMixin \u63d0\u4f9b .update(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u5b9e\u73b0\u66f4\u65b0\u548c\u4fdd\u5b58\u73b0\u6709\u6a21\u578b\u5b9e\u4f8b\u3002 \u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a .partial_update(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u548c update \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u66f4\u65b0\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\u3002\u8fd9\u5141\u8bb8\u652f\u6301 HTTP PATCH \u8bf7\u6c42\u3002 \u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u88ab\u66f4\u65b0\uff0c\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a 200 OK \u54cd\u5e94\uff0c\u5c06\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002 \u5982\u679c\u4e3a\u66f4\u65b0\u5bf9\u8c61\u63d0\u4f9b\u7684\u8bf7\u6c42\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a 400 Bad Request \u54cd\u5e94\uff0c\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u4f5c\u4e3a\u54cd\u5e94\u7684\u6b63\u6587\u3002 DestroyModelMixin \u63d0\u4f9b\u4e00\u4e2a .destroy(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u5b9e\u73b0\u5220\u9664\u73b0\u6709\u6a21\u578b\u5b9e\u4f8b\u3002 \u5982\u679c\u5220\u9664\u5bf9\u8c61\uff0c\u5219\u8fd4\u56de 204 No Content \u54cd\u5e94\uff0c\u5426\u5219\u8fd4\u56de 404 Not Found \u3002 Concrete View Classes \u4ee5\u4e0b\u7c7b\u662f\u5177\u4f53\u7684\u901a\u7528\u89c6\u56fe\u3002\u8fd9\u901a\u5e38\u662f\u4f60\u771f\u6b63\u7528\u5230\u7684\u90a3\u4e9b\uff0c\u9664\u975e\u4f60\u9700\u8981\u6df1\u5ea6\u5b9a\u5236\u7684\u884c\u4e3a\u3002 \u8fd9\u4e9b\u89c6\u56fe\u7c7b\u53ef\u4ee5\u4ece rest_framework.generics \u5bfc\u5165\u3002 CreateAPIView \u7528\u4e8e \u4ec5\u521b\u5efa \u7aef\u70b9\u3002 \u63d0\u4f9b\u4e00\u4e2a post \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , CreateModelMixin ListAPIView \u7528\u4e8e \u53ea\u8bfb \u7aef\u70b9\u4ee5\u8868\u793a \u6a21\u578b\u5b9e\u4f8b\u96c6\u5408 \u3002 \u63d0\u4f9b\u4e00\u4e2a get \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , ListModelMixin RetrieveAPIView \u7528\u4e8e \u53ea\u8bfb \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b\u4e00\u4e2a get \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , RetrieveModelMixin DestroyAPIView \u7528\u4e8e \u53ea\u5220\u9664 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b\u4e00\u4e2a delete \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , DestroyModelMixin UpdateAPIView \u7528\u4e8e \u53ea\u66f4\u65b0 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b\u4e00\u4e2a put \u548c patch \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , UpdateModelMixin ListCreateAPIView \u7528\u4e8e \u8bfb\u5199\u7aef\u70b9 \u4ee5\u8868\u793a \u6a21\u578b\u5b9e\u4f8b\u7684\u96c6\u5408 \u3002 \u63d0\u4f9b\u4e00\u4e2a get \u548c post \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , ListModelMixin , CreateModelMixin RetrieveUpdateAPIView \u7528\u4e8e \u8bfb\u53d6\u6216\u66f4\u65b0 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b get , put \u548c patch \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , RetrieveModelMixin , UpdateModelMixin RetrieveDestroyAPIView \u7528\u4e8e \u8bfb\u53d6\u6216\u5220\u9664 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b get \u548c delete \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , RetrieveModelMixin , DestroyModelMixin RetrieveUpdateDestroyAPIView \u7528\u4e8e \u8bfb\u5199\u5220\u9664 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b get , put , patch \u548c delete \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , RetrieveModelMixin , UpdateModelMixin , DestroyModelMixin \u81ea\u5b9a\u4e49\u901a\u7528\u89c6\u56fe \u901a\u5e38\u4f60\u4f1a\u60f3\u4f7f\u7528\u73b0\u6709\u7684\u901a\u7528\u89c6\u56fe\uff0c\u4f46\u662f\u4f7f\u7528\u4e00\u4e9b\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u591a\u4e2a\u5730\u65b9\u91cd\u590d\u4f7f\u7528\u4e86\u4e00\u4e9b\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u4f60\u53ef\u80fd\u60f3\u5c06\u884c\u4e3a\u91cd\u6784\u4e3a\u4e00\u4e2a\u516c\u5171\u7c7b\uff0c\u7136\u540e\u53ea\u9700\u6839\u636e\u9700\u8981\u5e94\u7528\u5230\u4efb\u4f55\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u3002 \u521b\u5efa\u81ea\u5b9a\u4e49 mixins \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9700\u8981\u57fa\u4e8e URL conf\u4e2d\u7684\u591a\u4e2a\u5b57\u6bb5\u67e5\u627e\u5bf9\u8c61\uff0c\u5219\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684 mixin\u7c7b\uff1a class MultipleFieldLookupMixin(object): \"\"\" Apply this mixin to any view or viewset to get multiple field filtering based on a `lookup_fields` attribute, instead of the default single field filtering. \"\"\" def get_object(self): queryset = self.get_queryset() # \u83b7\u53d6\u57fa\u672c\u7684queryset queryset = self.filter_queryset(queryset) # \u5e94\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef filter = {} for field in self.lookup_fields: if self.kwargs[field]: # Ignore empty fields. filter[field] = self.kwargs[field] return get_object_or_404(queryset, **filter) # \u67e5\u627e\u5bf9\u8c61 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u5e94\u7528\u81ea\u5b9a\u4e49\u884c\u4e3a\u65f6\u968f\u65f6\u5c06\u6b64mixin\u7c7b\u5e94\u7528\u4e8e\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u3002 class RetrieveUserView(MultipleFieldLookupMixin, generics.RetrieveAPIView): queryset = User.objects.all() serializer_class = UserSerializer lookup_fields = ('account', 'username') \u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u90a3\u4e48\u4f7f\u7528\u81ea\u5b9a\u4e49mixin\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002 \u521b\u5efa\u81ea\u5b9a\u4e49\u57fa\u7c7b \u5982\u679c\u4f60\u5728\u591a\u4e2a\u89c6\u56fe\u4e2d\u4f7f\u7528mixin\uff0c\u4f60\u53ef\u4ee5\u8fdb\u4e00\u6b65\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u4e00\u7ec4\u57fa\u672c\u89c6\u56fe\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u4f7f\u7528\u3002\u4e3e\u4e2a\u4f8b\u5b50: class BaseRetrieveView(MultipleFieldLookupMixin, generics.RetrieveAPIView): pass class BaseRetrieveUpdateDestroyView(MultipleFieldLookupMixin, generics.RetrieveUpdateDestroyAPIView): pass \u5982\u679c\u4f60\u7684\u81ea\u5b9a\u4e49\u884c\u4e3a\u59cb\u7ec8\u9700\u8981\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u7684\u5927\u91cf\u89c6\u56fe\u4e2d\u91cd\u590d\uff0c\u5219\u4f7f\u7528\u81ea\u5b9a\u4e49\u57fa\u7c7b\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002 PUT as create \u57283.0\u7248\u672c\u4e4b\u524d\uff0cREST framework mixins \u5c06 PUT \u89c6\u4e3a\u66f4\u65b0\u6216\u521b\u5efa\u64cd\u4f5c\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5bf9\u8c61\u662f\u5426\u5df2\u5b58\u5728\u3002 \u5141\u8bb8 PUT \u4f5c\u4e3a\u521b\u5efa\u64cd\u4f5c\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u5b83\u5fc5\u7136\u4f1a\u66b4\u9732\u5173\u4e8e\u5bf9\u8c61\u7684\u5b58\u5728\u4e0e\u4e0d\u5b58\u5728\u7684\u4fe1\u606f\u3002\u540c\u6837\u4e0d\u660e\u663e\u7684\u662f\uff0c\u900f\u660e\u5730\u5141\u8bb8\u91cd\u65b0\u521b\u5efa\u4ee5\u524d\u5220\u9664\u7684\u5b9e\u4f8b\u662f\u6bd4\u7b80\u5355\u5730\u8fd4\u56de 404 \u54cd\u5e94\u66f4\u597d\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u4e24\u79cd\u5f62\u5f0f \" PUT as 404\" \u548c \" PUT as create\" \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u6709\u6548\uff0c\u4f46\u4ece3.0\u7248\u672c\u8d77\uff0c\u6211\u4eec\u73b0\u5728\u4f7f\u7528 404\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff0c\u56e0\u4e3a\u5b83\u66f4\u7b80\u5355\u548c\u66f4\u660e\u663e\u3002 \u5982\u679c\u4f60\u9700\u8981\u901a\u7528\u7684 PUT-as-create\u884c\u4e3a\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5305\u62ec\u50cf \u8fd9\u4e2a AllowPUTAsCreateMixin \u7c7b \u4e00\u6837\u7684mixin\u5728\u4f60\u7684\u89c6\u56fe\u91cc\u3002 \u7b2c\u4e09\u65b9\u5305 \u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u63d0\u4f9b\u4e86\u5176\u4ed6\u901a\u7528\u89c6\u56fe\u5b9e\u73b0\u3002 Django REST Framework bulk The django-rest-framework-bulk package \u5305\u5b9e\u73b0\u901a\u7528\u89c6\u56femixins\u4ee5\u53ca\u4e00\u4e9b\u5e38\u89c1\u7684\u5177\u4f53\u901a\u7528\u89c6\u56fe\uff0c\u4ee5\u5141\u8bb8\u901a\u8fc7API\u8bf7\u6c42\u5e94\u7528\u6279\u91cf\u64cd\u4f5c\u3002 Django Rest Multiple Models Django Rest Multiple Models \u63d0\u4f9b\u4e86\u901a\u8fc7\u5355\u4e2aAPI\u8bf7\u6c42\u53d1\u9001\u591a\u4e2a\u5e8f\u5217\u5316\u6a21\u578b\u548c/\u6216\u8005\u67e5\u8be2\u96c6\u7684\u901a\u7528\u89c6\u56fe\uff08\u548cmixin\uff09\u3002","title":"Generic views"},{"location":"api-guide/generic-views_zh/#generic-views","text":"Django\u7684\u6807\u51c6 views...\u662f\u4e3a\u66f4\u5feb\u6377\u5730\u4f7f\u7528\u5e38\u89c1\u7684\u4f7f\u7528\u6a21\u5f0f\u800c\u5f00\u53d1\u7684... \u5b83\u4eec\u91c7\u7528\u5728view\u5f00\u53d1\u4e2d\u627e\u5230\u7684\u67d0\u4e9b\u5e38\u89c1\u8bed\u6cd5\u548c\u6a21\u5f0f\uff0c\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u62bd\u8c61\uff0c\u4ee5\u4fbf\u4f60\u53ef\u4ee5\u5feb\u901f\u5199\u51fa\u6570\u636e\u7684\u5e38\u89c1\u89c6\u56fe\uff0c\u800c\u65e0\u9700\u91cd\u590d\u81ea\u5df1\u3002 \u2014 Django \u6587\u6863 \u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u7684\u4e3b\u8981\u4f18\u70b9\u4e4b\u4e00\u662f\u5b83\u4eec\u5141\u8bb8\u4f60\u7ec4\u5408\u4e00\u4e9b\u53ef\u91cd\u7528\u7684\u884c\u4e3a\u3002 REST framework\u901a\u8fc7\u63d0\u4f9b\u8bb8\u591a\u9884\u5148\u6784\u5efa\u7684\u89c6\u56fe\u6765\u63d0\u4f9b\u5e38\u7528\u7684\u6a21\u5f0f\u6765\u5229\u7528\u8fd9\u4e00\u4f18\u70b9\u3002 REST framework \u63d0\u4f9b\u7684\u901a\u7528\u89c6\u56fe\u5141\u8bb8\u60a8\u5feb\u901f\u6784\u5efa\u4e0e\u6570\u636e\u5e93\u6a21\u578b\u5bc6\u5207\u6620\u5c04\u7684API\u89c6\u56fe\u3002 \u5982\u679c\u901a\u7528\u89c6\u56fe\u4e0d\u9002\u5408\u4f60\u7684API\u7684\u9700\u6c42\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5e38\u89c4 APIView \u7c7b\uff0c\u6216\u91cd\u7528\u901a\u7528\u89c6\u56fe\u4f7f\u7528\u7684mixins\u548c\u57fa\u7c7b\u6765\u7ec4\u6210\u4f60\u81ea\u5df1\u7684\u4e00\u7ec4\u53ef\u91cd\u7528\u7684\u901a\u7528\u89c6\u56fe\u3002","title":"Generic views"},{"location":"api-guide/generic-views_zh/#_1","text":"\u901a\u5e38\u5728\u4f7f\u7528\u901a\u7528\u89c6\u56fe\u65f6\uff0c\u4f60\u5c06\u8986\u76d6\u89c6\u56fe\uff0c\u5e76\u8bbe\u7f6e\u591a\u4e2a\u7c7b\u5c5e\u6027\u3002 from django.contrib.auth.models import User from myapp.serializers import UserSerializer from rest_framework import generics from rest_framework.permissions import IsAdminUser class UserList(generics.ListCreateAPIView): queryset = User.objects.all() serializer_class = UserSerializer permission_classes = (IsAdminUser, ) \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u60c5\u51b5\uff0c\u60a8\u53ef\u80fd\u8fd8\u60f3\u8986\u76d6\u89c6\u56fe\u7c7b\u4e0a\u7684\u5404\u79cd\u65b9\u6cd5\u3002\u6bd4\u5982\uff1a class UserList(generics.ListCreateAPIView): queryset = User.objects.all() serializer_class = UserSerializer permission_classes = (IsAdminUser, ) def list(self, request): # Note the use of `get_queryset()` instead of `self.queryset` queryset = self.get_queryset() serializer = UserSerializer(queryset, many=True) return Response(serializer.data) \u5bf9\u4e8e\u975e\u5e38\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u4f60\u53ef\u80fd\u60f3\u4f7f\u7528 .as_view() \u65b9\u6cd5\u4f20\u9012\u4efb\u4f55\u7c7b\u5c5e\u6027\u3002 \u6bd4\u5982\uff1a\u4f60\u7684URLconf\u53ef\u80fd\u5305\u62ec\u7c7b\u4f3c\u4ee5\u4e0b\u6761\u76ee\uff1a url(r'^/users/', ListCreateAPIView.as_view\\(queryset=User.objects.all(), serializer_class=UserSerializer), name='user-list')","title":"\u4e3e\u4e2a\u4f8b\u5b50"},{"location":"api-guide/generic-views_zh/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/generic-views_zh/#genericapiview","text":"\u6b64\u7c7b\u6269\u5c55\u4e86REST\u6846\u67b6\u7684 APIView \u7c7b\uff0c\u4e3a\u6807\u51c6list\u548cdetail view \u6dfb\u52a0\u4e86\u901a\u5e38\u9700\u8981\u7684\u884c\u4e3a\u3002 \u63d0\u4f9b\u7684\u6bcf\u4e2a\u5177\u4f53\u901a\u7528\u89c6\u56fe\u662f\u901a\u8fc7\u5c06 GenericAPIView \u4e0e\u4e00\u4e2a\u6216\u591a\u4e2amixin\u7c7b\u7ec4\u5408\u6765\u6784\u5efa\u7684\u3002","title":"GenericAPIView"},{"location":"api-guide/generic-views_zh/#attributes","text":"\u57fa\u672c\u8bbe\u7f6e : \u4ee5\u4e0b\u5c5e\u6027\u63a7\u5236\u7740\u57fa\u672c\u89c6\u56fe\u7684\u884c\u4e3a\u3002 queryset - \u7528\u4e8e\u4ece\u89c6\u56fe\u8fd4\u56de\u5bf9\u8c61\u7684\u67e5\u8be2\u7ed3\u679c\u96c6\u3002\u901a\u5e38\uff0c\u4f60\u5fc5\u987b\u8bbe\u7f6e\u6b64\u5c5e\u6027\u6216\u8005\u91cd\u5199 get_queryset() \u65b9\u6cd5\u3002\u5982\u679c\u4f60\u91cd\u5199\u4e86\u4e00\u4e2a\u89c6\u56fe\u7684\u65b9\u6cd5\uff0c\u91cd\u8981\u7684\u662f\u4f60\u5e94\u8be5\u8c03\u7528 get_queryset() \u65b9\u6cd5\u800c\u4e0d\u662f\u76f4\u63a5\u8bbf\u95ee\u8be5\u5c5e\u6027\uff0c\u56e0\u4e3a queryset \u5c06\u88ab\u8ba1\u7b97\u4e00\u6b21\uff0c\u8fd9\u4e9b\u7ed3\u679c\u5c06\u4e3a\u540e\u7eed\u8bf7\u6c42\u7f13\u5b58\u8d77\u6765\u3002 serializer_class - \u7528\u4e8e\u9a8c\u8bc1\u548c\u53cd\u5e8f\u5217\u5316\u8f93\u5165\u4ee5\u53ca\u7528\u4e8e\u5e8f\u5217\u5316\u8f93\u51fa\u7684Serializer\u7c7b\u3002 \u901a\u5e38\uff0c\u4f60\u5fc5\u987b\u8bbe\u7f6e\u6b64\u5c5e\u6027\u6216\u8005\u91cd\u5199 get_serializer_class() \u65b9\u6cd5\u3002 lookup_field - \u7528\u4e8e\u6267\u884c\u5404\u4e2amodel\u5b9e\u4f8b\u7684\u5bf9\u8c61\u67e5\u627e\u7684model\u5b57\u6bb5\u3002\u9ed8\u8ba4\u4e3a 'pk' \u3002 \u8bf7\u6ce8\u610f\uff0c\u5728\u4f7f\u7528\u8d85\u94fe\u63a5API\u65f6\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u503c\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5728API\u89c6\u56fe \u548c \u5e8f\u5217\u5316\u7c7b \u90fd \u8bbe\u7f6e\u67e5\u627e\u5b57\u6bb5\u3002 lookup_url_kwarg - \u5e94\u7528\u4e8e\u5bf9\u8c61\u67e5\u627e\u7684URL\u5173\u952e\u5b57\u53c2\u6570\u3002\u5b83\u7684 URL conf \u5e94\u8be5\u5305\u62ec\u4e00\u4e2a\u4e0e\u8fd9\u4e2a\u503c\u76f8\u5bf9\u5e94\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\u5982\u679c\u53d6\u6d88\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e0e lookup_field \u76f8\u540c\u7684\u503c\u3002 Pagination : \u4ee5\u4e0b\u5c5e\u6027\u7528\u4e8e\u5728\u4e0e\u5217\u8868\u89c6\u56fe\u4e00\u8d77\u4f7f\u7528\u65f6\u63a7\u5236\u5206\u9875\u3002 pagination_class - \u5f53\u5206\u9875\u5217\u51fa\u7ed3\u679c\u65f6\u5e94\u4f7f\u7528\u7684\u5206\u9875\u7c7b\u3002\u9ed8\u8ba4\u503c\u4e0e DEFAULT_PAGINATION_CLASS \u8bbe\u7f6e\u7684\u503c\u76f8\u540c\uff0c\u5373 'rest_framework.pagination.PageNumberPagination' \u3002 Filtering : filter_backends - \u7528\u4e8e\u8fc7\u6ee4\u67e5\u8be2\u96c6\u7684\u8fc7\u6ee4\u5668\u540e\u7aef\u7c7b\u7684\u5217\u8868\u3002\u9ed8\u8ba4\u503c\u4e0e DEFAULT_FILTER_BACKENDS \u8bbe\u7f6e\u7684\u503c\u76f8\u540c\u3002","title":"Attributes"},{"location":"api-guide/generic-views_zh/#methods","text":"Base methods :","title":"Methods"},{"location":"api-guide/generic-views_zh/#get_querysetself","text":"\u8fd4\u56de\u5217\u8868\u89c6\u56fe\u4e2d\u5b9e\u7528\u7684\u67e5\u8be2\u96c6\uff0c\u8be5\u67e5\u8be2\u96c6\u8fd8\u7528\u4f5c\u8be6\u7ec6\u89c6\u56fe\u4e2d\u7684\u67e5\u627e\u57fa\u7840\u3002\u9ed8\u8ba4\u8fd4\u56de\u7531 queryset \u5c5e\u6027\u6307\u5b9a\u7684\u67e5\u8be2\u96c6\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u5e94\u8be5\u603b\u662f\u88ab\u8c03\u7528\u800c\u4e0d\u662f\u76f4\u63a5\u8bbf\u95ee self.queryset \uff0c\u56e0\u4e3a self.queryset \u53ea\u4f1a\u88ab\u8ba1\u7b97\u4e00\u8d77\uff0c\u7136\u540e\u8fd9\u4e9b\u7ed3\u679c\u5c06\u4e3a\u540e\u7eed\u7684\u8bf7\u6c42\u7f13\u5b58\u8d77\u6765\u3002 \u8be5\u65b9\u6cd5\u53ef\u80fd\u4f1a\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u52a8\u6001\u884c\u4e3a\uff0c\u6bd4\u5982\u8fd4\u56de\u57fa\u4e8e\u53d1\u51fa\u8bf7\u6c42\u7684\u7528\u6237\u7684\u7ed3\u679c\u96c6\u3002 \u4f8b\u5982: def get_queryset(self): user = self.request.user return user.accounts.all()","title":"get_queryset(self)"},{"location":"api-guide/generic-views_zh/#get_objectself","text":"\u8fd4\u56de\u5e94\u7528\u4e8e\u8be6\u7ec6\u89c6\u56fe\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002\u9ed8\u8ba4\u4f7f\u7528 lookup_field \u53c2\u6570\u8fc7\u6ee4\u57fa\u672c\u7684\u67e5\u8be2\u96c6\u3002 \u8be5\u65b9\u6cd5\u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u66f4\u590d\u6742\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u57fa\u4e8e\u591a\u4e2a URL \u53c2\u6570\u7684\u5bf9\u8c61\u67e5\u627e\u3002 \u4f8b\u5982: def get_object(self): queryset = self.get_queryset() filter = {} for field in self.multiple_lookup_fields: filter[field] = self.kwargs[field] obj = get_object_or_404(queryset, **filter) self.check_object_permissions(self.request, obj) return obj \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u7684API\u4e0d\u5305\u542b\u4efb\u4f55\u5bf9\u8c61\u7ea7\u7684\u6743\u9650\u63a7\u5236\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e0d\u6267\u884c self.check_object_permissions \uff0c\u7b80\u5355\u7684\u8fd4\u56de get_object_or_404 \u67e5\u627e\u7684\u5bf9\u8c61\u5373\u53ef\u3002","title":"get_object(self)"},{"location":"api-guide/generic-views_zh/#filter_querysetself-queryset","text":"\u7ed9\u5b9a\u4e00\u4e2aqueryset\uff0c\u4f7f\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684queryset\u3002 \u4f8b\u5982: def filter_queryset(self, queryset): filter_backends = (CategoryFilter, ) if 'geo_route' in self.request.query_params: filter_backends = (GeoRouteFilter, CategoryFilter) elif 'geo_point' in self.request.query_params: filter_backends = (GeoPointFilter, CategoryFilter) for backend in list(filter_backends): queryset = backend().filter_queryset(self.request, queryset, view=self) return queryset","title":"filter_queryset(self, queryset)"},{"location":"api-guide/generic-views_zh/#get_serializer_classself","text":"\u8fd4\u56de\u5e94\u7528\u4e8e\u5e8f\u5217\u5316\u7684\u7c7b\u3002\u9ed8\u8ba4\u4e3a\u8fd4\u56de serializer_class \u5c5e\u6027\u7684\u503c\u3002 \u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u63d0\u4f9b\u52a8\u6001\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u5bf9\u4e8e\u8bfb\u53d6\u548c\u5199\u5165\u64cd\u4f5c\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\uff0c\u6216\u8005\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u7528\u6237\u63d0\u4f9b\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u5668\u3002 \u4f8b\u5982: def get_serializer_class(self\\): if self.request.user.is_staff: return FullAccountSerializer return BasicAccountSerializer Save and deletion hooks : \u4ee5\u4e0b\u65b9\u6cd5\u7531mixin\u7c7b\u63d0\u4f9b\uff0c\u5e76\u63d0\u4f9b\u5bf9\u8c61\u4fdd\u5b58\u6216\u5220\u9664\u884c\u4e3a\u7684\u7b80\u5355\u91cd\u5199\u3002 perform_create(self, serializer) - \u5728\u4fdd\u5b58\u65b0\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531 CreateModelMixin \u8c03\u7528\u3002 perform_update(self, serializer) - \u5728\u4fdd\u5b58\u73b0\u6709\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531 UpdateModelMixin \u8c03\u7528\u3002 perform_destroy(self, instance) - \u5728\u5220\u9664\u5bf9\u8c61\u5b9e\u4f8b\u65f6\u7531 DestroyModelMixin \u8c03\u7528\u3002 \u8fd9\u4e9b\u94a9\u5b50\u5bf9\u4e8e\u8bbe\u7f6e\u8bf7\u6c42\u4e2d\u9690\u542b\u7684\u4f46\u4e0d\u662f\u8bf7\u6c42\u6570\u636e\u7684\u4e00\u90e8\u5206\u7684\u5c5e\u6027\u7279\u522b\u6709\u7528\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u7528\u6237\u6216\u57fa\u4e8eURL\u5173\u952e\u5b57\u53c2\u6570\u5728\u5bf9\u8c61\u4e0a\u8bbe\u7f6e\u5c5e\u6027\u3002 def perform_create(self, serializer): serializer.save(user=self.request.user) \u8fd9\u4e9b\u53ef\u91cd\u5199\u7684\u5173\u952e\u70b9\u5bf9\u4e8e\u6dfb\u52a0\u5728\u4fdd\u5b58\u5bf9\u8c61\u4e4b\u524d\u6216\u4e4b\u540e\u53d1\u751f\u7684\u884c\u4e3a\uff08\u4f8b\u5982\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u786e\u8ba4\u6216\u8bb0\u5f55\u66f4\u65b0\u65e5\u5fd7\uff09\u4e5f\u7279\u522b\u6709\u7528\u3002 def perform_update(self, serializer): instance = serializer.save() send_email_confirmation(user=self.request.user, modified=instance) \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u94a9\u5b50\u901a\u8fc7\u629b\u51fa ValidationError() \u6765\u63d0\u4f9b\u989d\u5916\u7684\u9a8c\u8bc1\u3002\u5f53\u4f60\u9700\u8981\u5728\u6570\u636e\u5e93\u4fdd\u5b58\u65f6\u5e94\u7528\u4e00\u4e9b\u9a8c\u8bc1\u903b\u8f91\u65f6\uff0c\u8fd9\u4f1a\u5f88\u6709\u7528\u3002 \u4f8b\u5982: def perform_create(self, serializer): queryset = SignupRequest.objects.filter(user=self.request.user) if queryset.exists(): raise ValidationError('You have already signed up') serializer.save(user=self.request.user) \u6ce8\u610f : \u8fd9\u4e9b\u65b9\u6cd5\u66ff\u6362\u4e86\u65e7\u7248\u672c2.x\u4e2d\u7684 pre_save , post_save , pre_delete \u548c post_delete \u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u518d\u53ef\u7528\u3002 \u5176\u4ed6\u65b9\u6cd5 : \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u91cd\u5199\u4ee5\u4e0b\u65b9\u6cd5\uff0c\u867d\u7136\u5728\u4f60\u4f7f\u7528 GenericAPIView \u7f16\u5199\u81ea\u5b9a\u4e49\u89c6\u56fe\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u8c03\u7528\u5b83\u4eec\u3002 get_serializer_context(self) - \u8fd4\u56de\u5305\u542b\u5e94\u8be5\u63d0\u4f9b\u7ed9\u5e8f\u5217\u5316\u7a0b\u5e8f\u7684\u4efb\u4f55\u989d\u5916\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u3002\u9ed8\u8ba4\u5305\u542b 'request' , 'view' \u548c 'format' \u8fd9\u4e9bkeys\u3002. get_serializer(self, instance=None, data=None, many=False, partial=False) - \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7684\u5b9e\u4f8b\u3002 get_paginated_response(self, data) - \u8fd4\u56de\u5206\u9875\u6837\u5f0f\u7684 Response \u5bf9\u8c61\u3002 paginate_queryset(self, queryset) - \u5982\u679c\u9700\u8981\u5206\u9875\u67e5\u8be2\uff0c\u8fd4\u56de\u9875\u9762\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u4e3a\u6b64\u89c6\u56fe\u914d\u7f6e\u5206\u9875\uff0c\u5219\u8fd4\u56de None \u3002 filter_queryset(self, queryset) - \u7ed9\u5b9a\u67e5\u8be2\u96c6\uff0c\u4f7f\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u67e5\u8be2\u96c6\u3002","title":"get_serializer_class(self)"},{"location":"api-guide/generic-views_zh/#mixins","text":"Mixin \u7c7b\u63d0\u4f9b\u7528\u4e8e\u63d0\u4f9b\u57fa\u672c\u89c6\u56fe\u884c\u4e3a\u7684\u64cd\u4f5c\u3002\u6ce8\u610fmixin\u7c7b\u63d0\u4f9b\u52a8\u4f5c\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\uff0c\u4f8b\u5982 .get() \u548c .post() \uff0c \u8fd9\u5141\u8bb8\u66f4\u7075\u6d3b\u7684\u884c\u4e3a\u7ec4\u6210\u3002 Mixin \u7c7b\u53ef\u4ee5\u4ece rest_framework.mixins \u5bfc\u5165\u3002","title":"Mixins"},{"location":"api-guide/generic-views_zh/#listmodelmixin","text":"\u63d0\u4f9b\u4e00\u4e2a .list(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u5b9e\u73b0\u5217\u51fa\u7ed3\u679c\u96c6\u3002 \u5982\u679c\u67e5\u8be2\u96c6\u88ab\u586b\u5145\u4e86\u6570\u636e\uff0c\u5219\u8fd4\u56de 200 OK \u54cd\u5e94\uff0c\u5c06\u67e5\u8be2\u96c6\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u76f8\u5e94\u6570\u636e\u53ef\u4ee5\u4efb\u610f\u5206\u9875\u3002","title":"ListModelMixin"},{"location":"api-guide/generic-views_zh/#createmodelmixin","text":"\u63d0\u4f9b .create(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u5b9e\u73b0\u521b\u5efa\u548c\u4fdd\u5b58\u4e00\u4e2a\u65b0\u7684model\u5b9e\u4f8b\u3002 \u5982\u679c\u521b\u5efa\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a 201 Created \u54cd\u5e94\uff0c\u5c06\u8be5\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u5982\u679c\u5e8f\u5217\u5316\u7684\u8868\u793a\u4e2d\u5305\u542b\u540d\u4e3a url \u7684\u952e\uff0c\u5219\u54cd\u5e94\u7684 Location \u5934\u5c06\u586b\u5145\u8be5\u503c\u3002 \u5982\u679c\u4e3a\u521b\u5efa\u5bf9\u8c61\u63d0\u4f9b\u7684\u8bf7\u6c42\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de 400 Bad Request \uff0c\u5176\u4e2d\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u4f5c\u4e3a\u54cd\u5e94\u7684\u6b63\u6587\u3002","title":"CreateModelMixin"},{"location":"api-guide/generic-views_zh/#retrievemodelmixin","text":"\u63d0\u4f9b\u4e00\u4e2a .retrieve(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u5b9e\u73b0\u8fd4\u56de\u54cd\u5e94\u4e2d\u73b0\u6709\u6a21\u578b\u7684\u5b9e\u4f8b\u3002 \u5982\u679c\u53ef\u4ee5\u68c0\u7d22\u5bf9\u8c61\uff0c\u5219\u8fd4\u56de 200 OK \u54cd\u5e94\uff0c\u5c06\u8be5\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002\u5426\u5219\u5c06\u8fd4\u56de 404 Not Found \u3002","title":"RetrieveModelMixin"},{"location":"api-guide/generic-views_zh/#updatemodelmixin","text":"\u63d0\u4f9b .update(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u5b9e\u73b0\u66f4\u65b0\u548c\u4fdd\u5b58\u73b0\u6709\u6a21\u578b\u5b9e\u4f8b\u3002 \u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a .partial_update(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u548c update \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u66f4\u65b0\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\u3002\u8fd9\u5141\u8bb8\u652f\u6301 HTTP PATCH \u8bf7\u6c42\u3002 \u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u88ab\u66f4\u65b0\uff0c\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a 200 OK \u54cd\u5e94\uff0c\u5c06\u5bf9\u8c61\u7684\u5e8f\u5217\u5316\u8868\u793a\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e3b\u4f53\u3002 \u5982\u679c\u4e3a\u66f4\u65b0\u5bf9\u8c61\u63d0\u4f9b\u7684\u8bf7\u6c42\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a 400 Bad Request \u54cd\u5e94\uff0c\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u4f5c\u4e3a\u54cd\u5e94\u7684\u6b63\u6587\u3002","title":"UpdateModelMixin"},{"location":"api-guide/generic-views_zh/#destroymodelmixin","text":"\u63d0\u4f9b\u4e00\u4e2a .destroy(request, *args, **kwargs) \u65b9\u6cd5\uff0c\u5b9e\u73b0\u5220\u9664\u73b0\u6709\u6a21\u578b\u5b9e\u4f8b\u3002 \u5982\u679c\u5220\u9664\u5bf9\u8c61\uff0c\u5219\u8fd4\u56de 204 No Content \u54cd\u5e94\uff0c\u5426\u5219\u8fd4\u56de 404 Not Found \u3002","title":"DestroyModelMixin"},{"location":"api-guide/generic-views_zh/#concrete-view-classes","text":"\u4ee5\u4e0b\u7c7b\u662f\u5177\u4f53\u7684\u901a\u7528\u89c6\u56fe\u3002\u8fd9\u901a\u5e38\u662f\u4f60\u771f\u6b63\u7528\u5230\u7684\u90a3\u4e9b\uff0c\u9664\u975e\u4f60\u9700\u8981\u6df1\u5ea6\u5b9a\u5236\u7684\u884c\u4e3a\u3002 \u8fd9\u4e9b\u89c6\u56fe\u7c7b\u53ef\u4ee5\u4ece rest_framework.generics \u5bfc\u5165\u3002","title":"Concrete View Classes"},{"location":"api-guide/generic-views_zh/#createapiview","text":"\u7528\u4e8e \u4ec5\u521b\u5efa \u7aef\u70b9\u3002 \u63d0\u4f9b\u4e00\u4e2a post \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , CreateModelMixin","title":"CreateAPIView"},{"location":"api-guide/generic-views_zh/#listapiview","text":"\u7528\u4e8e \u53ea\u8bfb \u7aef\u70b9\u4ee5\u8868\u793a \u6a21\u578b\u5b9e\u4f8b\u96c6\u5408 \u3002 \u63d0\u4f9b\u4e00\u4e2a get \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , ListModelMixin","title":"ListAPIView"},{"location":"api-guide/generic-views_zh/#retrieveapiview","text":"\u7528\u4e8e \u53ea\u8bfb \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b\u4e00\u4e2a get \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , RetrieveModelMixin","title":"RetrieveAPIView"},{"location":"api-guide/generic-views_zh/#destroyapiview","text":"\u7528\u4e8e \u53ea\u5220\u9664 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b\u4e00\u4e2a delete \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , DestroyModelMixin","title":"DestroyAPIView"},{"location":"api-guide/generic-views_zh/#updateapiview","text":"\u7528\u4e8e \u53ea\u66f4\u65b0 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b\u4e00\u4e2a put \u548c patch \u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , UpdateModelMixin","title":"UpdateAPIView"},{"location":"api-guide/generic-views_zh/#listcreateapiview","text":"\u7528\u4e8e \u8bfb\u5199\u7aef\u70b9 \u4ee5\u8868\u793a \u6a21\u578b\u5b9e\u4f8b\u7684\u96c6\u5408 \u3002 \u63d0\u4f9b\u4e00\u4e2a get \u548c post \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , ListModelMixin , CreateModelMixin","title":"ListCreateAPIView"},{"location":"api-guide/generic-views_zh/#retrieveupdateapiview","text":"\u7528\u4e8e \u8bfb\u53d6\u6216\u66f4\u65b0 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b get , put \u548c patch \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , RetrieveModelMixin , UpdateModelMixin","title":"RetrieveUpdateAPIView"},{"location":"api-guide/generic-views_zh/#retrievedestroyapiview","text":"\u7528\u4e8e \u8bfb\u53d6\u6216\u5220\u9664 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b get \u548c delete \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , RetrieveModelMixin , DestroyModelMixin","title":"RetrieveDestroyAPIView"},{"location":"api-guide/generic-views_zh/#retrieveupdatedestroyapiview","text":"\u7528\u4e8e \u8bfb\u5199\u5220\u9664 \u7aef\u70b9\u4ee5\u8868\u793a \u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b \u3002 \u63d0\u4f9b get , put , patch \u548c delete \u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u6269\u5c55: GenericAPIView , RetrieveModelMixin , UpdateModelMixin , DestroyModelMixin","title":"RetrieveUpdateDestroyAPIView"},{"location":"api-guide/generic-views_zh/#_2","text":"\u901a\u5e38\u4f60\u4f1a\u60f3\u4f7f\u7528\u73b0\u6709\u7684\u901a\u7528\u89c6\u56fe\uff0c\u4f46\u662f\u4f7f\u7528\u4e00\u4e9b\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\u3002\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u591a\u4e2a\u5730\u65b9\u91cd\u590d\u4f7f\u7528\u4e86\u4e00\u4e9b\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u4f60\u53ef\u80fd\u60f3\u5c06\u884c\u4e3a\u91cd\u6784\u4e3a\u4e00\u4e2a\u516c\u5171\u7c7b\uff0c\u7136\u540e\u53ea\u9700\u6839\u636e\u9700\u8981\u5e94\u7528\u5230\u4efb\u4f55\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u3002","title":"\u81ea\u5b9a\u4e49\u901a\u7528\u89c6\u56fe"},{"location":"api-guide/generic-views_zh/#mixins_1","text":"\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9700\u8981\u57fa\u4e8e URL conf\u4e2d\u7684\u591a\u4e2a\u5b57\u6bb5\u67e5\u627e\u5bf9\u8c61\uff0c\u5219\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684 mixin\u7c7b\uff1a class MultipleFieldLookupMixin(object): \"\"\" Apply this mixin to any view or viewset to get multiple field filtering based on a `lookup_fields` attribute, instead of the default single field filtering. \"\"\" def get_object(self): queryset = self.get_queryset() # \u83b7\u53d6\u57fa\u672c\u7684queryset queryset = self.filter_queryset(queryset) # \u5e94\u7528\u4efb\u4f55\u8fc7\u6ee4\u5668\u540e\u7aef filter = {} for field in self.lookup_fields: if self.kwargs[field]: # Ignore empty fields. filter[field] = self.kwargs[field] return get_object_or_404(queryset, **filter) # \u67e5\u627e\u5bf9\u8c61 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u5e94\u7528\u81ea\u5b9a\u4e49\u884c\u4e3a\u65f6\u968f\u65f6\u5c06\u6b64mixin\u7c7b\u5e94\u7528\u4e8e\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u3002 class RetrieveUserView(MultipleFieldLookupMixin, generics.RetrieveAPIView): queryset = User.objects.all() serializer_class = UserSerializer lookup_fields = ('account', 'username') \u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u90a3\u4e48\u4f7f\u7528\u81ea\u5b9a\u4e49mixin\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002","title":"\u521b\u5efa\u81ea\u5b9a\u4e49 mixins"},{"location":"api-guide/generic-views_zh/#_3","text":"\u5982\u679c\u4f60\u5728\u591a\u4e2a\u89c6\u56fe\u4e2d\u4f7f\u7528mixin\uff0c\u4f60\u53ef\u4ee5\u8fdb\u4e00\u6b65\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u4e00\u7ec4\u57fa\u672c\u89c6\u56fe\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u4f7f\u7528\u3002\u4e3e\u4e2a\u4f8b\u5b50: class BaseRetrieveView(MultipleFieldLookupMixin, generics.RetrieveAPIView): pass class BaseRetrieveUpdateDestroyView(MultipleFieldLookupMixin, generics.RetrieveUpdateDestroyAPIView): pass \u5982\u679c\u4f60\u7684\u81ea\u5b9a\u4e49\u884c\u4e3a\u59cb\u7ec8\u9700\u8981\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u7684\u5927\u91cf\u89c6\u56fe\u4e2d\u91cd\u590d\uff0c\u5219\u4f7f\u7528\u81ea\u5b9a\u4e49\u57fa\u7c7b\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002","title":"\u521b\u5efa\u81ea\u5b9a\u4e49\u57fa\u7c7b"},{"location":"api-guide/generic-views_zh/#put-as-create","text":"\u57283.0\u7248\u672c\u4e4b\u524d\uff0cREST framework mixins \u5c06 PUT \u89c6\u4e3a\u66f4\u65b0\u6216\u521b\u5efa\u64cd\u4f5c\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5bf9\u8c61\u662f\u5426\u5df2\u5b58\u5728\u3002 \u5141\u8bb8 PUT \u4f5c\u4e3a\u521b\u5efa\u64cd\u4f5c\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u5b83\u5fc5\u7136\u4f1a\u66b4\u9732\u5173\u4e8e\u5bf9\u8c61\u7684\u5b58\u5728\u4e0e\u4e0d\u5b58\u5728\u7684\u4fe1\u606f\u3002\u540c\u6837\u4e0d\u660e\u663e\u7684\u662f\uff0c\u900f\u660e\u5730\u5141\u8bb8\u91cd\u65b0\u521b\u5efa\u4ee5\u524d\u5220\u9664\u7684\u5b9e\u4f8b\u662f\u6bd4\u7b80\u5355\u5730\u8fd4\u56de 404 \u54cd\u5e94\u66f4\u597d\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u4e24\u79cd\u5f62\u5f0f \" PUT as 404\" \u548c \" PUT as create\" \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u6709\u6548\uff0c\u4f46\u4ece3.0\u7248\u672c\u8d77\uff0c\u6211\u4eec\u73b0\u5728\u4f7f\u7528 404\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff0c\u56e0\u4e3a\u5b83\u66f4\u7b80\u5355\u548c\u66f4\u660e\u663e\u3002 \u5982\u679c\u4f60\u9700\u8981\u901a\u7528\u7684 PUT-as-create\u884c\u4e3a\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u5305\u62ec\u50cf \u8fd9\u4e2a AllowPUTAsCreateMixin \u7c7b \u4e00\u6837\u7684mixin\u5728\u4f60\u7684\u89c6\u56fe\u91cc\u3002","title":"PUT as create"},{"location":"api-guide/generic-views_zh/#_4","text":"\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u63d0\u4f9b\u4e86\u5176\u4ed6\u901a\u7528\u89c6\u56fe\u5b9e\u73b0\u3002","title":"\u7b2c\u4e09\u65b9\u5305"},{"location":"api-guide/generic-views_zh/#django-rest-framework-bulk","text":"The django-rest-framework-bulk package \u5305\u5b9e\u73b0\u901a\u7528\u89c6\u56femixins\u4ee5\u53ca\u4e00\u4e9b\u5e38\u89c1\u7684\u5177\u4f53\u901a\u7528\u89c6\u56fe\uff0c\u4ee5\u5141\u8bb8\u901a\u8fc7API\u8bf7\u6c42\u5e94\u7528\u6279\u91cf\u64cd\u4f5c\u3002","title":"Django REST Framework bulk"},{"location":"api-guide/generic-views_zh/#django-rest-multiple-models","text":"Django Rest Multiple Models \u63d0\u4f9b\u4e86\u901a\u8fc7\u5355\u4e2aAPI\u8bf7\u6c42\u53d1\u9001\u591a\u4e2a\u5e8f\u5217\u5316\u6a21\u578b\u548c/\u6216\u8005\u67e5\u8be2\u96c6\u7684\u901a\u7528\u89c6\u56fe\uff08\u548cmixin\uff09\u3002","title":"Django Rest Multiple Models"},{"location":"api-guide/metadata/","text":"Metadata [The OPTIONS ] method allows a client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval. \u2014 RFC7231, Section 4.3.7. REST framework includes a configurable mechanism for determining how your API should respond to OPTIONS requests. This allows you to return API schema or other resource information. There are not currently any widely adopted conventions for exactly what style of response should be returned for HTTP OPTIONS requests, so we provide an ad-hoc style that returns some useful information. Here's an example response that demonstrates the information that is returned by default. HTTP 200 OK Allow: GET, POST, HEAD, OPTIONS Content-Type: application/json { \"name\": \"To Do List\", \"description\": \"List existing 'To Do' items, or create a new item.\", \"renders\": [ \"application/json\", \"text/html\" ], \"parses\": [ \"application/json\", \"application/x-www-form-urlencoded\", \"multipart/form-data\" ], \"actions\": { \"POST\": { \"note\": { \"type\": \"string\", \"required\": false, \"read_only\": false, \"label\": \"title\", \"max_length\": 100 } } } } Setting the metadata scheme You can set the metadata class globally using the 'DEFAULT_METADATA_CLASS' settings key: REST_FRAMEWORK = { 'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata' } Or you can set the metadata class individually for a view: class APIRoot(APIView): metadata_class = APIRootMetadata def get(self, request, format=None): return Response({ ... }) The REST framework package only includes a single metadata class implementation, named SimpleMetadata . If you want to use an alternative style you'll need to implement a custom metadata class. Creating schema endpoints If you have specific requirements for creating schema endpoints that are accessed with regular GET requests, you might consider re-using the metadata API for doing so. For example, the following additional route could be used on a viewset to provide a linkable schema endpoint. @action(methods=['GET'], detail=False) def api_schema(self, request): meta = self.metadata_class() data = meta.determine_metadata(request, self) return Response(data) There are a couple of reasons that you might choose to take this approach, including that OPTIONS responses are not cacheable . Custom metadata classes If you want to provide a custom metadata class you should override BaseMetadata and implement the determine_metadata(self, request, view) method. Useful things that you might want to do could include returning schema information, using a format such as JSON schema , or returning debug information to admin users. Example The following class could be used to limit the information that is returned to OPTIONS requests. class MinimalMetadata(BaseMetadata): \"\"\" Don't include field and other information for `OPTIONS` requests. Just return the name and description. \"\"\" def determine_metadata(self, request, view): return { 'name': view.get_view_name(), 'description': view.get_view_description() } Then configure your settings to use this custom class: REST_FRAMEWORK = { 'DEFAULT_METADATA_CLASS': 'myproject.apps.core.MinimalMetadata' } Third party packages The following third party packages provide additional metadata implementations. DRF-schema-adapter drf-schema-adapter is a set of tools that makes it easier to provide schema information to frontend frameworks and libraries. It provides a metadata mixin as well as 2 metadata classes and several adapters suitable to generate json-schema as well as schema information readable by various libraries. You can also write your own adapter to work with your specific frontend. If you wish to do so, it also provides an exporter that can export those schema information to json files.","title":"Metadata"},{"location":"api-guide/metadata/#metadata","text":"[The OPTIONS ] method allows a client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval. \u2014 RFC7231, Section 4.3.7. REST framework includes a configurable mechanism for determining how your API should respond to OPTIONS requests. This allows you to return API schema or other resource information. There are not currently any widely adopted conventions for exactly what style of response should be returned for HTTP OPTIONS requests, so we provide an ad-hoc style that returns some useful information. Here's an example response that demonstrates the information that is returned by default. HTTP 200 OK Allow: GET, POST, HEAD, OPTIONS Content-Type: application/json { \"name\": \"To Do List\", \"description\": \"List existing 'To Do' items, or create a new item.\", \"renders\": [ \"application/json\", \"text/html\" ], \"parses\": [ \"application/json\", \"application/x-www-form-urlencoded\", \"multipart/form-data\" ], \"actions\": { \"POST\": { \"note\": { \"type\": \"string\", \"required\": false, \"read_only\": false, \"label\": \"title\", \"max_length\": 100 } } } }","title":"Metadata"},{"location":"api-guide/metadata/#setting-the-metadata-scheme","text":"You can set the metadata class globally using the 'DEFAULT_METADATA_CLASS' settings key: REST_FRAMEWORK = { 'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata' } Or you can set the metadata class individually for a view: class APIRoot(APIView): metadata_class = APIRootMetadata def get(self, request, format=None): return Response({ ... }) The REST framework package only includes a single metadata class implementation, named SimpleMetadata . If you want to use an alternative style you'll need to implement a custom metadata class.","title":"Setting the metadata scheme"},{"location":"api-guide/metadata/#creating-schema-endpoints","text":"If you have specific requirements for creating schema endpoints that are accessed with regular GET requests, you might consider re-using the metadata API for doing so. For example, the following additional route could be used on a viewset to provide a linkable schema endpoint. @action(methods=['GET'], detail=False) def api_schema(self, request): meta = self.metadata_class() data = meta.determine_metadata(request, self) return Response(data) There are a couple of reasons that you might choose to take this approach, including that OPTIONS responses are not cacheable .","title":"Creating schema endpoints"},{"location":"api-guide/metadata/#custom-metadata-classes","text":"If you want to provide a custom metadata class you should override BaseMetadata and implement the determine_metadata(self, request, view) method. Useful things that you might want to do could include returning schema information, using a format such as JSON schema , or returning debug information to admin users.","title":"Custom metadata classes"},{"location":"api-guide/metadata/#example","text":"The following class could be used to limit the information that is returned to OPTIONS requests. class MinimalMetadata(BaseMetadata): \"\"\" Don't include field and other information for `OPTIONS` requests. Just return the name and description. \"\"\" def determine_metadata(self, request, view): return { 'name': view.get_view_name(), 'description': view.get_view_description() } Then configure your settings to use this custom class: REST_FRAMEWORK = { 'DEFAULT_METADATA_CLASS': 'myproject.apps.core.MinimalMetadata' }","title":"Example"},{"location":"api-guide/metadata/#third-party-packages","text":"The following third party packages provide additional metadata implementations.","title":"Third party packages"},{"location":"api-guide/metadata/#drf-schema-adapter","text":"drf-schema-adapter is a set of tools that makes it easier to provide schema information to frontend frameworks and libraries. It provides a metadata mixin as well as 2 metadata classes and several adapters suitable to generate json-schema as well as schema information readable by various libraries. You can also write your own adapter to work with your specific frontend. If you wish to do so, it also provides an exporter that can export those schema information to json files.","title":"DRF-schema-adapter"},{"location":"api-guide/metadata_zh/","text":"Metadata \uff08\u5143\u6570\u636e\uff09 [The OPTIONS ]\u65b9\u6cd5\u5141\u8bb8\u5ba2\u6237\u7aef\u786e\u5b9a\u4e0e\u8d44\u6e90\u6216\u670d\u52a1\u5668\u529f\u80fd\u76f8\u5173\u7684\u9009\u9879\u548c/\u6216\u9700\u6c42\uff0c\u800c\u65e0\u9700\u6697\u793a\u8d44\u6e90\u64cd\u4f5c\u6216\u542f\u52a8\u8d44\u6e90\u68c0\u7d22\u3002 \u2014 RFC7231, Section 4.3.7. REST\u6846\u67b6\u5305\u542b\u4e00\u4e2a\u53ef\u914d\u7f6e\u7684\u673a\u5236\uff0c\u7528\u4e8e\u786e\u5b9aAPI\u5e94\u8be5\u5982\u4f55\u54cd\u5e94 OPTIONS \u8bf7\u6c42\u3002\u8fd9\u5141\u8bb8\u60a8\u8fd4\u56deAPI\u6a21\u5f0f\u6216\u5176\u4ed6\u8d44\u6e90\u4fe1\u606f\u3002 \u5bf9\u4e8eHTTP OPTIONS \u8bf7\u6c42\u7a76\u7adf\u5e94\u8be5\u8fd4\u56de\u4ec0\u4e48\u6837\u7684\u54cd\u5e94\u6837\u5f0f\uff0c\u76ee\u524d\u8fd8\u6ca1\u6709\u5e7f\u6cdb\u91c7\u7528\u7684\u7ea6\u5b9a\uff0c\u56e0\u6b64\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u8fd4\u56de\u4e00\u4e9b\u6709\u7528\u4fe1\u606f\u7684\u70b9\u5bf9\u70b9\u6837\u5f0f\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u54cd\u5e94\uff0c\u5b83\u6f14\u793a\u4e86\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u7684\u4fe1\u606f\u3002 HTTP 200 OK Allow: GET, POST, HEAD, OPTIONS Content-Type: application/json { \"name\": \"To Do List\", \"description\": \"List existing 'To Do' items, or create a new item.\", \"renders\": [ \"application/json\", \"text/html\" ], \"parses\": [ \"application/json\", \"application/x-www-form-urlencoded\", \"multipart/form-data\" ], \"actions\": { \"POST\": { \"note\": { \"type\": \"string\", \"required\": false, \"read_only\": false, \"label\": \"title\", \"max_length\": 100 } } } } Setting the metadata scheme \uff08\u8bbe\u7f6e\u5143\u6570\u636e\u6a21\u5f0f\uff09 \u60a8\u53ef\u4ee5\u4f7f\u7528 'DEFAULT_METADATA_CLASS' \u8bbe\u7f6e\u952e\u5168\u5c40\u8bbe\u7f6e\u5143\u6570\u636e\u7c7b\uff1a REST_FRAMEWORK = { 'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata' } \u4e5f\u53ef\u4ee5\u4e3a\u89c6\u56fe\u5355\u72ec\u8bbe\u7f6e\u5143\u6570\u636e\u7c7b\uff1a class APIRoot(APIView): metadata_class = APIRootMetadata def get(self, request, format=None): return Response({ ... }) REST\u6846\u67b6\u5305\u53ea\u5305\u542b\u4e00\u4e2a\u540d\u4e3a SimpleMetadata \u7684\u5143\u6570\u636e\u7c7b\u5b9e\u73b0\u65b9\u5f0f\u3002\u5982\u679c\u8981\u4f7f\u7528\u5176\u4ed6\u6837\u5f0f\uff0c\u5219\u9700\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u7c7b\u3002 Creating schema endpoints \uff08\u521b\u5efa\u6a21\u5f0f\u7ec8\u7aef\uff09 \u5982\u679c\u5bf9\u4f7f\u7528\u5e38\u89c4 GET \u8bf7\u6c42\u8bbf\u95ee\u7684\u6a21\u5f0f\u7ec8\u7aef\u7684\u521b\u5efa\u6709\u7279\u5b9a\u7684\u8981\u6c42\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u91cd\u65b0\u4f7f\u7528\u5143\u6570\u636eAPI\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5728\u89c6\u56fe\u96c6\u4e0a\u4f7f\u7528\u4ee5\u4e0b\u9644\u52a0\u8def\u7531\u6765\u63d0\u4f9b\u53ef\u94fe\u63a5\u7684\u6a21\u5f0f\u7ec8\u7aef\u3002 @list_route(methods=['GET']) def schema(self, request): meta = self.metadata_class() data = meta.determine_metadata(request, self) return Response(data) \u6709\u8bb8\u591a\u53ef\u80fd\u4f1a\u9009\u62e9\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u7406\u7531\uff0c\u5176\u4e2d\u5305\u62ec OPTIONS \u54cd\u5e94 \u4e0d\u53ef\u7f13\u5b58 \u3002 Custom metadata classes \uff08\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u7c7b\uff09 \u5982\u679c\u8981\u63d0\u4f9b\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u7c7b\uff0c\u5219\u5e94\u91cd\u5199 BaseMetadata \u5e76\u5e94\u7528 determine_metadata(self, request, view) \u65b9\u6cd5\u3002 \u4f60\u53ef\u80fd\u5e0c\u671b\u505a\u7684\u6709\u7528\u7684\u4e8b\u60c5\u5305\u62ec\u8fd4\u56de\u6a21\u5f0f\u4fe1\u606f\u3001\u4f7f\u7528 JSON schema \uff08JSON \u6a21\u5f0f\uff09 \u4e4b\u7c7b\u7684\u683c\u5f0f\uff0c\u6216\u8005\u5c06\u8c03\u8bd5\u4fe1\u606f\u8fd4\u56de\u7ed9\u7ba1\u7406\u5458\u7528\u6237\u3002 Example \uff08\u4e3e\u4e2a\u4f8b\u5b50\uff09 \u4ee5\u4e0b\u7684\u7c7b\u53ef\u88ab\u7528\u4e8e\u9650\u5236\u8fd4\u56de\u7ed9 OPTIONS \u7684\u4fe1\u606f\u3002 class MinimalMetadata(BaseMetadata): \"\"\" Don't include field and other information for `OPTIONS` requests. Just return the name and description. \"\"\" def determine_metadata(self, request, view): return { 'name': view.get_view_name(), 'description': view.get_view_description() } \u7136\u540e\u914d\u7f6e\u8bbe\u7f6e\u4ee5\u4f7f\u7528\u6b64\u81ea\u5b9a\u4e49\u7c7b\uff1a REST_FRAMEWORK = { 'DEFAULT_METADATA_CLASS': 'myproject.apps.core.MinimalMetadata' } Third party packages The following third party packages provide additional metadata implementations. DRF-schema-adapter drf-schema-adapter is a set of tools that makes it easier to provide schema information to frontend frameworks and libraries. It provides a metadata mixin as well as 2 metadata classes and several adapters suitable to generate json-schema as well as schema information readable by various libraries. You can also write your own adapter to work with your specific frontend. If you wish to do so, it also provides an exporter that can export those schema information to json files.","title":"Metadata"},{"location":"api-guide/metadata_zh/#metadata","text":"[The OPTIONS ]\u65b9\u6cd5\u5141\u8bb8\u5ba2\u6237\u7aef\u786e\u5b9a\u4e0e\u8d44\u6e90\u6216\u670d\u52a1\u5668\u529f\u80fd\u76f8\u5173\u7684\u9009\u9879\u548c/\u6216\u9700\u6c42\uff0c\u800c\u65e0\u9700\u6697\u793a\u8d44\u6e90\u64cd\u4f5c\u6216\u542f\u52a8\u8d44\u6e90\u68c0\u7d22\u3002 \u2014 RFC7231, Section 4.3.7. REST\u6846\u67b6\u5305\u542b\u4e00\u4e2a\u53ef\u914d\u7f6e\u7684\u673a\u5236\uff0c\u7528\u4e8e\u786e\u5b9aAPI\u5e94\u8be5\u5982\u4f55\u54cd\u5e94 OPTIONS \u8bf7\u6c42\u3002\u8fd9\u5141\u8bb8\u60a8\u8fd4\u56deAPI\u6a21\u5f0f\u6216\u5176\u4ed6\u8d44\u6e90\u4fe1\u606f\u3002 \u5bf9\u4e8eHTTP OPTIONS \u8bf7\u6c42\u7a76\u7adf\u5e94\u8be5\u8fd4\u56de\u4ec0\u4e48\u6837\u7684\u54cd\u5e94\u6837\u5f0f\uff0c\u76ee\u524d\u8fd8\u6ca1\u6709\u5e7f\u6cdb\u91c7\u7528\u7684\u7ea6\u5b9a\uff0c\u56e0\u6b64\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u8fd4\u56de\u4e00\u4e9b\u6709\u7528\u4fe1\u606f\u7684\u70b9\u5bf9\u70b9\u6837\u5f0f\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u54cd\u5e94\uff0c\u5b83\u6f14\u793a\u4e86\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de\u7684\u4fe1\u606f\u3002 HTTP 200 OK Allow: GET, POST, HEAD, OPTIONS Content-Type: application/json { \"name\": \"To Do List\", \"description\": \"List existing 'To Do' items, or create a new item.\", \"renders\": [ \"application/json\", \"text/html\" ], \"parses\": [ \"application/json\", \"application/x-www-form-urlencoded\", \"multipart/form-data\" ], \"actions\": { \"POST\": { \"note\": { \"type\": \"string\", \"required\": false, \"read_only\": false, \"label\": \"title\", \"max_length\": 100 } } } }","title":"Metadata \uff08\u5143\u6570\u636e\uff09"},{"location":"api-guide/metadata_zh/#setting-the-metadata-scheme","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 'DEFAULT_METADATA_CLASS' \u8bbe\u7f6e\u952e\u5168\u5c40\u8bbe\u7f6e\u5143\u6570\u636e\u7c7b\uff1a REST_FRAMEWORK = { 'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata' } \u4e5f\u53ef\u4ee5\u4e3a\u89c6\u56fe\u5355\u72ec\u8bbe\u7f6e\u5143\u6570\u636e\u7c7b\uff1a class APIRoot(APIView): metadata_class = APIRootMetadata def get(self, request, format=None): return Response({ ... }) REST\u6846\u67b6\u5305\u53ea\u5305\u542b\u4e00\u4e2a\u540d\u4e3a SimpleMetadata \u7684\u5143\u6570\u636e\u7c7b\u5b9e\u73b0\u65b9\u5f0f\u3002\u5982\u679c\u8981\u4f7f\u7528\u5176\u4ed6\u6837\u5f0f\uff0c\u5219\u9700\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u7c7b\u3002","title":"Setting the metadata scheme \uff08\u8bbe\u7f6e\u5143\u6570\u636e\u6a21\u5f0f\uff09"},{"location":"api-guide/metadata_zh/#creating-schema-endpoints","text":"\u5982\u679c\u5bf9\u4f7f\u7528\u5e38\u89c4 GET \u8bf7\u6c42\u8bbf\u95ee\u7684\u6a21\u5f0f\u7ec8\u7aef\u7684\u521b\u5efa\u6709\u7279\u5b9a\u7684\u8981\u6c42\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u91cd\u65b0\u4f7f\u7528\u5143\u6570\u636eAPI\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5728\u89c6\u56fe\u96c6\u4e0a\u4f7f\u7528\u4ee5\u4e0b\u9644\u52a0\u8def\u7531\u6765\u63d0\u4f9b\u53ef\u94fe\u63a5\u7684\u6a21\u5f0f\u7ec8\u7aef\u3002 @list_route(methods=['GET']) def schema(self, request): meta = self.metadata_class() data = meta.determine_metadata(request, self) return Response(data) \u6709\u8bb8\u591a\u53ef\u80fd\u4f1a\u9009\u62e9\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u7406\u7531\uff0c\u5176\u4e2d\u5305\u62ec OPTIONS \u54cd\u5e94 \u4e0d\u53ef\u7f13\u5b58 \u3002","title":"Creating schema endpoints \uff08\u521b\u5efa\u6a21\u5f0f\u7ec8\u7aef\uff09"},{"location":"api-guide/metadata_zh/#custom-metadata-classes","text":"\u5982\u679c\u8981\u63d0\u4f9b\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u7c7b\uff0c\u5219\u5e94\u91cd\u5199 BaseMetadata \u5e76\u5e94\u7528 determine_metadata(self, request, view) \u65b9\u6cd5\u3002 \u4f60\u53ef\u80fd\u5e0c\u671b\u505a\u7684\u6709\u7528\u7684\u4e8b\u60c5\u5305\u62ec\u8fd4\u56de\u6a21\u5f0f\u4fe1\u606f\u3001\u4f7f\u7528 JSON schema \uff08JSON \u6a21\u5f0f\uff09 \u4e4b\u7c7b\u7684\u683c\u5f0f\uff0c\u6216\u8005\u5c06\u8c03\u8bd5\u4fe1\u606f\u8fd4\u56de\u7ed9\u7ba1\u7406\u5458\u7528\u6237\u3002","title":"Custom metadata classes \uff08\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u7c7b\uff09"},{"location":"api-guide/metadata_zh/#example","text":"\u4ee5\u4e0b\u7684\u7c7b\u53ef\u88ab\u7528\u4e8e\u9650\u5236\u8fd4\u56de\u7ed9 OPTIONS \u7684\u4fe1\u606f\u3002 class MinimalMetadata(BaseMetadata): \"\"\" Don't include field and other information for `OPTIONS` requests. Just return the name and description. \"\"\" def determine_metadata(self, request, view): return { 'name': view.get_view_name(), 'description': view.get_view_description() } \u7136\u540e\u914d\u7f6e\u8bbe\u7f6e\u4ee5\u4f7f\u7528\u6b64\u81ea\u5b9a\u4e49\u7c7b\uff1a REST_FRAMEWORK = { 'DEFAULT_METADATA_CLASS': 'myproject.apps.core.MinimalMetadata' }","title":"Example \uff08\u4e3e\u4e2a\u4f8b\u5b50\uff09"},{"location":"api-guide/metadata_zh/#third-party-packages","text":"The following third party packages provide additional metadata implementations.","title":"Third party packages"},{"location":"api-guide/metadata_zh/#drf-schema-adapter","text":"drf-schema-adapter is a set of tools that makes it easier to provide schema information to frontend frameworks and libraries. It provides a metadata mixin as well as 2 metadata classes and several adapters suitable to generate json-schema as well as schema information readable by various libraries. You can also write your own adapter to work with your specific frontend. If you wish to do so, it also provides an exporter that can export those schema information to json files.","title":"DRF-schema-adapter"},{"location":"api-guide/pagination/","text":"Pagination Django provides a few classes that help you manage paginated data \u2013 that is, data that\u2019s split across several pages, with \u201cPrevious/Next\u201d links. \u2014 Django documentation REST framework includes support for customizable pagination styles. This allows you to modify how large result sets are split into individual pages of data. The pagination API can support either: Pagination links that are provided as part of the content of the response. Pagination links that are included in response headers, such as Content-Range or Link . The built-in styles currently all use links included as part of the content of the response. This style is more accessible when using the browsable API. Pagination is only performed automatically if you're using the generic views or viewsets. If you're using a regular APIView , you'll need to call into the pagination API yourself to ensure you return a paginated response. See the source code for the mixins.ListModelMixin and generics.GenericAPIView classes for an example. Pagination can be turned off by setting the pagination class to None . Setting the pagination style The pagination style may be set globally, using the DEFAULT_PAGINATION_CLASS and PAGE_SIZE setting keys. For example, to use the built-in limit/offset pagination, you would do something like this: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 100 } Note that you need to set both the pagination class, and the page size that should be used. Both DEFAULT_PAGINATION_CLASS and PAGE_SIZE are None by default. You can also set the pagination class on an individual view by using the pagination_class attribute. Typically you'll want to use the same pagination style throughout your API, although you might want to vary individual aspects of the pagination, such as default or maximum page size, on a per-view basis. Modifying the pagination style If you want to modify particular aspects of the pagination style, you'll want to override one of the pagination classes, and set the attributes that you want to change. class LargeResultsSetPagination(PageNumberPagination): page_size = 1000 page_size_query_param = 'page_size' max_page_size = 10000 class StandardResultsSetPagination(PageNumberPagination): page_size = 100 page_size_query_param = 'page_size' max_page_size = 1000 You can then apply your new style to a view using the pagination_class attribute: class BillingRecordsView(generics.ListAPIView): queryset = Billing.objects.all() serializer_class = BillingRecordsSerializer pagination_class = LargeResultsSetPagination Or apply the style globally, using the DEFAULT_PAGINATION_CLASS settings key. For example: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'apps.core.pagination.StandardResultsSetPagination' } API Reference PageNumberPagination This pagination style accepts a single number page number in the request query parameters. Request : GET https://api.example.org/accounts/?page=4 Response : HTTP 200 OK { \"count\": 1023 \"next\": \"https://api.example.org/accounts/?page=5\", \"previous\": \"https://api.example.org/accounts/?page=3\", \"results\": [ \u2026 ] } Setup To enable the PageNumberPagination style globally, use the following configuration, and set the PAGE_SIZE as desired: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 100 } On GenericAPIView subclasses you may also set the pagination_class attribute to select PageNumberPagination on a per-view basis. Configuration The PageNumberPagination class includes a number of attributes that may be overridden to modify the pagination style. To set these attributes you should override the PageNumberPagination class, and then enable your custom pagination class as above. django_paginator_class - The Django Paginator class to use. Default is django.core.paginator.Paginator , which should be fine for most use cases. page_size - A numeric value indicating the page size. If set, this overrides the PAGE_SIZE setting. Defaults to the same value as the PAGE_SIZE settings key. page_query_param - A string value indicating the name of the query parameter to use for the pagination control. page_size_query_param - If set, this is a string value indicating the name of a query parameter that allows the client to set the page size on a per-request basis. Defaults to None , indicating that the client may not control the requested page size. max_page_size - If set, this is a numeric value indicating the maximum allowable requested page size. This attribute is only valid if page_size_query_param is also set. last_page_strings - A list or tuple of string values indicating values that may be used with the page_query_param to request the final page in the set. Defaults to ('last',) template - The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to None to disable HTML pagination controls completely. Defaults to \"rest_framework/pagination/numbers.html\" . LimitOffsetPagination This pagination style mirrors the syntax used when looking up multiple database records. The client includes both a \"limit\" and an \"offset\" query parameter. The limit indicates the maximum number of items to return, and is equivalent to the page_size in other styles. The offset indicates the starting position of the query in relation to the complete set of unpaginated items. Request : GET https://api.example.org/accounts/?limit=100&offset=400 Response : HTTP 200 OK { \"count\": 1023 \"next\": \"https://api.example.org/accounts/?limit=100&offset=500\", \"previous\": \"https://api.example.org/accounts/?limit=100&offset=300\", \"results\": [ \u2026 ] } Setup To enable the LimitOffsetPagination style globally, use the following configuration: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination' } Optionally, you may also set a PAGE_SIZE key. If the PAGE_SIZE parameter is also used then the limit query parameter will be optional, and may be omitted by the client. On GenericAPIView subclasses you may also set the pagination_class attribute to select LimitOffsetPagination on a per-view basis. Configuration The LimitOffsetPagination class includes a number of attributes that may be overridden to modify the pagination style. To set these attributes you should override the LimitOffsetPagination class, and then enable your custom pagination class as above. default_limit - A numeric value indicating the limit to use if one is not provided by the client in a query parameter. Defaults to the same value as the PAGE_SIZE settings key. limit_query_param - A string value indicating the name of the \"limit\" query parameter. Defaults to 'limit' . offset_query_param - A string value indicating the name of the \"offset\" query parameter. Defaults to 'offset' . max_limit - If set this is a numeric value indicating the maximum allowable limit that may be requested by the client. Defaults to None . template - The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to None to disable HTML pagination controls completely. Defaults to \"rest_framework/pagination/numbers.html\" . CursorPagination The cursor-based pagination presents an opaque \"cursor\" indicator that the client may use to page through the result set. This pagination style only presents forward and reverse controls, and does not allow the client to navigate to arbitrary positions. Cursor based pagination requires that there is a unique, unchanging ordering of items in the result set. This ordering might typically be a creation timestamp on the records, as this presents a consistent ordering to paginate against. Cursor based pagination is more complex than other schemes. It also requires that the result set presents a fixed ordering, and does not allow the client to arbitrarily index into the result set. However it does provide the following benefits: Provides a consistent pagination view. When used properly CursorPagination ensures that the client will never see the same item twice when paging through records, even when new items are being inserted by other clients during the pagination process. Supports usage with very large datasets. With extremely large datasets pagination using offset-based pagination styles may become inefficient or unusable. Cursor based pagination schemes instead have fixed-time properties, and do not slow down as the dataset size increases. Details and limitations Proper use of cursor based pagination requires a little attention to detail. You'll need to think about what ordering you want the scheme to be applied against. The default is to order by \"-created\" . This assumes that there must be a 'created' timestamp field on the model instances, and will present a \"timeline\" style paginated view, with the most recently added items first. You can modify the ordering by overriding the 'ordering' attribute on the pagination class, or by using the OrderingFilter filter class together with CursorPagination . When used with OrderingFilter you should strongly consider restricting the fields that the user may order by. Proper usage of cursor pagination should have an ordering field that satisfies the following: Should be an unchanging value, such as a timestamp, slug, or other field that is only set once, on creation. Should be unique, or nearly unique. Millisecond precision timestamps are a good example. This implementation of cursor pagination uses a smart \"position plus offset\" style that allows it to properly support not-strictly-unique values as the ordering. Should be a non-nullable value that can be coerced to a string. Should not be a float. Precision errors easily lead to incorrect results. Hint: use decimals instead. (If you already have a float field and must paginate on that, an example CursorPagination subclass that uses decimals to limit precision is available here .) The field should have a database index. Using an ordering field that does not satisfy these constraints will generally still work, but you'll be losing some of the benefits of cursor pagination. For more technical details on the implementation we use for cursor pagination, the \"Building cursors for the Disqus API\" blog post gives a good overview of the basic approach. Setup To enable the CursorPagination style globally, use the following configuration, modifying the PAGE_SIZE as desired: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination', 'PAGE_SIZE': 100 } On GenericAPIView subclasses you may also set the pagination_class attribute to select CursorPagination on a per-view basis. Configuration The CursorPagination class includes a number of attributes that may be overridden to modify the pagination style. To set these attributes you should override the CursorPagination class, and then enable your custom pagination class as above. page_size = A numeric value indicating the page size. If set, this overrides the PAGE_SIZE setting. Defaults to the same value as the PAGE_SIZE settings key. cursor_query_param = A string value indicating the name of the \"cursor\" query parameter. Defaults to 'cursor' . ordering = This should be a string, or list of strings, indicating the field against which the cursor based pagination will be applied. For example: ordering = 'slug' . Defaults to -created . This value may also be overridden by using OrderingFilter on the view. template = The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to None to disable HTML pagination controls completely. Defaults to \"rest_framework/pagination/previous_and_next.html\" . Custom pagination styles To create a custom pagination serializer class you should subclass pagination.BasePagination and override the paginate_queryset(self, queryset, request, view=None) and get_paginated_response(self, data) methods: The paginate_queryset method is passed the initial queryset and should return an iterable object that contains only the data in the requested page. The get_paginated_response method is passed the serialized page data and should return a Response instance. Note that the paginate_queryset method may set state on the pagination instance, that may later be used by the get_paginated_response method. Example Suppose we want to replace the default pagination output style with a modified format that includes the next and previous links under in a nested 'links' key. We could specify a custom pagination class like so: class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.count, 'results': data }) We'd then need to setup the custom class in our configuration: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.CustomPagination', 'PAGE_SIZE': 100 } Note that if you care about how the ordering of keys is displayed in responses in the browsable API you might choose to use an OrderedDict when constructing the body of paginated responses, but this is optional. Using your custom pagination class To have your custom pagination class be used by default, use the DEFAULT_PAGINATION_CLASS setting: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.LinkHeaderPagination', 'PAGE_SIZE': 100 } API responses for list endpoints will now include a Link header, instead of including the pagination links as part of the body of the response, for example: A custom pagination style, using the 'Link' header' Pagination & schemas You can also make the pagination controls available to the schema autogeneration that REST framework provides, by implementing a get_schema_fields() method. This method should have the following signature: get_schema_fields(self, view) The method should return a list of coreapi.Field instances. HTML pagination controls By default using the pagination classes will cause HTML pagination controls to be displayed in the browsable API. There are two built-in display styles. The PageNumberPagination and LimitOffsetPagination classes display a list of page numbers with previous and next controls. The CursorPagination class displays a simpler style that only displays a previous and next control. Customizing the controls You can override the templates that render the HTML pagination controls. The two built-in styles are: rest_framework/pagination/numbers.html rest_framework/pagination/previous_and_next.html Providing a template with either of these paths in a global template directory will override the default rendering for the relevant pagination classes. Alternatively you can disable HTML pagination controls completely by subclassing on of the existing classes, setting template = None as an attribute on the class. You'll then need to configure your DEFAULT_PAGINATION_CLASS settings key to use your custom class as the default pagination style. Low-level API The low-level API for determining if a pagination class should display the controls or not is exposed as a display_page_controls attribute on the pagination instance. Custom pagination classes should be set to True in the paginate_queryset method if they require the HTML pagination controls to be displayed. The .to_html() and .get_html_context() methods may also be overridden in a custom pagination class in order to further customize how the controls are rendered. Third party packages The following third party packages are also available. DRF-extensions The DRF-extensions package includes a PaginateByMaxMixin mixin class that allows your API clients to specify ?page_size=max to obtain the maximum allowed page size. drf-proxy-pagination The drf-proxy-pagination package includes a ProxyPagination class which allows to choose pagination class with a query parameter. link-header-pagination The django-rest-framework-link-header-pagination package includes a LinkHeaderPagination class which provides pagination via an HTTP Link header as described in Github's developer documentation .","title":"Pagination"},{"location":"api-guide/pagination/#pagination","text":"Django provides a few classes that help you manage paginated data \u2013 that is, data that\u2019s split across several pages, with \u201cPrevious/Next\u201d links. \u2014 Django documentation REST framework includes support for customizable pagination styles. This allows you to modify how large result sets are split into individual pages of data. The pagination API can support either: Pagination links that are provided as part of the content of the response. Pagination links that are included in response headers, such as Content-Range or Link . The built-in styles currently all use links included as part of the content of the response. This style is more accessible when using the browsable API. Pagination is only performed automatically if you're using the generic views or viewsets. If you're using a regular APIView , you'll need to call into the pagination API yourself to ensure you return a paginated response. See the source code for the mixins.ListModelMixin and generics.GenericAPIView classes for an example. Pagination can be turned off by setting the pagination class to None .","title":"Pagination"},{"location":"api-guide/pagination/#setting-the-pagination-style","text":"The pagination style may be set globally, using the DEFAULT_PAGINATION_CLASS and PAGE_SIZE setting keys. For example, to use the built-in limit/offset pagination, you would do something like this: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 100 } Note that you need to set both the pagination class, and the page size that should be used. Both DEFAULT_PAGINATION_CLASS and PAGE_SIZE are None by default. You can also set the pagination class on an individual view by using the pagination_class attribute. Typically you'll want to use the same pagination style throughout your API, although you might want to vary individual aspects of the pagination, such as default or maximum page size, on a per-view basis.","title":"Setting the pagination style"},{"location":"api-guide/pagination/#modifying-the-pagination-style","text":"If you want to modify particular aspects of the pagination style, you'll want to override one of the pagination classes, and set the attributes that you want to change. class LargeResultsSetPagination(PageNumberPagination): page_size = 1000 page_size_query_param = 'page_size' max_page_size = 10000 class StandardResultsSetPagination(PageNumberPagination): page_size = 100 page_size_query_param = 'page_size' max_page_size = 1000 You can then apply your new style to a view using the pagination_class attribute: class BillingRecordsView(generics.ListAPIView): queryset = Billing.objects.all() serializer_class = BillingRecordsSerializer pagination_class = LargeResultsSetPagination Or apply the style globally, using the DEFAULT_PAGINATION_CLASS settings key. For example: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'apps.core.pagination.StandardResultsSetPagination' }","title":"Modifying the pagination style"},{"location":"api-guide/pagination/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/pagination/#pagenumberpagination","text":"This pagination style accepts a single number page number in the request query parameters. Request : GET https://api.example.org/accounts/?page=4 Response : HTTP 200 OK { \"count\": 1023 \"next\": \"https://api.example.org/accounts/?page=5\", \"previous\": \"https://api.example.org/accounts/?page=3\", \"results\": [ \u2026 ] }","title":"PageNumberPagination"},{"location":"api-guide/pagination/#setup","text":"To enable the PageNumberPagination style globally, use the following configuration, and set the PAGE_SIZE as desired: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 100 } On GenericAPIView subclasses you may also set the pagination_class attribute to select PageNumberPagination on a per-view basis.","title":"Setup"},{"location":"api-guide/pagination/#configuration","text":"The PageNumberPagination class includes a number of attributes that may be overridden to modify the pagination style. To set these attributes you should override the PageNumberPagination class, and then enable your custom pagination class as above. django_paginator_class - The Django Paginator class to use. Default is django.core.paginator.Paginator , which should be fine for most use cases. page_size - A numeric value indicating the page size. If set, this overrides the PAGE_SIZE setting. Defaults to the same value as the PAGE_SIZE settings key. page_query_param - A string value indicating the name of the query parameter to use for the pagination control. page_size_query_param - If set, this is a string value indicating the name of a query parameter that allows the client to set the page size on a per-request basis. Defaults to None , indicating that the client may not control the requested page size. max_page_size - If set, this is a numeric value indicating the maximum allowable requested page size. This attribute is only valid if page_size_query_param is also set. last_page_strings - A list or tuple of string values indicating values that may be used with the page_query_param to request the final page in the set. Defaults to ('last',) template - The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to None to disable HTML pagination controls completely. Defaults to \"rest_framework/pagination/numbers.html\" .","title":"Configuration"},{"location":"api-guide/pagination/#limitoffsetpagination","text":"This pagination style mirrors the syntax used when looking up multiple database records. The client includes both a \"limit\" and an \"offset\" query parameter. The limit indicates the maximum number of items to return, and is equivalent to the page_size in other styles. The offset indicates the starting position of the query in relation to the complete set of unpaginated items. Request : GET https://api.example.org/accounts/?limit=100&offset=400 Response : HTTP 200 OK { \"count\": 1023 \"next\": \"https://api.example.org/accounts/?limit=100&offset=500\", \"previous\": \"https://api.example.org/accounts/?limit=100&offset=300\", \"results\": [ \u2026 ] }","title":"LimitOffsetPagination"},{"location":"api-guide/pagination/#setup_1","text":"To enable the LimitOffsetPagination style globally, use the following configuration: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination' } Optionally, you may also set a PAGE_SIZE key. If the PAGE_SIZE parameter is also used then the limit query parameter will be optional, and may be omitted by the client. On GenericAPIView subclasses you may also set the pagination_class attribute to select LimitOffsetPagination on a per-view basis.","title":"Setup"},{"location":"api-guide/pagination/#configuration_1","text":"The LimitOffsetPagination class includes a number of attributes that may be overridden to modify the pagination style. To set these attributes you should override the LimitOffsetPagination class, and then enable your custom pagination class as above. default_limit - A numeric value indicating the limit to use if one is not provided by the client in a query parameter. Defaults to the same value as the PAGE_SIZE settings key. limit_query_param - A string value indicating the name of the \"limit\" query parameter. Defaults to 'limit' . offset_query_param - A string value indicating the name of the \"offset\" query parameter. Defaults to 'offset' . max_limit - If set this is a numeric value indicating the maximum allowable limit that may be requested by the client. Defaults to None . template - The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to None to disable HTML pagination controls completely. Defaults to \"rest_framework/pagination/numbers.html\" .","title":"Configuration"},{"location":"api-guide/pagination/#cursorpagination","text":"The cursor-based pagination presents an opaque \"cursor\" indicator that the client may use to page through the result set. This pagination style only presents forward and reverse controls, and does not allow the client to navigate to arbitrary positions. Cursor based pagination requires that there is a unique, unchanging ordering of items in the result set. This ordering might typically be a creation timestamp on the records, as this presents a consistent ordering to paginate against. Cursor based pagination is more complex than other schemes. It also requires that the result set presents a fixed ordering, and does not allow the client to arbitrarily index into the result set. However it does provide the following benefits: Provides a consistent pagination view. When used properly CursorPagination ensures that the client will never see the same item twice when paging through records, even when new items are being inserted by other clients during the pagination process. Supports usage with very large datasets. With extremely large datasets pagination using offset-based pagination styles may become inefficient or unusable. Cursor based pagination schemes instead have fixed-time properties, and do not slow down as the dataset size increases.","title":"CursorPagination"},{"location":"api-guide/pagination/#details-and-limitations","text":"Proper use of cursor based pagination requires a little attention to detail. You'll need to think about what ordering you want the scheme to be applied against. The default is to order by \"-created\" . This assumes that there must be a 'created' timestamp field on the model instances, and will present a \"timeline\" style paginated view, with the most recently added items first. You can modify the ordering by overriding the 'ordering' attribute on the pagination class, or by using the OrderingFilter filter class together with CursorPagination . When used with OrderingFilter you should strongly consider restricting the fields that the user may order by. Proper usage of cursor pagination should have an ordering field that satisfies the following: Should be an unchanging value, such as a timestamp, slug, or other field that is only set once, on creation. Should be unique, or nearly unique. Millisecond precision timestamps are a good example. This implementation of cursor pagination uses a smart \"position plus offset\" style that allows it to properly support not-strictly-unique values as the ordering. Should be a non-nullable value that can be coerced to a string. Should not be a float. Precision errors easily lead to incorrect results. Hint: use decimals instead. (If you already have a float field and must paginate on that, an example CursorPagination subclass that uses decimals to limit precision is available here .) The field should have a database index. Using an ordering field that does not satisfy these constraints will generally still work, but you'll be losing some of the benefits of cursor pagination. For more technical details on the implementation we use for cursor pagination, the \"Building cursors for the Disqus API\" blog post gives a good overview of the basic approach.","title":"Details and limitations"},{"location":"api-guide/pagination/#setup_2","text":"To enable the CursorPagination style globally, use the following configuration, modifying the PAGE_SIZE as desired: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination', 'PAGE_SIZE': 100 } On GenericAPIView subclasses you may also set the pagination_class attribute to select CursorPagination on a per-view basis.","title":"Setup"},{"location":"api-guide/pagination/#configuration_2","text":"The CursorPagination class includes a number of attributes that may be overridden to modify the pagination style. To set these attributes you should override the CursorPagination class, and then enable your custom pagination class as above. page_size = A numeric value indicating the page size. If set, this overrides the PAGE_SIZE setting. Defaults to the same value as the PAGE_SIZE settings key. cursor_query_param = A string value indicating the name of the \"cursor\" query parameter. Defaults to 'cursor' . ordering = This should be a string, or list of strings, indicating the field against which the cursor based pagination will be applied. For example: ordering = 'slug' . Defaults to -created . This value may also be overridden by using OrderingFilter on the view. template = The name of a template to use when rendering pagination controls in the browsable API. May be overridden to modify the rendering style, or set to None to disable HTML pagination controls completely. Defaults to \"rest_framework/pagination/previous_and_next.html\" .","title":"Configuration"},{"location":"api-guide/pagination/#custom-pagination-styles","text":"To create a custom pagination serializer class you should subclass pagination.BasePagination and override the paginate_queryset(self, queryset, request, view=None) and get_paginated_response(self, data) methods: The paginate_queryset method is passed the initial queryset and should return an iterable object that contains only the data in the requested page. The get_paginated_response method is passed the serialized page data and should return a Response instance. Note that the paginate_queryset method may set state on the pagination instance, that may later be used by the get_paginated_response method.","title":"Custom pagination styles"},{"location":"api-guide/pagination/#example","text":"Suppose we want to replace the default pagination output style with a modified format that includes the next and previous links under in a nested 'links' key. We could specify a custom pagination class like so: class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.count, 'results': data }) We'd then need to setup the custom class in our configuration: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.CustomPagination', 'PAGE_SIZE': 100 } Note that if you care about how the ordering of keys is displayed in responses in the browsable API you might choose to use an OrderedDict when constructing the body of paginated responses, but this is optional.","title":"Example"},{"location":"api-guide/pagination/#using-your-custom-pagination-class","text":"To have your custom pagination class be used by default, use the DEFAULT_PAGINATION_CLASS setting: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.LinkHeaderPagination', 'PAGE_SIZE': 100 } API responses for list endpoints will now include a Link header, instead of including the pagination links as part of the body of the response, for example: A custom pagination style, using the 'Link' header'","title":"Using your custom pagination class"},{"location":"api-guide/pagination/#pagination-schemas","text":"You can also make the pagination controls available to the schema autogeneration that REST framework provides, by implementing a get_schema_fields() method. This method should have the following signature: get_schema_fields(self, view) The method should return a list of coreapi.Field instances.","title":"Pagination &amp; schemas"},{"location":"api-guide/pagination/#html-pagination-controls","text":"By default using the pagination classes will cause HTML pagination controls to be displayed in the browsable API. There are two built-in display styles. The PageNumberPagination and LimitOffsetPagination classes display a list of page numbers with previous and next controls. The CursorPagination class displays a simpler style that only displays a previous and next control.","title":"HTML pagination controls"},{"location":"api-guide/pagination/#customizing-the-controls","text":"You can override the templates that render the HTML pagination controls. The two built-in styles are: rest_framework/pagination/numbers.html rest_framework/pagination/previous_and_next.html Providing a template with either of these paths in a global template directory will override the default rendering for the relevant pagination classes. Alternatively you can disable HTML pagination controls completely by subclassing on of the existing classes, setting template = None as an attribute on the class. You'll then need to configure your DEFAULT_PAGINATION_CLASS settings key to use your custom class as the default pagination style.","title":"Customizing the controls"},{"location":"api-guide/pagination/#low-level-api","text":"The low-level API for determining if a pagination class should display the controls or not is exposed as a display_page_controls attribute on the pagination instance. Custom pagination classes should be set to True in the paginate_queryset method if they require the HTML pagination controls to be displayed. The .to_html() and .get_html_context() methods may also be overridden in a custom pagination class in order to further customize how the controls are rendered.","title":"Low-level API"},{"location":"api-guide/pagination/#third-party-packages","text":"The following third party packages are also available.","title":"Third party packages"},{"location":"api-guide/pagination/#drf-extensions","text":"The DRF-extensions package includes a PaginateByMaxMixin mixin class that allows your API clients to specify ?page_size=max to obtain the maximum allowed page size.","title":"DRF-extensions"},{"location":"api-guide/pagination/#drf-proxy-pagination","text":"The drf-proxy-pagination package includes a ProxyPagination class which allows to choose pagination class with a query parameter.","title":"drf-proxy-pagination"},{"location":"api-guide/pagination/#link-header-pagination","text":"The django-rest-framework-link-header-pagination package includes a LinkHeaderPagination class which provides pagination via an HTTP Link header as described in Github's developer documentation .","title":"link-header-pagination"},{"location":"api-guide/pagination_zh/","text":"Pagination (\u5206\u9875) Django provides a few classes that help you manage paginated data \u2013 that is, data that\u2019s split across several pages, with \u201cPrevious/Next\u201d links. \u2014 Django \u6587\u6863 REST\u6846\u67b6\u5305\u62ec\u5bf9\u53ef\u5b9a\u5236\u7684\u5206\u9875\u6837\u5f0f\u7684\u652f\u6301\u3002 \u8fd9\u4f7f\u60a8\u53ef\u4ee5\u8c03\u6574\u4f7f\u5927\u578b\u7ed3\u679c\u96c6\u88ab\u62c6\u5206\u4e3a\u5355\u72ec\u7684\u6570\u636e\u9875\u9762\u3002 \u5206\u9875API\u53ef\u4ee5\u652f\u6301\u4ee5\u4e0b\u4e24\u8005\u4e4b\u4e00\uff1a \u4f5c\u4e3a\u54cd\u5e94\u5185\u5bb9\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\u7684\u5206\u9875\u94fe\u63a5\u3002 \u5305\u542b\u5728\u54cd\u5e94\u6807\u5934\u4e2d\u7684\u5206\u9875\u94fe\u63a5\uff0c\u4f8b\u5982 Content-Range \u6216 Link \u3002 \u5f53\u524d\u5185\u7f6e\u6837\u5f0f\u90fd\u4f7f\u7528\u4f5c\u4e3a\u54cd\u5e94\u5185\u5bb9\u4e00\u90e8\u5206\u7684\u94fe\u63a5\u3002\u5f53\u4f7f\u7528\u53ef\u6d4f\u89c8\u7684API\u65f6\uff0c\u8fd9\u79cd\u6837\u5f0f\u66f4\u5bb9\u6613\u8bbf\u95ee\u3002 \u53ea\u6709\u5728\u4f7f\u7528\u5e38\u89c4\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u65f6\u624d\u81ea\u52a8\u6267\u884c\u5206\u9875\u3002\u5982\u679c\u4f7f\u7528\u7684\u662f\u5e38\u89c4\u7684 APIView \uff0c\u5219\u9700\u8981\u81ea\u884c\u8c03\u7528\u5206\u9875API\u4ee5\u786e\u4fdd\u8fd4\u56de\u5206\u9875\u7684\u54cd\u5e94\u3002\u8bf7\u53c2\u89c1 mixins.ListModelMixin \u4ee5\u53ca generics.GenericAPIView \u7c7b\u4f5c\u4e3a\u793a\u4f8b\u3002 Pagination can be turned off by setting the pagination class to None . \u53ef\u4ee5\u901a\u8fc7\u5c06Pagination\u7c7b\u8bbe\u7f6e\u4e3a None \u6765\u5173\u95ed\u5206\u9875\u3002 Setting the pagination style (\u8bbe\u7f6e\u5206\u9875\u6837\u5f0f) \u53ef\u4ee5\u4f7f\u7528 DEFAULT_PAGINATION_CLASS \u548c PAGE_SIZE \u8bbe\u7f6e\u952e\u5168\u5c40\u8bbe\u7f6e\u5206\u9875\u6837\u5f0f\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u4f7f\u7528\u5185\u7f6e\u7684\u9650\u5236/\u504f\u79fb\u5206\u9875\uff0c\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 100 } \u6ce8\u610f\uff0c\u60a8\u9700\u8981\u540c\u65f6\u8bbe\u7f6e\u5206\u9875\u7c7b\u548c\u5e94\u8be5\u4f7f\u7528\u7684\u9875\u9762\u5927\u5c0f\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c DEFAULT_PAGINATION_CLASS \u548c PAGE_SIZE \u5747\u4e3a None \u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528 pagination_class \u5c5e\u6027\u5728\u5355\u4e2a\u89c6\u56fe\u4e0a\u8bbe\u7f6e\u5206\u9875\u7c7b\u3002\u901a\u5e38\uff0c\u60a8\u5e0c\u671b\u5728\u6574\u4e2aAPI\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u5206\u9875\u6837\u5f0f\uff0c\u5c3d\u7ba1\u60a8\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u6bcf\u4e2a\u89c6\u56fe\u6539\u53d8\u5206\u9875\u7684\u5404\u4e2a\u65b9\u9762\uff0c\u4f8b\u5982\u9ed8\u8ba4\u6216\u6700\u5927\u9875\u9762\u5927\u5c0f\u3002 Modifying the pagination style (\u8c03\u6574\u5206\u9875\u6837\u5f0f) \u5982\u679c\u8981\u4fee\u6539\u5206\u9875\u6837\u5f0f\u7684\u7279\u5b9a\u65b9\u9762\uff0c\u5219\u9700\u8981\u91cd\u5199\u5176\u4e2d\u4e00\u4e2a\u5206\u9875\u7c7b\uff0c\u5e76\u8bbe\u7f6e\u8981\u66f4\u6539\u7684\u5c5e\u6027\u3002 class LargeResultsSetPagination(PageNumberPagination): page_size = 1000 page_size_query_param = 'page_size' max_page_size = 10000 class StandardResultsSetPagination(PageNumberPagination): page_size = 100 page_size_query_param = 'page_size' max_page_size = 1000 \u7136\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 .pagination_class \u5c5e\u6027\u5c06\u65b0\u6837\u5f0f\u5e94\u7528\u4e8e\u89c6\u56fe\uff1a class BillingRecordsView(generics.ListAPIView): queryset = Billing.objects.all() serializer_class = BillingRecordsSerializer pagination_class = LargeResultsSetPagination \u6216\u8005\u4f7f\u7528\u9ed8\u8ba4\u7684 DEFAULT_PAGINATION_CLASS \u8bbe\u7f6e\u952e\u5168\u5c40\u5e94\u7528\u6837\u5f0f\u3002\u4f8b\u5982\uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'apps.core.pagination.StandardResultsSetPagination' } API Reference PageNumberPagination \u6b64\u5206\u9875\u6837\u5f0f\u63a5\u53d7\u8bf7\u6c42\u67e5\u8be2\u53c2\u6570\u4e2d\u7684\u5355\u4e2a\u6570\u5b57\u9875\u7801\u3002 Request : GET https://api.example.org/accounts/?page=4 Response : HTTP 200 OK { \"count\": 1023 \"next\": \"https://api.example.org/accounts/?page=5\", \"previous\": \"https://api.example.org/accounts/?page=3\", \"results\": [ \u2026 ] } Setup (\u8bbe\u7f6e) \u4e3a\u4e86\u5168\u5c40\u542f\u7528 PageNumberPagination \u6837\u5f0f\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5e76\u6839\u636e\u9700\u8981\u8bbe\u7f6e PAGE_SIZE \uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 100 } \u5728 GenericAPIView \u5b50\u7c7b\u4e2d\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e pagination_class \u5c5e\u6027\uff0c\u4ee5\u5728\u6bcf\u4e2a\u89c6\u56fe\u7684\u57fa\u7840\u4e0a\u9009\u62e9 PageNumberPagination \u3002 Configuration (\u914d\u7f6e) PageNumberPagination \u7c7b\u5305\u542b\u8bb8\u591a\u5c5e\u6027\uff0c\u901a\u8fc7\u91cd\u5199\u5176\u4e2d\u7684\u4e00\u4e9b\u5c5e\u6027\u53ef\u4ee5\u4fee\u6539\u5206\u9875\u5c5e\u6027 \u4e3a\u4e86\u8bbe\u7f6e\u8fd9\u4e9b\u5c5e\u6027\uff0c\u5e94\u5f53\u91cd\u5199 PageNumberPagination \u7c7b\uff0c\u7136\u540e\u5982\u4e0a\u6240\u8ff0\u542f\u7528\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\u3002 django_paginator_class \u2014\u2014 \u8981\u4f7f\u7528\u7684django paginator\u7c7b\u3002\u9ed8\u8ba4\u4e3a django.core.paginator.Paginator \uff0c\u9002\u7528\u4e8e\u5927\u591a\u6570\u60c5\u51b5\u3002 page_size \u2014\u2014 \u8868\u793a\u9875\u9762\u5927\u5c0f\u7684\u6570\u503c\u3002\u5982\u679c\u8bbe\u7f6e\uff0c\u5219\u8986\u76d6 PAGE_SIZE \u8bbe\u7f6e\u3002\u5176\u9ed8\u8ba4\u503c\u4e0e PAGE_SIZE \u8bbe\u7f6e\u952e\u76f8\u540c\u3002 page_query_param \u2014\u2014 \u4e00\u4e2a\u5b57\u7b26\u4e32\u503c\uff0c\u6307\u793a\u7528\u4e8e\u5206\u9875\u63a7\u4ef6\u7684\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002 page_size_query_param \u2014\u2014 \u5982\u679c\u8bbe\u7f6e\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u503c\uff0c\u6307\u793a\u5141\u8bb8\u5ba2\u6237\u7aef\u6839\u636e\u6bcf\u4e2a\u8bf7\u6c42\u8bbe\u7f6e\u9875\u9762\u5927\u5c0f\u7684\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3a None \uff0c\u8868\u793a\u5ba2\u6237\u7aef\u53ef\u80fd\u65e0\u6cd5\u63a7\u5236\u8bf7\u6c42\u7684\u9875\u9762\u5927\u5c0f\u3002 max_page_size \u2014\u2014 \u5982\u679c\u8bbe\u7f6e\uff0c\u8fd9\u662f\u4e00\u4e2a\u6570\u5b57\u503c\uff0c\u6307\u793a\u5141\u8bb8\u7684\u6700\u5927\u8bf7\u6c42\u9875\u9762\u5927\u5c0f\u3002\u6b64\u5c5e\u6027\u4ec5\u5728\u8bbe\u7f6e\u4e86 page_size_query_param \u65f6\u6709\u6548\u3002 last_page_strings \u2014\u2014 \u4e00\u4e2a\u5b57\u7b26\u4e32\u503c\u7684\u5217\u8868\u6216\u5143\u7ec4\uff0c\u6307\u793a\u53ef\u4e0e page_query_param \u4e00\u8d77\u4f7f\u7528\u7684\u503c\uff0c\u4ee5\u8bf7\u6c42\u96c6\u5408\u4e2d\u7684\u6700\u540e\u4e00\u9875\u3002\u9ed8\u8ba4\u4e3a ('last',) \u3002 template \u2014\u2014 \u5728\u53ef\u6d4f\u89c8API\u4e2d\u5448\u73b0\u5206\u9875\u63a7\u4ef6\u65f6\u8981\u4f7f\u7528\u7684\u6a21\u677f\u540d\u79f0\u3002\u53ef\u4ee5\u91cd\u5199\u4ee5\u4fee\u6539\u5448\u73b0\u6837\u5f0f\uff0c\u6216\u8bbe\u7f6e\u4e3a None \u4ee5\u5b8c\u5168\u7981\u7528HTML\u5206\u9875\u63a7\u4ef6\u3002\u9ed8\u8ba4\u4e3a \"rest_framework/pagination/numbers.html\" \u3002 LimitOffsetPagination \u8fd9\u79cd\u5206\u9875\u6837\u5f0f\u53cd\u6620\u4e86\u67e5\u627e\u591a\u4e2a\u6570\u636e\u5e93\u8bb0\u5f55\u65f6\u4f7f\u7528\u7684\u8bed\u6cd5\u3002\u5ba2\u6237\u7aef\u5305\u62ec\u201climit\u201d\u548c\u201coffset\u201d\u67e5\u8be2\u53c2\u6570\u3002limit\u6307\u793a\u8981\u8fd4\u56de\u7684\u9879\u76ee\u7684\u6700\u5927\u6570\u76ee\uff0c\u8fd9\u76f8\u5f53\u4e8e\u5176\u4ed6\u6837\u5f0f\u4e2d\u7684 page_size \u3002offset\u6307\u793a\u67e5\u8be2\u76f8\u5bf9\u4e8e\u5b8c\u6574\u7684\u672a\u5206\u9875\u9879\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 Request : GET https://api.example.org/accounts/?limit=100&offset=400 Response : HTTP 200 OK { \"count\": 1023 \"next\": \"https://api.example.org/accounts/?limit=100&offset=500\", \"previous\": \"https://api.example.org/accounts/?limit=100&offset=300\", \"results\": [ \u2026 ] } Setup (\u8bbe\u7f6e) \u4e3a\u4e86\u5168\u5c40\u542f\u7528 LimitOffsetPagination \u6837\u5f0f\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination' } \u53ef\u9009\u5730\uff0c\u60a8\u4e5f\u53ef\u4ee5\u8bbe\u7f6e PAGE_SIZE \u952e\u3002\u5982\u679c\u8fd8\u4f7f\u7528\u4e86 PAGE_SIZE \u53c2\u6570\uff0c\u90a3\u4e48 limit query\u53c2\u6570\u5c06\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u5ba2\u6237\u7aef\u5ffd\u7565\u3002 \u5728 GenericAPIView \u5b50\u7c7b\u4e2d\uff0c\u60a8\u8fd8\u53ef\u4ee5\u8bbe\u7f6e pagination_class \u5c5e\u6027\uff0c\u4ee5\u4fbf\u5728\u6bcf\u4e2a\u89c6\u56fe\u7684\u57fa\u7840\u4e0a\u9009\u62e9 LimitOffsetPagination \u3002 Configuration (\u914d\u7f6e) LimitOffsetPagination \u7c7b\u5305\u542b\u8bb8\u591a\u53ef\u4ee5\u91cd\u5199\u4ee5\u4fee\u6539\u5206\u9875\u6837\u5f0f\u7684\u5c5e\u6027\u3002 \u4e3a\u4e86\u8bbe\u7f6e\u8fd9\u4e9b\u5c5e\u6027\uff0c\u9700\u8981\u91cd\u5199 LimitOffsetPagination \u7c7b\uff0c\u7136\u540e\u5982\u4e0a\u6240\u8ff0\u542f\u7528\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\u3002 default_limit \u2014\u2014 \u6570\u503c\uff0c\u6307\u793a\u5728\u5ba2\u6237\u7aef\u672a\u5728\u67e5\u8be2\u53c2\u6570\u4e2d\u63d0\u4f9b\u9650\u5236\u65f6\u4f7f\u7528\u7684\u9650\u5236\u3002\u9ed8\u8ba4\u4e3a\u4e0e PAGE_SIZE \u8bbe\u7f6e\u952e\u76f8\u540c\u7684\u503c\u3002 limit_query_param \u2014\u2014 \u5b57\u7b26\u4e32\u503c\uff0c\u6307\u793a\u201climit\u201d\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a 'limit' \u3002 offset_query_param \u2014\u2014 \u5b57\u7b26\u4e32\u503c\uff0c\u6307\u793a\u201coffset\u201d\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a 'offset' \u3002 max_limit \u2014\u2014 \u5982\u679c\u8bbe\u7f6e\uff0c\u8fd9\u662f\u4e00\u4e2a\u6570\u503c\uff0c\u6307\u793a\u5ba2\u6237\u7aef\u53ef\u80fd\u8bf7\u6c42\u7684\u6700\u5927\u5141\u8bb8\u9650\u5236\u3002\u9ed8\u8ba4\u4e3a None \u3002 template \u2014\u2014 \u5728\u53ef\u6d4f\u89c8API\u4e2d\u5448\u73b0\u5206\u9875\u63a7\u4ef6\u65f6\u8981\u4f7f\u7528\u7684\u6a21\u677f\u540d\u79f0\u3002\u53ef\u4ee5\u91cd\u5199\u4ee5\u4fee\u6539\u5448\u73b0\u6837\u5f0f\uff0c\u6216\u8bbe\u7f6e\u4e3a None \u4ee5\u5b8c\u5168\u7981\u7528HTML\u5206\u9875\u63a7\u4ef6\u3002\u9ed8\u8ba4\u4e3a \"rest_framework/pagination/numbers.html\" \u3002 CursorPagination \u57fa\u4e8ecursor\u7684\u5206\u9875\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u900f\u660e\u7684\u201c\u6e38\u6807\u201d\u6307\u793a\u5668\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u4f7f\u7528\u5b83\u5bf9\u7ed3\u679c\u96c6\u8fdb\u884c\u5206\u9875\u3002\u8fd9\u79cd\u5206\u9875\u6837\u5f0f\u53ea\u663e\u793a\u6b63\u5411\u548c\u53cd\u5411\u63a7\u4ef6\uff0c\u800c\u4e0d\u5141\u8bb8\u5ba2\u6237\u7aef\u5bfc\u822a\u5230\u4efb\u610f\u4f4d\u7f6e\u3002 \u57fa\u4e8ecursor\u7684\u5206\u9875\u8981\u6c42\u7ed3\u679c\u96c6\u4e2d\u7684\u9879\u5177\u6709\u552f\u4e00\u7684\u3001\u4e0d\u53d8\u7684\u987a\u5e8f\u3002\u6b64\u987a\u5e8f\u901a\u5e38\u53ef\u80fd\u662f\u8bb0\u5f55\u4e0a\u7684\u521b\u5efa\u65f6\u95f4\u6233\uff0c\u56e0\u4e3a\u5b83\u63d0\u4e3a\u5206\u9875\u4f9b\u4e86\u4e00\u81f4\u7684\u987a\u5e8f\u3002 \u57fa\u4e8ecursor\u7684\u5206\u9875\u6bd4\u5176\u4ed6\u65b9\u6848\u66f4\u590d\u6742\u3002\u5b83\u8fd8\u8981\u6c42\u7ed3\u679c\u96c6\u5448\u73b0\u56fa\u5b9a\u7684\u987a\u5e8f\uff0c\u5e76\u4e14\u4e0d\u5141\u8bb8\u5ba2\u6237\u7aef\u4efb\u610f\u7d22\u5f15\u7ed3\u679c\u96c6\u3002\u4f46\u662f\uff0c\u5b83\u786e\u5b9e\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u597d\u5904\uff1a \u63d0\u4f9b\u4e00\u81f4\u7684\u5206\u9875\u89c6\u56fe\u3002\u5f53\u6070\u5f53\u5730\u4f7f\u7528\u65f6\uff0c CursorPagination \u53ef\u4ee5\u786e\u4fdd\u5ba2\u6237\u7aef\u5728\u7ffb\u9605\u8bb0\u5f55\u65f6\u6c38\u8fdc\u4e0d\u4f1a\u770b\u5230\u540c\u4e00\u4e2a\u9879\u76ee\u4e24\u6b21\uff0c\u5373\u4f7f\u5728\u5206\u9875\u8fc7\u7a0b\u4e2d\u5176\u4ed6\u5ba2\u6237\u7aef\u6b63\u5728\u63d2\u5165\u65b0\u7684\u9879\u76ee\u65f6\u4ea6\u662f\u5982\u6b64\u3002 \u652f\u6301\u4f7f\u7528\u975e\u5e38\u5927\u7684\u6570\u636e\u96c6\u3002\u5bf9\u4e8e\u6781\u5176\u5e9e\u5927\u7684\u6570\u636e\u96c6\uff0c\u4f7f\u7528\u57fa\u4e8eoffset\u7684\u5206\u9875\u6837\u5f0f\u8fdb\u884c\u5206\u9875\u53ef\u80fd\u4f1a\u53d8\u5f97\u6548\u7387\u4f4e\u4e0b\u6216\u65e0\u6cd5\u4f7f\u7528\u3002\u57fa\u4e8ecursor\u7684\u5206\u9875\u65b9\u6848\u5177\u6709\u56fa\u5b9a\u65f6\u95f4\u7684\u5c5e\u6027\uff0c\u5e76\u4e14\u4e0d\u4f1a\u968f\u7740\u6570\u636e\u96c6\u5927\u5c0f\u7684\u589e\u52a0\u800c\u51cf\u6162\u3002 Details and limitations \u6b63\u786e\u4f7f\u7528\u57fa\u4e8ecursor\u7684\u5206\u9875\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\u3002\u4f60\u9700\u8981\u8003\u8651\u4f60\u5e0c\u671b\u8be5\u65b9\u6848\u9002\u7528\u4e8e\u4ec0\u4e48\u6837\u7684\u987a\u5e8f\u3002\u9ed8\u8ba4\u503c\u662f\u6309 \"-created\" \u6392\u5e8f\u3002\u8fd9\u5047\u8bbe\u6a21\u578b\u5b9e\u4f8b\u4e0a \u5fc5\u987b\u6709\u4e00\u4e2a\u201ccreated\u201d\u65f6\u95f4\u6233\u5b57\u6bb5 \uff0c\u5e76\u4e14\u5c06\u5448\u73b0\u4e00\u4e2a\u201ctimeline\u201d\u6837\u5f0f\u7684\uff0c\u6700\u65b0\u6dfb\u52a0\u7684\u9879\u5728\u524d\u9762\u7684\u5206\u9875\u89c6\u56fe\u3002 \u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\u5206\u9875\u7c7b\u4e2d\u7684 'ordering' \u5c5e\u6027\uff0c\u6216\u5c06 OrderingFilter \u7b5b\u9009\u5668\u7c7b\u4e0e CursorPagination \u4e00\u8d77\u4f7f\u7528\u6765\u4fee\u6539\u6392\u5e8f\u3002\u5f53\u4e0e OrderingFilter \u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u60a8\u5e94\u8be5\u8003\u8651\u4e25\u683c\u9650\u5236\u7528\u6237\u53ef\u4ee5\u6309\u5176\u6392\u5e8f\u7684\u5b57\u6bb5\u3002 \u6b63\u786e\u4f7f\u7528cursor\u5206\u9875\u5e94\u4f7f\u7528\u6709\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6392\u5e8f\u5b57\u6bb5\uff1a \u5e94\u5f53\u662f\u4e00\u4e2a\u4e0d\u53d8\u7684\u503c\uff0c\u4f8b\u5982\u65f6\u95f4\u6233\u3001slug\u6216\u5176\u4ed6\u5728\u521b\u5efa\u65f6\u53ea\u8bbe\u7f6e\u4e00\u6b21\u7684\u5b57\u6bb5\u3002 \u5e94\u5f53\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u6216\u8005\u51e0\u4e4e\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\u6beb\u79d2\u7cbe\u5ea6\u7684\u65f6\u95f4\u6233\u5c31\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002cursor\u5206\u9875\u7684\u8fd9\u79cd\u5b9e\u73b0\u4f7f\u7528\u4e86\u4e00\u79cd\u667a\u80fd\u7684\"position plus offset\" \u6837\u5f0f\uff0c\u5141\u8bb8\u5b83\u6b63\u786e\u5730\u652f\u6301\u4e0d\u4e25\u683c\u552f\u4e00\u7684\u503c\u4f5c\u4e3a\u6392\u5e8f\u3002 \u5e94\u5f53\u4e3a\u53ef\u5f3a\u5236\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u7684\u4e0d\u53ef\u4e3anull\u7684\u503c\u3002 \u4e0d\u5e94\u5f53\u662f\u6d6e\u70b9\u6570\u3002\u7cbe\u5ea6\u8bef\u5dee\u5bb9\u6613\u5bfc\u81f4\u4e0d\u6b63\u786e\u7684\u7ed3\u679c\u3002\u63d0\u793a\uff1a\u6539\u7528\u5c0f\u6570\u3002\uff08\u5982\u679c\u5df2\u7ecf\u6709\u4e00\u4e2a\u6d6e\u70b9\u6570\u5b57\u6bb5\uff0c\u5e76\u4e14\u5fc5\u987b\u6839\u636e\u5b83\u8fdb\u884c\u5206\u9875\uff0c\u90a3\u4e48 \u8fd9\u91cc\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528\u5c0f\u6570\u9650\u5236\u7cbe\u5ea6\u7684 CursorPagination \u5b50\u7c7b\u793a\u4f8b\u3002 \uff09 \u5b57\u6bb5\u5e94\u5177\u6709\u6570\u636e\u5e93\u7d22\u5f15\u3002 \u4f7f\u7528\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u7ea6\u675f\u7684\u6392\u5e8f\u5b57\u6bb5\u901a\u5e38\u4ecd\u7136\u6709\u6548\uff0c\u4f46\u662f\u60a8\u5c06\u5931\u53bb\u6e38\u6807\u5206\u9875\u7684\u4e00\u4e9b\u597d\u5904\u3002 \u5173\u4e8e\u6211\u4eec\u7528\u4e8e\u6e38\u6807\u5206\u9875\u7684\u5b9e\u73b0\u7684\u66f4\u591a\u6280\u672f\u7ec6\u8282\uff0c \"Building cursors for the Disqus API\" \u535a\u5ba2\u6587\u7ae0\u5bf9\u57fa\u672c\u65b9\u6cd5\u8fdb\u884c\u4e86\u5f88\u597d\u7684\u6982\u8ff0\u3002 Setup \uff08\u8bbe\u7f6e\uff09 \u4e3a\u4e86\u5168\u5c40\u542f\u7528 CursorPagination \u6837\u5f0f\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\uff0c\u6839\u636e\u9700\u8981\u4fee\u6539 PAGE_SIZE \uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination', 'PAGE_SIZE': 100 } \u5728 GenericAPIView \u5b50\u7c7b\u4e2d\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e pagination_class \u5c5e\u6027\uff0c\u4ee5\u5728\u6bcf\u4e2a\u89c6\u56fe\u7684\u57fa\u7840\u4e0a\u9009\u62e9 CursorPagination \u3002 Configuration (\u914d\u7f6e) CursorPagination \u7c7b\u5305\u542b\u8bb8\u591a\u53ef\u4ee5\u91cd\u5199\u4ee5\u4fee\u6539\u5206\u9875\u6837\u5f0f\u7684\u5c5e\u6027\uff0c\u3002 \u4e3a\u4e86\u8bbe\u7f6e\u8fd9\u4e9b\u5c5e\u6027\uff0c\u9700\u8981\u91cd\u5199 CursorPagination \u7c7b\uff0c\u7136\u540e\u5982\u4e0a\u6240\u8ff0\u542f\u7528\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\u3002 page_size = \u8868\u793a PAGE_SIZE \u7684\u6570\u503c\u3002\u5982\u679c\u8bbe\u7f6e\uff0c\u5219\u8986\u76d6\u9875\u9762\u5927\u5c0f\u8bbe\u7f6e\u3002\u9ed8\u8ba4\u4e3a\u4e0e PAGE_SIZE \u8bbe\u7f6e\u952e\u76f8\u540c\u7684\u503c\u3002 cursor_query_param = \u5b57\u7b26\u4e32\u503c\uff0c\u6307\u793a\u201ccursor\u201d\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a 'cursor' \u3002 ordering = \u8fd9\u5e94\u5f53\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u6307\u793a\u5c06\u5bf9\u5176\u5e94\u7528\u57fa\u4e8ecursor\u7684\u5206\u9875\u7684\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a ordering='slug' \u3002\u9ed8\u8ba4\u4e3a -created \u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728\u89c6\u56fe\u4e0a\u4f7f\u7528 OrderingFilter \u8986\u76d6\u6b64\u503c\u3002 template = \u5728\u53ef\u6d4f\u89c8API\u4e2d\u5448\u73b0\u5206\u9875\u63a7\u4ef6\u65f6\u8981\u4f7f\u7528\u7684\u6a21\u677f\u7684\u540d\u79f0\u3002\u53ef\u4ee5\u91cd\u5199\u4ee5\u4fee\u6539\u5448\u73b0\u6837\u5f0f\uff0c\u6216\u8bbe\u7f6e\u4e3a\u201c\u65e0\u201d\u4ee5\u5b8c\u5168\u7981\u7528HTML\u5206\u9875\u63a7\u4ef6\u3002\u9ed8\u8ba4\u4e3a \"rest_framework/pagination/previous_and_next.html\" \u3002 Custom pagination styles (\u81ea\u5b9a\u4e49\u5206\u9875\u6837\u5f0f) \u4e3a\u4e86\u521b\u5efa\u81ea\u5b9a\u4e49\u5206\u9875\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\uff0c\u5e94\u5c06 pagination.BasePagination \u5b50\u7c7b\u5316\uff0c\u5e76\u91cd\u5199 paginate_queryset(self, queryset, request, view=None) \u548c get_paginated_response(self, data) \u65b9\u6cd5\uff1a paginate_queryset \u65b9\u6cd5\u88ab\u4f20\u9012\u7ed9\u521d\u59cb\u7684queryset\uff0c\u5b83\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2aiterable\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ea\u5305\u542b\u8bf7\u6c42\u9875\u4e2d\u7684\u6570\u636e\u3002 The get_paginated_response m\u65b9\u6cd5\u4f20\u9012\u5e8f\u5217\u5316\u7684\u9875\u6570\u636e\uff0c\u5e76\u5e94\u8fd4\u56de\u4e00\u4e2a Response \u3002 \u6ce8\u610f\uff0c paginate_queryset \u65b9\u6cd5\u53ef\u80fd\u4f1a\u5728\u5206\u9875\u5b9e\u4f8b\u4e0a\u8bbe\u7f6estate\uff0c\u8be5state \uff08\uff1f\uff09\u7a0d\u540e\u53ef\u80fd\u4f1a\u7531 get_paginated_response \u65b9\u6cd5\u4f7f\u7528\u3002 Example \u5047\u8bbe\u6211\u4eec\u60f3\u7528\u4e00\u4e2a\u4fee\u6539\u8fc7\u7684\u683c\u5f0f\u66ff\u6362\u9ed8\u8ba4\u7684\u5206\u9875\u8f93\u51fa\u6837\u5f0f\uff0c\u8be5\u683c\u5f0f\u5728\u5d4c\u5957\u7684\u201clinks\u201d\u952e\u4e2d\u5305\u542b\u4e0b\u4e00\u9875\u548c\u4e0a\u4e00\u9875\u7684\u94fe\u63a5\u3002\u6211\u4eec\u53ef\u4ee5\u89c4\u5b9a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\uff0c\u5982\u4e0b\u6240\u793a\uff1a class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.count, 'results': data }) \u7136\u540e\u6211\u4eec\u9700\u8981\u5728\u914d\u7f6e\u4e2d\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7c7b\uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.CustomPagination', 'PAGE_SIZE': 100 } \u6ce8\u610f\uff0c\u5982\u679c\u60a8\u5173\u5fc3\u5728\u53ef\u6d4f\u89c8API\u4e2d\u5982\u4f55\u5728\u54cd\u5e94\u4e2d\u663e\u793a\u952e\u7684\u987a\u5e8f\uff0c\u90a3\u4e48\u5728\u6784\u9020\u5206\u9875\u54cd\u5e94\u4e3b\u4f53\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u9009\u62e9\u4f7f\u7528 OrderedDict \uff0c\u4f46\u8fd9\u662f\u53ef\u9009\u7684\u3002 Using your custom pagination class \uff08\u4f7f\u7528\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\uff09 \u4e3a\u4e86\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\uff0c\u8bf7\u4f7f\u7528 DEFAULT_PAGINATION_CLASS \u8bbe\u7f6e\uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.LinkHeaderPagination', 'PAGE_SIZE': 100 } \u5217\u8868\u7ec8\u7aef\u7684API\u54cd\u5e94\u73b0\u5728\u5c06\u5305\u62ec\u4e00\u4e2a Link \u5934\uff0c\u800c\u4e0d\u662f\u5c06\u5206\u9875\u94fe\u63a5\u4f5c\u4e3a\u54cd\u5e94\u6b63\u6587\u7684\u4e00\u90e8\u5206\uff0c\u4f8b\u5982\uff1a A custom pagination style, using the 'Link' header' Pagination & schemas \uff08\u5206\u9875\u548c\u6a21\u5f0f\uff09 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u5e94\u7528 get_schema_fields() \u65b9\u6cd5\uff0c\u4f7f\u5206\u9875\u63a7\u4ef6\u53ef\u7528\u4e8eREST\u6846\u67b6\u63d0\u4f9b\u7684\u6a21\u5f0f\u81ea\u52a8\u751f\u6210\u3002\u6b64\u65b9\u6cd5\u5e94\u5f53\u6709\u4ee5\u4e0b\u7b7e\u540d\uff1a get_schema_fields(self, view) \u6b64\u65b9\u6cd5\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2acoreapi.Field\u5b9e\u4f8b\u7684\u5217\u8868\u3002 HTML pagination controls \uff08HTML\u5206\u9875\u63a7\u4ef6\uff09 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u5206\u9875\u7c7b\u5c06\u5bfc\u81f4HTML\u5206\u9875\u63a7\u4ef6\u5728\u53ef\u6d4f\u89c8\u7684API\u4e2d\u663e\u793a\u3002\u6709\u4e24\u79cd\u5185\u7f6e\u7684\u663e\u793a\u6837\u5f0f\u3002 PageNumberPagination \u548c LimitOffsetPagination \u7c7b\u663e\u793a\u5e26\u6709\u4e0a\u4e00\u9875\u548c\u4e0b\u4e00\u9875\u63a7\u4ef6\u7684\u9875\u7801\u5217\u8868\u3002 CursorPagination \u7c7b\u663e\u793a\u7684\u6837\u5f0f\u66f4\u7b80\u5355\uff0c\u4ec5\u663e\u793a\u4e0a\u4e00\u9875\u548c\u4e0b\u4e00\u9875\u63a7\u4ef6\u3002 Customizing the controls \uff08\u81ea\u5b9a\u4e49\u63a7\u4ef6) \u60a8\u53ef\u4ee5\u91cd\u5199\u5448\u73b0HTML\u5206\u9875\u63a7\u4ef6\u7684\u6a21\u677f\u3002\u4e24\u79cd\u5185\u7f6e\u6837\u5f0f\u662f\uff1a rest_framework/pagination/numbers.html rest_framework/pagination/previous_and_next.html \u5728\u5168\u5c40\u6a21\u677f\u76ee\u5f55\u4e2d\u63d0\u4f9b\u5177\u6709\u8fd9\u4e9b\u8def\u5f84\u4e4b\u4e00\u7684\u6a21\u677f\u5c06\u8986\u76d6\u76f8\u5173\u5206\u9875\u7c7b\u7684\u9ed8\u8ba4\u6e32\u67d3\u3002 \u6216\u8005\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b8c\u5168\u7981\u7528HTML\u5206\u9875\u63a7\u4ef6\uff1a\u5c06\u73b0\u6709\u7c7b\u7684\u5b50\u7c7b\u5316\uff0c\u5c06 template = None \u8bbe\u7f6e\u4e3a\u8be5\u7c7b\u7684\u5c5e\u6027\u3002\u7136\u540e\uff0c\u60a8\u9700\u8981\u914d\u7f6e DEFAULT_PAGINATION_CLASS \u8bbe\u7f6e\u952e\uff0c\u4ee5\u5c06\u81ea\u5b9a\u4e49\u7c7b\u4f5c\u4e3a\u9ed8\u8ba4\u7684\u5206\u9875\u6837\u5f0f\u4f7f\u7528\u3002 Low-level API \u5f53 display_page_controls \u5c5e\u6027\u5728\u5206\u9875\u5b9e\u4f8b\u4e2d\u65f6\uff0c\u51b3\u5b9a\u5206\u9875\u7c7b\u662f\u5426\u663e\u793a\u63a7\u4ef6\u7684\u4f4e\u7ea7API\u88ab\u66b4\u9732\u51fa\u6765\u3002\u5982\u679c\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\u8981\u6c42\u663e\u793aHTML\u5206\u9875\u63a7\u4ef6\uff0c\u5219\u5e94\u5728 paginate_queryset \u65b9\u6cd5\u4e2d\u5c06\u5176\u8bbe\u7f6e\u4e3a True \u3002 .to_html() \u548c .get_html_context() \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u5728\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\u4e2d\u91cd\u5199\uff0c\u4ee5\u4fbf\u8fdb\u4e00\u6b65\u81ea\u5b9a\u4e49\u63a7\u4ef6\u7684\u6e32\u67d3\u65b9\u5f0f\u3002 Third party packages The following third party packages are also available. DRF-extensions The DRF-extensions package includes a PaginateByMaxMixin mixin class that allows your API clients to specify ?page_size=max to obtain the maximum allowed page size. drf-proxy-pagination The drf-proxy-pagination package includes a ProxyPagination class which allows to choose pagination class with a query parameter.","title":"Pagination"},{"location":"api-guide/pagination_zh/#pagination","text":"Django provides a few classes that help you manage paginated data \u2013 that is, data that\u2019s split across several pages, with \u201cPrevious/Next\u201d links. \u2014 Django \u6587\u6863 REST\u6846\u67b6\u5305\u62ec\u5bf9\u53ef\u5b9a\u5236\u7684\u5206\u9875\u6837\u5f0f\u7684\u652f\u6301\u3002 \u8fd9\u4f7f\u60a8\u53ef\u4ee5\u8c03\u6574\u4f7f\u5927\u578b\u7ed3\u679c\u96c6\u88ab\u62c6\u5206\u4e3a\u5355\u72ec\u7684\u6570\u636e\u9875\u9762\u3002 \u5206\u9875API\u53ef\u4ee5\u652f\u6301\u4ee5\u4e0b\u4e24\u8005\u4e4b\u4e00\uff1a \u4f5c\u4e3a\u54cd\u5e94\u5185\u5bb9\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\u7684\u5206\u9875\u94fe\u63a5\u3002 \u5305\u542b\u5728\u54cd\u5e94\u6807\u5934\u4e2d\u7684\u5206\u9875\u94fe\u63a5\uff0c\u4f8b\u5982 Content-Range \u6216 Link \u3002 \u5f53\u524d\u5185\u7f6e\u6837\u5f0f\u90fd\u4f7f\u7528\u4f5c\u4e3a\u54cd\u5e94\u5185\u5bb9\u4e00\u90e8\u5206\u7684\u94fe\u63a5\u3002\u5f53\u4f7f\u7528\u53ef\u6d4f\u89c8\u7684API\u65f6\uff0c\u8fd9\u79cd\u6837\u5f0f\u66f4\u5bb9\u6613\u8bbf\u95ee\u3002 \u53ea\u6709\u5728\u4f7f\u7528\u5e38\u89c4\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u65f6\u624d\u81ea\u52a8\u6267\u884c\u5206\u9875\u3002\u5982\u679c\u4f7f\u7528\u7684\u662f\u5e38\u89c4\u7684 APIView \uff0c\u5219\u9700\u8981\u81ea\u884c\u8c03\u7528\u5206\u9875API\u4ee5\u786e\u4fdd\u8fd4\u56de\u5206\u9875\u7684\u54cd\u5e94\u3002\u8bf7\u53c2\u89c1 mixins.ListModelMixin \u4ee5\u53ca generics.GenericAPIView \u7c7b\u4f5c\u4e3a\u793a\u4f8b\u3002 Pagination can be turned off by setting the pagination class to None . \u53ef\u4ee5\u901a\u8fc7\u5c06Pagination\u7c7b\u8bbe\u7f6e\u4e3a None \u6765\u5173\u95ed\u5206\u9875\u3002","title":"Pagination (\u5206\u9875)"},{"location":"api-guide/pagination_zh/#setting-the-pagination-style","text":"\u53ef\u4ee5\u4f7f\u7528 DEFAULT_PAGINATION_CLASS \u548c PAGE_SIZE \u8bbe\u7f6e\u952e\u5168\u5c40\u8bbe\u7f6e\u5206\u9875\u6837\u5f0f\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u4f7f\u7528\u5185\u7f6e\u7684\u9650\u5236/\u504f\u79fb\u5206\u9875\uff0c\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 100 } \u6ce8\u610f\uff0c\u60a8\u9700\u8981\u540c\u65f6\u8bbe\u7f6e\u5206\u9875\u7c7b\u548c\u5e94\u8be5\u4f7f\u7528\u7684\u9875\u9762\u5927\u5c0f\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c DEFAULT_PAGINATION_CLASS \u548c PAGE_SIZE \u5747\u4e3a None \u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528 pagination_class \u5c5e\u6027\u5728\u5355\u4e2a\u89c6\u56fe\u4e0a\u8bbe\u7f6e\u5206\u9875\u7c7b\u3002\u901a\u5e38\uff0c\u60a8\u5e0c\u671b\u5728\u6574\u4e2aAPI\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u5206\u9875\u6837\u5f0f\uff0c\u5c3d\u7ba1\u60a8\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u6bcf\u4e2a\u89c6\u56fe\u6539\u53d8\u5206\u9875\u7684\u5404\u4e2a\u65b9\u9762\uff0c\u4f8b\u5982\u9ed8\u8ba4\u6216\u6700\u5927\u9875\u9762\u5927\u5c0f\u3002","title":"Setting the pagination style (\u8bbe\u7f6e\u5206\u9875\u6837\u5f0f)"},{"location":"api-guide/pagination_zh/#modifying-the-pagination-style","text":"\u5982\u679c\u8981\u4fee\u6539\u5206\u9875\u6837\u5f0f\u7684\u7279\u5b9a\u65b9\u9762\uff0c\u5219\u9700\u8981\u91cd\u5199\u5176\u4e2d\u4e00\u4e2a\u5206\u9875\u7c7b\uff0c\u5e76\u8bbe\u7f6e\u8981\u66f4\u6539\u7684\u5c5e\u6027\u3002 class LargeResultsSetPagination(PageNumberPagination): page_size = 1000 page_size_query_param = 'page_size' max_page_size = 10000 class StandardResultsSetPagination(PageNumberPagination): page_size = 100 page_size_query_param = 'page_size' max_page_size = 1000 \u7136\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 .pagination_class \u5c5e\u6027\u5c06\u65b0\u6837\u5f0f\u5e94\u7528\u4e8e\u89c6\u56fe\uff1a class BillingRecordsView(generics.ListAPIView): queryset = Billing.objects.all() serializer_class = BillingRecordsSerializer pagination_class = LargeResultsSetPagination \u6216\u8005\u4f7f\u7528\u9ed8\u8ba4\u7684 DEFAULT_PAGINATION_CLASS \u8bbe\u7f6e\u952e\u5168\u5c40\u5e94\u7528\u6837\u5f0f\u3002\u4f8b\u5982\uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'apps.core.pagination.StandardResultsSetPagination' }","title":"Modifying the pagination style (\u8c03\u6574\u5206\u9875\u6837\u5f0f)"},{"location":"api-guide/pagination_zh/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/pagination_zh/#pagenumberpagination","text":"\u6b64\u5206\u9875\u6837\u5f0f\u63a5\u53d7\u8bf7\u6c42\u67e5\u8be2\u53c2\u6570\u4e2d\u7684\u5355\u4e2a\u6570\u5b57\u9875\u7801\u3002 Request : GET https://api.example.org/accounts/?page=4 Response : HTTP 200 OK { \"count\": 1023 \"next\": \"https://api.example.org/accounts/?page=5\", \"previous\": \"https://api.example.org/accounts/?page=3\", \"results\": [ \u2026 ] }","title":"PageNumberPagination"},{"location":"api-guide/pagination_zh/#setup","text":"\u4e3a\u4e86\u5168\u5c40\u542f\u7528 PageNumberPagination \u6837\u5f0f\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5e76\u6839\u636e\u9700\u8981\u8bbe\u7f6e PAGE_SIZE \uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 100 } \u5728 GenericAPIView \u5b50\u7c7b\u4e2d\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e pagination_class \u5c5e\u6027\uff0c\u4ee5\u5728\u6bcf\u4e2a\u89c6\u56fe\u7684\u57fa\u7840\u4e0a\u9009\u62e9 PageNumberPagination \u3002","title":"Setup (\u8bbe\u7f6e)"},{"location":"api-guide/pagination_zh/#configuration","text":"PageNumberPagination \u7c7b\u5305\u542b\u8bb8\u591a\u5c5e\u6027\uff0c\u901a\u8fc7\u91cd\u5199\u5176\u4e2d\u7684\u4e00\u4e9b\u5c5e\u6027\u53ef\u4ee5\u4fee\u6539\u5206\u9875\u5c5e\u6027 \u4e3a\u4e86\u8bbe\u7f6e\u8fd9\u4e9b\u5c5e\u6027\uff0c\u5e94\u5f53\u91cd\u5199 PageNumberPagination \u7c7b\uff0c\u7136\u540e\u5982\u4e0a\u6240\u8ff0\u542f\u7528\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\u3002 django_paginator_class \u2014\u2014 \u8981\u4f7f\u7528\u7684django paginator\u7c7b\u3002\u9ed8\u8ba4\u4e3a django.core.paginator.Paginator \uff0c\u9002\u7528\u4e8e\u5927\u591a\u6570\u60c5\u51b5\u3002 page_size \u2014\u2014 \u8868\u793a\u9875\u9762\u5927\u5c0f\u7684\u6570\u503c\u3002\u5982\u679c\u8bbe\u7f6e\uff0c\u5219\u8986\u76d6 PAGE_SIZE \u8bbe\u7f6e\u3002\u5176\u9ed8\u8ba4\u503c\u4e0e PAGE_SIZE \u8bbe\u7f6e\u952e\u76f8\u540c\u3002 page_query_param \u2014\u2014 \u4e00\u4e2a\u5b57\u7b26\u4e32\u503c\uff0c\u6307\u793a\u7528\u4e8e\u5206\u9875\u63a7\u4ef6\u7684\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002 page_size_query_param \u2014\u2014 \u5982\u679c\u8bbe\u7f6e\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u503c\uff0c\u6307\u793a\u5141\u8bb8\u5ba2\u6237\u7aef\u6839\u636e\u6bcf\u4e2a\u8bf7\u6c42\u8bbe\u7f6e\u9875\u9762\u5927\u5c0f\u7684\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3a None \uff0c\u8868\u793a\u5ba2\u6237\u7aef\u53ef\u80fd\u65e0\u6cd5\u63a7\u5236\u8bf7\u6c42\u7684\u9875\u9762\u5927\u5c0f\u3002 max_page_size \u2014\u2014 \u5982\u679c\u8bbe\u7f6e\uff0c\u8fd9\u662f\u4e00\u4e2a\u6570\u5b57\u503c\uff0c\u6307\u793a\u5141\u8bb8\u7684\u6700\u5927\u8bf7\u6c42\u9875\u9762\u5927\u5c0f\u3002\u6b64\u5c5e\u6027\u4ec5\u5728\u8bbe\u7f6e\u4e86 page_size_query_param \u65f6\u6709\u6548\u3002 last_page_strings \u2014\u2014 \u4e00\u4e2a\u5b57\u7b26\u4e32\u503c\u7684\u5217\u8868\u6216\u5143\u7ec4\uff0c\u6307\u793a\u53ef\u4e0e page_query_param \u4e00\u8d77\u4f7f\u7528\u7684\u503c\uff0c\u4ee5\u8bf7\u6c42\u96c6\u5408\u4e2d\u7684\u6700\u540e\u4e00\u9875\u3002\u9ed8\u8ba4\u4e3a ('last',) \u3002 template \u2014\u2014 \u5728\u53ef\u6d4f\u89c8API\u4e2d\u5448\u73b0\u5206\u9875\u63a7\u4ef6\u65f6\u8981\u4f7f\u7528\u7684\u6a21\u677f\u540d\u79f0\u3002\u53ef\u4ee5\u91cd\u5199\u4ee5\u4fee\u6539\u5448\u73b0\u6837\u5f0f\uff0c\u6216\u8bbe\u7f6e\u4e3a None \u4ee5\u5b8c\u5168\u7981\u7528HTML\u5206\u9875\u63a7\u4ef6\u3002\u9ed8\u8ba4\u4e3a \"rest_framework/pagination/numbers.html\" \u3002","title":"Configuration (\u914d\u7f6e)"},{"location":"api-guide/pagination_zh/#limitoffsetpagination","text":"\u8fd9\u79cd\u5206\u9875\u6837\u5f0f\u53cd\u6620\u4e86\u67e5\u627e\u591a\u4e2a\u6570\u636e\u5e93\u8bb0\u5f55\u65f6\u4f7f\u7528\u7684\u8bed\u6cd5\u3002\u5ba2\u6237\u7aef\u5305\u62ec\u201climit\u201d\u548c\u201coffset\u201d\u67e5\u8be2\u53c2\u6570\u3002limit\u6307\u793a\u8981\u8fd4\u56de\u7684\u9879\u76ee\u7684\u6700\u5927\u6570\u76ee\uff0c\u8fd9\u76f8\u5f53\u4e8e\u5176\u4ed6\u6837\u5f0f\u4e2d\u7684 page_size \u3002offset\u6307\u793a\u67e5\u8be2\u76f8\u5bf9\u4e8e\u5b8c\u6574\u7684\u672a\u5206\u9875\u9879\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 Request : GET https://api.example.org/accounts/?limit=100&offset=400 Response : HTTP 200 OK { \"count\": 1023 \"next\": \"https://api.example.org/accounts/?limit=100&offset=500\", \"previous\": \"https://api.example.org/accounts/?limit=100&offset=300\", \"results\": [ \u2026 ] }","title":"LimitOffsetPagination"},{"location":"api-guide/pagination_zh/#setup_1","text":"\u4e3a\u4e86\u5168\u5c40\u542f\u7528 LimitOffsetPagination \u6837\u5f0f\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination' } \u53ef\u9009\u5730\uff0c\u60a8\u4e5f\u53ef\u4ee5\u8bbe\u7f6e PAGE_SIZE \u952e\u3002\u5982\u679c\u8fd8\u4f7f\u7528\u4e86 PAGE_SIZE \u53c2\u6570\uff0c\u90a3\u4e48 limit query\u53c2\u6570\u5c06\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u5ba2\u6237\u7aef\u5ffd\u7565\u3002 \u5728 GenericAPIView \u5b50\u7c7b\u4e2d\uff0c\u60a8\u8fd8\u53ef\u4ee5\u8bbe\u7f6e pagination_class \u5c5e\u6027\uff0c\u4ee5\u4fbf\u5728\u6bcf\u4e2a\u89c6\u56fe\u7684\u57fa\u7840\u4e0a\u9009\u62e9 LimitOffsetPagination \u3002","title":"Setup (\u8bbe\u7f6e)"},{"location":"api-guide/pagination_zh/#configuration_1","text":"LimitOffsetPagination \u7c7b\u5305\u542b\u8bb8\u591a\u53ef\u4ee5\u91cd\u5199\u4ee5\u4fee\u6539\u5206\u9875\u6837\u5f0f\u7684\u5c5e\u6027\u3002 \u4e3a\u4e86\u8bbe\u7f6e\u8fd9\u4e9b\u5c5e\u6027\uff0c\u9700\u8981\u91cd\u5199 LimitOffsetPagination \u7c7b\uff0c\u7136\u540e\u5982\u4e0a\u6240\u8ff0\u542f\u7528\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\u3002 default_limit \u2014\u2014 \u6570\u503c\uff0c\u6307\u793a\u5728\u5ba2\u6237\u7aef\u672a\u5728\u67e5\u8be2\u53c2\u6570\u4e2d\u63d0\u4f9b\u9650\u5236\u65f6\u4f7f\u7528\u7684\u9650\u5236\u3002\u9ed8\u8ba4\u4e3a\u4e0e PAGE_SIZE \u8bbe\u7f6e\u952e\u76f8\u540c\u7684\u503c\u3002 limit_query_param \u2014\u2014 \u5b57\u7b26\u4e32\u503c\uff0c\u6307\u793a\u201climit\u201d\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a 'limit' \u3002 offset_query_param \u2014\u2014 \u5b57\u7b26\u4e32\u503c\uff0c\u6307\u793a\u201coffset\u201d\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a 'offset' \u3002 max_limit \u2014\u2014 \u5982\u679c\u8bbe\u7f6e\uff0c\u8fd9\u662f\u4e00\u4e2a\u6570\u503c\uff0c\u6307\u793a\u5ba2\u6237\u7aef\u53ef\u80fd\u8bf7\u6c42\u7684\u6700\u5927\u5141\u8bb8\u9650\u5236\u3002\u9ed8\u8ba4\u4e3a None \u3002 template \u2014\u2014 \u5728\u53ef\u6d4f\u89c8API\u4e2d\u5448\u73b0\u5206\u9875\u63a7\u4ef6\u65f6\u8981\u4f7f\u7528\u7684\u6a21\u677f\u540d\u79f0\u3002\u53ef\u4ee5\u91cd\u5199\u4ee5\u4fee\u6539\u5448\u73b0\u6837\u5f0f\uff0c\u6216\u8bbe\u7f6e\u4e3a None \u4ee5\u5b8c\u5168\u7981\u7528HTML\u5206\u9875\u63a7\u4ef6\u3002\u9ed8\u8ba4\u4e3a \"rest_framework/pagination/numbers.html\" \u3002","title":"Configuration (\u914d\u7f6e)"},{"location":"api-guide/pagination_zh/#cursorpagination","text":"\u57fa\u4e8ecursor\u7684\u5206\u9875\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u900f\u660e\u7684\u201c\u6e38\u6807\u201d\u6307\u793a\u5668\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u4f7f\u7528\u5b83\u5bf9\u7ed3\u679c\u96c6\u8fdb\u884c\u5206\u9875\u3002\u8fd9\u79cd\u5206\u9875\u6837\u5f0f\u53ea\u663e\u793a\u6b63\u5411\u548c\u53cd\u5411\u63a7\u4ef6\uff0c\u800c\u4e0d\u5141\u8bb8\u5ba2\u6237\u7aef\u5bfc\u822a\u5230\u4efb\u610f\u4f4d\u7f6e\u3002 \u57fa\u4e8ecursor\u7684\u5206\u9875\u8981\u6c42\u7ed3\u679c\u96c6\u4e2d\u7684\u9879\u5177\u6709\u552f\u4e00\u7684\u3001\u4e0d\u53d8\u7684\u987a\u5e8f\u3002\u6b64\u987a\u5e8f\u901a\u5e38\u53ef\u80fd\u662f\u8bb0\u5f55\u4e0a\u7684\u521b\u5efa\u65f6\u95f4\u6233\uff0c\u56e0\u4e3a\u5b83\u63d0\u4e3a\u5206\u9875\u4f9b\u4e86\u4e00\u81f4\u7684\u987a\u5e8f\u3002 \u57fa\u4e8ecursor\u7684\u5206\u9875\u6bd4\u5176\u4ed6\u65b9\u6848\u66f4\u590d\u6742\u3002\u5b83\u8fd8\u8981\u6c42\u7ed3\u679c\u96c6\u5448\u73b0\u56fa\u5b9a\u7684\u987a\u5e8f\uff0c\u5e76\u4e14\u4e0d\u5141\u8bb8\u5ba2\u6237\u7aef\u4efb\u610f\u7d22\u5f15\u7ed3\u679c\u96c6\u3002\u4f46\u662f\uff0c\u5b83\u786e\u5b9e\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u597d\u5904\uff1a \u63d0\u4f9b\u4e00\u81f4\u7684\u5206\u9875\u89c6\u56fe\u3002\u5f53\u6070\u5f53\u5730\u4f7f\u7528\u65f6\uff0c CursorPagination \u53ef\u4ee5\u786e\u4fdd\u5ba2\u6237\u7aef\u5728\u7ffb\u9605\u8bb0\u5f55\u65f6\u6c38\u8fdc\u4e0d\u4f1a\u770b\u5230\u540c\u4e00\u4e2a\u9879\u76ee\u4e24\u6b21\uff0c\u5373\u4f7f\u5728\u5206\u9875\u8fc7\u7a0b\u4e2d\u5176\u4ed6\u5ba2\u6237\u7aef\u6b63\u5728\u63d2\u5165\u65b0\u7684\u9879\u76ee\u65f6\u4ea6\u662f\u5982\u6b64\u3002 \u652f\u6301\u4f7f\u7528\u975e\u5e38\u5927\u7684\u6570\u636e\u96c6\u3002\u5bf9\u4e8e\u6781\u5176\u5e9e\u5927\u7684\u6570\u636e\u96c6\uff0c\u4f7f\u7528\u57fa\u4e8eoffset\u7684\u5206\u9875\u6837\u5f0f\u8fdb\u884c\u5206\u9875\u53ef\u80fd\u4f1a\u53d8\u5f97\u6548\u7387\u4f4e\u4e0b\u6216\u65e0\u6cd5\u4f7f\u7528\u3002\u57fa\u4e8ecursor\u7684\u5206\u9875\u65b9\u6848\u5177\u6709\u56fa\u5b9a\u65f6\u95f4\u7684\u5c5e\u6027\uff0c\u5e76\u4e14\u4e0d\u4f1a\u968f\u7740\u6570\u636e\u96c6\u5927\u5c0f\u7684\u589e\u52a0\u800c\u51cf\u6162\u3002","title":"CursorPagination"},{"location":"api-guide/pagination_zh/#details-and-limitations","text":"\u6b63\u786e\u4f7f\u7528\u57fa\u4e8ecursor\u7684\u5206\u9875\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\u3002\u4f60\u9700\u8981\u8003\u8651\u4f60\u5e0c\u671b\u8be5\u65b9\u6848\u9002\u7528\u4e8e\u4ec0\u4e48\u6837\u7684\u987a\u5e8f\u3002\u9ed8\u8ba4\u503c\u662f\u6309 \"-created\" \u6392\u5e8f\u3002\u8fd9\u5047\u8bbe\u6a21\u578b\u5b9e\u4f8b\u4e0a \u5fc5\u987b\u6709\u4e00\u4e2a\u201ccreated\u201d\u65f6\u95f4\u6233\u5b57\u6bb5 \uff0c\u5e76\u4e14\u5c06\u5448\u73b0\u4e00\u4e2a\u201ctimeline\u201d\u6837\u5f0f\u7684\uff0c\u6700\u65b0\u6dfb\u52a0\u7684\u9879\u5728\u524d\u9762\u7684\u5206\u9875\u89c6\u56fe\u3002 \u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\u5206\u9875\u7c7b\u4e2d\u7684 'ordering' \u5c5e\u6027\uff0c\u6216\u5c06 OrderingFilter \u7b5b\u9009\u5668\u7c7b\u4e0e CursorPagination \u4e00\u8d77\u4f7f\u7528\u6765\u4fee\u6539\u6392\u5e8f\u3002\u5f53\u4e0e OrderingFilter \u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u60a8\u5e94\u8be5\u8003\u8651\u4e25\u683c\u9650\u5236\u7528\u6237\u53ef\u4ee5\u6309\u5176\u6392\u5e8f\u7684\u5b57\u6bb5\u3002 \u6b63\u786e\u4f7f\u7528cursor\u5206\u9875\u5e94\u4f7f\u7528\u6709\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6392\u5e8f\u5b57\u6bb5\uff1a \u5e94\u5f53\u662f\u4e00\u4e2a\u4e0d\u53d8\u7684\u503c\uff0c\u4f8b\u5982\u65f6\u95f4\u6233\u3001slug\u6216\u5176\u4ed6\u5728\u521b\u5efa\u65f6\u53ea\u8bbe\u7f6e\u4e00\u6b21\u7684\u5b57\u6bb5\u3002 \u5e94\u5f53\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u6216\u8005\u51e0\u4e4e\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\u6beb\u79d2\u7cbe\u5ea6\u7684\u65f6\u95f4\u6233\u5c31\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002cursor\u5206\u9875\u7684\u8fd9\u79cd\u5b9e\u73b0\u4f7f\u7528\u4e86\u4e00\u79cd\u667a\u80fd\u7684\"position plus offset\" \u6837\u5f0f\uff0c\u5141\u8bb8\u5b83\u6b63\u786e\u5730\u652f\u6301\u4e0d\u4e25\u683c\u552f\u4e00\u7684\u503c\u4f5c\u4e3a\u6392\u5e8f\u3002 \u5e94\u5f53\u4e3a\u53ef\u5f3a\u5236\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u7684\u4e0d\u53ef\u4e3anull\u7684\u503c\u3002 \u4e0d\u5e94\u5f53\u662f\u6d6e\u70b9\u6570\u3002\u7cbe\u5ea6\u8bef\u5dee\u5bb9\u6613\u5bfc\u81f4\u4e0d\u6b63\u786e\u7684\u7ed3\u679c\u3002\u63d0\u793a\uff1a\u6539\u7528\u5c0f\u6570\u3002\uff08\u5982\u679c\u5df2\u7ecf\u6709\u4e00\u4e2a\u6d6e\u70b9\u6570\u5b57\u6bb5\uff0c\u5e76\u4e14\u5fc5\u987b\u6839\u636e\u5b83\u8fdb\u884c\u5206\u9875\uff0c\u90a3\u4e48 \u8fd9\u91cc\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528\u5c0f\u6570\u9650\u5236\u7cbe\u5ea6\u7684 CursorPagination \u5b50\u7c7b\u793a\u4f8b\u3002 \uff09 \u5b57\u6bb5\u5e94\u5177\u6709\u6570\u636e\u5e93\u7d22\u5f15\u3002 \u4f7f\u7528\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u7ea6\u675f\u7684\u6392\u5e8f\u5b57\u6bb5\u901a\u5e38\u4ecd\u7136\u6709\u6548\uff0c\u4f46\u662f\u60a8\u5c06\u5931\u53bb\u6e38\u6807\u5206\u9875\u7684\u4e00\u4e9b\u597d\u5904\u3002 \u5173\u4e8e\u6211\u4eec\u7528\u4e8e\u6e38\u6807\u5206\u9875\u7684\u5b9e\u73b0\u7684\u66f4\u591a\u6280\u672f\u7ec6\u8282\uff0c \"Building cursors for the Disqus API\" \u535a\u5ba2\u6587\u7ae0\u5bf9\u57fa\u672c\u65b9\u6cd5\u8fdb\u884c\u4e86\u5f88\u597d\u7684\u6982\u8ff0\u3002","title":"Details and limitations"},{"location":"api-guide/pagination_zh/#setup_2","text":"\u4e3a\u4e86\u5168\u5c40\u542f\u7528 CursorPagination \u6837\u5f0f\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\uff0c\u6839\u636e\u9700\u8981\u4fee\u6539 PAGE_SIZE \uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination', 'PAGE_SIZE': 100 } \u5728 GenericAPIView \u5b50\u7c7b\u4e2d\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e pagination_class \u5c5e\u6027\uff0c\u4ee5\u5728\u6bcf\u4e2a\u89c6\u56fe\u7684\u57fa\u7840\u4e0a\u9009\u62e9 CursorPagination \u3002","title":"Setup \uff08\u8bbe\u7f6e\uff09"},{"location":"api-guide/pagination_zh/#configuration_2","text":"CursorPagination \u7c7b\u5305\u542b\u8bb8\u591a\u53ef\u4ee5\u91cd\u5199\u4ee5\u4fee\u6539\u5206\u9875\u6837\u5f0f\u7684\u5c5e\u6027\uff0c\u3002 \u4e3a\u4e86\u8bbe\u7f6e\u8fd9\u4e9b\u5c5e\u6027\uff0c\u9700\u8981\u91cd\u5199 CursorPagination \u7c7b\uff0c\u7136\u540e\u5982\u4e0a\u6240\u8ff0\u542f\u7528\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\u3002 page_size = \u8868\u793a PAGE_SIZE \u7684\u6570\u503c\u3002\u5982\u679c\u8bbe\u7f6e\uff0c\u5219\u8986\u76d6\u9875\u9762\u5927\u5c0f\u8bbe\u7f6e\u3002\u9ed8\u8ba4\u4e3a\u4e0e PAGE_SIZE \u8bbe\u7f6e\u952e\u76f8\u540c\u7684\u503c\u3002 cursor_query_param = \u5b57\u7b26\u4e32\u503c\uff0c\u6307\u793a\u201ccursor\u201d\u67e5\u8be2\u53c2\u6570\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u4e3a 'cursor' \u3002 ordering = \u8fd9\u5e94\u5f53\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u6307\u793a\u5c06\u5bf9\u5176\u5e94\u7528\u57fa\u4e8ecursor\u7684\u5206\u9875\u7684\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a ordering='slug' \u3002\u9ed8\u8ba4\u4e3a -created \u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728\u89c6\u56fe\u4e0a\u4f7f\u7528 OrderingFilter \u8986\u76d6\u6b64\u503c\u3002 template = \u5728\u53ef\u6d4f\u89c8API\u4e2d\u5448\u73b0\u5206\u9875\u63a7\u4ef6\u65f6\u8981\u4f7f\u7528\u7684\u6a21\u677f\u7684\u540d\u79f0\u3002\u53ef\u4ee5\u91cd\u5199\u4ee5\u4fee\u6539\u5448\u73b0\u6837\u5f0f\uff0c\u6216\u8bbe\u7f6e\u4e3a\u201c\u65e0\u201d\u4ee5\u5b8c\u5168\u7981\u7528HTML\u5206\u9875\u63a7\u4ef6\u3002\u9ed8\u8ba4\u4e3a \"rest_framework/pagination/previous_and_next.html\" \u3002","title":"Configuration (\u914d\u7f6e)"},{"location":"api-guide/pagination_zh/#custom-pagination-styles","text":"\u4e3a\u4e86\u521b\u5efa\u81ea\u5b9a\u4e49\u5206\u9875\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\uff0c\u5e94\u5c06 pagination.BasePagination \u5b50\u7c7b\u5316\uff0c\u5e76\u91cd\u5199 paginate_queryset(self, queryset, request, view=None) \u548c get_paginated_response(self, data) \u65b9\u6cd5\uff1a paginate_queryset \u65b9\u6cd5\u88ab\u4f20\u9012\u7ed9\u521d\u59cb\u7684queryset\uff0c\u5b83\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2aiterable\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ea\u5305\u542b\u8bf7\u6c42\u9875\u4e2d\u7684\u6570\u636e\u3002 The get_paginated_response m\u65b9\u6cd5\u4f20\u9012\u5e8f\u5217\u5316\u7684\u9875\u6570\u636e\uff0c\u5e76\u5e94\u8fd4\u56de\u4e00\u4e2a Response \u3002 \u6ce8\u610f\uff0c paginate_queryset \u65b9\u6cd5\u53ef\u80fd\u4f1a\u5728\u5206\u9875\u5b9e\u4f8b\u4e0a\u8bbe\u7f6estate\uff0c\u8be5state \uff08\uff1f\uff09\u7a0d\u540e\u53ef\u80fd\u4f1a\u7531 get_paginated_response \u65b9\u6cd5\u4f7f\u7528\u3002","title":"Custom pagination styles (\u81ea\u5b9a\u4e49\u5206\u9875\u6837\u5f0f)"},{"location":"api-guide/pagination_zh/#example","text":"\u5047\u8bbe\u6211\u4eec\u60f3\u7528\u4e00\u4e2a\u4fee\u6539\u8fc7\u7684\u683c\u5f0f\u66ff\u6362\u9ed8\u8ba4\u7684\u5206\u9875\u8f93\u51fa\u6837\u5f0f\uff0c\u8be5\u683c\u5f0f\u5728\u5d4c\u5957\u7684\u201clinks\u201d\u952e\u4e2d\u5305\u542b\u4e0b\u4e00\u9875\u548c\u4e0a\u4e00\u9875\u7684\u94fe\u63a5\u3002\u6211\u4eec\u53ef\u4ee5\u89c4\u5b9a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\uff0c\u5982\u4e0b\u6240\u793a\uff1a class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.count, 'results': data }) \u7136\u540e\u6211\u4eec\u9700\u8981\u5728\u914d\u7f6e\u4e2d\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7c7b\uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.CustomPagination', 'PAGE_SIZE': 100 } \u6ce8\u610f\uff0c\u5982\u679c\u60a8\u5173\u5fc3\u5728\u53ef\u6d4f\u89c8API\u4e2d\u5982\u4f55\u5728\u54cd\u5e94\u4e2d\u663e\u793a\u952e\u7684\u987a\u5e8f\uff0c\u90a3\u4e48\u5728\u6784\u9020\u5206\u9875\u54cd\u5e94\u4e3b\u4f53\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u9009\u62e9\u4f7f\u7528 OrderedDict \uff0c\u4f46\u8fd9\u662f\u53ef\u9009\u7684\u3002","title":"Example"},{"location":"api-guide/pagination_zh/#using-your-custom-pagination-class","text":"\u4e3a\u4e86\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\uff0c\u8bf7\u4f7f\u7528 DEFAULT_PAGINATION_CLASS \u8bbe\u7f6e\uff1a REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.LinkHeaderPagination', 'PAGE_SIZE': 100 } \u5217\u8868\u7ec8\u7aef\u7684API\u54cd\u5e94\u73b0\u5728\u5c06\u5305\u62ec\u4e00\u4e2a Link \u5934\uff0c\u800c\u4e0d\u662f\u5c06\u5206\u9875\u94fe\u63a5\u4f5c\u4e3a\u54cd\u5e94\u6b63\u6587\u7684\u4e00\u90e8\u5206\uff0c\u4f8b\u5982\uff1a A custom pagination style, using the 'Link' header'","title":"Using your custom pagination class \uff08\u4f7f\u7528\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\uff09"},{"location":"api-guide/pagination_zh/#pagination-schemas","text":"\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5e94\u7528 get_schema_fields() \u65b9\u6cd5\uff0c\u4f7f\u5206\u9875\u63a7\u4ef6\u53ef\u7528\u4e8eREST\u6846\u67b6\u63d0\u4f9b\u7684\u6a21\u5f0f\u81ea\u52a8\u751f\u6210\u3002\u6b64\u65b9\u6cd5\u5e94\u5f53\u6709\u4ee5\u4e0b\u7b7e\u540d\uff1a get_schema_fields(self, view) \u6b64\u65b9\u6cd5\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2acoreapi.Field\u5b9e\u4f8b\u7684\u5217\u8868\u3002","title":"Pagination &amp; schemas \uff08\u5206\u9875\u548c\u6a21\u5f0f\uff09"},{"location":"api-guide/pagination_zh/#html-pagination-controls-html","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u5206\u9875\u7c7b\u5c06\u5bfc\u81f4HTML\u5206\u9875\u63a7\u4ef6\u5728\u53ef\u6d4f\u89c8\u7684API\u4e2d\u663e\u793a\u3002\u6709\u4e24\u79cd\u5185\u7f6e\u7684\u663e\u793a\u6837\u5f0f\u3002 PageNumberPagination \u548c LimitOffsetPagination \u7c7b\u663e\u793a\u5e26\u6709\u4e0a\u4e00\u9875\u548c\u4e0b\u4e00\u9875\u63a7\u4ef6\u7684\u9875\u7801\u5217\u8868\u3002 CursorPagination \u7c7b\u663e\u793a\u7684\u6837\u5f0f\u66f4\u7b80\u5355\uff0c\u4ec5\u663e\u793a\u4e0a\u4e00\u9875\u548c\u4e0b\u4e00\u9875\u63a7\u4ef6\u3002","title":"HTML pagination controls \uff08HTML\u5206\u9875\u63a7\u4ef6\uff09"},{"location":"api-guide/pagination_zh/#customizing-the-controls","text":"\u60a8\u53ef\u4ee5\u91cd\u5199\u5448\u73b0HTML\u5206\u9875\u63a7\u4ef6\u7684\u6a21\u677f\u3002\u4e24\u79cd\u5185\u7f6e\u6837\u5f0f\u662f\uff1a rest_framework/pagination/numbers.html rest_framework/pagination/previous_and_next.html \u5728\u5168\u5c40\u6a21\u677f\u76ee\u5f55\u4e2d\u63d0\u4f9b\u5177\u6709\u8fd9\u4e9b\u8def\u5f84\u4e4b\u4e00\u7684\u6a21\u677f\u5c06\u8986\u76d6\u76f8\u5173\u5206\u9875\u7c7b\u7684\u9ed8\u8ba4\u6e32\u67d3\u3002 \u6216\u8005\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b8c\u5168\u7981\u7528HTML\u5206\u9875\u63a7\u4ef6\uff1a\u5c06\u73b0\u6709\u7c7b\u7684\u5b50\u7c7b\u5316\uff0c\u5c06 template = None \u8bbe\u7f6e\u4e3a\u8be5\u7c7b\u7684\u5c5e\u6027\u3002\u7136\u540e\uff0c\u60a8\u9700\u8981\u914d\u7f6e DEFAULT_PAGINATION_CLASS \u8bbe\u7f6e\u952e\uff0c\u4ee5\u5c06\u81ea\u5b9a\u4e49\u7c7b\u4f5c\u4e3a\u9ed8\u8ba4\u7684\u5206\u9875\u6837\u5f0f\u4f7f\u7528\u3002","title":"Customizing the controls \uff08\u81ea\u5b9a\u4e49\u63a7\u4ef6)"},{"location":"api-guide/pagination_zh/#low-level-api","text":"\u5f53 display_page_controls \u5c5e\u6027\u5728\u5206\u9875\u5b9e\u4f8b\u4e2d\u65f6\uff0c\u51b3\u5b9a\u5206\u9875\u7c7b\u662f\u5426\u663e\u793a\u63a7\u4ef6\u7684\u4f4e\u7ea7API\u88ab\u66b4\u9732\u51fa\u6765\u3002\u5982\u679c\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\u8981\u6c42\u663e\u793aHTML\u5206\u9875\u63a7\u4ef6\uff0c\u5219\u5e94\u5728 paginate_queryset \u65b9\u6cd5\u4e2d\u5c06\u5176\u8bbe\u7f6e\u4e3a True \u3002 .to_html() \u548c .get_html_context() \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u5728\u81ea\u5b9a\u4e49\u5206\u9875\u7c7b\u4e2d\u91cd\u5199\uff0c\u4ee5\u4fbf\u8fdb\u4e00\u6b65\u81ea\u5b9a\u4e49\u63a7\u4ef6\u7684\u6e32\u67d3\u65b9\u5f0f\u3002","title":"Low-level API"},{"location":"api-guide/pagination_zh/#third-party-packages","text":"The following third party packages are also available.","title":"Third party packages"},{"location":"api-guide/pagination_zh/#drf-extensions","text":"The DRF-extensions package includes a PaginateByMaxMixin mixin class that allows your API clients to specify ?page_size=max to obtain the maximum allowed page size.","title":"DRF-extensions"},{"location":"api-guide/pagination_zh/#drf-proxy-pagination","text":"The drf-proxy-pagination package includes a ProxyPagination class which allows to choose pagination class with a query parameter.","title":"drf-proxy-pagination"},{"location":"api-guide/parsers/","text":"Parsers Machine interacting web services tend to use more structured formats for sending data than form-encoded, since they're sending more complex data than simple forms \u2014 Malcom Tredinnick, Django developers group REST framework includes a number of built in Parser classes, that allow you to accept requests with various media types. There is also support for defining your own custom parsers, which gives you the flexibility to design the media types that your API accepts. How the parser is determined The set of valid parsers for a view is always defined as a list of classes. When request.data is accessed, REST framework will examine the Content-Type header on the incoming request, and determine which parser to use to parse the request content. Note : When developing client applications always remember to make sure you're setting the Content-Type header when sending data in an HTTP request. If you don't set the content type, most clients will default to using 'application/x-www-form-urlencoded' , which may not be what you wanted. As an example, if you are sending json encoded data using jQuery with the .ajax() method , you should make sure to include the contentType: 'application/json' setting. Setting the parsers The default set of parsers may be set globally, using the DEFAULT_PARSER_CLASSES setting. For example, the following settings would allow only requests with JSON content, instead of the default of JSON or form data. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ 'rest_framework.parsers.JSONParser', ] } You can also set the parsers used for an individual view, or viewset, using the APIView class-based views. from rest_framework.parsers import JSONParser from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): \"\"\" A view that can accept POST requests with JSON content. \"\"\" parser_classes = [JSONParser] def post(self, request, format=None): return Response({'received data': request.data}) Or, if you're using the @api_view decorator with function based views. from rest_framework.decorators import api_view from rest_framework.decorators import parser_classes from rest_framework.parsers import JSONParser @api_view(['POST']) @parser_classes([JSONParser]) def example_view(request, format=None): \"\"\" A view that can accept POST requests with JSON content. \"\"\" return Response({'received data': request.data}) API Reference JSONParser Parses JSON request content. .media_type : application/json FormParser Parses HTML form content. request.data will be populated with a QueryDict of data. You will typically want to use both FormParser and MultiPartParser together in order to fully support HTML form data. .media_type : application/x-www-form-urlencoded MultiPartParser Parses multipart HTML form content, which supports file uploads. Both request.data will be populated with a QueryDict . You will typically want to use both FormParser and MultiPartParser together in order to fully support HTML form data. .media_type : multipart/form-data FileUploadParser Parses raw file upload content. The request.data property will be a dictionary with a single key 'file' containing the uploaded file. If the view used with FileUploadParser is called with a filename URL keyword argument, then that argument will be used as the filename. If it is called without a filename URL keyword argument, then the client must set the filename in the Content-Disposition HTTP header. For example Content-Disposition: attachment; filename=upload.jpg . .media_type : */* Notes: The FileUploadParser is for usage with native clients that can upload the file as a raw data request. For web-based uploads, or for native clients with multipart upload support, you should use the MultiPartParser instead. Since this parser's media_type matches any content type, FileUploadParser should generally be the only parser set on an API view. FileUploadParser respects Django's standard FILE_UPLOAD_HANDLERS setting, and the request.upload_handlers attribute. See the Django documentation for more details. Basic usage example: # views.py class FileUploadView(views.APIView): parser_classes = [FileUploadParser] def put(self, request, filename, format=None): file_obj = request.data['file'] # ... # do some stuff with uploaded file # ... return Response(status=204) # urls.py urlpatterns = [ # ... url(r'^upload/(?P<filename>[^/]+)$', FileUploadView.as_view()) ] Custom parsers To implement a custom parser, you should override BaseParser , set the .media_type property, and implement the .parse(self, stream, media_type, parser_context) method. The method should return the data that will be used to populate the request.data property. The arguments passed to .parse() are: stream A stream-like object representing the body of the request. media_type Optional. If provided, this is the media type of the incoming request content. Depending on the request's Content-Type: header, this may be more specific than the renderer's media_type attribute, and may include media type parameters. For example \"text/plain; charset=utf-8\" . parser_context Optional. If supplied, this argument will be a dictionary containing any additional context that may be required to parse the request content. By default this will include the following keys: view , request , args , kwargs . Example The following is an example plaintext parser that will populate the request.data property with a string representing the body of the request. class PlainTextParser(BaseParser): \"\"\" Plain text parser. \"\"\" media_type = 'text/plain' def parse(self, stream, media_type=None, parser_context=None): \"\"\" Simply return a string representing the body of the request. \"\"\" return stream.read() Third party packages The following third party packages are also available. YAML REST framework YAML provides YAML parsing and rendering support. It was previously included directly in the REST framework package, and is now instead supported as a third-party package. Installation & configuration Install using pip. $ pip install djangorestframework-yaml Modify your REST framework settings. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ 'rest_framework_yaml.parsers.YAMLParser', ], 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework_yaml.renderers.YAMLRenderer', ], } XML REST Framework XML provides a simple informal XML format. It was previously included directly in the REST framework package, and is now instead supported as a third-party package. Installation & configuration Install using pip. $ pip install djangorestframework-xml Modify your REST framework settings. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ 'rest_framework_xml.parsers.XMLParser', ], 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework_xml.renderers.XMLRenderer', ], } MessagePack MessagePack is a fast, efficient binary serialization format. Juan Riaza maintains the djangorestframework-msgpack package which provides MessagePack renderer and parser support for REST framework. CamelCase JSON djangorestframework-camel-case provides camel case JSON renderers and parsers for REST framework. This allows serializers to use Python-style underscored field names, but be exposed in the API as Javascript-style camel case field names. It is maintained by Vitaly Babiy .","title":"Parsers"},{"location":"api-guide/parsers/#parsers","text":"Machine interacting web services tend to use more structured formats for sending data than form-encoded, since they're sending more complex data than simple forms \u2014 Malcom Tredinnick, Django developers group REST framework includes a number of built in Parser classes, that allow you to accept requests with various media types. There is also support for defining your own custom parsers, which gives you the flexibility to design the media types that your API accepts.","title":"Parsers"},{"location":"api-guide/parsers/#how-the-parser-is-determined","text":"The set of valid parsers for a view is always defined as a list of classes. When request.data is accessed, REST framework will examine the Content-Type header on the incoming request, and determine which parser to use to parse the request content. Note : When developing client applications always remember to make sure you're setting the Content-Type header when sending data in an HTTP request. If you don't set the content type, most clients will default to using 'application/x-www-form-urlencoded' , which may not be what you wanted. As an example, if you are sending json encoded data using jQuery with the .ajax() method , you should make sure to include the contentType: 'application/json' setting.","title":"How the parser is determined"},{"location":"api-guide/parsers/#setting-the-parsers","text":"The default set of parsers may be set globally, using the DEFAULT_PARSER_CLASSES setting. For example, the following settings would allow only requests with JSON content, instead of the default of JSON or form data. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ 'rest_framework.parsers.JSONParser', ] } You can also set the parsers used for an individual view, or viewset, using the APIView class-based views. from rest_framework.parsers import JSONParser from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): \"\"\" A view that can accept POST requests with JSON content. \"\"\" parser_classes = [JSONParser] def post(self, request, format=None): return Response({'received data': request.data}) Or, if you're using the @api_view decorator with function based views. from rest_framework.decorators import api_view from rest_framework.decorators import parser_classes from rest_framework.parsers import JSONParser @api_view(['POST']) @parser_classes([JSONParser]) def example_view(request, format=None): \"\"\" A view that can accept POST requests with JSON content. \"\"\" return Response({'received data': request.data})","title":"Setting the parsers"},{"location":"api-guide/parsers/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/parsers/#jsonparser","text":"Parses JSON request content. .media_type : application/json","title":"JSONParser"},{"location":"api-guide/parsers/#formparser","text":"Parses HTML form content. request.data will be populated with a QueryDict of data. You will typically want to use both FormParser and MultiPartParser together in order to fully support HTML form data. .media_type : application/x-www-form-urlencoded","title":"FormParser"},{"location":"api-guide/parsers/#multipartparser","text":"Parses multipart HTML form content, which supports file uploads. Both request.data will be populated with a QueryDict . You will typically want to use both FormParser and MultiPartParser together in order to fully support HTML form data. .media_type : multipart/form-data","title":"MultiPartParser"},{"location":"api-guide/parsers/#fileuploadparser","text":"Parses raw file upload content. The request.data property will be a dictionary with a single key 'file' containing the uploaded file. If the view used with FileUploadParser is called with a filename URL keyword argument, then that argument will be used as the filename. If it is called without a filename URL keyword argument, then the client must set the filename in the Content-Disposition HTTP header. For example Content-Disposition: attachment; filename=upload.jpg . .media_type : */*","title":"FileUploadParser"},{"location":"api-guide/parsers/#notes","text":"The FileUploadParser is for usage with native clients that can upload the file as a raw data request. For web-based uploads, or for native clients with multipart upload support, you should use the MultiPartParser instead. Since this parser's media_type matches any content type, FileUploadParser should generally be the only parser set on an API view. FileUploadParser respects Django's standard FILE_UPLOAD_HANDLERS setting, and the request.upload_handlers attribute. See the Django documentation for more details.","title":"Notes:"},{"location":"api-guide/parsers/#basic-usage-example","text":"# views.py class FileUploadView(views.APIView): parser_classes = [FileUploadParser] def put(self, request, filename, format=None): file_obj = request.data['file'] # ... # do some stuff with uploaded file # ... return Response(status=204) # urls.py urlpatterns = [ # ... url(r'^upload/(?P<filename>[^/]+)$', FileUploadView.as_view()) ]","title":"Basic usage example:"},{"location":"api-guide/parsers/#custom-parsers","text":"To implement a custom parser, you should override BaseParser , set the .media_type property, and implement the .parse(self, stream, media_type, parser_context) method. The method should return the data that will be used to populate the request.data property. The arguments passed to .parse() are:","title":"Custom parsers"},{"location":"api-guide/parsers/#stream","text":"A stream-like object representing the body of the request.","title":"stream"},{"location":"api-guide/parsers/#media_type","text":"Optional. If provided, this is the media type of the incoming request content. Depending on the request's Content-Type: header, this may be more specific than the renderer's media_type attribute, and may include media type parameters. For example \"text/plain; charset=utf-8\" .","title":"media_type"},{"location":"api-guide/parsers/#parser_context","text":"Optional. If supplied, this argument will be a dictionary containing any additional context that may be required to parse the request content. By default this will include the following keys: view , request , args , kwargs .","title":"parser_context"},{"location":"api-guide/parsers/#example","text":"The following is an example plaintext parser that will populate the request.data property with a string representing the body of the request. class PlainTextParser(BaseParser): \"\"\" Plain text parser. \"\"\" media_type = 'text/plain' def parse(self, stream, media_type=None, parser_context=None): \"\"\" Simply return a string representing the body of the request. \"\"\" return stream.read()","title":"Example"},{"location":"api-guide/parsers/#third-party-packages","text":"The following third party packages are also available.","title":"Third party packages"},{"location":"api-guide/parsers/#yaml","text":"REST framework YAML provides YAML parsing and rendering support. It was previously included directly in the REST framework package, and is now instead supported as a third-party package.","title":"YAML"},{"location":"api-guide/parsers/#installation-configuration","text":"Install using pip. $ pip install djangorestframework-yaml Modify your REST framework settings. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ 'rest_framework_yaml.parsers.YAMLParser', ], 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework_yaml.renderers.YAMLRenderer', ], }","title":"Installation &amp; configuration"},{"location":"api-guide/parsers/#xml","text":"REST Framework XML provides a simple informal XML format. It was previously included directly in the REST framework package, and is now instead supported as a third-party package.","title":"XML"},{"location":"api-guide/parsers/#installation-configuration_1","text":"Install using pip. $ pip install djangorestframework-xml Modify your REST framework settings. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ 'rest_framework_xml.parsers.XMLParser', ], 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework_xml.renderers.XMLRenderer', ], }","title":"Installation &amp; configuration"},{"location":"api-guide/parsers/#messagepack","text":"MessagePack is a fast, efficient binary serialization format. Juan Riaza maintains the djangorestframework-msgpack package which provides MessagePack renderer and parser support for REST framework.","title":"MessagePack"},{"location":"api-guide/parsers/#camelcase-json","text":"djangorestframework-camel-case provides camel case JSON renderers and parsers for REST framework. This allows serializers to use Python-style underscored field names, but be exposed in the API as Javascript-style camel case field names. It is maintained by Vitaly Babiy .","title":"CamelCase JSON"},{"location":"api-guide/parsers_zh/","text":"\u89e3\u6790\u5668 \u673a\u5668\u4e92\u52a8\u7684Web\u670d\u52a1\u5f80\u5f80\u4f7f\u7528\u66f4\u591a\u7ed3\u6784\u5316\u7684\u683c\u5f0f\u53d1\u9001\u6570\u636e\u800c\u4e0d\u662f\u4f7f\u7528\u8868\u5355\u7f16\u7801\uff0c\u56e0\u4e3a\u5b83\u4eec\u53d1\u9001\u7684\u662f\u6bd4\u7b80\u5355\u5f62\u5f0f\u66f4\u590d\u6742\u7684\u6570\u636e\u3002 \u2014 Malcom Tredinnick, Django developers group REST \u6846\u67b6\u5305\u62ec\u4e00\u4e9b\u5185\u7f6e\u7684Parser\u7c7b\uff0c\u5141\u8bb8\u4f60\u63a5\u53d7\u5404\u79cd\u5a92\u4f53\u7c7b\u578b\u7684\u8bf7\u6c42\u3002\u8fd8\u652f\u6301\u5b9a\u4e49\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u89e3\u6790\u5668\uff0c\u8fd9\u4f7f\u4f60\u53ef\u4ee5\u7075\u6d3b\u5730\u8bbe\u8ba1API\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u89e3\u6790\u5668\u5982\u4f55\u786e\u5b9a \u4e00\u7ec4\u89c6\u56fe\u7684\u6709\u6548\u89e3\u6790\u5668\u603b\u662f\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7c7b\u7684\u5217\u8868\u3002\u5f53\u8bbf\u95ee request.data \u65f6\uff0cREST\u6846\u67b6\u5c06\u68c0\u67e5\u4f20\u5165\u8bf7\u6c42\u4e2d\u7684 Content-Type \u5934\uff0c\u5e76\u786e\u5b9a\u7528\u4e8e\u89e3\u6790\u8bf7\u6c42\u5185\u5bb9\u7684\u89e3\u6790\u5668\u3002 \u6ce8\u610f : \u5f00\u53d1\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u65f6\u5e94\u8be5\u59cb\u7ec8\u8bb0\u4f4f\u5728HTTP\u8bf7\u6c42\u4e2d\u53d1\u9001\u6570\u636e\u65f6\u786e\u4fdd\u8bbe\u7f6e Content-Type \u5934\u3002 \u5982\u679c\u4f60\u4e0d\u8bbe\u7f6e\u5185\u5bb9\u7c7b\u578b\uff0c\u5927\u591a\u6570\u5ba2\u6237\u7aef\u5c06\u9ed8\u8ba4\u4f7f\u7528 'application/x-www-form-urlencoded' \uff0c\u800c\u8fd9\u53ef\u80fd\u5e76\u4e0d\u662f\u4f60\u60f3\u8981\u7684\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4f60\u4f7f\u7528jQuery\u7684 .ajax() \u65b9\u6cd5 \u53d1\u9001 json \u7f16\u7801\u6570\u636e\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u5305\u542b contentType\uff1a'application / json' \u8bbe\u7f6e\u3002 \u8bbe\u7f6e\u89e3\u6790\u5668 \u53ef\u4ee5\u4f7f\u7528 DEFAULT_PARSER_CLASSES \u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u7684\u89e3\u6790\u5668\u96c6\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bbe\u7f6e\u5c06\u4ec5\u5141\u8bb8\u5177\u6709 JSON \u5185\u5bb9\u7684\u8bf7\u6c42\uff0c\u800c\u4e0d\u662fJSON\u6216\u8868\u5355\u6570\u636e\u7684\u9ed8\u8ba4\u503c\u3002 REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework.parsers.JSONParser', ) } \u4f60\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u7528\u4e8e\u5355\u4e2a\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u7684\u89e3\u6790\u5668\uff0c \u4f7f\u7528 APIView \u7c7b\u89c6\u56fe\u3002 from rest_framework.parsers import JSONParser from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): \"\"\" \u53ef\u4ee5\u63a5\u6536JSON\u5185\u5bb9POST\u8bf7\u6c42\u7684\u89c6\u56fe\u3002 \"\"\" parser_classes = (JSONParser,) def post(self, request, format=None): return Response({'received data': request.data}) \u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u65b9\u6cd5\u7684\u89c6\u56fe\u7684 @api_view \u88c5\u9970\u5668\u3002 from rest_framework.decorators import api_view from rest_framework.decorators import parser_classes @api_view(['POST']) @parser_classes((JSONParser,)) def example_view(request, format=None): \"\"\" \u53ef\u4ee5\u63a5\u6536JSON\u5185\u5bb9POST\u8bf7\u6c42\u7684\u89c6\u56fe \"\"\" return Response({'received data': request.data}) API\u53c2\u8003 JSONParser \u89e3\u6790 JSON \u8bf7\u6c42\u5185\u5bb9\u3002 .media_type : application/json FormParser \u89e3\u6790 HTML \u8868\u5355\u5185\u5bb9\u3002 request.data \u5c06\u88ab\u586b\u5145\u4e00\u4e2a QueryDict \u7684\u6570\u636e\u3002 \u901a\u5e38\uff0c\u4f60\u9700\u8981\u4f7f\u7528 FormParser \u548c MultiPartParser \u4e24\u8005\uff0c\u4ee5\u4fbf\u5b8c\u5168\u652f\u6301HTML\u8868\u5355\u6570\u636e\u3002 .media_type : application/x-www-form-urlencoded MultiPartParser \u89e3\u6790\u591a\u90e8\u5206HTML\u8868\u5355\u5185\u5bb9\uff0c\u652f\u6301\u6587\u4ef6\u4e0a\u4f20\u3002 request.data \u90fd\u5c06\u88ab\u4e00\u4e2a QueryDict \u586b\u5145\u3002 \u4f60\u901a\u5e38\u4f1a\u540c\u65f6\u4f7f\u7528 FormParser \u548c MultiPartParser \u4e24\u8005\uff0c\u4ee5\u4fbf\u5b8c\u5168\u652f\u6301HTML\u8868\u5355\u6570\u636e\u3002 .media_type : multipart/form-data FileUploadParser \u89e3\u6790\u539f\u59cb\u6587\u4ef6\u4e0a\u4f20\u5185\u5bb9\u3002 request.data \u5c5e\u6027\u5c06\u662f\u6709\u5355\u4e2akey 'file' \u7684\u5305\u542b\u4e0a\u4f20\u6587\u4ef6\u7684\u5b57\u5178\u3002 \u5982\u679c\u4e0e FileUploadParser \u4e00\u8d77\u4f7f\u7528\u7684\u89c6\u56fe\u4f7f\u7528 filename URL\u5173\u952e\u5b57\u53c2\u6570\u8c03\u7528\uff0c\u5219\u8be5\u53c2\u6570\u5c06\u7528\u4f5c\u6587\u4ef6\u540d\u3002 \u5982\u679c\u6ca1\u6709 filename URL\u5173\u952e\u5b57\u53c2\u6570\u8c03\u7528\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u5fc5\u987b\u5728 Content-Disposition HTTP\u5934\u4e2d\u8bbe\u7f6e\u6587\u4ef6\u540d\u3002\u4f8b\u5982 Content-Disposition: attachment; filename=upload.jpg . .media_type : */* \u8bf4\u660e: FileUploadParser \u7528\u4e8e\u4e0e\u539f\u59cb\u6570\u636e\u8bf7\u6c42\u4e00\u8d77\u4e0a\u4f20\u6587\u4ef6\u7684\u672c\u673a\u5ba2\u6237\u7aef\u3002\u5bf9\u4e8e\u57fa\u4e8eWeb\u7684\u4e0a\u4f20\uff0c\u6216\u8005\u5bf9\u4e8e\u5177\u6709\u591a\u90e8\u5206\u4e0a\u4f20\u652f\u6301\u7684\u672c\u673a\u5ba2\u6237\u7aef\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528 MultiPartParser \u89e3\u6790\u5668\u3002 \u7531\u4e8e\u8be5\u89e3\u6790\u5668\u7684 media_type \u4e0e\u4efb\u4f55\u5185\u5bb9\u7c7b\u578b\u5339\u914d\uff0c\u6240\u4ee5 FileUploadParser \u901a\u5e38\u5e94\u8be5\u662fAPI\u89c6\u56fe\u4e2d\u552f\u4e00\u7684\u89e3\u6790\u5668\u3002 FileUploadParser \u9075\u5faa Django \u7684\u6807\u51c6 FILE_UPLOAD_HANDLERS \u8bbe\u7f6e\uff0c\u548c request.upload_handlers \u5c5e\u6027\u3002\u53c2\u89c1 Django \u6587\u6863 \u83b7\u53d6\u66f4\u591a\u7ec6\u8282\u3002 \u57fa\u672c\u7528\u6cd5\u793a\u4f8b\uff1a # views.py class FileUploadView(views.APIView): parser_classes = (FileUploadParser,) def put(self, request, filename, format=None): file_obj = request.data['file'] # ... # do some stuff with uploaded file # ... return Response(status=204) # urls.py urlpatterns = [ # ... url(r'^upload/(?P<filename>[^/]+)$', FileUploadView.as_view()) ] \u81ea\u5b9a\u4e49\u89e3\u6790\u5668 \u8981\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u89e3\u6790\u5668\uff0c\u4f60\u5e94\u8be5\u91cd\u5199 BaseParser \uff0c\u8bbe\u7f6e .media_type \u5c5e\u6027\uff0c\u5e76\u5b9e\u73b0 .parse(self\uff0cstream\uff0cmedia_type\uff0cparser_context) \u65b9\u6cd5\u3002 \u8be5\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u7528\u4e8e\u586b\u5145 request.data \u5c5e\u6027\u7684\u6570\u636e\u3002 \u4f20\u9012\u7ed9 .parse() \u7684\u53c2\u6570\u662f: stream \u8868\u793a\u8bf7\u6c42\u4f53\u7684\u6570\u636e\u6d41\u3002 media_type \u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u4f20\u5165\u8bf7\u6c42\u5185\u5bb9\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u57fa\u4e8e\u8bf7\u6c42\u7684 Content-Type: \u5934\uff0c\u8fd9\u53ef\u80fd\u6bd4\u6e32\u67d3\u5668\u7684 media_type \u5c5e\u6027\u66f4\u5177\u4f53\uff0c\u53ef\u80fd\u5305\u62ec\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u3002\u4f8b\u5982 \"text/plain; charset=utf-8\" \u3002 parser_context \u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8be5\u53c2\u6570\u5c06\u662f\u4e00\u4e2a\u5305\u542b\u89e3\u6790\u8bf7\u6c42\u5185\u5bb9\u53ef\u80fd\u9700\u8981\u7684\u4efb\u4f55\u9644\u52a0\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u5305\u542b\u4ee5\u4e0bkeys: view , request , args , kwargs \u3002 \u4f8b\u5b50 \u4ee5\u4e0b\u662f\u4e00\u4e2aPlain text\u7684\u793a\u4f8b\uff0c\u5b83\u5c06\u4f7f\u7528\u8868\u793a\u8bf7\u6c42\u6b63\u6587\u7684\u5b57\u7b26\u4e32\u586b\u5145 request.data \u5c5e\u6027\u3002 class PlainTextParser(BaseParser): \"\"\" Plain text \u89e3\u6790\u5668\u3002 \"\"\" media_type = 'text/plain' def parse(self, stream, media_type=None, parser_context=None): \"\"\" \u53ea\u9700\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u6b63\u6587\u7684\u5b57\u7b26\u4e32\u3002 \"\"\" return stream.read() \u7b2c\u4e09\u65b9\u5305 \u4ee5\u4e0b\u662f\u53ef\u7528\u7684\u7b2c\u4e09\u65b9\u5305\u3002 YAML REST framework YAML \u63d0\u4f9b\u4e86 YAML \u89e3\u6790\u548c\u5448\u73b0\u7684\u652f\u6301\u3002\u4e4b\u524d\u5b83\u662f\u76f4\u63a5\u5305\u542b\u5728REST\u6846\u67b6\u5305\u4e2d\u7684\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002 \u5b89\u88c5\u548c\u914d\u7f6e \u4f7f\u7528pip\u8fdb\u884c\u5b89\u88c5\u3002 $ pip install djangorestframework-yaml \u4fee\u6539\u4f60\u7684 REST framework settings\u3002 REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_yaml.parsers.YAMLParser', ), 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_yaml.renderers.YAMLRenderer', ), } XML REST Framework XML \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u975e\u6b63\u5f0fXML\u683c\u5f0f\u3002\u5b83\u4ee5\u524d\u662f\u76f4\u63a5\u5305\u542b\u5728REST\u6846\u67b6\u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002 \u5b89\u88c5\u548c\u914d\u7f6e \u4f7f\u7528pip\u8fdb\u884c\u5b89\u88c5\u3002 $ pip install djangorestframework-xml \u4fee\u6539\u4f60\u7684 REST framework settings. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_xml.parsers.XMLParser', ), 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_xml.renderers.XMLRenderer', ), } MessagePack MessagePack \u662f\u4e00\u79cd\u5feb\u901f\uff0c\u9ad8\u6548\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\u3002 Juan Riaza \u7ef4\u62a4\u4e86 djangorestframework-msgpack \u5305\uff0c\u5b83\u4e3aREST\u6846\u67b6\u63d0\u4f9bMessagePack\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u652f\u6301\u3002 CamelCase JSON djangorestframework-camel-case \u4e3aREST framework\u63d0\u4f9b\u4e86\u9a7c\u5cf0\u7c7b\u578bJSON \u751f\u6210\u548c\u89e3\u6790\u3002\u8fd9\u4e2a\u5e93\u5141\u8bb8\u5e8f\u5217\u5316\u7a0b\u5e8f\u4f7f\u7528Python\u98ce\u683c\u7684\u4e0b\u5212\u7ebf\u5b57\u6bb5\u540d\u79f0\uff0c\u5e76\u4e14\u5c06\u5176\u8f6c\u53d8\u4e3aJavascript\u98ce\u683c\u7684\u9a7c\u5cf0\u5b57\u6bb5\u540d\u79f0\u5728API\u4e2d\u516c\u5f00\u3002\u8fd9\u4e2a\u5e93\u7531 Vitaly Babiy \u7ef4\u62a4\u3002","title":"Parsers"},{"location":"api-guide/parsers_zh/#_1","text":"\u673a\u5668\u4e92\u52a8\u7684Web\u670d\u52a1\u5f80\u5f80\u4f7f\u7528\u66f4\u591a\u7ed3\u6784\u5316\u7684\u683c\u5f0f\u53d1\u9001\u6570\u636e\u800c\u4e0d\u662f\u4f7f\u7528\u8868\u5355\u7f16\u7801\uff0c\u56e0\u4e3a\u5b83\u4eec\u53d1\u9001\u7684\u662f\u6bd4\u7b80\u5355\u5f62\u5f0f\u66f4\u590d\u6742\u7684\u6570\u636e\u3002 \u2014 Malcom Tredinnick, Django developers group REST \u6846\u67b6\u5305\u62ec\u4e00\u4e9b\u5185\u7f6e\u7684Parser\u7c7b\uff0c\u5141\u8bb8\u4f60\u63a5\u53d7\u5404\u79cd\u5a92\u4f53\u7c7b\u578b\u7684\u8bf7\u6c42\u3002\u8fd8\u652f\u6301\u5b9a\u4e49\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u89e3\u6790\u5668\uff0c\u8fd9\u4f7f\u4f60\u53ef\u4ee5\u7075\u6d3b\u5730\u8bbe\u8ba1API\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u3002","title":"\u89e3\u6790\u5668"},{"location":"api-guide/parsers_zh/#_2","text":"\u4e00\u7ec4\u89c6\u56fe\u7684\u6709\u6548\u89e3\u6790\u5668\u603b\u662f\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7c7b\u7684\u5217\u8868\u3002\u5f53\u8bbf\u95ee request.data \u65f6\uff0cREST\u6846\u67b6\u5c06\u68c0\u67e5\u4f20\u5165\u8bf7\u6c42\u4e2d\u7684 Content-Type \u5934\uff0c\u5e76\u786e\u5b9a\u7528\u4e8e\u89e3\u6790\u8bf7\u6c42\u5185\u5bb9\u7684\u89e3\u6790\u5668\u3002 \u6ce8\u610f : \u5f00\u53d1\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u65f6\u5e94\u8be5\u59cb\u7ec8\u8bb0\u4f4f\u5728HTTP\u8bf7\u6c42\u4e2d\u53d1\u9001\u6570\u636e\u65f6\u786e\u4fdd\u8bbe\u7f6e Content-Type \u5934\u3002 \u5982\u679c\u4f60\u4e0d\u8bbe\u7f6e\u5185\u5bb9\u7c7b\u578b\uff0c\u5927\u591a\u6570\u5ba2\u6237\u7aef\u5c06\u9ed8\u8ba4\u4f7f\u7528 'application/x-www-form-urlencoded' \uff0c\u800c\u8fd9\u53ef\u80fd\u5e76\u4e0d\u662f\u4f60\u60f3\u8981\u7684\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4f60\u4f7f\u7528jQuery\u7684 .ajax() \u65b9\u6cd5 \u53d1\u9001 json \u7f16\u7801\u6570\u636e\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u5305\u542b contentType\uff1a'application / json' \u8bbe\u7f6e\u3002","title":"\u89e3\u6790\u5668\u5982\u4f55\u786e\u5b9a"},{"location":"api-guide/parsers_zh/#_3","text":"\u53ef\u4ee5\u4f7f\u7528 DEFAULT_PARSER_CLASSES \u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u7684\u89e3\u6790\u5668\u96c6\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bbe\u7f6e\u5c06\u4ec5\u5141\u8bb8\u5177\u6709 JSON \u5185\u5bb9\u7684\u8bf7\u6c42\uff0c\u800c\u4e0d\u662fJSON\u6216\u8868\u5355\u6570\u636e\u7684\u9ed8\u8ba4\u503c\u3002 REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework.parsers.JSONParser', ) } \u4f60\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u7528\u4e8e\u5355\u4e2a\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u7684\u89e3\u6790\u5668\uff0c \u4f7f\u7528 APIView \u7c7b\u89c6\u56fe\u3002 from rest_framework.parsers import JSONParser from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): \"\"\" \u53ef\u4ee5\u63a5\u6536JSON\u5185\u5bb9POST\u8bf7\u6c42\u7684\u89c6\u56fe\u3002 \"\"\" parser_classes = (JSONParser,) def post(self, request, format=None): return Response({'received data': request.data}) \u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u65b9\u6cd5\u7684\u89c6\u56fe\u7684 @api_view \u88c5\u9970\u5668\u3002 from rest_framework.decorators import api_view from rest_framework.decorators import parser_classes @api_view(['POST']) @parser_classes((JSONParser,)) def example_view(request, format=None): \"\"\" \u53ef\u4ee5\u63a5\u6536JSON\u5185\u5bb9POST\u8bf7\u6c42\u7684\u89c6\u56fe \"\"\" return Response({'received data': request.data})","title":"\u8bbe\u7f6e\u89e3\u6790\u5668"},{"location":"api-guide/parsers_zh/#api","text":"","title":"API\u53c2\u8003"},{"location":"api-guide/parsers_zh/#jsonparser","text":"\u89e3\u6790 JSON \u8bf7\u6c42\u5185\u5bb9\u3002 .media_type : application/json","title":"JSONParser"},{"location":"api-guide/parsers_zh/#formparser","text":"\u89e3\u6790 HTML \u8868\u5355\u5185\u5bb9\u3002 request.data \u5c06\u88ab\u586b\u5145\u4e00\u4e2a QueryDict \u7684\u6570\u636e\u3002 \u901a\u5e38\uff0c\u4f60\u9700\u8981\u4f7f\u7528 FormParser \u548c MultiPartParser \u4e24\u8005\uff0c\u4ee5\u4fbf\u5b8c\u5168\u652f\u6301HTML\u8868\u5355\u6570\u636e\u3002 .media_type : application/x-www-form-urlencoded","title":"FormParser"},{"location":"api-guide/parsers_zh/#multipartparser","text":"\u89e3\u6790\u591a\u90e8\u5206HTML\u8868\u5355\u5185\u5bb9\uff0c\u652f\u6301\u6587\u4ef6\u4e0a\u4f20\u3002 request.data \u90fd\u5c06\u88ab\u4e00\u4e2a QueryDict \u586b\u5145\u3002 \u4f60\u901a\u5e38\u4f1a\u540c\u65f6\u4f7f\u7528 FormParser \u548c MultiPartParser \u4e24\u8005\uff0c\u4ee5\u4fbf\u5b8c\u5168\u652f\u6301HTML\u8868\u5355\u6570\u636e\u3002 .media_type : multipart/form-data","title":"MultiPartParser"},{"location":"api-guide/parsers_zh/#fileuploadparser","text":"\u89e3\u6790\u539f\u59cb\u6587\u4ef6\u4e0a\u4f20\u5185\u5bb9\u3002 request.data \u5c5e\u6027\u5c06\u662f\u6709\u5355\u4e2akey 'file' \u7684\u5305\u542b\u4e0a\u4f20\u6587\u4ef6\u7684\u5b57\u5178\u3002 \u5982\u679c\u4e0e FileUploadParser \u4e00\u8d77\u4f7f\u7528\u7684\u89c6\u56fe\u4f7f\u7528 filename URL\u5173\u952e\u5b57\u53c2\u6570\u8c03\u7528\uff0c\u5219\u8be5\u53c2\u6570\u5c06\u7528\u4f5c\u6587\u4ef6\u540d\u3002 \u5982\u679c\u6ca1\u6709 filename URL\u5173\u952e\u5b57\u53c2\u6570\u8c03\u7528\uff0c\u90a3\u4e48\u5ba2\u6237\u7aef\u5fc5\u987b\u5728 Content-Disposition HTTP\u5934\u4e2d\u8bbe\u7f6e\u6587\u4ef6\u540d\u3002\u4f8b\u5982 Content-Disposition: attachment; filename=upload.jpg . .media_type : */*","title":"FileUploadParser"},{"location":"api-guide/parsers_zh/#_4","text":"FileUploadParser \u7528\u4e8e\u4e0e\u539f\u59cb\u6570\u636e\u8bf7\u6c42\u4e00\u8d77\u4e0a\u4f20\u6587\u4ef6\u7684\u672c\u673a\u5ba2\u6237\u7aef\u3002\u5bf9\u4e8e\u57fa\u4e8eWeb\u7684\u4e0a\u4f20\uff0c\u6216\u8005\u5bf9\u4e8e\u5177\u6709\u591a\u90e8\u5206\u4e0a\u4f20\u652f\u6301\u7684\u672c\u673a\u5ba2\u6237\u7aef\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528 MultiPartParser \u89e3\u6790\u5668\u3002 \u7531\u4e8e\u8be5\u89e3\u6790\u5668\u7684 media_type \u4e0e\u4efb\u4f55\u5185\u5bb9\u7c7b\u578b\u5339\u914d\uff0c\u6240\u4ee5 FileUploadParser \u901a\u5e38\u5e94\u8be5\u662fAPI\u89c6\u56fe\u4e2d\u552f\u4e00\u7684\u89e3\u6790\u5668\u3002 FileUploadParser \u9075\u5faa Django \u7684\u6807\u51c6 FILE_UPLOAD_HANDLERS \u8bbe\u7f6e\uff0c\u548c request.upload_handlers \u5c5e\u6027\u3002\u53c2\u89c1 Django \u6587\u6863 \u83b7\u53d6\u66f4\u591a\u7ec6\u8282\u3002","title":"\u8bf4\u660e:"},{"location":"api-guide/parsers_zh/#_5","text":"# views.py class FileUploadView(views.APIView): parser_classes = (FileUploadParser,) def put(self, request, filename, format=None): file_obj = request.data['file'] # ... # do some stuff with uploaded file # ... return Response(status=204) # urls.py urlpatterns = [ # ... url(r'^upload/(?P<filename>[^/]+)$', FileUploadView.as_view()) ]","title":"\u57fa\u672c\u7528\u6cd5\u793a\u4f8b\uff1a"},{"location":"api-guide/parsers_zh/#_6","text":"\u8981\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u89e3\u6790\u5668\uff0c\u4f60\u5e94\u8be5\u91cd\u5199 BaseParser \uff0c\u8bbe\u7f6e .media_type \u5c5e\u6027\uff0c\u5e76\u5b9e\u73b0 .parse(self\uff0cstream\uff0cmedia_type\uff0cparser_context) \u65b9\u6cd5\u3002 \u8be5\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u7528\u4e8e\u586b\u5145 request.data \u5c5e\u6027\u7684\u6570\u636e\u3002 \u4f20\u9012\u7ed9 .parse() \u7684\u53c2\u6570\u662f:","title":"\u81ea\u5b9a\u4e49\u89e3\u6790\u5668"},{"location":"api-guide/parsers_zh/#stream","text":"\u8868\u793a\u8bf7\u6c42\u4f53\u7684\u6570\u636e\u6d41\u3002","title":"stream"},{"location":"api-guide/parsers_zh/#media_type","text":"\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u4f20\u5165\u8bf7\u6c42\u5185\u5bb9\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u57fa\u4e8e\u8bf7\u6c42\u7684 Content-Type: \u5934\uff0c\u8fd9\u53ef\u80fd\u6bd4\u6e32\u67d3\u5668\u7684 media_type \u5c5e\u6027\u66f4\u5177\u4f53\uff0c\u53ef\u80fd\u5305\u62ec\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u3002\u4f8b\u5982 \"text/plain; charset=utf-8\" \u3002","title":"media_type"},{"location":"api-guide/parsers_zh/#parser_context","text":"\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8be5\u53c2\u6570\u5c06\u662f\u4e00\u4e2a\u5305\u542b\u89e3\u6790\u8bf7\u6c42\u5185\u5bb9\u53ef\u80fd\u9700\u8981\u7684\u4efb\u4f55\u9644\u52a0\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u5305\u542b\u4ee5\u4e0bkeys: view , request , args , kwargs \u3002","title":"parser_context"},{"location":"api-guide/parsers_zh/#_7","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2aPlain text\u7684\u793a\u4f8b\uff0c\u5b83\u5c06\u4f7f\u7528\u8868\u793a\u8bf7\u6c42\u6b63\u6587\u7684\u5b57\u7b26\u4e32\u586b\u5145 request.data \u5c5e\u6027\u3002 class PlainTextParser(BaseParser): \"\"\" Plain text \u89e3\u6790\u5668\u3002 \"\"\" media_type = 'text/plain' def parse(self, stream, media_type=None, parser_context=None): \"\"\" \u53ea\u9700\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u6b63\u6587\u7684\u5b57\u7b26\u4e32\u3002 \"\"\" return stream.read()","title":"\u4f8b\u5b50"},{"location":"api-guide/parsers_zh/#_8","text":"\u4ee5\u4e0b\u662f\u53ef\u7528\u7684\u7b2c\u4e09\u65b9\u5305\u3002","title":"\u7b2c\u4e09\u65b9\u5305"},{"location":"api-guide/parsers_zh/#yaml","text":"REST framework YAML \u63d0\u4f9b\u4e86 YAML \u89e3\u6790\u548c\u5448\u73b0\u7684\u652f\u6301\u3002\u4e4b\u524d\u5b83\u662f\u76f4\u63a5\u5305\u542b\u5728REST\u6846\u67b6\u5305\u4e2d\u7684\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002","title":"YAML"},{"location":"api-guide/parsers_zh/#_9","text":"\u4f7f\u7528pip\u8fdb\u884c\u5b89\u88c5\u3002 $ pip install djangorestframework-yaml \u4fee\u6539\u4f60\u7684 REST framework settings\u3002 REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_yaml.parsers.YAMLParser', ), 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_yaml.renderers.YAMLRenderer', ), }","title":"\u5b89\u88c5\u548c\u914d\u7f6e"},{"location":"api-guide/parsers_zh/#xml","text":"REST Framework XML \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u975e\u6b63\u5f0fXML\u683c\u5f0f\u3002\u5b83\u4ee5\u524d\u662f\u76f4\u63a5\u5305\u542b\u5728REST\u6846\u67b6\u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002","title":"XML"},{"location":"api-guide/parsers_zh/#_10","text":"\u4f7f\u7528pip\u8fdb\u884c\u5b89\u88c5\u3002 $ pip install djangorestframework-xml \u4fee\u6539\u4f60\u7684 REST framework settings. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_xml.parsers.XMLParser', ), 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_xml.renderers.XMLRenderer', ), }","title":"\u5b89\u88c5\u548c\u914d\u7f6e"},{"location":"api-guide/parsers_zh/#messagepack","text":"MessagePack \u662f\u4e00\u79cd\u5feb\u901f\uff0c\u9ad8\u6548\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\u3002 Juan Riaza \u7ef4\u62a4\u4e86 djangorestframework-msgpack \u5305\uff0c\u5b83\u4e3aREST\u6846\u67b6\u63d0\u4f9bMessagePack\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u652f\u6301\u3002","title":"MessagePack"},{"location":"api-guide/parsers_zh/#camelcase-json","text":"djangorestframework-camel-case \u4e3aREST framework\u63d0\u4f9b\u4e86\u9a7c\u5cf0\u7c7b\u578bJSON \u751f\u6210\u548c\u89e3\u6790\u3002\u8fd9\u4e2a\u5e93\u5141\u8bb8\u5e8f\u5217\u5316\u7a0b\u5e8f\u4f7f\u7528Python\u98ce\u683c\u7684\u4e0b\u5212\u7ebf\u5b57\u6bb5\u540d\u79f0\uff0c\u5e76\u4e14\u5c06\u5176\u8f6c\u53d8\u4e3aJavascript\u98ce\u683c\u7684\u9a7c\u5cf0\u5b57\u6bb5\u540d\u79f0\u5728API\u4e2d\u516c\u5f00\u3002\u8fd9\u4e2a\u5e93\u7531 Vitaly Babiy \u7ef4\u62a4\u3002","title":"CamelCase JSON"},{"location":"api-guide/permissions/","text":"Permissions Authentication or identification by itself is not usually sufficient to gain access to information or code. For that, the entity requesting access must have authorization. \u2014 Apple Developer Documentation Together with authentication and throttling , permissions determine whether a request should be granted or denied access. Permission checks are always run at the very start of the view, before any other code is allowed to proceed. Permission checks will typically use the authentication information in the request.user and request.auth properties to determine if the incoming request should be permitted. Permissions are used to grant or deny access for different classes of users to different parts of the API. The simplest style of permission would be to allow access to any authenticated user, and deny access to any unauthenticated user. This corresponds to the IsAuthenticated class in REST framework. A slightly less strict style of permission would be to allow full access to authenticated users, but allow read-only access to unauthenticated users. This corresponds to the IsAuthenticatedOrReadOnly class in REST framework. How permissions are determined Permissions in REST framework are always defined as a list of permission classes. Before running the main body of the view each permission in the list is checked. If any permission check fails an exceptions.PermissionDenied or exceptions.NotAuthenticated exception will be raised, and the main body of the view will not run. When the permissions checks fail either a \"403 Forbidden\" or a \"401 Unauthorized\" response will be returned, according to the following rules: The request was successfully authenticated, but permission was denied. \u2014 An HTTP 403 Forbidden response will be returned. The request was not successfully authenticated, and the highest priority authentication class does not use WWW-Authenticate headers. \u2014 An HTTP 403 Forbidden response will be returned. The request was not successfully authenticated, and the highest priority authentication class does use WWW-Authenticate headers. \u2014 An HTTP 401 Unauthorized response, with an appropriate WWW-Authenticate header will be returned. Object level permissions REST framework permissions also support object-level permissioning. Object level permissions are used to determine if a user should be allowed to act on a particular object, which will typically be a model instance. Object level permissions are run by REST framework's generic views when .get_object() is called. As with view level permissions, an exceptions.PermissionDenied exception will be raised if the user is not allowed to act on the given object. If you're writing your own views and want to enforce object level permissions, or if you override the get_object method on a generic view, then you'll need to explicitly call the .check_object_permissions(request, obj) method on the view at the point at which you've retrieved the object. This will either raise a PermissionDenied or NotAuthenticated exception, or simply return if the view has the appropriate permissions. For example: def get_object(self): obj = get_object_or_404(self.get_queryset(), pk=self.kwargs[\"pk\"]) self.check_object_permissions(self.request, obj) return obj Note : With the exception of DjangoObjectPermissions , the provided permission classes in rest_framework.permissions do not implement the methods necessary to check object permissions. If you wish to use the provided permission classes in order to check object permissions, you must subclass them and implement the has_object_permission() method described in the Custom permissions section (below). Limitations of object level permissions For performance reasons the generic views will not automatically apply object level permissions to each instance in a queryset when returning a list of objects. Often when you're using object level permissions you'll also want to filter the queryset appropriately, to ensure that users only have visibility onto instances that they are permitted to view. Setting the permission policy The default permission policy may be set globally, using the DEFAULT_PERMISSION_CLASSES setting. For example. REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.IsAuthenticated', ] } If not specified, this setting defaults to allowing unrestricted access: 'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.AllowAny', ] You can also set the authentication policy on a per-view, or per-viewset basis, using the APIView class-based views. from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): permission_classes = [IsAuthenticated] def get(self, request, format=None): content = { 'status': 'request was permitted' } return Response(content) Or, if you're using the @api_view decorator with function based views. from rest_framework.decorators import api_view, permission_classes from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response @api_view(['GET']) @permission_classes([IsAuthenticated]) def example_view(request, format=None): content = { 'status': 'request was permitted' } return Response(content) Note: when you set new permission classes through class attribute or decorators you're telling the view to ignore the default list set over the settings.py file. Provided they inherit from rest_framework.permissions.BasePermission , permissions can be composed using standard Python bitwise operators. For example, IsAuthenticatedOrReadOnly could be written: from rest_framework.permissions import BasePermission, IsAuthenticated, SAFE_METHODS from rest_framework.response import Response from rest_framework.views import APIView class ReadOnly(BasePermission): def has_permission(self, request, view): return request.method in SAFE_METHODS class ExampleView(APIView): permission_classes = [IsAuthenticated|ReadOnly] def get(self, request, format=None): content = { 'status': 'request was permitted' } return Response(content) Note: it supports & (and), | (or) and ~ (not). API Reference AllowAny The AllowAny permission class will allow unrestricted access, regardless of if the request was authenticated or unauthenticated . This permission is not strictly required, since you can achieve the same result by using an empty list or tuple for the permissions setting, but you may find it useful to specify this class because it makes the intention explicit. IsAuthenticated The IsAuthenticated permission class will deny permission to any unauthenticated user, and allow permission otherwise. This permission is suitable if you want your API to only be accessible to registered users. IsAdminUser The IsAdminUser permission class will deny permission to any user, unless user.is_staff is True in which case permission will be allowed. This permission is suitable if you want your API to only be accessible to a subset of trusted administrators. IsAuthenticatedOrReadOnly The IsAuthenticatedOrReadOnly will allow authenticated users to perform any request. Requests for unauthorised users will only be permitted if the request method is one of the \"safe\" methods; GET , HEAD or OPTIONS . This permission is suitable if you want to your API to allow read permissions to anonymous users, and only allow write permissions to authenticated users. DjangoModelPermissions This permission class ties into Django's standard django.contrib.auth model permissions . This permission must only be applied to views that have a .queryset property set. Authorization will only be granted if the user is authenticated and has the relevant model permissions assigned. POST requests require the user to have the add permission on the model. PUT and PATCH requests require the user to have the change permission on the model. DELETE requests require the user to have the delete permission on the model. The default behaviour can also be overridden to support custom model permissions. For example, you might want to include a view model permission for GET requests. To use custom model permissions, override DjangoModelPermissions and set the .perms_map property. Refer to the source code for details. Using with views that do not include a queryset attribute. If you're using this permission with a view that uses an overridden get_queryset() method there may not be a queryset attribute on the view. In this case we suggest also marking the view with a sentinel queryset, so that this class can determine the required permissions. For example: queryset = User.objects.none() # Required for DjangoModelPermissions DjangoModelPermissionsOrAnonReadOnly Similar to DjangoModelPermissions , but also allows unauthenticated users to have read-only access to the API. DjangoObjectPermissions This permission class ties into Django's standard object permissions framework that allows per-object permissions on models. In order to use this permission class, you'll also need to add a permission backend that supports object-level permissions, such as django-guardian . As with DjangoModelPermissions , this permission must only be applied to views that have a .queryset property or .get_queryset() method. Authorization will only be granted if the user is authenticated and has the relevant per-object permissions and relevant model permissions assigned. POST requests require the user to have the add permission on the model instance. PUT and PATCH requests require the user to have the change permission on the model instance. DELETE requests require the user to have the delete permission on the model instance. Note that DjangoObjectPermissions does not require the django-guardian package, and should support other object-level backends equally well. As with DjangoModelPermissions you can use custom model permissions by overriding DjangoObjectPermissions and setting the .perms_map property. Refer to the source code for details. Note : If you need object level view permissions for GET , HEAD and OPTIONS requests and are using django-guardian for your object-level permissions backend, you'll want to consider using the DjangoObjectPermissionsFilter class provided by the djangorestframework-guardian package . It ensures that list endpoints only return results including objects for which the user has appropriate view permissions. Custom permissions To implement a custom permission, override BasePermission and implement either, or both, of the following methods: .has_permission(self, request, view) .has_object_permission(self, request, view, obj) The methods should return True if the request should be granted access, and False otherwise. If you need to test if a request is a read operation or a write operation, you should check the request method against the constant SAFE_METHODS , which is a tuple containing 'GET' , 'OPTIONS' and 'HEAD' . For example: if request.method in permissions.SAFE_METHODS: # Check permissions for read-only request else: # Check permissions for write request Note : The instance-level has_object_permission method will only be called if the view-level has_permission checks have already passed. Also note that in order for the instance-level checks to run, the view code should explicitly call .check_object_permissions(request, obj) . If you are using the generic views then this will be handled for you by default. (Function-based views will need to check object permissions explicitly, raising PermissionDenied on failure.) Custom permissions will raise a PermissionDenied exception if the test fails. To change the error message associated with the exception, implement a message attribute directly on your custom permission. Otherwise the default_detail attribute from PermissionDenied will be used. Similarly, to change the code identifier associated with the exception, implement a code attribute directly on your custom permission - otherwise the default_code attribute from PermissionDenied will be used. from rest_framework import permissions class CustomerAccessPermission(permissions.BasePermission): message = 'Adding customers not allowed.' def has_permission(self, request, view): ... Examples The following is an example of a permission class that checks the incoming request's IP address against a blacklist, and denies the request if the IP has been blacklisted. from rest_framework import permissions class BlacklistPermission(permissions.BasePermission): \"\"\" Global permission check for blacklisted IPs. \"\"\" def has_permission(self, request, view): ip_addr = request.META['REMOTE_ADDR'] blacklisted = Blacklist.objects.filter(ip_addr=ip_addr).exists() return not blacklisted As well as global permissions, that are run against all incoming requests, you can also create object-level permissions, that are only run against operations that affect a particular object instance. For example: class IsOwnerOrReadOnly(permissions.BasePermission): \"\"\" Object-level permission to only allow owners of an object to edit it. Assumes the model instance has an `owner` attribute. \"\"\" def has_object_permission(self, request, view, obj): # Read permissions are allowed to any request, # so we'll always allow GET, HEAD or OPTIONS requests. if request.method in permissions.SAFE_METHODS: return True # Instance must have an attribute named `owner`. return obj.owner == request.user Note that the generic views will check the appropriate object level permissions, but if you're writing your own custom views, you'll need to make sure you check the object level permission checks yourself. You can do so by calling self.check_object_permissions(request, obj) from the view once you have the object instance. This call will raise an appropriate APIException if any object-level permission checks fail, and will otherwise simply return. Also note that the generic views will only check the object-level permissions for views that retrieve a single model instance. If you require object-level filtering of list views, you'll need to filter the queryset separately. See the filtering documentation for more details. Third party packages The following third party packages are also available. DRF - Access Policy The Django REST - Access Policy package provides a way to define complex access rules in declarative policy classes that are attached to view sets or function-based views. The policies are defined in JSON in a format similar to AWS' Identity & Access Management policies. Composed Permissions The Composed Permissions package provides a simple way to define complex and multi-depth (with logic operators) permission objects, using small and reusable components. REST Condition The REST Condition package is another extension for building complex permissions in a simple and convenient way. The extension allows you to combine permissions with logical operators. DRY Rest Permissions The DRY Rest Permissions package provides the ability to define different permissions for individual default and custom actions. This package is made for apps with permissions that are derived from relationships defined in the app's data model. It also supports permission checks being returned to a client app through the API's serializer. Additionally it supports adding permissions to the default and custom list actions to restrict the data they retrieve per user. Django Rest Framework Roles The Django Rest Framework Roles package makes it easier to parameterize your API over multiple types of users. Django REST Framework API Key The Django REST Framework API Key package provides permissions classes, models and helpers to add API key authorization to your API. It can be used to authorize internal or third-party backends and services (i.e. machines ) which do not have a user account. API keys are stored securely using Django's password hashing infrastructure, and they can be viewed, edited and revoked at anytime in the Django admin. Django Rest Framework Role Filters The Django Rest Framework Role Filters package provides simple filtering over multiple types of roles.","title":"Permissions"},{"location":"api-guide/permissions/#permissions","text":"Authentication or identification by itself is not usually sufficient to gain access to information or code. For that, the entity requesting access must have authorization. \u2014 Apple Developer Documentation Together with authentication and throttling , permissions determine whether a request should be granted or denied access. Permission checks are always run at the very start of the view, before any other code is allowed to proceed. Permission checks will typically use the authentication information in the request.user and request.auth properties to determine if the incoming request should be permitted. Permissions are used to grant or deny access for different classes of users to different parts of the API. The simplest style of permission would be to allow access to any authenticated user, and deny access to any unauthenticated user. This corresponds to the IsAuthenticated class in REST framework. A slightly less strict style of permission would be to allow full access to authenticated users, but allow read-only access to unauthenticated users. This corresponds to the IsAuthenticatedOrReadOnly class in REST framework.","title":"Permissions"},{"location":"api-guide/permissions/#how-permissions-are-determined","text":"Permissions in REST framework are always defined as a list of permission classes. Before running the main body of the view each permission in the list is checked. If any permission check fails an exceptions.PermissionDenied or exceptions.NotAuthenticated exception will be raised, and the main body of the view will not run. When the permissions checks fail either a \"403 Forbidden\" or a \"401 Unauthorized\" response will be returned, according to the following rules: The request was successfully authenticated, but permission was denied. \u2014 An HTTP 403 Forbidden response will be returned. The request was not successfully authenticated, and the highest priority authentication class does not use WWW-Authenticate headers. \u2014 An HTTP 403 Forbidden response will be returned. The request was not successfully authenticated, and the highest priority authentication class does use WWW-Authenticate headers. \u2014 An HTTP 401 Unauthorized response, with an appropriate WWW-Authenticate header will be returned.","title":"How permissions are determined"},{"location":"api-guide/permissions/#object-level-permissions","text":"REST framework permissions also support object-level permissioning. Object level permissions are used to determine if a user should be allowed to act on a particular object, which will typically be a model instance. Object level permissions are run by REST framework's generic views when .get_object() is called. As with view level permissions, an exceptions.PermissionDenied exception will be raised if the user is not allowed to act on the given object. If you're writing your own views and want to enforce object level permissions, or if you override the get_object method on a generic view, then you'll need to explicitly call the .check_object_permissions(request, obj) method on the view at the point at which you've retrieved the object. This will either raise a PermissionDenied or NotAuthenticated exception, or simply return if the view has the appropriate permissions. For example: def get_object(self): obj = get_object_or_404(self.get_queryset(), pk=self.kwargs[\"pk\"]) self.check_object_permissions(self.request, obj) return obj Note : With the exception of DjangoObjectPermissions , the provided permission classes in rest_framework.permissions do not implement the methods necessary to check object permissions. If you wish to use the provided permission classes in order to check object permissions, you must subclass them and implement the has_object_permission() method described in the Custom permissions section (below).","title":"Object level permissions"},{"location":"api-guide/permissions/#limitations-of-object-level-permissions","text":"For performance reasons the generic views will not automatically apply object level permissions to each instance in a queryset when returning a list of objects. Often when you're using object level permissions you'll also want to filter the queryset appropriately, to ensure that users only have visibility onto instances that they are permitted to view.","title":"Limitations of object level permissions"},{"location":"api-guide/permissions/#setting-the-permission-policy","text":"The default permission policy may be set globally, using the DEFAULT_PERMISSION_CLASSES setting. For example. REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.IsAuthenticated', ] } If not specified, this setting defaults to allowing unrestricted access: 'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.AllowAny', ] You can also set the authentication policy on a per-view, or per-viewset basis, using the APIView class-based views. from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): permission_classes = [IsAuthenticated] def get(self, request, format=None): content = { 'status': 'request was permitted' } return Response(content) Or, if you're using the @api_view decorator with function based views. from rest_framework.decorators import api_view, permission_classes from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response @api_view(['GET']) @permission_classes([IsAuthenticated]) def example_view(request, format=None): content = { 'status': 'request was permitted' } return Response(content) Note: when you set new permission classes through class attribute or decorators you're telling the view to ignore the default list set over the settings.py file. Provided they inherit from rest_framework.permissions.BasePermission , permissions can be composed using standard Python bitwise operators. For example, IsAuthenticatedOrReadOnly could be written: from rest_framework.permissions import BasePermission, IsAuthenticated, SAFE_METHODS from rest_framework.response import Response from rest_framework.views import APIView class ReadOnly(BasePermission): def has_permission(self, request, view): return request.method in SAFE_METHODS class ExampleView(APIView): permission_classes = [IsAuthenticated|ReadOnly] def get(self, request, format=None): content = { 'status': 'request was permitted' } return Response(content) Note: it supports & (and), | (or) and ~ (not).","title":"Setting the permission policy"},{"location":"api-guide/permissions/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/permissions/#allowany","text":"The AllowAny permission class will allow unrestricted access, regardless of if the request was authenticated or unauthenticated . This permission is not strictly required, since you can achieve the same result by using an empty list or tuple for the permissions setting, but you may find it useful to specify this class because it makes the intention explicit.","title":"AllowAny"},{"location":"api-guide/permissions/#isauthenticated","text":"The IsAuthenticated permission class will deny permission to any unauthenticated user, and allow permission otherwise. This permission is suitable if you want your API to only be accessible to registered users.","title":"IsAuthenticated"},{"location":"api-guide/permissions/#isadminuser","text":"The IsAdminUser permission class will deny permission to any user, unless user.is_staff is True in which case permission will be allowed. This permission is suitable if you want your API to only be accessible to a subset of trusted administrators.","title":"IsAdminUser"},{"location":"api-guide/permissions/#isauthenticatedorreadonly","text":"The IsAuthenticatedOrReadOnly will allow authenticated users to perform any request. Requests for unauthorised users will only be permitted if the request method is one of the \"safe\" methods; GET , HEAD or OPTIONS . This permission is suitable if you want to your API to allow read permissions to anonymous users, and only allow write permissions to authenticated users.","title":"IsAuthenticatedOrReadOnly"},{"location":"api-guide/permissions/#djangomodelpermissions","text":"This permission class ties into Django's standard django.contrib.auth model permissions . This permission must only be applied to views that have a .queryset property set. Authorization will only be granted if the user is authenticated and has the relevant model permissions assigned. POST requests require the user to have the add permission on the model. PUT and PATCH requests require the user to have the change permission on the model. DELETE requests require the user to have the delete permission on the model. The default behaviour can also be overridden to support custom model permissions. For example, you might want to include a view model permission for GET requests. To use custom model permissions, override DjangoModelPermissions and set the .perms_map property. Refer to the source code for details.","title":"DjangoModelPermissions"},{"location":"api-guide/permissions/#using-with-views-that-do-not-include-a-queryset-attribute","text":"If you're using this permission with a view that uses an overridden get_queryset() method there may not be a queryset attribute on the view. In this case we suggest also marking the view with a sentinel queryset, so that this class can determine the required permissions. For example: queryset = User.objects.none() # Required for DjangoModelPermissions","title":"Using with views that do not include a queryset attribute."},{"location":"api-guide/permissions/#djangomodelpermissionsoranonreadonly","text":"Similar to DjangoModelPermissions , but also allows unauthenticated users to have read-only access to the API.","title":"DjangoModelPermissionsOrAnonReadOnly"},{"location":"api-guide/permissions/#djangoobjectpermissions","text":"This permission class ties into Django's standard object permissions framework that allows per-object permissions on models. In order to use this permission class, you'll also need to add a permission backend that supports object-level permissions, such as django-guardian . As with DjangoModelPermissions , this permission must only be applied to views that have a .queryset property or .get_queryset() method. Authorization will only be granted if the user is authenticated and has the relevant per-object permissions and relevant model permissions assigned. POST requests require the user to have the add permission on the model instance. PUT and PATCH requests require the user to have the change permission on the model instance. DELETE requests require the user to have the delete permission on the model instance. Note that DjangoObjectPermissions does not require the django-guardian package, and should support other object-level backends equally well. As with DjangoModelPermissions you can use custom model permissions by overriding DjangoObjectPermissions and setting the .perms_map property. Refer to the source code for details. Note : If you need object level view permissions for GET , HEAD and OPTIONS requests and are using django-guardian for your object-level permissions backend, you'll want to consider using the DjangoObjectPermissionsFilter class provided by the djangorestframework-guardian package . It ensures that list endpoints only return results including objects for which the user has appropriate view permissions.","title":"DjangoObjectPermissions"},{"location":"api-guide/permissions/#custom-permissions","text":"To implement a custom permission, override BasePermission and implement either, or both, of the following methods: .has_permission(self, request, view) .has_object_permission(self, request, view, obj) The methods should return True if the request should be granted access, and False otherwise. If you need to test if a request is a read operation or a write operation, you should check the request method against the constant SAFE_METHODS , which is a tuple containing 'GET' , 'OPTIONS' and 'HEAD' . For example: if request.method in permissions.SAFE_METHODS: # Check permissions for read-only request else: # Check permissions for write request Note : The instance-level has_object_permission method will only be called if the view-level has_permission checks have already passed. Also note that in order for the instance-level checks to run, the view code should explicitly call .check_object_permissions(request, obj) . If you are using the generic views then this will be handled for you by default. (Function-based views will need to check object permissions explicitly, raising PermissionDenied on failure.) Custom permissions will raise a PermissionDenied exception if the test fails. To change the error message associated with the exception, implement a message attribute directly on your custom permission. Otherwise the default_detail attribute from PermissionDenied will be used. Similarly, to change the code identifier associated with the exception, implement a code attribute directly on your custom permission - otherwise the default_code attribute from PermissionDenied will be used. from rest_framework import permissions class CustomerAccessPermission(permissions.BasePermission): message = 'Adding customers not allowed.' def has_permission(self, request, view): ...","title":"Custom permissions"},{"location":"api-guide/permissions/#examples","text":"The following is an example of a permission class that checks the incoming request's IP address against a blacklist, and denies the request if the IP has been blacklisted. from rest_framework import permissions class BlacklistPermission(permissions.BasePermission): \"\"\" Global permission check for blacklisted IPs. \"\"\" def has_permission(self, request, view): ip_addr = request.META['REMOTE_ADDR'] blacklisted = Blacklist.objects.filter(ip_addr=ip_addr).exists() return not blacklisted As well as global permissions, that are run against all incoming requests, you can also create object-level permissions, that are only run against operations that affect a particular object instance. For example: class IsOwnerOrReadOnly(permissions.BasePermission): \"\"\" Object-level permission to only allow owners of an object to edit it. Assumes the model instance has an `owner` attribute. \"\"\" def has_object_permission(self, request, view, obj): # Read permissions are allowed to any request, # so we'll always allow GET, HEAD or OPTIONS requests. if request.method in permissions.SAFE_METHODS: return True # Instance must have an attribute named `owner`. return obj.owner == request.user Note that the generic views will check the appropriate object level permissions, but if you're writing your own custom views, you'll need to make sure you check the object level permission checks yourself. You can do so by calling self.check_object_permissions(request, obj) from the view once you have the object instance. This call will raise an appropriate APIException if any object-level permission checks fail, and will otherwise simply return. Also note that the generic views will only check the object-level permissions for views that retrieve a single model instance. If you require object-level filtering of list views, you'll need to filter the queryset separately. See the filtering documentation for more details.","title":"Examples"},{"location":"api-guide/permissions/#third-party-packages","text":"The following third party packages are also available.","title":"Third party packages"},{"location":"api-guide/permissions/#drf-access-policy","text":"The Django REST - Access Policy package provides a way to define complex access rules in declarative policy classes that are attached to view sets or function-based views. The policies are defined in JSON in a format similar to AWS' Identity & Access Management policies.","title":"DRF - Access Policy"},{"location":"api-guide/permissions/#composed-permissions","text":"The Composed Permissions package provides a simple way to define complex and multi-depth (with logic operators) permission objects, using small and reusable components.","title":"Composed Permissions"},{"location":"api-guide/permissions/#rest-condition","text":"The REST Condition package is another extension for building complex permissions in a simple and convenient way. The extension allows you to combine permissions with logical operators.","title":"REST Condition"},{"location":"api-guide/permissions/#dry-rest-permissions","text":"The DRY Rest Permissions package provides the ability to define different permissions for individual default and custom actions. This package is made for apps with permissions that are derived from relationships defined in the app's data model. It also supports permission checks being returned to a client app through the API's serializer. Additionally it supports adding permissions to the default and custom list actions to restrict the data they retrieve per user.","title":"DRY Rest Permissions"},{"location":"api-guide/permissions/#django-rest-framework-roles","text":"The Django Rest Framework Roles package makes it easier to parameterize your API over multiple types of users.","title":"Django Rest Framework Roles"},{"location":"api-guide/permissions/#django-rest-framework-api-key","text":"The Django REST Framework API Key package provides permissions classes, models and helpers to add API key authorization to your API. It can be used to authorize internal or third-party backends and services (i.e. machines ) which do not have a user account. API keys are stored securely using Django's password hashing infrastructure, and they can be viewed, edited and revoked at anytime in the Django admin.","title":"Django REST Framework API Key"},{"location":"api-guide/permissions/#django-rest-framework-role-filters","text":"The Django Rest Framework Role Filters package provides simple filtering over multiple types of roles.","title":"Django Rest Framework Role Filters"},{"location":"api-guide/permissions_zh/","text":"\u6743\u9650 \u8eab\u4efd\u9a8c\u8bc1\u6216\u8eab\u4efd\u8bc6\u522b\u672c\u8eab\u901a\u5e38\u4e0d\u8db3\u4ee5\u83b7\u53d6\u4fe1\u606f\u6216\u4ee3\u7801\u7684\u8bbf\u95ee\u6743\u9650\u3002\u56e0\u6b64\uff0c\u8bf7\u6c42\u8bbf\u95ee\u7684\u5b9e\u4f53\u5fc5\u987b\u5177\u6709\u6388\u6743\u3002 \u2014 Apple Developer Documentation \u8fde\u540c \u8ba4\u8bc1 \u548c \u9650\u5236 \uff0c\u6743\u9650\u51b3\u5b9a\u662f\u5426\u5e94\u8be5\u63a5\u6536\u8bf7\u6c42\u6216\u62d2\u7edd\u8bbf\u95ee\u3002 \u6743\u9650\u68c0\u67e5\u59cb\u7ec8\u5728\u89c6\u56fe\u7684\u5f00\u59cb\u5904\u8fd0\u884c\uff0c\u5728\u5141\u8bb8\u7ee7\u7eed\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u4e4b\u524d\u8fd0\u884c\u3002 \u6743\u9650\u68c0\u67e5\u901a\u5e38\u4f1a\u4f7f\u7528 request.user \u548c request.auth \u5c5e\u6027\u4e2d\u7684\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\u6765\u786e\u5b9a\u662f\u5426\u5141\u8bb8\u4f20\u5165\u8bf7\u6c42\u3002 \u6743\u9650\u7528\u4e8e\u6388\u4e88\u6216\u62d2\u7edd\u5c06\u4e0d\u540c\u7c7b\u522b\u7684\u7528\u6237\u8bbf\u95ee\u5230API\u7684\u4e0d\u540c\u90e8\u5206\u3002 \u6700\u7b80\u5355\u7684\u6743\u9650\u662f\u5141\u8bb8\u8bbf\u95ee\u4efb\u4f55\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\uff0c\u5e76\u62d2\u7edd\u8bbf\u95ee\u4efb\u4f55\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u3002\u8fd9\u5bf9\u5e94\u4e8eREST\u6846\u67b6\u4e2d\u7684 IsAuthenticated \u7c7b\u3002 \u7a0d\u5fae\u4e25\u683c\u7684\u6743\u9650\u63a7\u5236\u98ce\u683c\u662f\u5bf9\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u5141\u8bb8\u5b8c\u5168\u8bbf\u95ee\uff0c\u4f46\u5bf9\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u5141\u8bb8\u53ea\u8bfb\u8bbf\u95ee\u3002\u8fd9\u5bf9\u5e94\u4e8eREST\u6846\u67b6\u4e2d\u7684 IsAuthenticatedOrReadOnly \u7c7b\u3002 \u5982\u4f55\u786e\u5b9a\u6743\u9650 REST\u6846\u67b6\u4e2d\u7684\u6743\u9650\u59cb\u7ec8\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6743\u9650\u7c7b\u7684\u5217\u8868\u3002 \u5728\u8fd0\u884c\u89c6\u56fe\u7684\u4e3b\u4f53\u4e4b\u524d\uff0c\u68c0\u67e5\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6743\u9650\u3002 \u5982\u679c\u4efb\u4f55\u6743\u9650\u68c0\u67e5\u5931\u8d25\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a exceptions.PermissionDenied \u6216 exceptions.NotAuthenticated \u5f02\u5e38\uff0c\u5e76\u4e14\u89c6\u56fe\u7684\u4e3b\u4f53\u5c06\u4e0d\u4f1a\u8fd0\u884c\u3002 \u5f53\u6743\u9650\u68c0\u67e5\u5931\u8d25\u65f6\uff0c\u5c06\u8fd4\u56de\"403 Forbidden\"\u6216\"401 Unauthorized\"\u54cd\u5e94\uff0c\u5177\u4f53\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff1a \u8bf7\u6c42\u5df2\u6210\u529f\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u6743\u9650\u88ab\u62d2\u7edd\u3002 \u2014 \u5c06\u8fd4\u56de403 Forbidden\u54cd\u5e94\u3002 \u8bf7\u6c42\u672a\u6210\u529f\u8ba4\u8bc1\uff0c\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u8ba4\u8bc1\u7c7b \u4e0d\u4f7f\u7528 WWW-Authenticate \u6807\u5934\u3002 \u2014 \u5c06\u8fd4\u56de403 Forbidden\u54cd\u5e94\u3002 \u8bf7\u6c42\u672a\u6210\u529f\u8ba4\u8bc1\uff0c\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u8ba4\u8bc1\u7c7b \u4f7f\u7528 WWW-Authenticate \u6807\u5934\u3002 \u2014 \u5c06\u8fd4\u56deHTTP 401\u672a\u7ecf\u6388\u6743\u7684\u54cd\u5e94\uff0c\u5e76\u9644\u5e26\u9002\u5f53\u7684 WWW-Authenticate \u6807\u5934\u3002 \u5bf9\u8c61\u7ea7\u6743\u9650 REST\u6846\u67b6\u6743\u9650\u8fd8\u652f\u6301\u5bf9\u8c61\u7ea7\u7684\u8bb8\u53ef\u3002\u5bf9\u8c61\u7ea7\u6743\u9650\u7528\u4e8e\u786e\u5b9a\u662f\u5426\u5141\u8bb8\u7528\u6237\u64cd\u4f5c\u7279\u5b9a\u5bf9\u8c61\uff08\u901a\u5e38\u662f\u6a21\u578b\u5b9e\u4f8b\uff09\u3002 \u5f53\u8c03\u7528 .get_object() \u65f6\uff0c\u7531REST\u6846\u67b6\u7684\u901a\u7528\u89c6\u56fe\u8fd0\u884c\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u6d4b\u3002 \u4e0e\u89c6\u56fe\u7ea7\u522b\u6743\u9650\u4e00\u6837\uff0c\u5982\u679c\u4e0d\u5141\u8bb8\u7528\u6237\u64cd\u4f5c\u7ed9\u5b9a\u5bf9\u8c61\uff0c\u5219\u4f1a\u629b\u51fa exceptions.PermissionDenied \u5f02\u5e38\u3002 \u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199\u81ea\u5df1\u7684\u89c6\u56fe\u5e76\u5e0c\u671b\u5f3a\u5236\u6267\u884c\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u6d4b\uff0c\u6216\u8005\u4f60\u60f3\u5728\u901a\u7528\u89c6\u56fe\u4e2d\u91cd\u5199 get_object \u65b9\u6cd5\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u5728\u68c0\u7d22\u5bf9\u8c61\u7684\u65f6\u5019\u663e\u5f0f\u8c03\u7528\u89c6\u56fe\u4e0a\u7684 .check_object_permissions(request, obj) \u65b9\u6cd5\u3002 \u8fd9\u5c06\u629b\u51fa PermissionDenied \u6216 NotAuthenticated \u5f02\u5e38\uff0c\u6216\u8005\u5982\u679c\u89c6\u56fe\u5177\u6709\u9002\u5f53\u7684\u6743\u9650\uff0c\u5219\u8fd4\u56de\u3002 \u4f8b\u5982\uff1a def get_object(self): obj = get_object_or_404(self.get_queryset()) self.check_object_permissions(self.request, obj) return obj \u5bf9\u8c61\u7ea7\u522b\u7684\u6743\u9650\u9650\u5236 \u51fa\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u901a\u7528\u89c6\u56fe\u5728\u8fd4\u56de\u5bf9\u8c61\u5217\u8868\u65f6\u4e0d\u4f1a\u81ea\u52a8\u5c06\u5bf9\u8c61\u7ea7\u6743\u9650\u5e94\u7528\u4e8e\u67e5\u8be2\u96c6\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u3002 \u901a\u5e38\uff0c\u5f53\u4f60\u4f7f\u7528\u5bf9\u8c61\u7ea7\u6743\u9650\u65f6\uff0c\u4f60\u8fd8\u9700\u8981\u9002\u5f53\u5730 \u8fc7\u6ee4\u67e5\u8be2\u96c6 \u8fc7\u6ee4\u67e5\u8be2\u96c6\uff0c\u4ee5\u786e\u4fdd\u7528\u6237\u53ea\u80fd\u770b\u5230\u4ed6\u4eec\u88ab\u5141\u8bb8\u67e5\u770b\u7684\u5b9e\u4f8b\u3002 \u8bbe\u7f6e\u6743\u9650\u7b56\u7565 \u9ed8\u8ba4\u6743\u9650\u7b56\u7565\u53ef\u4ee5\u4f7f\u7528 DEFAULT_PERMISSION_CLASSES \u8bbe\u7f6e\u8fdb\u884c\u5168\u5c40\u8bbe\u7f6e\u3002\u6bd4\u5982\uff1a REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.IsAuthenticated', ) } \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u6b64\u8bbe\u7f6e\u9ed8\u8ba4\u4e3a\u5141\u8bb8\u65e0\u9650\u5236\u8bbf\u95ee\uff1a 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.AllowAny', ) \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e APIView \u7c7b\u7684\u89c6\u56fe\u5728\u6bcf\u4e2a\u89c6\u56fe\u6216\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002 from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): permission_classes = (IsAuthenticated,) def get(self, request, format=None): content = { 'status': 'request was permitted' } return Response(content) \u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528 @api_view \u88c5\u9970\u5668\u88c5\u9970\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002 from rest_framework.decorators import api_view, permission_classes from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response @api_view(['GET']) @permission_classes((IsAuthenticated, )) def example_view(request, format=None): content = { 'status': 'request was permitted' } return Response(content) \u6ce8\u610f\uff1a \u5f53\u4f60\u901a\u8fc7\u7c7b\u5c5e\u6027\u6216\u88c5\u9970\u5668\u8bbe\u7f6e\u65b0\u7684\u6743\u9650\u7c7b\u65f6\uff0c\u4f60\u8981\u901a\u77e5\u89c6\u56fe\u5ffd\u7565__settings.py__\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684\u9ed8\u8ba4\u5217\u8868\u3002 API \u53c2\u8003 AllowAny AllowAny \u6743\u9650\u7c7b\u5c06\u5141\u8bb8\u4e0d\u53d7\u9650\u5236\u7684\u8bbf\u95ee\uff0c\u800c \u4e0d\u7ba1\u8be5\u8bf7\u6c42\u662f\u5426\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u6216\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1 \u3002 \u6b64\u6743\u9650\u4e0d\u662f\u4e25\u683c\u8981\u6c42\u7684\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7a7a\u5217\u8868\u6216\u5143\u7ec4\u8fdb\u884c\u6743\u9650\u8bbe\u7f6e\u6765\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u4f46\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u6307\u5b9a\u6b64\u7c7b\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4f7f\u610f\u56fe\u66f4\u660e\u786e\u3002 IsAuthenticated IsAuthenticated \u6743\u9650\u7c7b\u5c06\u62d2\u7edd\u4efb\u4f55\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u6743\u9650\uff0c\u5e76\u5141\u8bb8\u5176\u4ed6\u6743\u9650\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u4ec5\u4f9b\u6ce8\u518c\u7528\u6237\u8bbf\u95ee\uff0c\u5219\u6b64\u6743\u9650\u9002\u7528\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u5141\u8bb8\u533f\u540d\u7528\u6237\u8bfb\u53d6\u6743\u9650\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8\u5bf9\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u8fdb\u884c\u5199\u5165\u6743\u9650\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002 IsAdminUser \u9664\u975e user.is_staff \u4e3a True \uff0c\u5426\u5219 IsAdminUser \u6743\u9650\u7c7b\u5c06\u62d2\u7edd\u4efb\u4f55\u7528\u6237\u7684\u6743\u9650\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06\u5141\u8bb8\u6743\u9650\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u53ea\u80fd\u88ab\u90e8\u5206\u53d7\u4fe1\u4efb\u7684\u7ba1\u7406\u5458\u8bbf\u95ee\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002 IsAuthenticatedOrReadOnly IsAuthenticatedOrReadOnly \u5c06\u5141\u8bb8\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u6267\u884c\u4efb\u4f55\u8bf7\u6c42\u3002\u53ea\u6709\u5f53\u8bf7\u6c42\u65b9\u6cd5\u662f\u201c\u5b89\u5168\u201d\u65b9\u6cd5\uff08 GET , HEAD \u6216 OPTIONS \uff09\u4e4b\u4e00\u65f6\uff0c\u624d\u5141\u8bb8\u672a\u7ecf\u6388\u6743\u7684\u7528\u6237\u8bf7\u6c42\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u5141\u8bb8\u533f\u540d\u7528\u6237\u8bfb\u53d6\u6743\u9650\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8\u5bf9\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u8fdb\u884c\u5199\u5165\u6743\u9650\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002 DjangoModelPermissions \u6b64\u6743\u9650\u7c7b\u4e0eDjango\u7684\u6807\u51c6 django.contrib.auth model\u6743\u9650 \u76f8\u5173\u8054\u3002\u6b64\u6743\u9650\u53ea\u80fd\u5e94\u7528\u4e8e\u5177\u6709 .queryset \u5c5e\u6027\u96c6\u7684\u89c6\u56fe\u3002\u53ea\u6709\u5728\u7528\u6237 \u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1 \u5e76\u5206\u914d\u4e86 \u76f8\u5173\u6a21\u578b\u6743\u9650 \u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u4f1a\u88ab\u6388\u4e88\u6743\u9650\u3002 POST \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709 \u6dfb\u52a0 \u6743\u9650\u3002 PUT \u548c PATCH \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709 \u66f4\u6539 \u6743\u9650\u3002 DELETE \u8bf7\u6c42\u60f3\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709 \u5220\u9664 \u6743\u9650\u3002 \u9ed8\u8ba4\u884c\u4e3a\u4e5f\u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u652f\u6301\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4e3a GET \u8bf7\u6c42\u5305\u542b\u4e00\u4e2a \u67e5\u770b \u6a21\u578b\u7684\u6743\u9650\u3002 \u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\uff0c\u8bf7\u8986\u76d6 DjangoModelPermissions \u5e76\u8bbe\u7f6e .perms_map \u5c5e\u6027\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\u3002 \u4f7f\u7528\u4e0d\u5305\u542b queryset \u5c5e\u6027\u7684\u89c6\u56fe\u3002 \u5982\u679c\u4f60\u5728\u91cd\u5199\u4e86 get_queryset() \u65b9\u6cd5\u7684\u89c6\u56fe\u4e2d\u4f7f\u7528\u6b64\u6743\u9650\uff0c\u8fd9\u4e2a\u89c6\u56fe\u4e0a\u53ef\u80fd\u6ca1\u6709 queryset \u5c5e\u6027\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5efa\u8bae\u8fd8\u4f7f\u7528\u4fdd\u62a4\u6027\u7684\u67e5\u8be2\u96c6\u6765\u6807\u8bb0\u89c6\u56fe\uff0c\u4ee5\u4fbf\u6b64\u7c7b\u53ef\u4ee5\u786e\u5b9a\u6240\u9700\u7684\u6743\u9650\u3002\u6bd4\u5982\uff1a queryset = User.objects.none() # DjangoModelPermissions\u9700\u8981\u4e00\u4e2aqueryset DjangoModelPermissionsOrAnonReadOnly \u4e0e DjangoModelPermissions \u7c7b\u4f3c\uff0c\u4f46\u4e5f\u5141\u8bb8\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u5177\u6709\u5bf9API\u7684\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002 DjangoObjectPermissions \u6b64\u6743\u9650\u7c7b\u4e0eDjango\u7684\u6807\u51c6 \u5bf9\u8c61\u6743\u9650\u6846\u67b6 \u76f8\u5173\u8054\uff0c\u8be5\u6846\u67b6\u5141\u8bb8\u6a21\u578b\u4e0a\u7684\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6743\u9650\u3002\u4e3a\u4e86\u4f7f\u7528\u6b64\u6743\u9650\u7c7b\uff0c\u4f60\u8fd8\u9700\u8981\u6dfb\u52a0\u652f\u6301\u5bf9\u8c61\u7ea7\u6743\u9650\u7684\u6743\u9650\u540e\u7aef\uff0c\u4f8b\u5982 django-guardian \u3002 \u4e0e DjangoModelPermissions \u4e00\u6837\uff0c\u6b64\u6743\u9650\u53ea\u80fd\u5e94\u7528\u4e8e\u5177\u6709 .queryset \u5c5e\u6027\u6216 .get_queryset() \u65b9\u6cd5\u7684\u89c6\u56fe\u3002\u53ea\u6709\u5728\u7528\u6237\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u5e76\u4e14\u5177\u6709 \u76f8\u5173\u7684\u6bcf\u4e2a\u5bf9\u8c61\u6743\u9650 \u548c\u76f8\u5173\u7684 \u6a21\u578b\u6743\u9650 \u540e\uff0c\u624d\u4f1a\u88ab\u6388\u4e88\u6743\u9650\u3002 POST \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5b9e\u4f8b\u5177\u6709 \u6dfb\u52a0 \u6743\u9650\u3002 PUT \u548c PATCH \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u793a\u4f8b\u5177\u6709 \u66f4\u6539 \u6743\u9650\u3002 DELETE \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u793a\u4f8b\u5177\u6709 \u5220\u9664 \u6743\u9650\u3002 \u8bf7\u6ce8\u610f\uff0c DjangoObjectPermissions \u4e0d\u9700\u8981 django-guardian \u8f6f\u4ef6\u5305\uff0c\u5e76\u4e14\u5e94\u5f53\u540c\u6837\u652f\u6301\u5176\u4ed6\u5bf9\u8c61\u7ea7\u522b\u7684\u540e\u7aef\u3002 \u4e0e DjangoModelPermissions \u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 DjangoObjectPermissions \u5e76\u8bbe\u7f6e .perms_map \u5c5e\u6027\u6765\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\u3002 \u6ce8\u610f \uff1a\u5982\u679c\u4f60\u9700\u8981 GET , HEAD \u548c OPTIONS \u8bf7\u6c42\u7684\u5bf9\u8c61\u7ea7 \u89c6\u56fe \u6743\u9650\uff0c\u90a3\u4e48\u4f60\u8fd8\u9700\u8981\u8003\u8651\u6dfb\u52a0 DjangoObjectPermissionsFilter \u7c7b\uff0c\u4ee5\u786e\u4fdd\u76f8\u5e94API\u53ea\u8fd4\u56de\u5305\u542b\u7528\u6237\u5177\u6709\u9002\u5f53\u89c6\u56fe\u6743\u9650\u7684\u5bf9\u8c61\u7684\u7ed3\u679c\u3002 \u81ea\u5b9a\u4e49\u6743\u9650 \u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6743\u9650\uff0c\u8bf7\u91cd\u5199 BasePermission \u5e76\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a .has_permission(self, request, view) .has_object_permission(self, request, view, obj) \u5982\u679c\u8bf7\u6c42\u88ab\u6388\u4e88\u8bbf\u95ee\u6743\u9650\uff0c\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002 \u5982\u679c\u4f60\u9700\u8981\u6d4b\u8bd5\u8bf7\u6c42\u662f\u8bfb\u53d6\u64cd\u4f5c\u8fd8\u662f\u5199\u5165\u64cd\u4f5c\uff0c\u5219\u5e94\u8be5\u6839\u636e\u5e38\u91cf SAFE_METHODS \u68c0\u67e5\u8bf7\u6c42\u65b9\u6cd5\uff0c SAFE_METHODS \u662f\u5305\u542b 'GET' , 'OPTIONS' \u548c 'HEAD' \u7684\u5143\u7ec4\u3002\u4f8b\u5982\uff1a if request.method in permissions.SAFE_METHODS: # \u68c0\u67e5\u53ea\u8bfb\u8bf7\u6c42\u7684\u6743\u9650 else: # \u68c0\u67e5\u8bfb\u53d6\u8bf7\u6c42\u7684\u6743\u9650 \u6ce8\u610f : \u4ec5\u5f53\u89c6\u56fe\u7ea7 has_permission \u68c0\u67e5\u5df2\u901a\u8fc7\u65f6\uff0c\u624d\u4f1a\u8c03\u7528\u5b9e\u4f8b\u7ea7 has_object_permission \u65b9\u6cd5\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u8fd0\u884c\u5b9e\u4f8b\u7ea7\u522b\u68c0\u67e5\uff0c\u89c6\u56fe\u4ee3\u7801\u5e94\u663e\u5f0f\u8c03\u7528 .check_object_permissions(request, obj) \u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u901a\u7528\u89c6\u56fe\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4f1a\u4e3a\u4f60\u5904\u7406\u3002 \u5982\u679c\u6821\u9a8c\u5931\u8d25\uff0c\u81ea\u5b9a\u4e49\u6743\u9650\u5c06\u5f15\u53d1 PermissionDenied \u5f02\u5e38\u3002\u8981\u66f4\u6539\u4e0e\u5f02\u5e38\u5173\u8054\u7684\u9519\u8bef\u6d88\u606f\uff0c\u8bf7\u76f4\u63a5\u5728\u81ea\u5b9a\u4e49\u6743\u9650\u4e0a\u5b9e\u73b0\u6d88\u606f\u5c5e\u6027\u3002\u5426\u5219\u5c06\u4f7f\u7528 PermissionDenied \u7684 default_detail \u5c5e\u6027\u3002 from rest_framework import permissions class CustomerAccessPermission(permissions.BasePermission): message = 'Adding customers not allowed.' def has_permission(self, request, view): ... \u793a\u4f8b \u4ee5\u4e0b\u662f\u6839\u636e\u9ed1\u540d\u5355\u68c0\u67e5\u4f20\u5165\u8bf7\u6c42\u7684IP\u5730\u5740\u7684\u6743\u9650\u7c7b\u7684\u793a\u4f8b\uff0c\u5982\u679cIP\u5df2\u88ab\u5217\u5165\u9ed1\u540d\u5355\uff0c\u5219\u62d2\u7edd\u8be5\u8bf7\u6c42\u3002 from rest_framework import permissions class BlacklistPermission(permissions.BasePermission): \"\"\" \u5bf9\u5217\u5165\u9ed1\u540d\u5355\u7684IP\u8fdb\u884c\u5168\u5c40\u6743\u9650\u68c0\u67e5\u3002 \"\"\" def has_permission(self, request, view): ip_addr = request.META['REMOTE_ADDR'] blacklisted = Blacklist.objects.filter(ip_addr=ip_addr).exists() return not blacklisted \u9664\u4e86\u9488\u5bf9\u6240\u6709\u4f20\u5165\u8bf7\u6c42\u8fd0\u884c\u7684\u5168\u5c40\u6743\u9650\u5916\uff0c\u8fd8\u53ef\u4ee5\u521b\u5efa\u5bf9\u8c61\u7ea7\u6743\u9650\uff0c\u8fd9\u4e9b\u6743\u9650\u4ec5\u9488\u5bf9\u5f71\u54cd\u7279\u5b9a\u5bf9\u8c61\u5b9e\u4f8b\u7684\u64cd\u4f5c\u8fd0\u884c\u3002\u4f8b\u5982\uff1a class IsOwnerOrReadOnly(permissions.BasePermission): \"\"\" \u5bf9\u8c61\u7ea7\u6743\u9650\u4ec5\u5141\u8bb8\u5bf9\u8c61\u7684\u6240\u6709\u8005\u5bf9\u5176\u8fdb\u884c\u7f16\u8f91 \u5047\u8bbe\u6a21\u578b\u5b9e\u4f8b\u5177\u6709`owner`\u5c5e\u6027\u3002 \"\"\" def has_object_permission(self, request, view, obj): # \u4efb\u4f55\u8bf7\u6c42\u90fd\u5141\u8bb8\u8bfb\u53d6\u6743\u9650\uff0c # \u6240\u4ee5\u6211\u4eec\u603b\u662f\u5141\u8bb8GET\uff0cHEAD\u6216OPTIONS \u8bf7\u6c42. if request.method in permissions.SAFE_METHODS: return True # \u793a\u4f8b\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u540d\u4e3a`owner`\u7684\u5c5e\u6027 return obj.owner == request.user \u8bf7\u6ce8\u610f\uff0c\u901a\u7528\u89c6\u56fe\u5c06\u68c0\u67e5\u9002\u5f53\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\uff0c\u4f46\u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u89c6\u56fe\uff0c\u5219\u9700\u8981\u786e\u4fdd\u68c0\u67e5\u81ea\u5df1\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u67e5\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u83b7\u5f97\u5bf9\u8c61\u5b9e\u4f8b\u540e\u4ece\u89c6\u56fe\u4e2d\u8c03\u7528 self.check_object_permission(request\uff0cobj) \u6765\u6267\u884c\u6b64\u64cd\u4f5c.\u5982\u679c\u4efb\u4f55\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u67e5\u5931\u8d25\uff0c\u6b64\u8c03\u7528\u5c06\u5f15\u53d1\u9002\u5f53\u7684 APIException \uff0c\u5426\u5219\u5c06\u7b80\u5355\u5730\u8fd4\u56de\u3002 \u53e6\u8bf7\u6ce8\u610f\uff0c\u901a\u7528\u89c6\u56fe\u4ec5\u68c0\u67e5\u68c0\u7d22\u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b\u7684\u89c6\u56fe\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\u3002\u5982\u679c\u4f60\u9700\u8981\u5217\u8868\u89c6\u56fe\u7684\u5bf9\u8c61\u7ea7\u8fc7\u6ee4\uff0c\u5219\u9700\u8981\u5355\u72ec\u8fc7\u6ee4\u67e5\u8be2\u96c6\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 filtering\u6587\u6863 \u8fc7\u6ee4\u6587\u6863\u3002 \u7b2c\u4e09\u65b9\u5305 \u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 Composed Permissions Composed Permissions \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528\u5c0f\u7684\u53ef\u91cd\u7528\u7ec4\u4ef6\u6765\u5b9a\u4e49\u590d\u6742\u548c\u591a\u6df1\u5ea6\uff08\u4f7f\u7528\u903b\u8f91\u8fd0\u7b97\u7b26\uff09\u6743\u9650\u5bf9\u8c61\u3002 REST Condition REST Condition \u5305\u662f\u7528\u4e8e\u4ee5\u7b80\u5355\u65b9\u4fbf\u7684\u65b9\u5f0f\u6784\u5efa\u590d\u6742\u6743\u9650\u7684\u53e6\u4e00\u4e2a\u6269\u5c55\u3002\u8be5\u6269\u5c55\u5141\u8bb8\u4f60\u5c06\u6743\u9650\u4e0e\u903b\u8f91\u8fd0\u7b97\u7b26\u7ec4\u5408\u5728\u4e00\u8d77\u3002 DRY Rest Permissions DRY Rest Permissions \u5305\u63d0\u4f9b\u4e86\u4e3a\u5355\u4e2a\u9ed8\u8ba4\u548c\u81ea\u5b9a\u4e49\u64cd\u4f5c\u5b9a\u4e49\u4e0d\u540c\u6743\u9650\u7684\u529f\u80fd\u3002\u6b64\u5305\u9002\u7528\u4e8e\u5177\u6709\u4ece\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u5173\u7cfb\u6d3e\u751f\u7684\u6743\u9650\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u8fd8\u652f\u6301\u901a\u8fc7API\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u8fd4\u56de\u5230\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u6743\u9650\u68c0\u67e5\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u652f\u6301\u5411\u9ed8\u8ba4\u548c\u81ea\u5b9a\u4e49\u5217\u8868\u64cd\u4f5c\u6dfb\u52a0\u6743\u9650\uff0c\u4ee5\u9650\u5236\u4ed6\u4eec\u4e3a\u6bcf\u4e2a\u7528\u6237\u68c0\u7d22\u7684\u6570\u636e\u3002 Django Rest Framework Roles Django Rest Framework Roles \u5305\u4f7f\u4f60\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u901a\u8fc7\u591a\u79cd\u7c7b\u578b\u7684\u7528\u6237\u5bf9API\u8fdb\u884c\u53c2\u6570\u5316\u3002 Django Rest Framework API Key Django Rest Framework API Key \u5305\u5141\u8bb8\u4f60\u786e\u4fdd\u5411\u670d\u52a1\u5668\u53d1\u51fa\u7684\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u9700\u8981\u4e00\u4e2aAPI\u5bc6\u94a5\u6807\u5934\u3002\u60a8\u53ef\u4ee5\u4ecedjango\u7ba1\u7406\u754c\u9762\u751f\u6210\u4e00\u4e2a\u3002","title":"Permissions"},{"location":"api-guide/permissions_zh/#_1","text":"\u8eab\u4efd\u9a8c\u8bc1\u6216\u8eab\u4efd\u8bc6\u522b\u672c\u8eab\u901a\u5e38\u4e0d\u8db3\u4ee5\u83b7\u53d6\u4fe1\u606f\u6216\u4ee3\u7801\u7684\u8bbf\u95ee\u6743\u9650\u3002\u56e0\u6b64\uff0c\u8bf7\u6c42\u8bbf\u95ee\u7684\u5b9e\u4f53\u5fc5\u987b\u5177\u6709\u6388\u6743\u3002 \u2014 Apple Developer Documentation \u8fde\u540c \u8ba4\u8bc1 \u548c \u9650\u5236 \uff0c\u6743\u9650\u51b3\u5b9a\u662f\u5426\u5e94\u8be5\u63a5\u6536\u8bf7\u6c42\u6216\u62d2\u7edd\u8bbf\u95ee\u3002 \u6743\u9650\u68c0\u67e5\u59cb\u7ec8\u5728\u89c6\u56fe\u7684\u5f00\u59cb\u5904\u8fd0\u884c\uff0c\u5728\u5141\u8bb8\u7ee7\u7eed\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u4e4b\u524d\u8fd0\u884c\u3002 \u6743\u9650\u68c0\u67e5\u901a\u5e38\u4f1a\u4f7f\u7528 request.user \u548c request.auth \u5c5e\u6027\u4e2d\u7684\u8eab\u4efd\u9a8c\u8bc1\u4fe1\u606f\u6765\u786e\u5b9a\u662f\u5426\u5141\u8bb8\u4f20\u5165\u8bf7\u6c42\u3002 \u6743\u9650\u7528\u4e8e\u6388\u4e88\u6216\u62d2\u7edd\u5c06\u4e0d\u540c\u7c7b\u522b\u7684\u7528\u6237\u8bbf\u95ee\u5230API\u7684\u4e0d\u540c\u90e8\u5206\u3002 \u6700\u7b80\u5355\u7684\u6743\u9650\u662f\u5141\u8bb8\u8bbf\u95ee\u4efb\u4f55\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\uff0c\u5e76\u62d2\u7edd\u8bbf\u95ee\u4efb\u4f55\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u3002\u8fd9\u5bf9\u5e94\u4e8eREST\u6846\u67b6\u4e2d\u7684 IsAuthenticated \u7c7b\u3002 \u7a0d\u5fae\u4e25\u683c\u7684\u6743\u9650\u63a7\u5236\u98ce\u683c\u662f\u5bf9\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u5141\u8bb8\u5b8c\u5168\u8bbf\u95ee\uff0c\u4f46\u5bf9\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u5141\u8bb8\u53ea\u8bfb\u8bbf\u95ee\u3002\u8fd9\u5bf9\u5e94\u4e8eREST\u6846\u67b6\u4e2d\u7684 IsAuthenticatedOrReadOnly \u7c7b\u3002","title":"\u6743\u9650"},{"location":"api-guide/permissions_zh/#_2","text":"REST\u6846\u67b6\u4e2d\u7684\u6743\u9650\u59cb\u7ec8\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6743\u9650\u7c7b\u7684\u5217\u8868\u3002 \u5728\u8fd0\u884c\u89c6\u56fe\u7684\u4e3b\u4f53\u4e4b\u524d\uff0c\u68c0\u67e5\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6743\u9650\u3002 \u5982\u679c\u4efb\u4f55\u6743\u9650\u68c0\u67e5\u5931\u8d25\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a exceptions.PermissionDenied \u6216 exceptions.NotAuthenticated \u5f02\u5e38\uff0c\u5e76\u4e14\u89c6\u56fe\u7684\u4e3b\u4f53\u5c06\u4e0d\u4f1a\u8fd0\u884c\u3002 \u5f53\u6743\u9650\u68c0\u67e5\u5931\u8d25\u65f6\uff0c\u5c06\u8fd4\u56de\"403 Forbidden\"\u6216\"401 Unauthorized\"\u54cd\u5e94\uff0c\u5177\u4f53\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff1a \u8bf7\u6c42\u5df2\u6210\u529f\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f46\u6743\u9650\u88ab\u62d2\u7edd\u3002 \u2014 \u5c06\u8fd4\u56de403 Forbidden\u54cd\u5e94\u3002 \u8bf7\u6c42\u672a\u6210\u529f\u8ba4\u8bc1\uff0c\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u8ba4\u8bc1\u7c7b \u4e0d\u4f7f\u7528 WWW-Authenticate \u6807\u5934\u3002 \u2014 \u5c06\u8fd4\u56de403 Forbidden\u54cd\u5e94\u3002 \u8bf7\u6c42\u672a\u6210\u529f\u8ba4\u8bc1\uff0c\u6700\u9ad8\u4f18\u5148\u7ea7\u7684\u8ba4\u8bc1\u7c7b \u4f7f\u7528 WWW-Authenticate \u6807\u5934\u3002 \u2014 \u5c06\u8fd4\u56deHTTP 401\u672a\u7ecf\u6388\u6743\u7684\u54cd\u5e94\uff0c\u5e76\u9644\u5e26\u9002\u5f53\u7684 WWW-Authenticate \u6807\u5934\u3002","title":"\u5982\u4f55\u786e\u5b9a\u6743\u9650"},{"location":"api-guide/permissions_zh/#_3","text":"REST\u6846\u67b6\u6743\u9650\u8fd8\u652f\u6301\u5bf9\u8c61\u7ea7\u7684\u8bb8\u53ef\u3002\u5bf9\u8c61\u7ea7\u6743\u9650\u7528\u4e8e\u786e\u5b9a\u662f\u5426\u5141\u8bb8\u7528\u6237\u64cd\u4f5c\u7279\u5b9a\u5bf9\u8c61\uff08\u901a\u5e38\u662f\u6a21\u578b\u5b9e\u4f8b\uff09\u3002 \u5f53\u8c03\u7528 .get_object() \u65f6\uff0c\u7531REST\u6846\u67b6\u7684\u901a\u7528\u89c6\u56fe\u8fd0\u884c\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u6d4b\u3002 \u4e0e\u89c6\u56fe\u7ea7\u522b\u6743\u9650\u4e00\u6837\uff0c\u5982\u679c\u4e0d\u5141\u8bb8\u7528\u6237\u64cd\u4f5c\u7ed9\u5b9a\u5bf9\u8c61\uff0c\u5219\u4f1a\u629b\u51fa exceptions.PermissionDenied \u5f02\u5e38\u3002 \u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199\u81ea\u5df1\u7684\u89c6\u56fe\u5e76\u5e0c\u671b\u5f3a\u5236\u6267\u884c\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u6d4b\uff0c\u6216\u8005\u4f60\u60f3\u5728\u901a\u7528\u89c6\u56fe\u4e2d\u91cd\u5199 get_object \u65b9\u6cd5\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u5728\u68c0\u7d22\u5bf9\u8c61\u7684\u65f6\u5019\u663e\u5f0f\u8c03\u7528\u89c6\u56fe\u4e0a\u7684 .check_object_permissions(request, obj) \u65b9\u6cd5\u3002 \u8fd9\u5c06\u629b\u51fa PermissionDenied \u6216 NotAuthenticated \u5f02\u5e38\uff0c\u6216\u8005\u5982\u679c\u89c6\u56fe\u5177\u6709\u9002\u5f53\u7684\u6743\u9650\uff0c\u5219\u8fd4\u56de\u3002 \u4f8b\u5982\uff1a def get_object(self): obj = get_object_or_404(self.get_queryset()) self.check_object_permissions(self.request, obj) return obj","title":"\u5bf9\u8c61\u7ea7\u6743\u9650"},{"location":"api-guide/permissions_zh/#_4","text":"\u51fa\u4e8e\u6027\u80fd\u539f\u56e0\uff0c\u901a\u7528\u89c6\u56fe\u5728\u8fd4\u56de\u5bf9\u8c61\u5217\u8868\u65f6\u4e0d\u4f1a\u81ea\u52a8\u5c06\u5bf9\u8c61\u7ea7\u6743\u9650\u5e94\u7528\u4e8e\u67e5\u8be2\u96c6\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u3002 \u901a\u5e38\uff0c\u5f53\u4f60\u4f7f\u7528\u5bf9\u8c61\u7ea7\u6743\u9650\u65f6\uff0c\u4f60\u8fd8\u9700\u8981\u9002\u5f53\u5730 \u8fc7\u6ee4\u67e5\u8be2\u96c6 \u8fc7\u6ee4\u67e5\u8be2\u96c6\uff0c\u4ee5\u786e\u4fdd\u7528\u6237\u53ea\u80fd\u770b\u5230\u4ed6\u4eec\u88ab\u5141\u8bb8\u67e5\u770b\u7684\u5b9e\u4f8b\u3002","title":"\u5bf9\u8c61\u7ea7\u522b\u7684\u6743\u9650\u9650\u5236"},{"location":"api-guide/permissions_zh/#_5","text":"\u9ed8\u8ba4\u6743\u9650\u7b56\u7565\u53ef\u4ee5\u4f7f\u7528 DEFAULT_PERMISSION_CLASSES \u8bbe\u7f6e\u8fdb\u884c\u5168\u5c40\u8bbe\u7f6e\u3002\u6bd4\u5982\uff1a REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.IsAuthenticated', ) } \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u6b64\u8bbe\u7f6e\u9ed8\u8ba4\u4e3a\u5141\u8bb8\u65e0\u9650\u5236\u8bbf\u95ee\uff1a 'DEFAULT_PERMISSION_CLASSES': ( 'rest_framework.permissions.AllowAny', ) \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e APIView \u7c7b\u7684\u89c6\u56fe\u5728\u6bcf\u4e2a\u89c6\u56fe\u6216\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684\u57fa\u7840\u4e0a\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002 from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework.views import APIView class ExampleView(APIView): permission_classes = (IsAuthenticated,) def get(self, request, format=None): content = { 'status': 'request was permitted' } return Response(content) \u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528 @api_view \u88c5\u9970\u5668\u88c5\u9970\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002 from rest_framework.decorators import api_view, permission_classes from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response @api_view(['GET']) @permission_classes((IsAuthenticated, )) def example_view(request, format=None): content = { 'status': 'request was permitted' } return Response(content) \u6ce8\u610f\uff1a \u5f53\u4f60\u901a\u8fc7\u7c7b\u5c5e\u6027\u6216\u88c5\u9970\u5668\u8bbe\u7f6e\u65b0\u7684\u6743\u9650\u7c7b\u65f6\uff0c\u4f60\u8981\u901a\u77e5\u89c6\u56fe\u5ffd\u7565__settings.py__\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684\u9ed8\u8ba4\u5217\u8868\u3002","title":"\u8bbe\u7f6e\u6743\u9650\u7b56\u7565"},{"location":"api-guide/permissions_zh/#api","text":"","title":"API \u53c2\u8003"},{"location":"api-guide/permissions_zh/#allowany","text":"AllowAny \u6743\u9650\u7c7b\u5c06\u5141\u8bb8\u4e0d\u53d7\u9650\u5236\u7684\u8bbf\u95ee\uff0c\u800c \u4e0d\u7ba1\u8be5\u8bf7\u6c42\u662f\u5426\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u6216\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1 \u3002 \u6b64\u6743\u9650\u4e0d\u662f\u4e25\u683c\u8981\u6c42\u7684\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7a7a\u5217\u8868\u6216\u5143\u7ec4\u8fdb\u884c\u6743\u9650\u8bbe\u7f6e\u6765\u83b7\u5f97\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u4f46\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u6307\u5b9a\u6b64\u7c7b\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4f7f\u610f\u56fe\u66f4\u660e\u786e\u3002","title":"AllowAny"},{"location":"api-guide/permissions_zh/#isauthenticated","text":"IsAuthenticated \u6743\u9650\u7c7b\u5c06\u62d2\u7edd\u4efb\u4f55\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u7684\u6743\u9650\uff0c\u5e76\u5141\u8bb8\u5176\u4ed6\u6743\u9650\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u4ec5\u4f9b\u6ce8\u518c\u7528\u6237\u8bbf\u95ee\uff0c\u5219\u6b64\u6743\u9650\u9002\u7528\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u5141\u8bb8\u533f\u540d\u7528\u6237\u8bfb\u53d6\u6743\u9650\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8\u5bf9\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u8fdb\u884c\u5199\u5165\u6743\u9650\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002","title":"IsAuthenticated"},{"location":"api-guide/permissions_zh/#isadminuser","text":"\u9664\u975e user.is_staff \u4e3a True \uff0c\u5426\u5219 IsAdminUser \u6743\u9650\u7c7b\u5c06\u62d2\u7edd\u4efb\u4f55\u7528\u6237\u7684\u6743\u9650\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06\u5141\u8bb8\u6743\u9650\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u53ea\u80fd\u88ab\u90e8\u5206\u53d7\u4fe1\u4efb\u7684\u7ba1\u7406\u5458\u8bbf\u95ee\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002","title":"IsAdminUser"},{"location":"api-guide/permissions_zh/#isauthenticatedorreadonly","text":"IsAuthenticatedOrReadOnly \u5c06\u5141\u8bb8\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u6267\u884c\u4efb\u4f55\u8bf7\u6c42\u3002\u53ea\u6709\u5f53\u8bf7\u6c42\u65b9\u6cd5\u662f\u201c\u5b89\u5168\u201d\u65b9\u6cd5\uff08 GET , HEAD \u6216 OPTIONS \uff09\u4e4b\u4e00\u65f6\uff0c\u624d\u5141\u8bb8\u672a\u7ecf\u6388\u6743\u7684\u7528\u6237\u8bf7\u6c42\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684API\u5141\u8bb8\u533f\u540d\u7528\u6237\u8bfb\u53d6\u6743\u9650\uff0c\u5e76\u4e14\u53ea\u5141\u8bb8\u5bf9\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u8fdb\u884c\u5199\u5165\u6743\u9650\uff0c\u5219\u6b64\u6743\u9650\u662f\u9002\u5408\u7684\u3002","title":"IsAuthenticatedOrReadOnly"},{"location":"api-guide/permissions_zh/#djangomodelpermissions","text":"\u6b64\u6743\u9650\u7c7b\u4e0eDjango\u7684\u6807\u51c6 django.contrib.auth model\u6743\u9650 \u76f8\u5173\u8054\u3002\u6b64\u6743\u9650\u53ea\u80fd\u5e94\u7528\u4e8e\u5177\u6709 .queryset \u5c5e\u6027\u96c6\u7684\u89c6\u56fe\u3002\u53ea\u6709\u5728\u7528\u6237 \u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1 \u5e76\u5206\u914d\u4e86 \u76f8\u5173\u6a21\u578b\u6743\u9650 \u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u4f1a\u88ab\u6388\u4e88\u6743\u9650\u3002 POST \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709 \u6dfb\u52a0 \u6743\u9650\u3002 PUT \u548c PATCH \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709 \u66f4\u6539 \u6743\u9650\u3002 DELETE \u8bf7\u6c42\u60f3\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5177\u6709 \u5220\u9664 \u6743\u9650\u3002 \u9ed8\u8ba4\u884c\u4e3a\u4e5f\u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u652f\u6301\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4e3a GET \u8bf7\u6c42\u5305\u542b\u4e00\u4e2a \u67e5\u770b \u6a21\u578b\u7684\u6743\u9650\u3002 \u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\uff0c\u8bf7\u8986\u76d6 DjangoModelPermissions \u5e76\u8bbe\u7f6e .perms_map \u5c5e\u6027\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\u3002","title":"DjangoModelPermissions"},{"location":"api-guide/permissions_zh/#queryset","text":"\u5982\u679c\u4f60\u5728\u91cd\u5199\u4e86 get_queryset() \u65b9\u6cd5\u7684\u89c6\u56fe\u4e2d\u4f7f\u7528\u6b64\u6743\u9650\uff0c\u8fd9\u4e2a\u89c6\u56fe\u4e0a\u53ef\u80fd\u6ca1\u6709 queryset \u5c5e\u6027\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5efa\u8bae\u8fd8\u4f7f\u7528\u4fdd\u62a4\u6027\u7684\u67e5\u8be2\u96c6\u6765\u6807\u8bb0\u89c6\u56fe\uff0c\u4ee5\u4fbf\u6b64\u7c7b\u53ef\u4ee5\u786e\u5b9a\u6240\u9700\u7684\u6743\u9650\u3002\u6bd4\u5982\uff1a queryset = User.objects.none() # DjangoModelPermissions\u9700\u8981\u4e00\u4e2aqueryset","title":"\u4f7f\u7528\u4e0d\u5305\u542bqueryset\u5c5e\u6027\u7684\u89c6\u56fe\u3002"},{"location":"api-guide/permissions_zh/#djangomodelpermissionsoranonreadonly","text":"\u4e0e DjangoModelPermissions \u7c7b\u4f3c\uff0c\u4f46\u4e5f\u5141\u8bb8\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u5177\u6709\u5bf9API\u7684\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002","title":"DjangoModelPermissionsOrAnonReadOnly"},{"location":"api-guide/permissions_zh/#djangoobjectpermissions","text":"\u6b64\u6743\u9650\u7c7b\u4e0eDjango\u7684\u6807\u51c6 \u5bf9\u8c61\u6743\u9650\u6846\u67b6 \u76f8\u5173\u8054\uff0c\u8be5\u6846\u67b6\u5141\u8bb8\u6a21\u578b\u4e0a\u7684\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6743\u9650\u3002\u4e3a\u4e86\u4f7f\u7528\u6b64\u6743\u9650\u7c7b\uff0c\u4f60\u8fd8\u9700\u8981\u6dfb\u52a0\u652f\u6301\u5bf9\u8c61\u7ea7\u6743\u9650\u7684\u6743\u9650\u540e\u7aef\uff0c\u4f8b\u5982 django-guardian \u3002 \u4e0e DjangoModelPermissions \u4e00\u6837\uff0c\u6b64\u6743\u9650\u53ea\u80fd\u5e94\u7528\u4e8e\u5177\u6709 .queryset \u5c5e\u6027\u6216 .get_queryset() \u65b9\u6cd5\u7684\u89c6\u56fe\u3002\u53ea\u6709\u5728\u7528\u6237\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u5e76\u4e14\u5177\u6709 \u76f8\u5173\u7684\u6bcf\u4e2a\u5bf9\u8c61\u6743\u9650 \u548c\u76f8\u5173\u7684 \u6a21\u578b\u6743\u9650 \u540e\uff0c\u624d\u4f1a\u88ab\u6388\u4e88\u6743\u9650\u3002 POST \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u5b9e\u4f8b\u5177\u6709 \u6dfb\u52a0 \u6743\u9650\u3002 PUT \u548c PATCH \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u793a\u4f8b\u5177\u6709 \u66f4\u6539 \u6743\u9650\u3002 DELETE \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u5bf9\u6a21\u578b\u793a\u4f8b\u5177\u6709 \u5220\u9664 \u6743\u9650\u3002 \u8bf7\u6ce8\u610f\uff0c DjangoObjectPermissions \u4e0d\u9700\u8981 django-guardian \u8f6f\u4ef6\u5305\uff0c\u5e76\u4e14\u5e94\u5f53\u540c\u6837\u652f\u6301\u5176\u4ed6\u5bf9\u8c61\u7ea7\u522b\u7684\u540e\u7aef\u3002 \u4e0e DjangoModelPermissions \u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 DjangoObjectPermissions \u5e76\u8bbe\u7f6e .perms_map \u5c5e\u6027\u6765\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u578b\u6743\u9650\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6e90\u4ee3\u7801\u3002 \u6ce8\u610f \uff1a\u5982\u679c\u4f60\u9700\u8981 GET , HEAD \u548c OPTIONS \u8bf7\u6c42\u7684\u5bf9\u8c61\u7ea7 \u89c6\u56fe \u6743\u9650\uff0c\u90a3\u4e48\u4f60\u8fd8\u9700\u8981\u8003\u8651\u6dfb\u52a0 DjangoObjectPermissionsFilter \u7c7b\uff0c\u4ee5\u786e\u4fdd\u76f8\u5e94API\u53ea\u8fd4\u56de\u5305\u542b\u7528\u6237\u5177\u6709\u9002\u5f53\u89c6\u56fe\u6743\u9650\u7684\u5bf9\u8c61\u7684\u7ed3\u679c\u3002","title":"DjangoObjectPermissions"},{"location":"api-guide/permissions_zh/#_6","text":"\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6743\u9650\uff0c\u8bf7\u91cd\u5199 BasePermission \u5e76\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a .has_permission(self, request, view) .has_object_permission(self, request, view, obj) \u5982\u679c\u8bf7\u6c42\u88ab\u6388\u4e88\u8bbf\u95ee\u6743\u9650\uff0c\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002 \u5982\u679c\u4f60\u9700\u8981\u6d4b\u8bd5\u8bf7\u6c42\u662f\u8bfb\u53d6\u64cd\u4f5c\u8fd8\u662f\u5199\u5165\u64cd\u4f5c\uff0c\u5219\u5e94\u8be5\u6839\u636e\u5e38\u91cf SAFE_METHODS \u68c0\u67e5\u8bf7\u6c42\u65b9\u6cd5\uff0c SAFE_METHODS \u662f\u5305\u542b 'GET' , 'OPTIONS' \u548c 'HEAD' \u7684\u5143\u7ec4\u3002\u4f8b\u5982\uff1a if request.method in permissions.SAFE_METHODS: # \u68c0\u67e5\u53ea\u8bfb\u8bf7\u6c42\u7684\u6743\u9650 else: # \u68c0\u67e5\u8bfb\u53d6\u8bf7\u6c42\u7684\u6743\u9650 \u6ce8\u610f : \u4ec5\u5f53\u89c6\u56fe\u7ea7 has_permission \u68c0\u67e5\u5df2\u901a\u8fc7\u65f6\uff0c\u624d\u4f1a\u8c03\u7528\u5b9e\u4f8b\u7ea7 has_object_permission \u65b9\u6cd5\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u8fd0\u884c\u5b9e\u4f8b\u7ea7\u522b\u68c0\u67e5\uff0c\u89c6\u56fe\u4ee3\u7801\u5e94\u663e\u5f0f\u8c03\u7528 .check_object_permissions(request, obj) \u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u901a\u7528\u89c6\u56fe\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4f1a\u4e3a\u4f60\u5904\u7406\u3002 \u5982\u679c\u6821\u9a8c\u5931\u8d25\uff0c\u81ea\u5b9a\u4e49\u6743\u9650\u5c06\u5f15\u53d1 PermissionDenied \u5f02\u5e38\u3002\u8981\u66f4\u6539\u4e0e\u5f02\u5e38\u5173\u8054\u7684\u9519\u8bef\u6d88\u606f\uff0c\u8bf7\u76f4\u63a5\u5728\u81ea\u5b9a\u4e49\u6743\u9650\u4e0a\u5b9e\u73b0\u6d88\u606f\u5c5e\u6027\u3002\u5426\u5219\u5c06\u4f7f\u7528 PermissionDenied \u7684 default_detail \u5c5e\u6027\u3002 from rest_framework import permissions class CustomerAccessPermission(permissions.BasePermission): message = 'Adding customers not allowed.' def has_permission(self, request, view): ...","title":"\u81ea\u5b9a\u4e49\u6743\u9650"},{"location":"api-guide/permissions_zh/#_7","text":"\u4ee5\u4e0b\u662f\u6839\u636e\u9ed1\u540d\u5355\u68c0\u67e5\u4f20\u5165\u8bf7\u6c42\u7684IP\u5730\u5740\u7684\u6743\u9650\u7c7b\u7684\u793a\u4f8b\uff0c\u5982\u679cIP\u5df2\u88ab\u5217\u5165\u9ed1\u540d\u5355\uff0c\u5219\u62d2\u7edd\u8be5\u8bf7\u6c42\u3002 from rest_framework import permissions class BlacklistPermission(permissions.BasePermission): \"\"\" \u5bf9\u5217\u5165\u9ed1\u540d\u5355\u7684IP\u8fdb\u884c\u5168\u5c40\u6743\u9650\u68c0\u67e5\u3002 \"\"\" def has_permission(self, request, view): ip_addr = request.META['REMOTE_ADDR'] blacklisted = Blacklist.objects.filter(ip_addr=ip_addr).exists() return not blacklisted \u9664\u4e86\u9488\u5bf9\u6240\u6709\u4f20\u5165\u8bf7\u6c42\u8fd0\u884c\u7684\u5168\u5c40\u6743\u9650\u5916\uff0c\u8fd8\u53ef\u4ee5\u521b\u5efa\u5bf9\u8c61\u7ea7\u6743\u9650\uff0c\u8fd9\u4e9b\u6743\u9650\u4ec5\u9488\u5bf9\u5f71\u54cd\u7279\u5b9a\u5bf9\u8c61\u5b9e\u4f8b\u7684\u64cd\u4f5c\u8fd0\u884c\u3002\u4f8b\u5982\uff1a class IsOwnerOrReadOnly(permissions.BasePermission): \"\"\" \u5bf9\u8c61\u7ea7\u6743\u9650\u4ec5\u5141\u8bb8\u5bf9\u8c61\u7684\u6240\u6709\u8005\u5bf9\u5176\u8fdb\u884c\u7f16\u8f91 \u5047\u8bbe\u6a21\u578b\u5b9e\u4f8b\u5177\u6709`owner`\u5c5e\u6027\u3002 \"\"\" def has_object_permission(self, request, view, obj): # \u4efb\u4f55\u8bf7\u6c42\u90fd\u5141\u8bb8\u8bfb\u53d6\u6743\u9650\uff0c # \u6240\u4ee5\u6211\u4eec\u603b\u662f\u5141\u8bb8GET\uff0cHEAD\u6216OPTIONS \u8bf7\u6c42. if request.method in permissions.SAFE_METHODS: return True # \u793a\u4f8b\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u540d\u4e3a`owner`\u7684\u5c5e\u6027 return obj.owner == request.user \u8bf7\u6ce8\u610f\uff0c\u901a\u7528\u89c6\u56fe\u5c06\u68c0\u67e5\u9002\u5f53\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\uff0c\u4f46\u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u89c6\u56fe\uff0c\u5219\u9700\u8981\u786e\u4fdd\u68c0\u67e5\u81ea\u5df1\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u67e5\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u83b7\u5f97\u5bf9\u8c61\u5b9e\u4f8b\u540e\u4ece\u89c6\u56fe\u4e2d\u8c03\u7528 self.check_object_permission(request\uff0cobj) \u6765\u6267\u884c\u6b64\u64cd\u4f5c.\u5982\u679c\u4efb\u4f55\u5bf9\u8c61\u7ea7\u6743\u9650\u68c0\u67e5\u5931\u8d25\uff0c\u6b64\u8c03\u7528\u5c06\u5f15\u53d1\u9002\u5f53\u7684 APIException \uff0c\u5426\u5219\u5c06\u7b80\u5355\u5730\u8fd4\u56de\u3002 \u53e6\u8bf7\u6ce8\u610f\uff0c\u901a\u7528\u89c6\u56fe\u4ec5\u68c0\u67e5\u68c0\u7d22\u5355\u4e2a\u6a21\u578b\u5b9e\u4f8b\u7684\u89c6\u56fe\u7684\u5bf9\u8c61\u7ea7\u6743\u9650\u3002\u5982\u679c\u4f60\u9700\u8981\u5217\u8868\u89c6\u56fe\u7684\u5bf9\u8c61\u7ea7\u8fc7\u6ee4\uff0c\u5219\u9700\u8981\u5355\u72ec\u8fc7\u6ee4\u67e5\u8be2\u96c6\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 filtering\u6587\u6863 \u8fc7\u6ee4\u6587\u6863\u3002","title":"\u793a\u4f8b"},{"location":"api-guide/permissions_zh/#_8","text":"\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002","title":"\u7b2c\u4e09\u65b9\u5305"},{"location":"api-guide/permissions_zh/#composed-permissions","text":"Composed Permissions \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528\u5c0f\u7684\u53ef\u91cd\u7528\u7ec4\u4ef6\u6765\u5b9a\u4e49\u590d\u6742\u548c\u591a\u6df1\u5ea6\uff08\u4f7f\u7528\u903b\u8f91\u8fd0\u7b97\u7b26\uff09\u6743\u9650\u5bf9\u8c61\u3002","title":"Composed Permissions"},{"location":"api-guide/permissions_zh/#rest-condition","text":"REST Condition \u5305\u662f\u7528\u4e8e\u4ee5\u7b80\u5355\u65b9\u4fbf\u7684\u65b9\u5f0f\u6784\u5efa\u590d\u6742\u6743\u9650\u7684\u53e6\u4e00\u4e2a\u6269\u5c55\u3002\u8be5\u6269\u5c55\u5141\u8bb8\u4f60\u5c06\u6743\u9650\u4e0e\u903b\u8f91\u8fd0\u7b97\u7b26\u7ec4\u5408\u5728\u4e00\u8d77\u3002","title":"REST Condition"},{"location":"api-guide/permissions_zh/#dry-rest-permissions","text":"DRY Rest Permissions \u5305\u63d0\u4f9b\u4e86\u4e3a\u5355\u4e2a\u9ed8\u8ba4\u548c\u81ea\u5b9a\u4e49\u64cd\u4f5c\u5b9a\u4e49\u4e0d\u540c\u6743\u9650\u7684\u529f\u80fd\u3002\u6b64\u5305\u9002\u7528\u4e8e\u5177\u6709\u4ece\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u5173\u7cfb\u6d3e\u751f\u7684\u6743\u9650\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u8fd8\u652f\u6301\u901a\u8fc7API\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u8fd4\u56de\u5230\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u6743\u9650\u68c0\u67e5\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u652f\u6301\u5411\u9ed8\u8ba4\u548c\u81ea\u5b9a\u4e49\u5217\u8868\u64cd\u4f5c\u6dfb\u52a0\u6743\u9650\uff0c\u4ee5\u9650\u5236\u4ed6\u4eec\u4e3a\u6bcf\u4e2a\u7528\u6237\u68c0\u7d22\u7684\u6570\u636e\u3002","title":"DRY Rest Permissions"},{"location":"api-guide/permissions_zh/#django-rest-framework-roles","text":"Django Rest Framework Roles \u5305\u4f7f\u4f60\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u901a\u8fc7\u591a\u79cd\u7c7b\u578b\u7684\u7528\u6237\u5bf9API\u8fdb\u884c\u53c2\u6570\u5316\u3002","title":"Django Rest Framework Roles"},{"location":"api-guide/permissions_zh/#django-rest-framework-api-key","text":"Django Rest Framework API Key \u5305\u5141\u8bb8\u4f60\u786e\u4fdd\u5411\u670d\u52a1\u5668\u53d1\u51fa\u7684\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u9700\u8981\u4e00\u4e2aAPI\u5bc6\u94a5\u6807\u5934\u3002\u60a8\u53ef\u4ee5\u4ecedjango\u7ba1\u7406\u754c\u9762\u751f\u6210\u4e00\u4e2a\u3002","title":"Django Rest Framework API Key"},{"location":"api-guide/relations/","text":"Serializer relations Data structures, not algorithms, are central to programming. \u2014 Rob Pike Relational fields are used to represent model relationships. They can be applied to ForeignKey , ManyToManyField and OneToOneField relationships, as well as to reverse relationships, and custom relationships such as GenericForeignKey . Note: The relational fields are declared in relations.py , but by convention you should import them from the serializers module, using from rest_framework import serializers and refer to fields as serializers.<FieldName> . Inspecting relationships. When using the ModelSerializer class, serializer fields and relationships will be automatically generated for you. Inspecting these automatically generated fields can be a useful tool for determining how to customize the relationship style. To do so, open the Django shell, using python manage.py shell , then import the serializer class, instantiate it, and print the object representation\u2026 >>> from myapp.serializers import AccountSerializer >>> serializer = AccountSerializer() >>> print(repr(serializer)) AccountSerializer(): id = IntegerField(label='ID', read_only=True) name = CharField(allow_blank=True, max_length=100, required=False) owner = PrimaryKeyRelatedField(queryset=User.objects.all()) API Reference In order to explain the various types of relational fields, we'll use a couple of simple models for our examples. Our models will be for music albums, and the tracks listed on each album. class Album(models.Model): album_name = models.CharField(max_length=100) artist = models.CharField(max_length=100) class Track(models.Model): album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE) order = models.IntegerField() title = models.CharField(max_length=100) duration = models.IntegerField() class Meta: unique_together = ['album', 'order'] ordering = ['order'] def __str__(self): return '%d: %s' % (self.order, self.title) StringRelatedField StringRelatedField may be used to represent the target of the relationship using its __str__ method. For example, the following serializer. class AlbumSerializer(serializers.ModelSerializer): tracks = serializers.StringRelatedField(many=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] Would serialize to the following representation. { 'album_name': 'Things We Lost In The Fire', 'artist': 'Low', 'tracks': [ '1: Sunflower', '2: Whitetail', '3: Dinosaur Act', ... ] } This field is read only. Arguments : many - If applied to a to-many relationship, you should set this argument to True . PrimaryKeyRelatedField PrimaryKeyRelatedField may be used to represent the target of the relationship using its primary key. For example, the following serializer: class AlbumSerializer(serializers.ModelSerializer): tracks = serializers.PrimaryKeyRelatedField(many=True, read_only=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] Would serialize to a representation like this: { 'album_name': 'Undun', 'artist': 'The Roots', 'tracks': [ 89, 90, 91, ... ] } By default this field is read-write, although you can change this behavior using the read_only flag. Arguments : queryset - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set read_only=True . many - If applied to a to-many relationship, you should set this argument to True . allow_null - If set to True , the field will accept values of None or the empty string for nullable relationships. Defaults to False . pk_field - Set to a field to control serialization/deserialization of the primary key's value. For example, pk_field=UUIDField(format='hex') would serialize a UUID primary key into its compact hex representation. HyperlinkedRelatedField HyperlinkedRelatedField may be used to represent the target of the relationship using a hyperlink. For example, the following serializer: class AlbumSerializer(serializers.ModelSerializer): tracks = serializers.HyperlinkedRelatedField( many=True, read_only=True, view_name='track-detail' ) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] Would serialize to a representation like this: { 'album_name': 'Graceland', 'artist': 'Paul Simon', 'tracks': [ 'http://www.example.com/api/tracks/45/', 'http://www.example.com/api/tracks/46/', 'http://www.example.com/api/tracks/47/', ... ] } By default this field is read-write, although you can change this behavior using the read_only flag. Note : This field is designed for objects that map to a URL that accepts a single URL keyword argument, as set using the lookup_field and lookup_url_kwarg arguments. This is suitable for URLs that contain a single primary key or slug argument as part of the URL. If you require more complex hyperlinked representation you'll need to customize the field, as described in the custom hyperlinked fields section, below. Arguments : view_name - The view name that should be used as the target of the relationship. If you're using the standard router classes this will be a string with the format <modelname>-detail . required . queryset - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set read_only=True . many - If applied to a to-many relationship, you should set this argument to True . allow_null - If set to True , the field will accept values of None or the empty string for nullable relationships. Defaults to False . lookup_field - The field on the target that should be used for the lookup. Should correspond to a URL keyword argument on the referenced view. Default is 'pk' . lookup_url_kwarg - The name of the keyword argument defined in the URL conf that corresponds to the lookup field. Defaults to using the same value as lookup_field . format - If using format suffixes, hyperlinked fields will use the same format suffix for the target unless overridden by using the format argument. SlugRelatedField SlugRelatedField may be used to represent the target of the relationship using a field on the target. For example, the following serializer: class AlbumSerializer(serializers.ModelSerializer): tracks = serializers.SlugRelatedField( many=True, read_only=True, slug_field='title' ) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] Would serialize to a representation like this: { 'album_name': 'Dear John', 'artist': 'Loney Dear', 'tracks': [ 'Airport Surroundings', 'Everything Turns to You', 'I Was Only Going Out', ... ] } By default this field is read-write, although you can change this behavior using the read_only flag. When using SlugRelatedField as a read-write field, you will normally want to ensure that the slug field corresponds to a model field with unique=True . Arguments : slug_field - The field on the target that should be used to represent it. This should be a field that uniquely identifies any given instance. For example, username . required queryset - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set read_only=True . many - If applied to a to-many relationship, you should set this argument to True . allow_null - If set to True , the field will accept values of None or the empty string for nullable relationships. Defaults to False . HyperlinkedIdentityField This field can be applied as an identity relationship, such as the 'url' field on a HyperlinkedModelSerializer. It can also be used for an attribute on the object. For example, the following serializer: class AlbumSerializer(serializers.HyperlinkedModelSerializer): track_listing = serializers.HyperlinkedIdentityField(view_name='track-list') class Meta: model = Album fields = ['album_name', 'artist', 'track_listing'] Would serialize to a representation like this: { 'album_name': 'The Eraser', 'artist': 'Thom Yorke', 'track_listing': 'http://www.example.com/api/track_list/12/', } This field is always read-only. Arguments : view_name - The view name that should be used as the target of the relationship. If you're using the standard router classes this will be a string with the format <model_name>-detail . required . lookup_field - The field on the target that should be used for the lookup. Should correspond to a URL keyword argument on the referenced view. Default is 'pk' . lookup_url_kwarg - The name of the keyword argument defined in the URL conf that corresponds to the lookup field. Defaults to using the same value as lookup_field . format - If using format suffixes, hyperlinked fields will use the same format suffix for the target unless overridden by using the format argument. Nested relationships As opposed to previously discussed references to another entity, the referred entity can instead also be embedded or nested in the representation of the object that refers to it. Such nested relationships can be expressed by using serializers as fields. If the field is used to represent a to-many relationship, you should add the many=True flag to the serializer field. Example For example, the following serializer: class TrackSerializer(serializers.ModelSerializer): class Meta: model = Track fields = ['order', 'title', 'duration'] class AlbumSerializer(serializers.ModelSerializer): tracks = TrackSerializer(many=True, read_only=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] Would serialize to a nested representation like this: >>> album = Album.objects.create(album_name=\"The Grey Album\", artist='Danger Mouse') >>> Track.objects.create(album=album, order=1, title='Public Service Announcement', duration=245) <Track: Track object> >>> Track.objects.create(album=album, order=2, title='What More Can I Say', duration=264) <Track: Track object> >>> Track.objects.create(album=album, order=3, title='Encore', duration=159) <Track: Track object> >>> serializer = AlbumSerializer(instance=album) >>> serializer.data { 'album_name': 'The Grey Album', 'artist': 'Danger Mouse', 'tracks': [ {'order': 1, 'title': 'Public Service Announcement', 'duration': 245}, {'order': 2, 'title': 'What More Can I Say', 'duration': 264}, {'order': 3, 'title': 'Encore', 'duration': 159}, ... ], } Writable nested serializers By default nested serializers are read-only. If you want to support write-operations to a nested serializer field you'll need to create create() and/or update() methods in order to explicitly specify how the child relationships should be saved. class TrackSerializer(serializers.ModelSerializer): class Meta: model = Track fields = ['order', 'title', 'duration'] class AlbumSerializer(serializers.ModelSerializer): tracks = TrackSerializer(many=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] def create(self, validated_data): tracks_data = validated_data.pop('tracks') album = Album.objects.create(**validated_data) for track_data in tracks_data: Track.objects.create(album=album, **track_data) return album >>> data = { 'album_name': 'The Grey Album', 'artist': 'Danger Mouse', 'tracks': [ {'order': 1, 'title': 'Public Service Announcement', 'duration': 245}, {'order': 2, 'title': 'What More Can I Say', 'duration': 264}, {'order': 3, 'title': 'Encore', 'duration': 159}, ], } >>> serializer = AlbumSerializer(data=data) >>> serializer.is_valid() True >>> serializer.save() <Album: Album object> Custom relational fields In rare cases where none of the existing relational styles fit the representation you need, you can implement a completely custom relational field, that describes exactly how the output representation should be generated from the model instance. To implement a custom relational field, you should override RelatedField , and implement the .to_representation(self, value) method. This method takes the target of the field as the value argument, and should return the representation that should be used to serialize the target. The value argument will typically be a model instance. If you want to implement a read-write relational field, you must also implement the .to_internal_value(self, data) method. To provide a dynamic queryset based on the context , you can also override .get_queryset(self) instead of specifying .queryset on the class or when initializing the field. Example For example, we could define a relational field to serialize a track to a custom string representation, using its ordering, title, and duration. import time class TrackListingField(serializers.RelatedField): def to_representation(self, value): duration = time.strftime('%M:%S', time.gmtime(value.duration)) return 'Track %d: %s (%s)' % (value.order, value.name, duration) class AlbumSerializer(serializers.ModelSerializer): tracks = TrackListingField(many=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] This custom field would then serialize to the following representation. { 'album_name': 'Sometimes I Wish We Were an Eagle', 'artist': 'Bill Callahan', 'tracks': [ 'Track 1: Jim Cain (04:39)', 'Track 2: Eid Ma Clack Shaw (04:19)', 'Track 3: The Wind and the Dove (04:34)', ... ] } Custom hyperlinked fields In some cases you may need to customize the behavior of a hyperlinked field, in order to represent URLs that require more than a single lookup field. You can achieve this by overriding HyperlinkedRelatedField . There are two methods that may be overridden: get_url(self, obj, view_name, request, format) The get_url method is used to map the object instance to its URL representation. May raise a NoReverseMatch if the view_name and lookup_field attributes are not configured to correctly match the URL conf. get_object(self, view_name, view_args, view_kwargs) If you want to support a writable hyperlinked field then you'll also want to override get_object , in order to map incoming URLs back to the object they represent. For read-only hyperlinked fields there is no need to override this method. The return value of this method should the object that corresponds to the matched URL conf arguments. May raise an ObjectDoesNotExist exception. Example Say we have a URL for a customer object that takes two keyword arguments, like so: /api/<organization_slug>/customers/<customer_pk>/ This cannot be represented with the default implementation, which accepts only a single lookup field. In this case we'd need to override HyperlinkedRelatedField to get the behavior we want: from rest_framework import serializers from rest_framework.reverse import reverse class CustomerHyperlink(serializers.HyperlinkedRelatedField): # We define these as class attributes, so we don't need to pass them as arguments. view_name = 'customer-detail' queryset = Customer.objects.all() def get_url(self, obj, view_name, request, format): url_kwargs = { 'organization_slug': obj.organization.slug, 'customer_pk': obj.pk } return reverse(view_name, kwargs=url_kwargs, request=request, format=format) def get_object(self, view_name, view_args, view_kwargs): lookup_kwargs = { 'organization__slug': view_kwargs['organization_slug'], 'pk': view_kwargs['customer_pk'] } return self.get_queryset().get(**lookup_kwargs) Note that if you wanted to use this style together with the generic views then you'd also need to override .get_object on the view in order to get the correct lookup behavior. Generally we recommend a flat style for API representations where possible, but the nested URL style can also be reasonable when used in moderation. Further notes The queryset argument The queryset argument is only ever required for writable relationship field, in which case it is used for performing the model instance lookup, that maps from the primitive user input, into a model instance. In version 2.x a serializer class could sometimes automatically determine the queryset argument if a ModelSerializer class was being used. This behavior is now replaced with always using an explicit queryset argument for writable relational fields. Doing so reduces the amount of hidden 'magic' that ModelSerializer provides, makes the behavior of the field more clear, and ensures that it is trivial to move between using the ModelSerializer shortcut, or using fully explicit Serializer classes. Customizing the HTML display The built-in __str__ method of the model will be used to generate string representations of the objects used to populate the choices property. These choices are used to populate select HTML inputs in the browsable API. To provide customized representations for such inputs, override display_value() of a RelatedField subclass. This method will receive a model object, and should return a string suitable for representing it. For example: class TrackPrimaryKeyRelatedField(serializers.PrimaryKeyRelatedField): def display_value(self, instance): return 'Track: %s' % (instance.title) Select field cutoffs When rendered in the browsable API relational fields will default to only displaying a maximum of 1000 selectable items. If more items are present then a disabled option with \"More than 1000 items\u2026\" will be displayed. This behavior is intended to prevent a template from being unable to render in an acceptable timespan due to a very large number of relationships being displayed. There are two keyword arguments you can use to control this behavior: html_cutoff - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Set to None to disable any limiting. Defaults to 1000 . html_cutoff_text - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to \"More than {count} items\u2026\" You can also control these globally using the settings HTML_SELECT_CUTOFF and HTML_SELECT_CUTOFF_TEXT . In cases where the cutoff is being enforced you may want to instead use a plain input field in the HTML form. You can do so using the style keyword argument. For example: assigned_to = serializers.SlugRelatedField( queryset=User.objects.all(), slug_field='username', style={'base_template': 'input.html'} ) Reverse relations Note that reverse relationships are not automatically included by the ModelSerializer and HyperlinkedModelSerializer classes. To include a reverse relationship, you must explicitly add it to the fields list. For example: class AlbumSerializer(serializers.ModelSerializer): class Meta: fields = ['tracks', ...] You'll normally want to ensure that you've set an appropriate related_name argument on the relationship, that you can use as the field name. For example: class Track(models.Model): album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE) ... If you have not set a related name for the reverse relationship, you'll need to use the automatically generated related name in the fields argument. For example: class AlbumSerializer(serializers.ModelSerializer): class Meta: fields = ['track_set', ...] See the Django documentation on reverse relationships for more details. Generic relationships If you want to serialize a generic foreign key, you need to define a custom field, to determine explicitly how you want to serialize the targets of the relationship. For example, given the following model for a tag, which has a generic relationship with other arbitrary models: class TaggedItem(models.Model): \"\"\" Tags arbitrary model instances using a generic relation. See: https://docs.djangoproject.com/en/stable/ref/contrib/contenttypes/ \"\"\" tag_name = models.SlugField() content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE) object_id = models.PositiveIntegerField() tagged_object = GenericForeignKey('content_type', 'object_id') def __str__(self): return self.tag_name And the following two models, which may have associated tags: class Bookmark(models.Model): \"\"\" A bookmark consists of a URL, and 0 or more descriptive tags. \"\"\" url = models.URLField() tags = GenericRelation(TaggedItem) class Note(models.Model): \"\"\" A note consists of some text, and 0 or more descriptive tags. \"\"\" text = models.CharField(max_length=1000) tags = GenericRelation(TaggedItem) We could define a custom field that could be used to serialize tagged instances, using the type of each instance to determine how it should be serialized. class TaggedObjectRelatedField(serializers.RelatedField): \"\"\" A custom field to use for the `tagged_object` generic relationship. \"\"\" def to_representation(self, value): \"\"\" Serialize tagged objects to a simple textual representation. \"\"\" if isinstance(value, Bookmark): return 'Bookmark: ' + value.url elif isinstance(value, Note): return 'Note: ' + value.text raise Exception('Unexpected type of tagged object') If you need the target of the relationship to have a nested representation, you can use the required serializers inside the .to_representation() method: def to_representation(self, value): \"\"\" Serialize bookmark instances using a bookmark serializer, and note instances using a note serializer. \"\"\" if isinstance(value, Bookmark): serializer = BookmarkSerializer(value) elif isinstance(value, Note): serializer = NoteSerializer(value) else: raise Exception('Unexpected type of tagged object') return serializer.data Note that reverse generic keys, expressed using the GenericRelation field, can be serialized using the regular relational field types, since the type of the target in the relationship is always known. For more information see the Django documentation on generic relations . ManyToManyFields with a Through Model By default, relational fields that target a ManyToManyField with a through model specified are set to read-only. If you explicitly specify a relational field pointing to a ManyToManyField with a through model, be sure to set read_only to True . If you wish to represent extra fields on a through model then you may serialize the through model as a nested object . Third Party Packages The following third party packages are also available. DRF Nested Routers The drf-nested-routers package provides routers and relationship fields for working with nested resources. Rest Framework Generic Relations The rest-framework-generic-relations library provides read/write serialization for generic foreign keys.","title":"Serializer relations"},{"location":"api-guide/relations/#serializer-relations","text":"Data structures, not algorithms, are central to programming. \u2014 Rob Pike Relational fields are used to represent model relationships. They can be applied to ForeignKey , ManyToManyField and OneToOneField relationships, as well as to reverse relationships, and custom relationships such as GenericForeignKey . Note: The relational fields are declared in relations.py , but by convention you should import them from the serializers module, using from rest_framework import serializers and refer to fields as serializers.<FieldName> .","title":"Serializer relations"},{"location":"api-guide/relations/#inspecting-relationships","text":"When using the ModelSerializer class, serializer fields and relationships will be automatically generated for you. Inspecting these automatically generated fields can be a useful tool for determining how to customize the relationship style. To do so, open the Django shell, using python manage.py shell , then import the serializer class, instantiate it, and print the object representation\u2026 >>> from myapp.serializers import AccountSerializer >>> serializer = AccountSerializer() >>> print(repr(serializer)) AccountSerializer(): id = IntegerField(label='ID', read_only=True) name = CharField(allow_blank=True, max_length=100, required=False) owner = PrimaryKeyRelatedField(queryset=User.objects.all())","title":"Inspecting relationships."},{"location":"api-guide/relations/#api-reference","text":"In order to explain the various types of relational fields, we'll use a couple of simple models for our examples. Our models will be for music albums, and the tracks listed on each album. class Album(models.Model): album_name = models.CharField(max_length=100) artist = models.CharField(max_length=100) class Track(models.Model): album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE) order = models.IntegerField() title = models.CharField(max_length=100) duration = models.IntegerField() class Meta: unique_together = ['album', 'order'] ordering = ['order'] def __str__(self): return '%d: %s' % (self.order, self.title)","title":"API Reference"},{"location":"api-guide/relations/#stringrelatedfield","text":"StringRelatedField may be used to represent the target of the relationship using its __str__ method. For example, the following serializer. class AlbumSerializer(serializers.ModelSerializer): tracks = serializers.StringRelatedField(many=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] Would serialize to the following representation. { 'album_name': 'Things We Lost In The Fire', 'artist': 'Low', 'tracks': [ '1: Sunflower', '2: Whitetail', '3: Dinosaur Act', ... ] } This field is read only. Arguments : many - If applied to a to-many relationship, you should set this argument to True .","title":"StringRelatedField"},{"location":"api-guide/relations/#primarykeyrelatedfield","text":"PrimaryKeyRelatedField may be used to represent the target of the relationship using its primary key. For example, the following serializer: class AlbumSerializer(serializers.ModelSerializer): tracks = serializers.PrimaryKeyRelatedField(many=True, read_only=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] Would serialize to a representation like this: { 'album_name': 'Undun', 'artist': 'The Roots', 'tracks': [ 89, 90, 91, ... ] } By default this field is read-write, although you can change this behavior using the read_only flag. Arguments : queryset - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set read_only=True . many - If applied to a to-many relationship, you should set this argument to True . allow_null - If set to True , the field will accept values of None or the empty string for nullable relationships. Defaults to False . pk_field - Set to a field to control serialization/deserialization of the primary key's value. For example, pk_field=UUIDField(format='hex') would serialize a UUID primary key into its compact hex representation.","title":"PrimaryKeyRelatedField"},{"location":"api-guide/relations/#hyperlinkedrelatedfield","text":"HyperlinkedRelatedField may be used to represent the target of the relationship using a hyperlink. For example, the following serializer: class AlbumSerializer(serializers.ModelSerializer): tracks = serializers.HyperlinkedRelatedField( many=True, read_only=True, view_name='track-detail' ) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] Would serialize to a representation like this: { 'album_name': 'Graceland', 'artist': 'Paul Simon', 'tracks': [ 'http://www.example.com/api/tracks/45/', 'http://www.example.com/api/tracks/46/', 'http://www.example.com/api/tracks/47/', ... ] } By default this field is read-write, although you can change this behavior using the read_only flag. Note : This field is designed for objects that map to a URL that accepts a single URL keyword argument, as set using the lookup_field and lookup_url_kwarg arguments. This is suitable for URLs that contain a single primary key or slug argument as part of the URL. If you require more complex hyperlinked representation you'll need to customize the field, as described in the custom hyperlinked fields section, below. Arguments : view_name - The view name that should be used as the target of the relationship. If you're using the standard router classes this will be a string with the format <modelname>-detail . required . queryset - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set read_only=True . many - If applied to a to-many relationship, you should set this argument to True . allow_null - If set to True , the field will accept values of None or the empty string for nullable relationships. Defaults to False . lookup_field - The field on the target that should be used for the lookup. Should correspond to a URL keyword argument on the referenced view. Default is 'pk' . lookup_url_kwarg - The name of the keyword argument defined in the URL conf that corresponds to the lookup field. Defaults to using the same value as lookup_field . format - If using format suffixes, hyperlinked fields will use the same format suffix for the target unless overridden by using the format argument.","title":"HyperlinkedRelatedField"},{"location":"api-guide/relations/#slugrelatedfield","text":"SlugRelatedField may be used to represent the target of the relationship using a field on the target. For example, the following serializer: class AlbumSerializer(serializers.ModelSerializer): tracks = serializers.SlugRelatedField( many=True, read_only=True, slug_field='title' ) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] Would serialize to a representation like this: { 'album_name': 'Dear John', 'artist': 'Loney Dear', 'tracks': [ 'Airport Surroundings', 'Everything Turns to You', 'I Was Only Going Out', ... ] } By default this field is read-write, although you can change this behavior using the read_only flag. When using SlugRelatedField as a read-write field, you will normally want to ensure that the slug field corresponds to a model field with unique=True . Arguments : slug_field - The field on the target that should be used to represent it. This should be a field that uniquely identifies any given instance. For example, username . required queryset - The queryset used for model instance lookups when validating the field input. Relationships must either set a queryset explicitly, or set read_only=True . many - If applied to a to-many relationship, you should set this argument to True . allow_null - If set to True , the field will accept values of None or the empty string for nullable relationships. Defaults to False .","title":"SlugRelatedField"},{"location":"api-guide/relations/#hyperlinkedidentityfield","text":"This field can be applied as an identity relationship, such as the 'url' field on a HyperlinkedModelSerializer. It can also be used for an attribute on the object. For example, the following serializer: class AlbumSerializer(serializers.HyperlinkedModelSerializer): track_listing = serializers.HyperlinkedIdentityField(view_name='track-list') class Meta: model = Album fields = ['album_name', 'artist', 'track_listing'] Would serialize to a representation like this: { 'album_name': 'The Eraser', 'artist': 'Thom Yorke', 'track_listing': 'http://www.example.com/api/track_list/12/', } This field is always read-only. Arguments : view_name - The view name that should be used as the target of the relationship. If you're using the standard router classes this will be a string with the format <model_name>-detail . required . lookup_field - The field on the target that should be used for the lookup. Should correspond to a URL keyword argument on the referenced view. Default is 'pk' . lookup_url_kwarg - The name of the keyword argument defined in the URL conf that corresponds to the lookup field. Defaults to using the same value as lookup_field . format - If using format suffixes, hyperlinked fields will use the same format suffix for the target unless overridden by using the format argument.","title":"HyperlinkedIdentityField"},{"location":"api-guide/relations/#nested-relationships","text":"As opposed to previously discussed references to another entity, the referred entity can instead also be embedded or nested in the representation of the object that refers to it. Such nested relationships can be expressed by using serializers as fields. If the field is used to represent a to-many relationship, you should add the many=True flag to the serializer field.","title":"Nested relationships"},{"location":"api-guide/relations/#example","text":"For example, the following serializer: class TrackSerializer(serializers.ModelSerializer): class Meta: model = Track fields = ['order', 'title', 'duration'] class AlbumSerializer(serializers.ModelSerializer): tracks = TrackSerializer(many=True, read_only=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] Would serialize to a nested representation like this: >>> album = Album.objects.create(album_name=\"The Grey Album\", artist='Danger Mouse') >>> Track.objects.create(album=album, order=1, title='Public Service Announcement', duration=245) <Track: Track object> >>> Track.objects.create(album=album, order=2, title='What More Can I Say', duration=264) <Track: Track object> >>> Track.objects.create(album=album, order=3, title='Encore', duration=159) <Track: Track object> >>> serializer = AlbumSerializer(instance=album) >>> serializer.data { 'album_name': 'The Grey Album', 'artist': 'Danger Mouse', 'tracks': [ {'order': 1, 'title': 'Public Service Announcement', 'duration': 245}, {'order': 2, 'title': 'What More Can I Say', 'duration': 264}, {'order': 3, 'title': 'Encore', 'duration': 159}, ... ], }","title":"Example"},{"location":"api-guide/relations/#writable-nested-serializers","text":"By default nested serializers are read-only. If you want to support write-operations to a nested serializer field you'll need to create create() and/or update() methods in order to explicitly specify how the child relationships should be saved. class TrackSerializer(serializers.ModelSerializer): class Meta: model = Track fields = ['order', 'title', 'duration'] class AlbumSerializer(serializers.ModelSerializer): tracks = TrackSerializer(many=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] def create(self, validated_data): tracks_data = validated_data.pop('tracks') album = Album.objects.create(**validated_data) for track_data in tracks_data: Track.objects.create(album=album, **track_data) return album >>> data = { 'album_name': 'The Grey Album', 'artist': 'Danger Mouse', 'tracks': [ {'order': 1, 'title': 'Public Service Announcement', 'duration': 245}, {'order': 2, 'title': 'What More Can I Say', 'duration': 264}, {'order': 3, 'title': 'Encore', 'duration': 159}, ], } >>> serializer = AlbumSerializer(data=data) >>> serializer.is_valid() True >>> serializer.save() <Album: Album object>","title":"Writable nested serializers"},{"location":"api-guide/relations/#custom-relational-fields","text":"In rare cases where none of the existing relational styles fit the representation you need, you can implement a completely custom relational field, that describes exactly how the output representation should be generated from the model instance. To implement a custom relational field, you should override RelatedField , and implement the .to_representation(self, value) method. This method takes the target of the field as the value argument, and should return the representation that should be used to serialize the target. The value argument will typically be a model instance. If you want to implement a read-write relational field, you must also implement the .to_internal_value(self, data) method. To provide a dynamic queryset based on the context , you can also override .get_queryset(self) instead of specifying .queryset on the class or when initializing the field.","title":"Custom relational fields"},{"location":"api-guide/relations/#example_1","text":"For example, we could define a relational field to serialize a track to a custom string representation, using its ordering, title, and duration. import time class TrackListingField(serializers.RelatedField): def to_representation(self, value): duration = time.strftime('%M:%S', time.gmtime(value.duration)) return 'Track %d: %s (%s)' % (value.order, value.name, duration) class AlbumSerializer(serializers.ModelSerializer): tracks = TrackListingField(many=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] This custom field would then serialize to the following representation. { 'album_name': 'Sometimes I Wish We Were an Eagle', 'artist': 'Bill Callahan', 'tracks': [ 'Track 1: Jim Cain (04:39)', 'Track 2: Eid Ma Clack Shaw (04:19)', 'Track 3: The Wind and the Dove (04:34)', ... ] }","title":"Example"},{"location":"api-guide/relations/#custom-hyperlinked-fields","text":"In some cases you may need to customize the behavior of a hyperlinked field, in order to represent URLs that require more than a single lookup field. You can achieve this by overriding HyperlinkedRelatedField . There are two methods that may be overridden: get_url(self, obj, view_name, request, format) The get_url method is used to map the object instance to its URL representation. May raise a NoReverseMatch if the view_name and lookup_field attributes are not configured to correctly match the URL conf. get_object(self, view_name, view_args, view_kwargs) If you want to support a writable hyperlinked field then you'll also want to override get_object , in order to map incoming URLs back to the object they represent. For read-only hyperlinked fields there is no need to override this method. The return value of this method should the object that corresponds to the matched URL conf arguments. May raise an ObjectDoesNotExist exception.","title":"Custom hyperlinked fields"},{"location":"api-guide/relations/#example_2","text":"Say we have a URL for a customer object that takes two keyword arguments, like so: /api/<organization_slug>/customers/<customer_pk>/ This cannot be represented with the default implementation, which accepts only a single lookup field. In this case we'd need to override HyperlinkedRelatedField to get the behavior we want: from rest_framework import serializers from rest_framework.reverse import reverse class CustomerHyperlink(serializers.HyperlinkedRelatedField): # We define these as class attributes, so we don't need to pass them as arguments. view_name = 'customer-detail' queryset = Customer.objects.all() def get_url(self, obj, view_name, request, format): url_kwargs = { 'organization_slug': obj.organization.slug, 'customer_pk': obj.pk } return reverse(view_name, kwargs=url_kwargs, request=request, format=format) def get_object(self, view_name, view_args, view_kwargs): lookup_kwargs = { 'organization__slug': view_kwargs['organization_slug'], 'pk': view_kwargs['customer_pk'] } return self.get_queryset().get(**lookup_kwargs) Note that if you wanted to use this style together with the generic views then you'd also need to override .get_object on the view in order to get the correct lookup behavior. Generally we recommend a flat style for API representations where possible, but the nested URL style can also be reasonable when used in moderation.","title":"Example"},{"location":"api-guide/relations/#further-notes","text":"","title":"Further notes"},{"location":"api-guide/relations/#the-queryset-argument","text":"The queryset argument is only ever required for writable relationship field, in which case it is used for performing the model instance lookup, that maps from the primitive user input, into a model instance. In version 2.x a serializer class could sometimes automatically determine the queryset argument if a ModelSerializer class was being used. This behavior is now replaced with always using an explicit queryset argument for writable relational fields. Doing so reduces the amount of hidden 'magic' that ModelSerializer provides, makes the behavior of the field more clear, and ensures that it is trivial to move between using the ModelSerializer shortcut, or using fully explicit Serializer classes.","title":"The queryset argument"},{"location":"api-guide/relations/#customizing-the-html-display","text":"The built-in __str__ method of the model will be used to generate string representations of the objects used to populate the choices property. These choices are used to populate select HTML inputs in the browsable API. To provide customized representations for such inputs, override display_value() of a RelatedField subclass. This method will receive a model object, and should return a string suitable for representing it. For example: class TrackPrimaryKeyRelatedField(serializers.PrimaryKeyRelatedField): def display_value(self, instance): return 'Track: %s' % (instance.title)","title":"Customizing the HTML display"},{"location":"api-guide/relations/#select-field-cutoffs","text":"When rendered in the browsable API relational fields will default to only displaying a maximum of 1000 selectable items. If more items are present then a disabled option with \"More than 1000 items\u2026\" will be displayed. This behavior is intended to prevent a template from being unable to render in an acceptable timespan due to a very large number of relationships being displayed. There are two keyword arguments you can use to control this behavior: html_cutoff - If set this will be the maximum number of choices that will be displayed by a HTML select drop down. Set to None to disable any limiting. Defaults to 1000 . html_cutoff_text - If set this will display a textual indicator if the maximum number of items have been cutoff in an HTML select drop down. Defaults to \"More than {count} items\u2026\" You can also control these globally using the settings HTML_SELECT_CUTOFF and HTML_SELECT_CUTOFF_TEXT . In cases where the cutoff is being enforced you may want to instead use a plain input field in the HTML form. You can do so using the style keyword argument. For example: assigned_to = serializers.SlugRelatedField( queryset=User.objects.all(), slug_field='username', style={'base_template': 'input.html'} )","title":"Select field cutoffs"},{"location":"api-guide/relations/#reverse-relations","text":"Note that reverse relationships are not automatically included by the ModelSerializer and HyperlinkedModelSerializer classes. To include a reverse relationship, you must explicitly add it to the fields list. For example: class AlbumSerializer(serializers.ModelSerializer): class Meta: fields = ['tracks', ...] You'll normally want to ensure that you've set an appropriate related_name argument on the relationship, that you can use as the field name. For example: class Track(models.Model): album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE) ... If you have not set a related name for the reverse relationship, you'll need to use the automatically generated related name in the fields argument. For example: class AlbumSerializer(serializers.ModelSerializer): class Meta: fields = ['track_set', ...] See the Django documentation on reverse relationships for more details.","title":"Reverse relations"},{"location":"api-guide/relations/#generic-relationships","text":"If you want to serialize a generic foreign key, you need to define a custom field, to determine explicitly how you want to serialize the targets of the relationship. For example, given the following model for a tag, which has a generic relationship with other arbitrary models: class TaggedItem(models.Model): \"\"\" Tags arbitrary model instances using a generic relation. See: https://docs.djangoproject.com/en/stable/ref/contrib/contenttypes/ \"\"\" tag_name = models.SlugField() content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE) object_id = models.PositiveIntegerField() tagged_object = GenericForeignKey('content_type', 'object_id') def __str__(self): return self.tag_name And the following two models, which may have associated tags: class Bookmark(models.Model): \"\"\" A bookmark consists of a URL, and 0 or more descriptive tags. \"\"\" url = models.URLField() tags = GenericRelation(TaggedItem) class Note(models.Model): \"\"\" A note consists of some text, and 0 or more descriptive tags. \"\"\" text = models.CharField(max_length=1000) tags = GenericRelation(TaggedItem) We could define a custom field that could be used to serialize tagged instances, using the type of each instance to determine how it should be serialized. class TaggedObjectRelatedField(serializers.RelatedField): \"\"\" A custom field to use for the `tagged_object` generic relationship. \"\"\" def to_representation(self, value): \"\"\" Serialize tagged objects to a simple textual representation. \"\"\" if isinstance(value, Bookmark): return 'Bookmark: ' + value.url elif isinstance(value, Note): return 'Note: ' + value.text raise Exception('Unexpected type of tagged object') If you need the target of the relationship to have a nested representation, you can use the required serializers inside the .to_representation() method: def to_representation(self, value): \"\"\" Serialize bookmark instances using a bookmark serializer, and note instances using a note serializer. \"\"\" if isinstance(value, Bookmark): serializer = BookmarkSerializer(value) elif isinstance(value, Note): serializer = NoteSerializer(value) else: raise Exception('Unexpected type of tagged object') return serializer.data Note that reverse generic keys, expressed using the GenericRelation field, can be serialized using the regular relational field types, since the type of the target in the relationship is always known. For more information see the Django documentation on generic relations .","title":"Generic relationships"},{"location":"api-guide/relations/#manytomanyfields-with-a-through-model","text":"By default, relational fields that target a ManyToManyField with a through model specified are set to read-only. If you explicitly specify a relational field pointing to a ManyToManyField with a through model, be sure to set read_only to True . If you wish to represent extra fields on a through model then you may serialize the through model as a nested object .","title":"ManyToManyFields with a Through Model"},{"location":"api-guide/relations/#third-party-packages","text":"The following third party packages are also available.","title":"Third Party Packages"},{"location":"api-guide/relations/#drf-nested-routers","text":"The drf-nested-routers package provides routers and relationship fields for working with nested resources.","title":"DRF Nested Routers"},{"location":"api-guide/relations/#rest-framework-generic-relations","text":"The rest-framework-generic-relations library provides read/write serialization for generic foreign keys.","title":"Rest Framework Generic Relations"},{"location":"api-guide/renderers/","text":"Renderers Before a TemplateResponse instance can be returned to the client, it must be rendered. The rendering process takes the intermediate representation of template and context, and turns it into the final byte stream that can be served to the client. \u2014 Django documentation REST framework includes a number of built in Renderer classes, that allow you to return responses with various media types. There is also support for defining your own custom renderers, which gives you the flexibility to design your own media types. How the renderer is determined The set of valid renderers for a view is always defined as a list of classes. When a view is entered REST framework will perform content negotiation on the incoming request, and determine the most appropriate renderer to satisfy the request. The basic process of content negotiation involves examining the request's Accept header, to determine which media types it expects in the response. Optionally, format suffixes on the URL may be used to explicitly request a particular representation. For example the URL http://example.com/api/users_count.json might be an endpoint that always returns JSON data. For more information see the documentation on content negotiation . Setting the renderers The default set of renderers may be set globally, using the DEFAULT_RENDERER_CLASSES setting. For example, the following settings would use JSON as the main media type and also include the self describing API. REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer', ] } You can also set the renderers used for an individual view, or viewset, using the APIView class-based views. from django.contrib.auth.models import User from rest_framework.renderers import JSONRenderer from rest_framework.response import Response from rest_framework.views import APIView class UserCountView(APIView): \"\"\" A view that returns the count of active users in JSON. \"\"\" renderer_classes = [JSONRenderer] def get(self, request, format=None): user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content) Or, if you're using the @api_view decorator with function based views. @api_view(['GET']) @renderer_classes([JSONRenderer]) def user_count_view(request, format=None): \"\"\" A view that returns the count of active users in JSON. \"\"\" user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content) Ordering of renderer classes It's important when specifying the renderer classes for your API to think about what priority you want to assign to each media type. If a client underspecifies the representations it can accept, such as sending an Accept: */* header, or not including an Accept header at all, then REST framework will select the first renderer in the list to use for the response. For example if your API serves JSON responses and the HTML browsable API, you might want to make JSONRenderer your default renderer, in order to send JSON responses to clients that do not specify an Accept header. If your API includes views that can serve both regular webpages and API responses depending on the request, then you might consider making TemplateHTMLRenderer your default renderer, in order to play nicely with older browsers that send broken accept headers . API Reference JSONRenderer Renders the request data into JSON , using utf-8 encoding. Note that the default style is to include unicode characters, and render the response using a compact style with no unnecessary whitespace: {\"unicode black star\":\"\u2605\",\"value\":999} The client may additionally include an 'indent' media type parameter, in which case the returned JSON will be indented. For example Accept: application/json; indent=4 . { \"unicode black star\": \"\u2605\", \"value\": 999 } The default JSON encoding style can be altered using the UNICODE_JSON and COMPACT_JSON settings keys. .media_type : application/json .format : 'json' .charset : None TemplateHTMLRenderer Renders data to HTML, using Django's standard template rendering. Unlike other renderers, the data passed to the Response does not need to be serialized. Also, unlike other renderers, you may want to include a template_name argument when creating the Response . The TemplateHTMLRenderer will create a RequestContext , using the response.data as the context dict, and determine a template name to use to render the context. The template name is determined by (in order of preference): An explicit template_name argument passed to the response. An explicit .template_name attribute set on this class. The return result of calling view.get_template_names() . An example of a view that uses TemplateHTMLRenderer : class UserDetail(generics.RetrieveAPIView): \"\"\" A view that returns a templated HTML representation of a given user. \"\"\" queryset = User.objects.all() renderer_classes = [TemplateHTMLRenderer] def get(self, request, *args, **kwargs): self.object = self.get_object() return Response({'user': self.object}, template_name='user_detail.html') You can use TemplateHTMLRenderer either to return regular HTML pages using REST framework, or to return both HTML and API responses from a single endpoint. If you're building websites that use TemplateHTMLRenderer along with other renderer classes, you should consider listing TemplateHTMLRenderer as the first class in the renderer_classes list, so that it will be prioritised first even for browsers that send poorly formed ACCEPT: headers. See the HTML & Forms Topic Page for further examples of TemplateHTMLRenderer usage. .media_type : text/html .format : 'html' .charset : utf-8 See also: StaticHTMLRenderer StaticHTMLRenderer A simple renderer that simply returns pre-rendered HTML. Unlike other renderers, the data passed to the response object should be a string representing the content to be returned. An example of a view that uses StaticHTMLRenderer : @api_view(['GET']) @renderer_classes([StaticHTMLRenderer]) def simple_html_view(request): data = '<html><body><h1>Hello, world</h1></body></html>' return Response(data) You can use StaticHTMLRenderer either to return regular HTML pages using REST framework, or to return both HTML and API responses from a single endpoint. .media_type : text/html .format : 'html' .charset : utf-8 See also: TemplateHTMLRenderer BrowsableAPIRenderer Renders data into HTML for the Browsable API: This renderer will determine which other renderer would have been given highest priority, and use that to display an API style response within the HTML page. .media_type : text/html .format : 'api' .charset : utf-8 .template : 'rest_framework/api.html' Customizing BrowsableAPIRenderer By default the response content will be rendered with the highest priority renderer apart from BrowsableAPIRenderer . If you need to customize this behavior, for example to use HTML as the default return format, but use JSON in the browsable API, you can do so by overriding the get_default_renderer() method. For example: class CustomBrowsableAPIRenderer(BrowsableAPIRenderer): def get_default_renderer(self, view): return JSONRenderer() AdminRenderer Renders data into HTML for an admin-like display: This renderer is suitable for CRUD-style web APIs that should also present a user-friendly interface for managing the data. Note that views that have nested or list serializers for their input won't work well with the AdminRenderer , as the HTML forms are unable to properly support them. Note : The AdminRenderer is only able to include links to detail pages when a properly configured URL_FIELD_NAME ( url by default) attribute is present in the data. For HyperlinkedModelSerializer this will be the case, but for ModelSerializer or plain Serializer classes you'll need to make sure to include the field explicitly. For example here we use models get_absolute_url method: class AccountSerializer(serializers.ModelSerializer): url = serializers.CharField(source='get_absolute_url', read_only=True) class Meta: model = Account .media_type : text/html .format : 'admin' .charset : utf-8 .template : 'rest_framework/admin.html' HTMLFormRenderer Renders data returned by a serializer into an HTML form. The output of this renderer does not include the enclosing <form> tags, a hidden CSRF input or any submit buttons. This renderer is not intended to be used directly, but can instead be used in templates by passing a serializer instance to the render_form template tag. {% load rest_framework %} <form action=\"/submit-report/\" method=\"post\"> {% csrf_token %} {% render_form serializer %} <input type=\"submit\" value=\"Save\" /> </form> For more information see the HTML & Forms documentation. .media_type : text/html .format : 'form' .charset : utf-8 .template : 'rest_framework/horizontal/form.html' MultiPartRenderer This renderer is used for rendering HTML multipart form data. It is not suitable as a response renderer , but is instead used for creating test requests, using REST framework's test client and test request factory . .media_type : multipart/form-data; boundary=BoUnDaRyStRiNg .format : 'multipart' .charset : utf-8 Custom renderers To implement a custom renderer, you should override BaseRenderer , set the .media_type and .format properties, and implement the .render(self, data, media_type=None, renderer_context=None) method. The method should return a bytestring, which will be used as the body of the HTTP response. The arguments passed to the .render() method are: data The request data, as set by the Response() instantiation. media_type=None Optional. If provided, this is the accepted media type, as determined by the content negotiation stage. Depending on the client's Accept: header, this may be more specific than the renderer's media_type attribute, and may include media type parameters. For example \"application/json; nested=true\" . renderer_context=None Optional. If provided, this is a dictionary of contextual information provided by the view. By default this will include the following keys: view , request , response , args , kwargs . Example The following is an example plaintext renderer that will return a response with the data parameter as the content of the response. from django.utils.encoding import smart_text from rest_framework import renderers class PlainTextRenderer(renderers.BaseRenderer): media_type = 'text/plain' format = 'txt' def render(self, data, media_type=None, renderer_context=None): return smart_text(data, encoding=self.charset) Setting the character set By default renderer classes are assumed to be using the UTF-8 encoding. To use a different encoding, set the charset attribute on the renderer. class PlainTextRenderer(renderers.BaseRenderer): media_type = 'text/plain' format = 'txt' charset = 'iso-8859-1' def render(self, data, media_type=None, renderer_context=None): return data.encode(self.charset) Note that if a renderer class returns a unicode string, then the response content will be coerced into a bytestring by the Response class, with the charset attribute set on the renderer used to determine the encoding. If the renderer returns a bytestring representing raw binary content, you should set a charset value of None , which will ensure the Content-Type header of the response will not have a charset value set. In some cases you may also want to set the render_style attribute to 'binary' . Doing so will also ensure that the browsable API will not attempt to display the binary content as a string. class JPEGRenderer(renderers.BaseRenderer): media_type = 'image/jpeg' format = 'jpg' charset = None render_style = 'binary' def render(self, data, media_type=None, renderer_context=None): return data Advanced renderer usage You can do some pretty flexible things using REST framework's renderers. Some examples... Provide either flat or nested representations from the same endpoint, depending on the requested media type. Serve both regular HTML webpages, and JSON based API responses from the same endpoints. Specify multiple types of HTML representation for API clients to use. Underspecify a renderer's media type, such as using media_type = 'image/*' , and use the Accept header to vary the encoding of the response. Varying behaviour by media type In some cases you might want your view to use different serialization styles depending on the accepted media type. If you need to do this you can access request.accepted_renderer to determine the negotiated renderer that will be used for the response. For example: @api_view(['GET']) @renderer_classes([TemplateHTMLRenderer, JSONRenderer]) def list_users(request): \"\"\" A view that can return JSON or HTML representations of the users in the system. \"\"\" queryset = Users.objects.filter(active=True) if request.accepted_renderer.format == 'html': # TemplateHTMLRenderer takes a context dict, # and additionally requires a 'template_name'. # It does not require serialization. data = {'users': queryset} return Response(data, template_name='list_users.html') # JSONRenderer requires serialized data as normal. serializer = UserSerializer(instance=queryset) data = serializer.data return Response(data) Underspecifying the media type In some cases you might want a renderer to serve a range of media types. In this case you can underspecify the media types it should respond to, by using a media_type value such as image/* , or */* . If you underspecify the renderer's media type, you should make sure to specify the media type explicitly when you return the response, using the content_type attribute. For example: return Response(data, content_type='image/png') Designing your media types For the purposes of many Web APIs, simple JSON responses with hyperlinked relations may be sufficient. If you want to fully embrace RESTful design and HATEOAS you'll need to consider the design and usage of your media types in more detail. In the words of Roy Fielding , \"A REST API should spend almost all of its descriptive effort in defining the media type(s) used for representing resources and driving application state, or in defining extended relation names and/or hypertext-enabled mark-up for existing standard media types.\". For good examples of custom media types, see GitHub's use of a custom application/vnd.github+json media type, and Mike Amundsen's IANA approved application/vnd.collection+json JSON-based hypermedia. HTML error views Typically a renderer will behave the same regardless of if it's dealing with a regular response, or with a response caused by an exception being raised, such as an Http404 or PermissionDenied exception, or a subclass of APIException . If you're using either the TemplateHTMLRenderer or the StaticHTMLRenderer and an exception is raised, the behavior is slightly different, and mirrors Django's default handling of error views . Exceptions raised and handled by an HTML renderer will attempt to render using one of the following methods, by order of precedence. Load and render a template named {status_code}.html . Load and render a template named api_exception.html . Render the HTTP status code and text, for example \"404 Not Found\". Templates will render with a RequestContext which includes the status_code and details keys. Note : If DEBUG=True , Django's standard traceback error page will be displayed instead of rendering the HTTP status code and text. Third party packages The following third party packages are also available. YAML REST framework YAML provides YAML parsing and rendering support. It was previously included directly in the REST framework package, and is now instead supported as a third-party package. Installation & configuration Install using pip. $ pip install djangorestframework-yaml Modify your REST framework settings. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ 'rest_framework_yaml.parsers.YAMLParser', ], 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework_yaml.renderers.YAMLRenderer', ], } XML REST Framework XML provides a simple informal XML format. It was previously included directly in the REST framework package, and is now instead supported as a third-party package. Installation & configuration Install using pip. $ pip install djangorestframework-xml Modify your REST framework settings. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ 'rest_framework_xml.parsers.XMLParser', ], 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework_xml.renderers.XMLRenderer', ], } JSONP REST framework JSONP provides JSONP rendering support. It was previously included directly in the REST framework package, and is now instead supported as a third-party package. Warning : If you require cross-domain AJAX requests, you should generally be using the more modern approach of CORS as an alternative to JSONP . See the CORS documentation for more details. The jsonp approach is essentially a browser hack, and is only appropriate for globally readable API endpoints , where GET requests are unauthenticated and do not require any user permissions. Installation & configuration Install using pip. $ pip install djangorestframework-jsonp Modify your REST framework settings. REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework_jsonp.renderers.JSONPRenderer', ], } MessagePack MessagePack is a fast, efficient binary serialization format. Juan Riaza maintains the djangorestframework-msgpack package which provides MessagePack renderer and parser support for REST framework. XLSX (Binary Spreadsheet Endpoints) XLSX is the world's most popular binary spreadsheet format. Tim Allen of The Wharton School maintains drf-renderer-xlsx , which renders an endpoint as an XLSX spreadsheet using OpenPyXL, and allows the client to download it. Spreadsheets can be styled on a per-view basis. Installation & configuration Install using pip. $ pip install drf-renderer-xlsx Modify your REST framework settings. REST_FRAMEWORK = { ... 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer', 'drf_renderer_xlsx.renderers.XLSXRenderer', ], } To avoid having a file streamed without a filename (which the browser will often default to the filename \"download\", with no extension), we need to use a mixin to override the Content-Disposition header. If no filename is provided, it will default to export.xlsx . For example: from rest_framework.viewsets import ReadOnlyModelViewSet from drf_renderer_xlsx.mixins import XLSXFileMixin from drf_renderer_xlsx.renderers import XLSXRenderer from .models import MyExampleModel from .serializers import MyExampleSerializer class MyExampleViewSet(XLSXFileMixin, ReadOnlyModelViewSet): queryset = MyExampleModel.objects.all() serializer_class = MyExampleSerializer renderer_classes = [XLSXRenderer] filename = 'my_export.xlsx' CSV Comma-separated values are a plain-text tabular data format, that can be easily imported into spreadsheet applications. Mjumbe Poe maintains the djangorestframework-csv package which provides CSV renderer support for REST framework. UltraJSON UltraJSON is an optimized C JSON encoder which can give significantly faster JSON rendering. Jacob Haslehurst maintains the drf-ujson-renderer package which implements JSON rendering using the UJSON package. CamelCase JSON djangorestframework-camel-case provides camel case JSON renderers and parsers for REST framework. This allows serializers to use Python-style underscored field names, but be exposed in the API as Javascript-style camel case field names. It is maintained by Vitaly Babiy . Pandas (CSV, Excel, PNG) Django REST Pandas provides a serializer and renderers that support additional data processing and output via the Pandas DataFrame API. Django REST Pandas includes renderers for Pandas-style CSV files, Excel workbooks (both .xls and .xlsx ), and a number of other formats . It is maintained by S. Andrew Sheppard as part of the wq Project . LaTeX Rest Framework Latex provides a renderer that outputs PDFs using Laulatex. It is maintained by Pebble (S/F Software) .","title":"Renderers"},{"location":"api-guide/renderers/#renderers","text":"Before a TemplateResponse instance can be returned to the client, it must be rendered. The rendering process takes the intermediate representation of template and context, and turns it into the final byte stream that can be served to the client. \u2014 Django documentation REST framework includes a number of built in Renderer classes, that allow you to return responses with various media types. There is also support for defining your own custom renderers, which gives you the flexibility to design your own media types.","title":"Renderers"},{"location":"api-guide/renderers/#how-the-renderer-is-determined","text":"The set of valid renderers for a view is always defined as a list of classes. When a view is entered REST framework will perform content negotiation on the incoming request, and determine the most appropriate renderer to satisfy the request. The basic process of content negotiation involves examining the request's Accept header, to determine which media types it expects in the response. Optionally, format suffixes on the URL may be used to explicitly request a particular representation. For example the URL http://example.com/api/users_count.json might be an endpoint that always returns JSON data. For more information see the documentation on content negotiation .","title":"How the renderer is determined"},{"location":"api-guide/renderers/#setting-the-renderers","text":"The default set of renderers may be set globally, using the DEFAULT_RENDERER_CLASSES setting. For example, the following settings would use JSON as the main media type and also include the self describing API. REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer', ] } You can also set the renderers used for an individual view, or viewset, using the APIView class-based views. from django.contrib.auth.models import User from rest_framework.renderers import JSONRenderer from rest_framework.response import Response from rest_framework.views import APIView class UserCountView(APIView): \"\"\" A view that returns the count of active users in JSON. \"\"\" renderer_classes = [JSONRenderer] def get(self, request, format=None): user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content) Or, if you're using the @api_view decorator with function based views. @api_view(['GET']) @renderer_classes([JSONRenderer]) def user_count_view(request, format=None): \"\"\" A view that returns the count of active users in JSON. \"\"\" user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content)","title":"Setting the renderers"},{"location":"api-guide/renderers/#ordering-of-renderer-classes","text":"It's important when specifying the renderer classes for your API to think about what priority you want to assign to each media type. If a client underspecifies the representations it can accept, such as sending an Accept: */* header, or not including an Accept header at all, then REST framework will select the first renderer in the list to use for the response. For example if your API serves JSON responses and the HTML browsable API, you might want to make JSONRenderer your default renderer, in order to send JSON responses to clients that do not specify an Accept header. If your API includes views that can serve both regular webpages and API responses depending on the request, then you might consider making TemplateHTMLRenderer your default renderer, in order to play nicely with older browsers that send broken accept headers .","title":"Ordering of renderer classes"},{"location":"api-guide/renderers/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/renderers/#jsonrenderer","text":"Renders the request data into JSON , using utf-8 encoding. Note that the default style is to include unicode characters, and render the response using a compact style with no unnecessary whitespace: {\"unicode black star\":\"\u2605\",\"value\":999} The client may additionally include an 'indent' media type parameter, in which case the returned JSON will be indented. For example Accept: application/json; indent=4 . { \"unicode black star\": \"\u2605\", \"value\": 999 } The default JSON encoding style can be altered using the UNICODE_JSON and COMPACT_JSON settings keys. .media_type : application/json .format : 'json' .charset : None","title":"JSONRenderer"},{"location":"api-guide/renderers/#templatehtmlrenderer","text":"Renders data to HTML, using Django's standard template rendering. Unlike other renderers, the data passed to the Response does not need to be serialized. Also, unlike other renderers, you may want to include a template_name argument when creating the Response . The TemplateHTMLRenderer will create a RequestContext , using the response.data as the context dict, and determine a template name to use to render the context. The template name is determined by (in order of preference): An explicit template_name argument passed to the response. An explicit .template_name attribute set on this class. The return result of calling view.get_template_names() . An example of a view that uses TemplateHTMLRenderer : class UserDetail(generics.RetrieveAPIView): \"\"\" A view that returns a templated HTML representation of a given user. \"\"\" queryset = User.objects.all() renderer_classes = [TemplateHTMLRenderer] def get(self, request, *args, **kwargs): self.object = self.get_object() return Response({'user': self.object}, template_name='user_detail.html') You can use TemplateHTMLRenderer either to return regular HTML pages using REST framework, or to return both HTML and API responses from a single endpoint. If you're building websites that use TemplateHTMLRenderer along with other renderer classes, you should consider listing TemplateHTMLRenderer as the first class in the renderer_classes list, so that it will be prioritised first even for browsers that send poorly formed ACCEPT: headers. See the HTML & Forms Topic Page for further examples of TemplateHTMLRenderer usage. .media_type : text/html .format : 'html' .charset : utf-8 See also: StaticHTMLRenderer","title":"TemplateHTMLRenderer"},{"location":"api-guide/renderers/#statichtmlrenderer","text":"A simple renderer that simply returns pre-rendered HTML. Unlike other renderers, the data passed to the response object should be a string representing the content to be returned. An example of a view that uses StaticHTMLRenderer : @api_view(['GET']) @renderer_classes([StaticHTMLRenderer]) def simple_html_view(request): data = '<html><body><h1>Hello, world</h1></body></html>' return Response(data) You can use StaticHTMLRenderer either to return regular HTML pages using REST framework, or to return both HTML and API responses from a single endpoint. .media_type : text/html .format : 'html' .charset : utf-8 See also: TemplateHTMLRenderer","title":"StaticHTMLRenderer"},{"location":"api-guide/renderers/#browsableapirenderer","text":"Renders data into HTML for the Browsable API: This renderer will determine which other renderer would have been given highest priority, and use that to display an API style response within the HTML page. .media_type : text/html .format : 'api' .charset : utf-8 .template : 'rest_framework/api.html'","title":"BrowsableAPIRenderer"},{"location":"api-guide/renderers/#customizing-browsableapirenderer","text":"By default the response content will be rendered with the highest priority renderer apart from BrowsableAPIRenderer . If you need to customize this behavior, for example to use HTML as the default return format, but use JSON in the browsable API, you can do so by overriding the get_default_renderer() method. For example: class CustomBrowsableAPIRenderer(BrowsableAPIRenderer): def get_default_renderer(self, view): return JSONRenderer()","title":"Customizing BrowsableAPIRenderer"},{"location":"api-guide/renderers/#adminrenderer","text":"Renders data into HTML for an admin-like display: This renderer is suitable for CRUD-style web APIs that should also present a user-friendly interface for managing the data. Note that views that have nested or list serializers for their input won't work well with the AdminRenderer , as the HTML forms are unable to properly support them. Note : The AdminRenderer is only able to include links to detail pages when a properly configured URL_FIELD_NAME ( url by default) attribute is present in the data. For HyperlinkedModelSerializer this will be the case, but for ModelSerializer or plain Serializer classes you'll need to make sure to include the field explicitly. For example here we use models get_absolute_url method: class AccountSerializer(serializers.ModelSerializer): url = serializers.CharField(source='get_absolute_url', read_only=True) class Meta: model = Account .media_type : text/html .format : 'admin' .charset : utf-8 .template : 'rest_framework/admin.html'","title":"AdminRenderer"},{"location":"api-guide/renderers/#htmlformrenderer","text":"Renders data returned by a serializer into an HTML form. The output of this renderer does not include the enclosing <form> tags, a hidden CSRF input or any submit buttons. This renderer is not intended to be used directly, but can instead be used in templates by passing a serializer instance to the render_form template tag. {% load rest_framework %} <form action=\"/submit-report/\" method=\"post\"> {% csrf_token %} {% render_form serializer %} <input type=\"submit\" value=\"Save\" /> </form> For more information see the HTML & Forms documentation. .media_type : text/html .format : 'form' .charset : utf-8 .template : 'rest_framework/horizontal/form.html'","title":"HTMLFormRenderer"},{"location":"api-guide/renderers/#multipartrenderer","text":"This renderer is used for rendering HTML multipart form data. It is not suitable as a response renderer , but is instead used for creating test requests, using REST framework's test client and test request factory . .media_type : multipart/form-data; boundary=BoUnDaRyStRiNg .format : 'multipart' .charset : utf-8","title":"MultiPartRenderer"},{"location":"api-guide/renderers/#custom-renderers","text":"To implement a custom renderer, you should override BaseRenderer , set the .media_type and .format properties, and implement the .render(self, data, media_type=None, renderer_context=None) method. The method should return a bytestring, which will be used as the body of the HTTP response. The arguments passed to the .render() method are:","title":"Custom renderers"},{"location":"api-guide/renderers/#data","text":"The request data, as set by the Response() instantiation.","title":"data"},{"location":"api-guide/renderers/#media_typenone","text":"Optional. If provided, this is the accepted media type, as determined by the content negotiation stage. Depending on the client's Accept: header, this may be more specific than the renderer's media_type attribute, and may include media type parameters. For example \"application/json; nested=true\" .","title":"media_type=None"},{"location":"api-guide/renderers/#renderer_contextnone","text":"Optional. If provided, this is a dictionary of contextual information provided by the view. By default this will include the following keys: view , request , response , args , kwargs .","title":"renderer_context=None"},{"location":"api-guide/renderers/#example","text":"The following is an example plaintext renderer that will return a response with the data parameter as the content of the response. from django.utils.encoding import smart_text from rest_framework import renderers class PlainTextRenderer(renderers.BaseRenderer): media_type = 'text/plain' format = 'txt' def render(self, data, media_type=None, renderer_context=None): return smart_text(data, encoding=self.charset)","title":"Example"},{"location":"api-guide/renderers/#setting-the-character-set","text":"By default renderer classes are assumed to be using the UTF-8 encoding. To use a different encoding, set the charset attribute on the renderer. class PlainTextRenderer(renderers.BaseRenderer): media_type = 'text/plain' format = 'txt' charset = 'iso-8859-1' def render(self, data, media_type=None, renderer_context=None): return data.encode(self.charset) Note that if a renderer class returns a unicode string, then the response content will be coerced into a bytestring by the Response class, with the charset attribute set on the renderer used to determine the encoding. If the renderer returns a bytestring representing raw binary content, you should set a charset value of None , which will ensure the Content-Type header of the response will not have a charset value set. In some cases you may also want to set the render_style attribute to 'binary' . Doing so will also ensure that the browsable API will not attempt to display the binary content as a string. class JPEGRenderer(renderers.BaseRenderer): media_type = 'image/jpeg' format = 'jpg' charset = None render_style = 'binary' def render(self, data, media_type=None, renderer_context=None): return data","title":"Setting the character set"},{"location":"api-guide/renderers/#advanced-renderer-usage","text":"You can do some pretty flexible things using REST framework's renderers. Some examples... Provide either flat or nested representations from the same endpoint, depending on the requested media type. Serve both regular HTML webpages, and JSON based API responses from the same endpoints. Specify multiple types of HTML representation for API clients to use. Underspecify a renderer's media type, such as using media_type = 'image/*' , and use the Accept header to vary the encoding of the response.","title":"Advanced renderer usage"},{"location":"api-guide/renderers/#varying-behaviour-by-media-type","text":"In some cases you might want your view to use different serialization styles depending on the accepted media type. If you need to do this you can access request.accepted_renderer to determine the negotiated renderer that will be used for the response. For example: @api_view(['GET']) @renderer_classes([TemplateHTMLRenderer, JSONRenderer]) def list_users(request): \"\"\" A view that can return JSON or HTML representations of the users in the system. \"\"\" queryset = Users.objects.filter(active=True) if request.accepted_renderer.format == 'html': # TemplateHTMLRenderer takes a context dict, # and additionally requires a 'template_name'. # It does not require serialization. data = {'users': queryset} return Response(data, template_name='list_users.html') # JSONRenderer requires serialized data as normal. serializer = UserSerializer(instance=queryset) data = serializer.data return Response(data)","title":"Varying behaviour by media type"},{"location":"api-guide/renderers/#underspecifying-the-media-type","text":"In some cases you might want a renderer to serve a range of media types. In this case you can underspecify the media types it should respond to, by using a media_type value such as image/* , or */* . If you underspecify the renderer's media type, you should make sure to specify the media type explicitly when you return the response, using the content_type attribute. For example: return Response(data, content_type='image/png')","title":"Underspecifying the media type"},{"location":"api-guide/renderers/#designing-your-media-types","text":"For the purposes of many Web APIs, simple JSON responses with hyperlinked relations may be sufficient. If you want to fully embrace RESTful design and HATEOAS you'll need to consider the design and usage of your media types in more detail. In the words of Roy Fielding , \"A REST API should spend almost all of its descriptive effort in defining the media type(s) used for representing resources and driving application state, or in defining extended relation names and/or hypertext-enabled mark-up for existing standard media types.\". For good examples of custom media types, see GitHub's use of a custom application/vnd.github+json media type, and Mike Amundsen's IANA approved application/vnd.collection+json JSON-based hypermedia.","title":"Designing your media types"},{"location":"api-guide/renderers/#html-error-views","text":"Typically a renderer will behave the same regardless of if it's dealing with a regular response, or with a response caused by an exception being raised, such as an Http404 or PermissionDenied exception, or a subclass of APIException . If you're using either the TemplateHTMLRenderer or the StaticHTMLRenderer and an exception is raised, the behavior is slightly different, and mirrors Django's default handling of error views . Exceptions raised and handled by an HTML renderer will attempt to render using one of the following methods, by order of precedence. Load and render a template named {status_code}.html . Load and render a template named api_exception.html . Render the HTTP status code and text, for example \"404 Not Found\". Templates will render with a RequestContext which includes the status_code and details keys. Note : If DEBUG=True , Django's standard traceback error page will be displayed instead of rendering the HTTP status code and text.","title":"HTML error views"},{"location":"api-guide/renderers/#third-party-packages","text":"The following third party packages are also available.","title":"Third party packages"},{"location":"api-guide/renderers/#yaml","text":"REST framework YAML provides YAML parsing and rendering support. It was previously included directly in the REST framework package, and is now instead supported as a third-party package.","title":"YAML"},{"location":"api-guide/renderers/#installation-configuration","text":"Install using pip. $ pip install djangorestframework-yaml Modify your REST framework settings. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ 'rest_framework_yaml.parsers.YAMLParser', ], 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework_yaml.renderers.YAMLRenderer', ], }","title":"Installation &amp; configuration"},{"location":"api-guide/renderers/#xml","text":"REST Framework XML provides a simple informal XML format. It was previously included directly in the REST framework package, and is now instead supported as a third-party package.","title":"XML"},{"location":"api-guide/renderers/#installation-configuration_1","text":"Install using pip. $ pip install djangorestframework-xml Modify your REST framework settings. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': [ 'rest_framework_xml.parsers.XMLParser', ], 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework_xml.renderers.XMLRenderer', ], }","title":"Installation &amp; configuration"},{"location":"api-guide/renderers/#jsonp","text":"REST framework JSONP provides JSONP rendering support. It was previously included directly in the REST framework package, and is now instead supported as a third-party package. Warning : If you require cross-domain AJAX requests, you should generally be using the more modern approach of CORS as an alternative to JSONP . See the CORS documentation for more details. The jsonp approach is essentially a browser hack, and is only appropriate for globally readable API endpoints , where GET requests are unauthenticated and do not require any user permissions.","title":"JSONP"},{"location":"api-guide/renderers/#installation-configuration_2","text":"Install using pip. $ pip install djangorestframework-jsonp Modify your REST framework settings. REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework_jsonp.renderers.JSONPRenderer', ], }","title":"Installation &amp; configuration"},{"location":"api-guide/renderers/#messagepack","text":"MessagePack is a fast, efficient binary serialization format. Juan Riaza maintains the djangorestframework-msgpack package which provides MessagePack renderer and parser support for REST framework.","title":"MessagePack"},{"location":"api-guide/renderers/#xlsx-binary-spreadsheet-endpoints","text":"XLSX is the world's most popular binary spreadsheet format. Tim Allen of The Wharton School maintains drf-renderer-xlsx , which renders an endpoint as an XLSX spreadsheet using OpenPyXL, and allows the client to download it. Spreadsheets can be styled on a per-view basis.","title":"XLSX (Binary Spreadsheet Endpoints)"},{"location":"api-guide/renderers/#installation-configuration_3","text":"Install using pip. $ pip install drf-renderer-xlsx Modify your REST framework settings. REST_FRAMEWORK = { ... 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer', 'drf_renderer_xlsx.renderers.XLSXRenderer', ], } To avoid having a file streamed without a filename (which the browser will often default to the filename \"download\", with no extension), we need to use a mixin to override the Content-Disposition header. If no filename is provided, it will default to export.xlsx . For example: from rest_framework.viewsets import ReadOnlyModelViewSet from drf_renderer_xlsx.mixins import XLSXFileMixin from drf_renderer_xlsx.renderers import XLSXRenderer from .models import MyExampleModel from .serializers import MyExampleSerializer class MyExampleViewSet(XLSXFileMixin, ReadOnlyModelViewSet): queryset = MyExampleModel.objects.all() serializer_class = MyExampleSerializer renderer_classes = [XLSXRenderer] filename = 'my_export.xlsx'","title":"Installation &amp; configuration"},{"location":"api-guide/renderers/#csv","text":"Comma-separated values are a plain-text tabular data format, that can be easily imported into spreadsheet applications. Mjumbe Poe maintains the djangorestframework-csv package which provides CSV renderer support for REST framework.","title":"CSV"},{"location":"api-guide/renderers/#ultrajson","text":"UltraJSON is an optimized C JSON encoder which can give significantly faster JSON rendering. Jacob Haslehurst maintains the drf-ujson-renderer package which implements JSON rendering using the UJSON package.","title":"UltraJSON"},{"location":"api-guide/renderers/#camelcase-json","text":"djangorestframework-camel-case provides camel case JSON renderers and parsers for REST framework. This allows serializers to use Python-style underscored field names, but be exposed in the API as Javascript-style camel case field names. It is maintained by Vitaly Babiy .","title":"CamelCase JSON"},{"location":"api-guide/renderers/#pandas-csv-excel-png","text":"Django REST Pandas provides a serializer and renderers that support additional data processing and output via the Pandas DataFrame API. Django REST Pandas includes renderers for Pandas-style CSV files, Excel workbooks (both .xls and .xlsx ), and a number of other formats . It is maintained by S. Andrew Sheppard as part of the wq Project .","title":"Pandas (CSV, Excel, PNG)"},{"location":"api-guide/renderers/#latex","text":"Rest Framework Latex provides a renderer that outputs PDFs using Laulatex. It is maintained by Pebble (S/F Software) .","title":"LaTeX"},{"location":"api-guide/renderers_zh/","text":"\u6e32\u67d3\u5668 \u5728\u5c06TemplateResponse\u5b9e\u4f8b\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u4e4b\u524d\uff0c\u5fc5\u987b\u6e32\u67d3\u5b83\u3002\u6e32\u67d3\u8fc7\u7a0b\u91c7\u7528\u6a21\u677f\u548c\u4e0a\u4e0b\u6587\u7684\u4e2d\u95f4\u8868\u793a\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u7684\u6700\u7ec8\u5b57\u8282\u6d41\u3002 \u2014 Django \u6587\u6863 REST\u6846\u67b6\u5305\u62ec\u8bb8\u591a\u5185\u7f6e\u7684Renderer\u7c7b\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u4f7f\u7528\u5404\u79cd\u5a92\u4f53\u7c7b\u578b\u8fd4\u56de\u54cd\u5e94\u3002\u8fd8\u652f\u6301\u5b9a\u4e49\u4f60\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\uff0c\u8fd9\u6837\u53ef\u4ee5\u7075\u6d3b\u5730\u8bbe\u8ba1\u4f60\u81ea\u5df1\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u6e32\u67d3\u5668\u7684\u786e\u5b9a\u65b9\u5f0f \u89c6\u56fe\u7684\u6709\u6548\u6e32\u67d3\u5668\u96c6\u5408\u59cb\u7ec8\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u7c7b\u7684\u5217\u8868\u3002\u5f53\u8f93\u5165\u89c6\u56fe\u65f6\uff0cREST\u6846\u67b6\u5c06\u5bf9\u4f20\u5165\u8bf7\u6c42\u6267\u884c\u5185\u5bb9\u534f\u5546\uff0c\u5e76\u786e\u5b9a\u6700\u9002\u5408\u7684\u6e32\u67d3\u5668\u6765\u6ee1\u8db3\u8bf7\u6c42\u3002 \u5185\u5bb9\u534f\u5546\u7684\u57fa\u672c\u8fc7\u7a0b\u5305\u62ec\u68c0\u67e5\u8bf7\u6c42\u7684 Accept \u5934\uff0c\u4ee5\u786e\u5b9a\u54cd\u5e94\u4e2d\u671f\u671b\u7684\u5a92\u4f53\u7c7b\u578b\u3002URL\u4e0a\u53ef\u9009\u7684\u683c\u5f0f\u540e\u7f00\u53ef\u4ee5\u7528\u4e8e\u663e\u5f0f\u8bf7\u6c42\u7279\u5b9a\u8868\u793a\u3002\u4f8b\u5982URL http://example.com/api/users_count.json \u53ef\u80fd\u662f\u59cb\u7ec8\u8fd4\u56deJSON\u6570\u636e\u7684\u8def\u5f84\u3002 \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6709\u5173 \u5185\u5bb9\u534f\u5546 \u7684\u6587\u6863\u3002 \u8bbe\u7f6e\u6e32\u67d3\u5668 \u53ef\u4ee5\u4f7f\u7528 DEFAULT_RENDERER_CLASSES \u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\u96c6\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bbe\u7f6e\u5c06\u4f7f\u7528 JSON \u4f5c\u4e3a\u4e3b\u8981\u5a92\u4f53\u7c7b\u578b\uff0c\u5e76\u4e14\u8fd8\u5305\u62ec\u81ea\u63cf\u8ff0API\u3002 REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer', ) } \u4f60\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u7528\u4e8e\u5355\u4e2a\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u7684\u6e32\u67d3\u5668\uff0c\u4f7f\u7528 APIView \u7c7b\u89c6\u56fe\u3002 from django.contrib.auth.models import User from rest_framework.renderers import JSONRenderer from rest_framework.response import Response from rest_framework.views import APIView class UserCountView(APIView): \"\"\" \u8fd4\u56deJSON\u683c\u5f0f\u6d3b\u52a8\u7528\u6237\u6570\u7684\u89c6\u56fe\u3002 \"\"\" renderer_classes = (JSONRenderer, ) def get(self, request, format=None): user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content) \u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u529f\u80fd\u7684\u89c6\u56fe\u7684 @api_view \u88c5\u9970\u5668\u3002 @api_view(['GET']) @renderer_classes((JSONRenderer,)) def user_count_view(request, format=None): \"\"\" \u8fd4\u56deJSON\u683c\u5f0f\u6d3b\u52a8\u7528\u6237\u6570\u7684\u89c6\u56fe\u3002 \"\"\" user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content) \u6e32\u67d3\u5668\u7c7b\u7684\u6392\u5e8f \u6307\u5b9a\u4f60\u7684API\u7684\u6e32\u67d3\u5668\u7c7b\u65f6\u8981\u8003\u8651\u5230\u6bcf\u4e2a\u5a92\u4f53\u7c7b\u578b\u8981\u5206\u914d\u54ea\u4e9b\u4f18\u5148\u7ea7\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\u3002\u5982\u679c\u4e00\u4e2a\u5ba2\u6237\u7aef\u4e0d\u80fd\u6307\u5b9a\u5b83\u53ef\u4ee5\u63a5\u53d7\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u4f8b\u5982\u53d1\u9001\u4e00\u4e2a Accept: */* \u5934\uff0c\u6216\u8005\u4e0d\u5305\u542b\u4e00\u4e2a Accept \u5934\uff0c\u90a3\u4e48REST\u6846\u67b6\u5c06\u9009\u62e9\u5217\u8868\u4e2d\u7528\u4e8e\u54cd\u5e94\u7684\u7b2c\u4e00\u4e2a\u6e32\u67d3\u5668\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684API\u63d0\u4f9bJSON\u54cd\u5e94\u548cHTML\u53ef\u6d4f\u89c8\u7684API\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5c06 JSONRenderer \u8bbe\u7f6e\u4e3a\u4f60\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\uff0c\u4ee5\u4fbf\u5411\u4e0d\u6307\u5b9a Accept \u6807\u5934\u7684\u5ba2\u6237\u7aef\u53d1\u9001 JSON \u54cd\u5e94\u3002 \u5982\u679c\u4f60\u7684API\u5305\u542b\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u63d0\u4f9b\u5e38\u89c4\u7f51\u9875\u548cAPI\u54cd\u5e94\u7684\u89c6\u56fe\uff0c\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 TemplateHTMLRenderer \u4f5c\u4e3a\u4f60\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\uff0c\u4ee5\u4fbf\u80fd\u5728\u90a3\u4e9b\u53d1\u9001 \u7834\u574f\u7684\u63a5\u6536\u5934 \u7684\u65e7\u7248\u672c\u7684\u6d4f\u89c8\u5668\u4e0a\u80fd\u5f88\u597d\u7684\u5c55\u793a\u3002 API \u53c2\u8003 JSONRenderer \u4f7f\u7528utf-8\u7f16\u7801\u5c06\u8bf7\u6c42\u7684\u6570\u636e\u6e32\u67d3\u6210 JSON \u3002 \u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u6837\u5f0f\u662f\u5305\u62ecunicode\u5b57\u7b26\uff0c\u5e76\u4f7f\u7528\u6ca1\u6709\u4e0d\u5fc5\u8981\u7a7a\u683c\u7684\u7d27\u51d1\u6837\u5f0f\u6e32\u67d3\u54cd\u5e94: {\"unicode black star\":\"\u2605\",\"value\":999} \u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u5305\u542b 'indent' \u5a92\u4f53\u7c7b\u578b\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u7684 JSON \u5c06\u88ab\u7f29\u8fdb\u3002\u4f8b\u5982 Accept: application/json; indent=4 \u3002 { \"unicode black star\": \"\u2605\", \"value\": 999 } \u53ef\u4ee5\u4f7f\u7528 UNICODE_JSON \u548c COMPACT_JSON \u66f4\u6539\u9ed8\u8ba4JSON\u7f16\u7801\u6837\u5f0f\u3002 .media_type : application/json .format : '.json' .charset : None TemplateHTMLRenderer \u4f7f\u7528Django\u7684\u6807\u51c6\u6a21\u677f\u5c06\u6570\u636e\u6e32\u67d3\u6210HTML\u3002 \u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f20\u9012\u7ed9 Response \u7684\u6570\u636e\u4e0d\u9700\u8981\u5e8f\u5217\u5316\u3002\u6b64\u5916\uff0c\u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728\u521b\u5efa Response \u65f6\u5305\u542b\u4e00\u4e2a template_name \u53c2\u6570\u3002 TemplateHTMLRenderer\u5c06\u521b\u5efa\u4e00\u4e2a RequestContext \uff0c\u4f7f\u7528 response.data \u4f5c\u4e3a\u4e0a\u4e0b\u6587\u5b57\u5178\uff0c\u5e76\u786e\u5b9a\u7528\u4e8e\u6e32\u67d3\u4e0a\u4e0b\u6587\u7684\u6a21\u677f\u540d\u79f0\u3002 \u6a21\u677f\u540d\u79f0\u7531\uff08\u6309\u4f18\u5148\u987a\u5e8f\uff09\u786e\u5b9a\uff1a \u4e00\u4e2a\u663e\u5f0f\u7684 template_name \u53c2\u6570\u4f20\u9012\u7ed9\u54cd\u5e94\u3002 \u5728\u7c7b\u4e2d\u663e\u5f0f\u5b9a\u4e49 .template_name \u5c5e\u6027\u3002 \u8c03\u7528 view.get_template_names\uff08\uff09 \u7684\u8fd4\u56de\u7ed3\u679c\u3002 \u4f7f\u7528 TemplateHTMLRenderer \u7684\u89c6\u56fe\u7684\u4f8b\u5b50\uff1a class UserDetail(generics.RetrieveAPIView): \"\"\" \u8fd4\u56de\u7ed9\u5b9a\u7528\u6237\u7684\u6a21\u677fHTML\u8868\u793a\u7684\u89c6\u56fe\u3002 \"\"\" queryset = User.objects.all() renderer_classes = (TemplateHTMLRenderer,) def get(self, request, *args, **kwargs): self.object = self.get_object() return Response({'user': self.object}, template_name='user_detail.html') \u4f60\u53ef\u4ee5\u4f7f\u7528 TemplateHTMLRenderer \u6765\u8fd4\u56de\u4f7f\u7528REST\u6846\u67b6\u7684\u5e38\u89c4HTML\u9875\u9762\uff0c\u6216\u8005\u4ece\u5355\u4e2a\u8def\u5f84\u8fd4\u56deHTML\u548cAPI\u54cd\u5e94\u3002 \u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4f7f\u7528 TemplateHTMLRenderer \u548c\u5176\u4ed6\u6e32\u67d3\u7c7b\u7684\u7f51\u7ad9\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u5c06 TemplateHTMLRenderer \u5217\u4e3a renderer_classes \u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7c7b\uff0c\u8fd9\u6837\u5373\u4f7f\u5bf9\u4e8e\u53d1\u9001\u683c\u5f0f\u4e0d\u6b63\u786e\u7684 ACCEPT: \u5934\u6587\u4ef6\u7684\u6d4f\u89c8\u5668\u5b83\u4e5f\u5c06\u88ab\u4f18\u5148\u6392\u5e8f\u3002 \u6709\u5173 TemplateHTMLRenderer \u7528\u6cd5\u7684\u66f4\u591a\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605 _HTML&Forms_\u4e3b\u9898\u9875 \u3002 .media_type : text/html .format : '.html' .charset : utf-8 \u4e5f\u53ef\u4ee5\u770b\u770b: StaticHTMLRenderer StaticHTMLRenderer \u4e00\u4e2a\u7b80\u5355\u7684\u6e32\u67d3\u5668\uff0c\u53ea\u9700\u8fd4\u56de\u9884\u6e32\u67d3\u7684HTML\u3002\u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f20\u9012\u7ed9\u54cd\u5e94\u5bf9\u8c61\u7684\u6570\u636e\u5e94\u8be5\u662f\u8868\u793a\u8981\u8fd4\u56de\u7684\u5185\u5bb9\u7684\u5b57\u7b26\u4e32\u3002 \u4e00\u4e2a\u4f7f\u7528 StaticHTMLRenderer \u7684\u89c6\u56fe\u7684\u4f8b\u5b50\uff1a @api_view(('GET',)) @renderer_classes((StaticHTMLRenderer,)) def simple_html_view(request): data = '<html><body><h1>Hello, world</h1></body></html>' return Response(data) \u4f60\u53ef\u4ee5\u4f7f\u7528 StaticHTMLRenderer \u4f7f\u7528REST\u6846\u67b6\u8fd4\u56de\u5e38\u89c4HTML\u9875\u9762\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5355\u4e2a\u8def\u5f84\u8fd4\u56deHTML\u548cAPI\u54cd\u5e94\u3002 .media_type : text/html .format : '.html' .charset : utf-8 \u4e5f\u53ef\u4ee5\u770b\u770b\uff1a TemplateHTMLRenderer BrowsableAPIRenderer \u5c06\u6570\u636e\u6e32\u67d3\u6210\u53ef\u6d4f\u89c8\u7684API\uff1a \u6b64\u6e32\u67d3\u5668\u5c06\u786e\u5b9a\u54ea\u4e2a\u5176\u4ed6\u6e32\u67d3\u5668\u5c06\u88ab\u8d4b\u4e88\u6700\u9ad8\u4f18\u5148\u7ea7\uff0c\u5e76\u4f7f\u7528\u5b83\u5728HTML\u9875\u9762\u4e2d\u663e\u793aAPI\u3002 .media_type : text/html .format : '.api' .charset : utf-8 .template : 'rest_framework/api.html' \u81ea\u5b9a\u4e49 BrowsableAPIRenderer \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u54cd\u5e94\u5185\u5bb9\u5c06\u4ee5\u4e0e BrowsableAPIRenderer \u4e0d\u540c\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\u6e32\u67d3\u5668\u6e32\u67d3\u3002\u5982\u679c\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u6b64\u884c\u4e3a\uff0c\u4f8b\u5982\u4f7f\u7528HTML\u4f5c\u4e3a\u9ed8\u8ba4\u8fd4\u56de\u683c\u5f0f\uff0c\u4f46\u5728\u53ef\u6d4f\u89c8\u7684API\u4e2d\u4f7f\u7528JSON\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 get_default_renderer() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002\u4f8b\u5982\uff1a class CustomBrowsableAPIRenderer(BrowsableAPIRenderer): def get_default_renderer(self, view): return JSONRenderer() AdminRenderer \u5c06\u6570\u636e\u6e32\u67d3\u7ed9HTML\u4ee5\u8fdb\u884c\u7c7b\u4f3c\u7ba1\u7406\u7684\u663e\u793a\uff1a \u6b64\u6e32\u67d3\u5668\u9002\u7528\u4e8eCRUD\u98ce\u683c\u7684Web API\uff0c\u8fd8\u5e94\u63d0\u4f9b\u7528\u4e8e\u7ba1\u7406\u6570\u636e\u7684\u7528\u6237\u53cb\u597d\u754c\u9762\u3002 \u8bf7\u6ce8\u610f\uff0c\u5305\u542b\u5d4c\u5957\u6216\u5217\u8868\u5e8f\u5217\u5316\u5668\u7684\u8f93\u5165\u89c6\u56fe\u5bf9\u4e8e AdminRenderer \u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u56e0\u4e3aHTML\u8868\u5355\u65e0\u6cd5\u6b63\u786e\u652f\u6301\u5b83\u4eec\u3002 \u6ce8\u610f : \u5f53\u6570\u636e\u4e2d\u5b58\u5728\u6b63\u786e\u914d\u7f6e\u7684 URL_FIELD_NAME \uff08\u7f3a\u7701 url \uff09\u5c5e\u6027\u65f6\uff0c AdminRenderer \u624d\u80fd\u591f\u5305\u542b\u6307\u5411\u8be6\u7ec6\u9875\u9762\u7684\u94fe\u63a5\u3002\u5bf9\u4e8e HyperlinkedModelSerializer \uff0c\u8fd9\u5c06\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u662f\u5bf9\u4e8e ModelSerializer \u6216\u8005\u7b80\u5355\u7684 Serializer \u7c7b\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u660e\u786e\u5730\u5305\u542b\u8be5\u5b57\u6bb5\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\u6a21\u578b get_absolute_url \u65b9\u6cd5\uff1a class AccountSerializer(serializers.ModelSerializer): url = serializers.CharField(source='get_absolute_url', read_only=True) class Meta: model = Account .media_type : text/html .format : '.admin' .charset : utf-8 .template : 'rest_framework/admin.html' HTMLFormRenderer \u5c06\u5e8f\u5217\u5316\u7a0b\u5e8f\u8fd4\u56de\u7684\u6570\u636e\u6e32\u67d3\u4e3aHTML\u8868\u5355\u3002\u6b64\u6e32\u67d3\u5668\u7684\u8f93\u51fa\u4e0d\u5305\u62ec\u5c01\u95ed\u7684 <form> \u6807\u7b7e\uff0c\u9690\u85cf\u7684CSRF\u8f93\u5165\u6216\u4efb\u4f55\u63d0\u4ea4\u6309\u94ae\u3002 \u6b64\u6e32\u67d3\u5668\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\uff0c\u800c\u662f\u53ef\u4ee5\u901a\u8fc7\u5c06\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\u4f20\u9012\u7ed9 render_form \u6a21\u677f\u6807\u8bb0\u6765\u66ff\u4ee3\u6a21\u677f\u3002 {% load rest_framework %} <form action=\"/submit-report/\" method=\"post\"> {% csrf_token %} {% render_form serializer %} <input type=\"submit\" value=\"Save\" /> </form> \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 HTML\u548c\u8868\u5355 \u6587\u6863\u3002 .media_type : text/html .format : '.form' .charset : utf-8 .template : 'rest_framework/horizontal/form.html' MultiPartRenderer \u6b64\u6e32\u67d3\u5668\u7528\u4e8e\u6e32\u67d3HTML multipart\u8868\u5355\u6570\u636e\u3002 \u5b83\u4e0d\u9002\u5408\u4f5c\u4e3a\u54cd\u5e94\u6e32\u67d3\u5668 \uff0c\u800c\u662f\u7528\u4e8e\u521b\u5efa\u6d4b\u8bd5\u8bf7\u6c42\uff0c\u4f7f\u7528REST framework\u7684 \u6d4b\u8bd5\u5ba2\u6237\u7aef\u548c\u6d4b\u8bd5\u8bf7\u6c42\u5de5\u5382 \u3002 .media_type : multipart/form-data; boundary=BoUnDaRyStRiNg .format : '.multipart' .charset : utf-8 Custom renderers \u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\uff0c\u4f60\u5e94\u8be5\u91cd\u5199 BaseRenderer \uff0c\u8bbe\u7f6e .media_type \u548c .format \u5c5e\u6027\uff0c\u5e76\u4e14\u5b9e\u73b0 .render(self, data, media_type=None, renderer_context=None) \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5b57\u8282bytestring\uff0c\u5b83\u5c06\u88ab\u7528\u4e8eHTTP\u54cd\u5e94\u7684\u4e3b\u4f53\u3002 \u4f20\u9012\u7ed9 .render() \u65b9\u6cd5\u7684\u53c2\u6570\u662f\uff1a data \u8bf7\u6c42\u6570\u636e\uff0c\u7531 Response() \u5b9e\u4f8b\u5316\u8bbe\u7f6e\u3002 media_type=None \u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u786e\u5b9a\u7684\u6240\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u6839\u636e\u5ba2\u6237\u7aef\u7684 Accept: \u5934\uff0c\u8fd9\u53ef\u80fd\u6bd4\u6e32\u67d3\u5668\u7684 media_type \u5c5e\u6027\u66f4\u5177\u4f53\uff0c\u53ef\u80fd\u5305\u62ec\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u3002\u4f8b\u5982 \"application/json; nested=true\" \u3002 renderer_context=None \u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u4e00\u4e2a\u7531view\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u7684\u5b57\u5178\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u5b57\u5178\u4f1a\u5305\u62ec\u4ee5\u4e0b\u952e\uff1a view , request , response , args , kwargs \u3002 \u4f8b\u5b50 \u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u660e\u6587\u6e32\u67d3\u5668\uff0c\u5b83\u5c06\u4f7f\u7528\u53c2\u6570\u4f5c\u4e3a\u54cd\u5e94 data \u7684\u5185\u5bb9\u8fd4\u56de\u54cd\u5e94\u3002 from django.utils.encoding import smart_unicode from rest_framework import renderers class PlainTextRenderer(renderers.BaseRenderer): media_type = 'text/plain' format = 'txt' def render(self, data, media_type=None, renderer_context=None): return data.encode(self.charset) \u8bbe\u7f6e\u5b57\u7b26\u96c6 \u5047\u8bbe\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\u7c7b\u6b63\u5728\u4f7f\u7528 UTF-8 \u7f16\u7801\u3002\u8981\u4f7f\u7528\u5176\u4ed6\u7f16\u7801\uff0c\u8bf7\u5728\u6e32\u67d3\u5668\u8bbe\u7f6e charset \u5c5e\u6027\u3002 class PlainTextRenderer(renderers.BaseRenderer): media_type = 'text/plain' format = 'txt' charset = 'iso-8859-1' def render(self, data, media_type=None, renderer_context=None): return data.encode(self.charset) \u6ce8\u610f\uff0c\u5982\u679c\u4e00\u4e2a\u6e32\u67d3\u7c7b\u8fd4\u56de\u4e86\u4e00\u4e2aunicode\u5b57\u7b26\u4e32\uff0c\u5219\u54cd\u5e94\u5185\u5bb9\u5c06\u88ab Response \u7c7b\u5f3a\u5236\u8f6c\u6362\u6210bytestring\uff0c\u6e32\u67d3\u5668\u4e0a\u7684\u8bbe\u7f6e\u7684 charset \u5c5e\u6027\u5c06\u7528\u4e8e\u786e\u5b9a\u7f16\u7801\u3002 \u5982\u679c\u6e32\u67d3\u5668\u8fd4\u56de\u4e00\u4e2abytestring\u8868\u793a\u539f\u59cb\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\uff0c\u5219\u5e94\u8be5\u8bbe\u7f6e\u5b57\u7b26\u96c6\u7684\u503c\u4e3a None \uff0c\u786e\u4fdd\u54cd\u5e94\u8bf7\u6c42\u5934\u7684 Content-Type \u4e2d\u4e0d\u4f1a\u8bbe\u7f6e charset \u503c\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u5c06 render_style \u5c5e\u6027\u8bbe\u7f6e\u6210 'binary' \u3002\u8fd9\u4e48\u505a\u4e5f\u5c06\u786e\u4fdd\u53ef\u6d4f\u89c8\u7684API\u4e0d\u4f1a\u5c1d\u8bd5\u5c06\u4e8c\u8fdb\u5236\u5185\u5bb9\u663e\u793a\u4e3a\u5b57\u7b26\u4e32\u3002 class JPEGRenderer(renderers.BaseRenderer): media_type = 'image/jpeg' format = 'jpg' charset = None render_style = 'binary' def render(self, data, media_type=None, renderer_context=None): return data \u9ad8\u7ea7\u6e32\u67d3\u5668\u4f7f\u7528 \u4f60\u53ef\u4ee5\u4f7f\u7528REST framework\u7684\u6e32\u67d3\u5668\u505a\u4e00\u4e9b\u975e\u5e38\u7075\u6d3b\u7684\u4e8b\u60c5\u3002\u4e00\u4e9b\u4f8b\u5b50... \u6839\u636e\u8bf7\u6c42\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4ece\u540c\u4e00\u4e2a\u8def\u5f84\u65e2\u80fd\u63d0\u4f9b\u5355\u72ec\u7684\u6216\u8005\u5d4c\u5957\u7684\u8868\u793a\u3002 \u63d0\u4f9b\u5e38\u89c4HTML\u7f51\u9875\u548c\u6765\u81ea\u540c\u4e00\u8def\u5f84\u7684\u57fa\u4e8eJSON\u7684API\u54cd\u5e94\u3002 \u4e3aAPI\u5ba2\u6237\u7aef\u6307\u5b9a\u8981\u4f7f\u7528\u7684\u591a\u79cd\u7c7b\u578b\u7684HTML\u8868\u793a\u5f62\u5f0f\u3002 \u672a\u6307\u5b9a\u6e32\u67d3\u5668\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4f8b\u5982\u4f7f\u7528 media_type = 'image/*' \uff0c\u5e76\u4f7f\u7528 Accept \u6807\u5934\u6765\u66f4\u6539\u54cd\u5e94\u7684\u7f16\u7801\u3002 \u5a92\u4f53\u7c7b\u578b\u7684\u4e0d\u540c\u884c\u4e3a \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u89c6\u56fe\u6839\u636e\u6240\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u3002\u5982\u679c\u4f60\u9700\u8981\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u6839\u636e request.accepted_renderer \u6765\u786e\u5b9a\u5c06\u7528\u4e8e\u54cd\u5e94\u7684\u534f\u5546\u6e32\u67d3\u5668\u3002 \u4f8b\u5982: @api_view(('GET',)) @renderer_classes((TemplateHTMLRenderer, JSONRenderer)) def list_users(request): \"\"\" \u4e00\u4e2a\u53ef\u4ee5\u8fd4\u56de\u7cfb\u7edf\u4e2d\u7528\u6237\u7684JSON\u6216HTML\u8868\u793a\u7684\u89c6\u56fe\u3002 \"\"\" queryset = Users.objects.filter(active=True) if request.accepted_renderer.format == 'html': # TemplateHTMLRenderer \u91c7\u7528\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\uff0c # \u5e76\u4e14\u989d\u5916\u9700\u8981\u4e00\u4e2a 'template_name'\u3002 # \u5b83\u4e0d\u9700\u8981\u5e8f\u5217\u5316\u3002 data = {'users': queryset} return Response(data, template_name='list_users.html') # JSONRenderer \u9700\u8981\u6b63\u5e38\u7684\u5e8f\u5217\u5316\u6570\u636e\u3002 serializer = UserSerializer(instance=queryset) data = serializer.data return Response(data) \u4e0d\u660e\u786e\u7684\u5a92\u4f53\u7c7b\u578b \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u5e0c\u671b\u6e32\u67d3\u5668\u63d0\u4f9b\u4e00\u4e9b\u5217\u5a92\u4f53\u7c7b\u578b\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e3a media_type \u8bbe\u7f6e\u8bf8\u5982 image/* \u6216 */* \u8fd9\u6837\u7684\u503c\u6765\u6307\u5b9a\u5e94\u8be5\u54cd\u5e94\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u5982\u679c\u4f60\u6307\u5b9a\u4e86\u6e32\u67d3\u5668\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u5728\u8fd4\u56de\u54cd\u5e94\u65f6\u4f7f\u7528 content_type \u5c5e\u6027\u660e\u786e\u6307\u5b9a\u5a92\u4f53\u7c7b\u578b\u3002 \u4f8b\u5982: return Response(data, content_type='image/png') \u8bbe\u8ba1\u4f60\u7684\u5a92\u4f53\u7c7b\u578b \u8bb8\u591aWeb API\u7684\u76ee\u6807\uff0c\u7b80\u5355\u7684\u5177\u6709\u8d85\u94fe\u63a5\u7684 JSON \u54cd\u5e94\u53ef\u80fd\u5c31\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u5982\u679c\u4f60\u60f3\u5b8c\u5168\u62e5\u62b1RESTful\u8bbe\u8ba1\u548c HATEOAS \u5219\u9700\u8981\u66f4\u8be6\u7ec6\u5730\u8003\u8651\u5a92\u4f53\u7c7b\u578b\u7684\u8bbe\u8ba1\u548c\u4f7f\u7528\u3002 \u7528 Roy Fielding\u7684\u8bdd \u6765\u8bf4\uff0c\"REST API \u5e94\u8be5\u82b1\u8d39\u6240\u6709\u7684\u63cf\u8ff0\u6027\u52aa\u529b\u6765\u5b9a\u4e49\u7528\u4e8e\u8868\u793a\u8d44\u6e90\u548c\u9a71\u52a8\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u7684\u5a92\u4f53\u7c7b\u578b\uff08\u4eec\uff09\uff0c\u6216\u8005\u4e3a\u73b0\u6709\u7684\u6807\u51c6\u5a92\u4f53\u7c7b\u578b\u5b9a\u4e49\u6269\u5c55\u5173\u7cfb\u540d\u79f0\u548c/\u6216\u8d85\u6587\u672c\u542f\u7528\u6807\u8bb0\u3002\"\u3002 \u6709\u5173\u81ea\u5b9a\u4e49\u5a92\u4f53\u7c7b\u578b\u7684\u4f18\u79c0\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605GitHub\u5173\u4e8e\u81ea\u5b9a\u4e49 application/vnd.github+json \u5a92\u4f53\u7c7b\u578b\u7684\u5e94\u7528\u4ee5\u53ca Mike Amundsen\u7684IANA\u8ba4\u53ef\u7684 application/vnd.collection+json JSON\u8d85\u5a92\u4f53\u3002 HTML\u9519\u8bef\u89c6\u56fe \u901a\u5e38\u6e32\u67d3\u5668\u90fd\u5177\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u65e0\u8bba\u5b83\u5904\u7406\u7684\u662f\u6b63\u5e38\u7684\u54cd\u5e94\u8fd8\u662f\u7531\u5f02\u5e38\u5f15\u8d77\u7684\u54cd\u5e94\uff0c\u5982 Http404 \u6216 PermissionDenied \u5f02\u5e38\uff0c\u6216\u8005\u4e00\u4e2a APIException \u7684\u5b50\u7c7b\u3002 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 TemplateHTMLRenderer \u6216 StaticHTMLRenderer \u65f6\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u884c\u4e3a\u7565\u6709\u4e0d\u540c\u3002\u5e76\u4e14\u53cd\u6620 Django\u5bf9\u9519\u8bef\u89c6\u56fe\u7684\u9ed8\u8ba4\u5904\u7406 . \u7531HTML\u6e32\u67d3\u5668\u5f15\u53d1\u548c\u5904\u7406\u7684\u5f02\u5e38\u5c06\u5c1d\u8bd5\u6309\u7167\u4f18\u5148\u987a\u5e8f\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u4e4b\u4e00\u8fdb\u884c\u6e32\u67d3\u3002 \u52a0\u8f7d\u5e76\u6e32\u67d3\u4e00\u4e2a\u540d\u4e3a {status_code}.html \u7684\u6a21\u677f\u3002 \u52a0\u8f7d\u5e76\u6e32\u67d3\u4e00\u4e2a\u540d\u4e3a api_exception.html \u7684\u6a21\u677f\u3002 \u6e32\u67d3HTTP\u72b6\u6001\u7801\u548c\u6587\u672c\uff0c\u4f8b\u5982 \"404 Not Found\"\u3002 \u6a21\u677f\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5305\u62ec status_code \u548c details \u7684 RequestContext \u6e32\u67d3\u3002 \u6ce8\u610f : \u5982\u679c\u8bbe\u7f6e\u4e86 DEBUG=True \uff0cDjango\u5c06\u5c55\u793a\u5b83\u7684\u6807\u51c6\u56de\u6eaf\u9519\u8bef\u9875\u9762\u800c\u4e0d\u662f\u6e32\u67d3HTTP\u72b6\u6001\u7801\u548c\u6587\u672c\u3002 \u7b2c\u4e09\u65b9\u5305 \u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u662f\u53ef\u7528\u7684\u3002 YAML REST framework YAML \u63d0\u4f9b YAML \u89e3\u6790\u548c\u6e32\u67d3\u652f\u6301\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002 \u5b89\u88c5\u548c\u914d\u7f6e \u4f7f\u7528pip\u5b89\u88c5\u3002 $ pip install djangorestframework-yaml \u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_yaml.parsers.YAMLParser', ), 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_yaml.renderers.YAMLRenderer', ), } XML REST Framework XML \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u975e\u6b63\u5f0fXML\u683c\u5f0f\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002 \u5b89\u88c5\u548c\u914d\u7f6e \u4f7f\u7528pip\u5b89\u88c5\u3002 $ pip install djangorestframework-xml \u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_xml.parsers.XMLParser', ), 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_xml.renderers.XMLRenderer', ), } JSONP REST framework JSONP \u63d0\u4f9bJSONP\u6e32\u67d3\u652f\u6301\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002 \u8b66\u544a : \u5982\u679c\u4f60\u9700\u8981\u8de8\u57df\u7684AJAX\u8bf7\u6c42\uff0c\u4f60\u901a\u5e38\u5e94\u8be5\u4f7f\u7528\u66f4\u73b0\u4ee3\u5316\u7684 CORS \u65b9\u6cd5\u4ee3\u66ff JSONP \u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u9605 CORS\u6587\u6863 \u3002 jsonp \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6d4f\u89c8\u5668hack\u65b9\u6cd5\uff0c \u4ec5\u9002\u7528\u4e8e\u5168\u5c40\u53ef\u8bfb\u7684API\u8def\u5f84 \uff0c\u5176\u4e2d GET \u8bf7\u6c42\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4efb\u4f55\u7528\u6237\u6743\u9650\u3002 \u5b89\u88c5\u548c\u914d\u7f6e \u4f7f\u7528pip\u5b89\u88c5\u3002 $ pip install djangorestframework-jsonp \u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_jsonp.renderers.JSONPRenderer', ), } MessagePack MessagePack \u662f\u4e00\u79cd\u5feb\u901f\uff0c\u9ad8\u6548\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\u3002 Juan Riaza \u7ef4\u62a4\u7740 djangorestframework-msgpack \u5305\uff0c\u5b83\u4e3aREST framework\u63d0\u4f9bMessagePack\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u652f\u6301\u3002 CSV \u9017\u53f7\u5206\u9694\u7684\u503c\u662f\u7eaf\u6587\u672c\u6570\u636e\u683c\u5f0f\uff0c\u53ef\u4ee5\u8f7b\u677e\u5bfc\u5165\u5230\u7535\u5b50\u8868\u683c\u5e94\u7528\u4e2d\u3002 Mjumbe Poe \u7ef4\u62a4\u7740 djangorestframework-csv \u5305\uff0c\u5b83\u4e3aREST framework\u63d0\u4f9b\u4e86CSV\u6e32\u67d3\u5668\u652f\u6301\u3002 UltraJSON UltraJSON \u662f\u4e00\u4e2a\u4f18\u5316\u7684C JSON\u7f16\u7801\u5668\uff0c\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8JSON\u6e32\u67d3\u901f\u5ea6\u3002 Jacob Haslehurst \u7ef4\u62a4\u7740\u4f7f\u7528UJSON\u5305\u5b9e\u73b0JSON\u6e32\u67d3\u7684 drf-ujson-renderer \u5305\u3002 CamelCase JSON djangorestframework-camel-case \u4e3aREST framework\u63d0\u4f9b\u4e86\u9a7c\u5cf0\u6837\u5f0f\u7684JSON\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u3002\u8fd9\u4f7f\u5e8f\u5217\u5316\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528Python\u98ce\u683c\u7684\u4e0b\u5212\u7ebf\u5b57\u6bb5\u540d\uff0c\u4f46\u662f\u5728API\u4e2d\u663e\u793a\u6210Javascript\u6837\u5f0f\u7684\u9a7c\u5cf0\u5b57\u6bb5\u540d\u3002\u5b83\u88ab Vitaly Babiy \u7ef4\u62a4\u7740\u3002 Pandas (CSV, Excel, PNG) Django REST Pandas \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u548c\u6e32\u67d3\u5668\uff0c\u901a\u8fc7 Pandas DataFrame API\u63d0\u4f9b\u989d\u5916\u7684\u6570\u636e\u5904\u7406\u548c\u8f93\u51fa\u3002Django REST Pandas\u5305\u62ecPandas\u98ce\u683c\u7684CSV\u6587\u4ef6\uff0cExcel\u8868\u683c(\u5305\u62ec .xls \u548c .xlsx )\u4ee5\u53ca\u8bb8\u591a \u5176\u4ed6\u683c\u5f0f \u7684\u6e32\u67d3\u5668\u3002\u4f5c\u4e3a wq \u9879\u76ee \u7684\u4e00\u90e8\u5206\u7531 S. Andrew Sheppard \u7ef4\u62a4\u7740\u3002 LaTeX Rest Framework Latex \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528Laulatex\u8f93\u51faPDF\u7684\u6e32\u67d3\u5668\u3002\u5b83\u7531 Pebble (S/F Software) \u7ef4\u62a4\u7740\u3002","title":"Renderers"},{"location":"api-guide/renderers_zh/#_1","text":"\u5728\u5c06TemplateResponse\u5b9e\u4f8b\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u4e4b\u524d\uff0c\u5fc5\u987b\u6e32\u67d3\u5b83\u3002\u6e32\u67d3\u8fc7\u7a0b\u91c7\u7528\u6a21\u677f\u548c\u4e0a\u4e0b\u6587\u7684\u4e2d\u95f4\u8868\u793a\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u7684\u6700\u7ec8\u5b57\u8282\u6d41\u3002 \u2014 Django \u6587\u6863 REST\u6846\u67b6\u5305\u62ec\u8bb8\u591a\u5185\u7f6e\u7684Renderer\u7c7b\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u4f7f\u7528\u5404\u79cd\u5a92\u4f53\u7c7b\u578b\u8fd4\u56de\u54cd\u5e94\u3002\u8fd8\u652f\u6301\u5b9a\u4e49\u4f60\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\uff0c\u8fd9\u6837\u53ef\u4ee5\u7075\u6d3b\u5730\u8bbe\u8ba1\u4f60\u81ea\u5df1\u7684\u5a92\u4f53\u7c7b\u578b\u3002","title":"\u6e32\u67d3\u5668"},{"location":"api-guide/renderers_zh/#_2","text":"\u89c6\u56fe\u7684\u6709\u6548\u6e32\u67d3\u5668\u96c6\u5408\u59cb\u7ec8\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u7c7b\u7684\u5217\u8868\u3002\u5f53\u8f93\u5165\u89c6\u56fe\u65f6\uff0cREST\u6846\u67b6\u5c06\u5bf9\u4f20\u5165\u8bf7\u6c42\u6267\u884c\u5185\u5bb9\u534f\u5546\uff0c\u5e76\u786e\u5b9a\u6700\u9002\u5408\u7684\u6e32\u67d3\u5668\u6765\u6ee1\u8db3\u8bf7\u6c42\u3002 \u5185\u5bb9\u534f\u5546\u7684\u57fa\u672c\u8fc7\u7a0b\u5305\u62ec\u68c0\u67e5\u8bf7\u6c42\u7684 Accept \u5934\uff0c\u4ee5\u786e\u5b9a\u54cd\u5e94\u4e2d\u671f\u671b\u7684\u5a92\u4f53\u7c7b\u578b\u3002URL\u4e0a\u53ef\u9009\u7684\u683c\u5f0f\u540e\u7f00\u53ef\u4ee5\u7528\u4e8e\u663e\u5f0f\u8bf7\u6c42\u7279\u5b9a\u8868\u793a\u3002\u4f8b\u5982URL http://example.com/api/users_count.json \u53ef\u80fd\u662f\u59cb\u7ec8\u8fd4\u56deJSON\u6570\u636e\u7684\u8def\u5f84\u3002 \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6709\u5173 \u5185\u5bb9\u534f\u5546 \u7684\u6587\u6863\u3002","title":"\u6e32\u67d3\u5668\u7684\u786e\u5b9a\u65b9\u5f0f"},{"location":"api-guide/renderers_zh/#_3","text":"\u53ef\u4ee5\u4f7f\u7528 DEFAULT_RENDERER_CLASSES \u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\u96c6\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8bbe\u7f6e\u5c06\u4f7f\u7528 JSON \u4f5c\u4e3a\u4e3b\u8981\u5a92\u4f53\u7c7b\u578b\uff0c\u5e76\u4e14\u8fd8\u5305\u62ec\u81ea\u63cf\u8ff0API\u3002 REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer', ) } \u4f60\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u7528\u4e8e\u5355\u4e2a\u89c6\u56fe\u6216\u89c6\u56fe\u96c6\u7684\u6e32\u67d3\u5668\uff0c\u4f7f\u7528 APIView \u7c7b\u89c6\u56fe\u3002 from django.contrib.auth.models import User from rest_framework.renderers import JSONRenderer from rest_framework.response import Response from rest_framework.views import APIView class UserCountView(APIView): \"\"\" \u8fd4\u56deJSON\u683c\u5f0f\u6d3b\u52a8\u7528\u6237\u6570\u7684\u89c6\u56fe\u3002 \"\"\" renderer_classes = (JSONRenderer, ) def get(self, request, format=None): user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content) \u6216\u8005\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e\u529f\u80fd\u7684\u89c6\u56fe\u7684 @api_view \u88c5\u9970\u5668\u3002 @api_view(['GET']) @renderer_classes((JSONRenderer,)) def user_count_view(request, format=None): \"\"\" \u8fd4\u56deJSON\u683c\u5f0f\u6d3b\u52a8\u7528\u6237\u6570\u7684\u89c6\u56fe\u3002 \"\"\" user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content)","title":"\u8bbe\u7f6e\u6e32\u67d3\u5668"},{"location":"api-guide/renderers_zh/#_4","text":"\u6307\u5b9a\u4f60\u7684API\u7684\u6e32\u67d3\u5668\u7c7b\u65f6\u8981\u8003\u8651\u5230\u6bcf\u4e2a\u5a92\u4f53\u7c7b\u578b\u8981\u5206\u914d\u54ea\u4e9b\u4f18\u5148\u7ea7\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\u3002\u5982\u679c\u4e00\u4e2a\u5ba2\u6237\u7aef\u4e0d\u80fd\u6307\u5b9a\u5b83\u53ef\u4ee5\u63a5\u53d7\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u4f8b\u5982\u53d1\u9001\u4e00\u4e2a Accept: */* \u5934\uff0c\u6216\u8005\u4e0d\u5305\u542b\u4e00\u4e2a Accept \u5934\uff0c\u90a3\u4e48REST\u6846\u67b6\u5c06\u9009\u62e9\u5217\u8868\u4e2d\u7528\u4e8e\u54cd\u5e94\u7684\u7b2c\u4e00\u4e2a\u6e32\u67d3\u5668\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684API\u63d0\u4f9bJSON\u54cd\u5e94\u548cHTML\u53ef\u6d4f\u89c8\u7684API\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5c06 JSONRenderer \u8bbe\u7f6e\u4e3a\u4f60\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\uff0c\u4ee5\u4fbf\u5411\u4e0d\u6307\u5b9a Accept \u6807\u5934\u7684\u5ba2\u6237\u7aef\u53d1\u9001 JSON \u54cd\u5e94\u3002 \u5982\u679c\u4f60\u7684API\u5305\u542b\u53ef\u4ee5\u6839\u636e\u8bf7\u6c42\u63d0\u4f9b\u5e38\u89c4\u7f51\u9875\u548cAPI\u54cd\u5e94\u7684\u89c6\u56fe\uff0c\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 TemplateHTMLRenderer \u4f5c\u4e3a\u4f60\u7684\u9ed8\u8ba4\u6e32\u67d3\u5668\uff0c\u4ee5\u4fbf\u80fd\u5728\u90a3\u4e9b\u53d1\u9001 \u7834\u574f\u7684\u63a5\u6536\u5934 \u7684\u65e7\u7248\u672c\u7684\u6d4f\u89c8\u5668\u4e0a\u80fd\u5f88\u597d\u7684\u5c55\u793a\u3002","title":"\u6e32\u67d3\u5668\u7c7b\u7684\u6392\u5e8f"},{"location":"api-guide/renderers_zh/#api","text":"","title":"API \u53c2\u8003"},{"location":"api-guide/renderers_zh/#jsonrenderer","text":"\u4f7f\u7528utf-8\u7f16\u7801\u5c06\u8bf7\u6c42\u7684\u6570\u636e\u6e32\u67d3\u6210 JSON \u3002 \u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u6837\u5f0f\u662f\u5305\u62ecunicode\u5b57\u7b26\uff0c\u5e76\u4f7f\u7528\u6ca1\u6709\u4e0d\u5fc5\u8981\u7a7a\u683c\u7684\u7d27\u51d1\u6837\u5f0f\u6e32\u67d3\u54cd\u5e94: {\"unicode black star\":\"\u2605\",\"value\":999} \u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u5305\u542b 'indent' \u5a92\u4f53\u7c7b\u578b\u53c2\u6570\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u7684 JSON \u5c06\u88ab\u7f29\u8fdb\u3002\u4f8b\u5982 Accept: application/json; indent=4 \u3002 { \"unicode black star\": \"\u2605\", \"value\": 999 } \u53ef\u4ee5\u4f7f\u7528 UNICODE_JSON \u548c COMPACT_JSON \u66f4\u6539\u9ed8\u8ba4JSON\u7f16\u7801\u6837\u5f0f\u3002 .media_type : application/json .format : '.json' .charset : None","title":"JSONRenderer"},{"location":"api-guide/renderers_zh/#templatehtmlrenderer","text":"\u4f7f\u7528Django\u7684\u6807\u51c6\u6a21\u677f\u5c06\u6570\u636e\u6e32\u67d3\u6210HTML\u3002 \u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f20\u9012\u7ed9 Response \u7684\u6570\u636e\u4e0d\u9700\u8981\u5e8f\u5217\u5316\u3002\u6b64\u5916\uff0c\u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728\u521b\u5efa Response \u65f6\u5305\u542b\u4e00\u4e2a template_name \u53c2\u6570\u3002 TemplateHTMLRenderer\u5c06\u521b\u5efa\u4e00\u4e2a RequestContext \uff0c\u4f7f\u7528 response.data \u4f5c\u4e3a\u4e0a\u4e0b\u6587\u5b57\u5178\uff0c\u5e76\u786e\u5b9a\u7528\u4e8e\u6e32\u67d3\u4e0a\u4e0b\u6587\u7684\u6a21\u677f\u540d\u79f0\u3002 \u6a21\u677f\u540d\u79f0\u7531\uff08\u6309\u4f18\u5148\u987a\u5e8f\uff09\u786e\u5b9a\uff1a \u4e00\u4e2a\u663e\u5f0f\u7684 template_name \u53c2\u6570\u4f20\u9012\u7ed9\u54cd\u5e94\u3002 \u5728\u7c7b\u4e2d\u663e\u5f0f\u5b9a\u4e49 .template_name \u5c5e\u6027\u3002 \u8c03\u7528 view.get_template_names\uff08\uff09 \u7684\u8fd4\u56de\u7ed3\u679c\u3002 \u4f7f\u7528 TemplateHTMLRenderer \u7684\u89c6\u56fe\u7684\u4f8b\u5b50\uff1a class UserDetail(generics.RetrieveAPIView): \"\"\" \u8fd4\u56de\u7ed9\u5b9a\u7528\u6237\u7684\u6a21\u677fHTML\u8868\u793a\u7684\u89c6\u56fe\u3002 \"\"\" queryset = User.objects.all() renderer_classes = (TemplateHTMLRenderer,) def get(self, request, *args, **kwargs): self.object = self.get_object() return Response({'user': self.object}, template_name='user_detail.html') \u4f60\u53ef\u4ee5\u4f7f\u7528 TemplateHTMLRenderer \u6765\u8fd4\u56de\u4f7f\u7528REST\u6846\u67b6\u7684\u5e38\u89c4HTML\u9875\u9762\uff0c\u6216\u8005\u4ece\u5355\u4e2a\u8def\u5f84\u8fd4\u56deHTML\u548cAPI\u54cd\u5e94\u3002 \u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4f7f\u7528 TemplateHTMLRenderer \u548c\u5176\u4ed6\u6e32\u67d3\u7c7b\u7684\u7f51\u7ad9\uff0c\u4f60\u5e94\u8be5\u8003\u8651\u5c06 TemplateHTMLRenderer \u5217\u4e3a renderer_classes \u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7c7b\uff0c\u8fd9\u6837\u5373\u4f7f\u5bf9\u4e8e\u53d1\u9001\u683c\u5f0f\u4e0d\u6b63\u786e\u7684 ACCEPT: \u5934\u6587\u4ef6\u7684\u6d4f\u89c8\u5668\u5b83\u4e5f\u5c06\u88ab\u4f18\u5148\u6392\u5e8f\u3002 \u6709\u5173 TemplateHTMLRenderer \u7528\u6cd5\u7684\u66f4\u591a\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605 _HTML&Forms_\u4e3b\u9898\u9875 \u3002 .media_type : text/html .format : '.html' .charset : utf-8 \u4e5f\u53ef\u4ee5\u770b\u770b: StaticHTMLRenderer","title":"TemplateHTMLRenderer"},{"location":"api-guide/renderers_zh/#statichtmlrenderer","text":"\u4e00\u4e2a\u7b80\u5355\u7684\u6e32\u67d3\u5668\uff0c\u53ea\u9700\u8fd4\u56de\u9884\u6e32\u67d3\u7684HTML\u3002\u4e0e\u5176\u4ed6\u6e32\u67d3\u5668\u4e0d\u540c\uff0c\u4f20\u9012\u7ed9\u54cd\u5e94\u5bf9\u8c61\u7684\u6570\u636e\u5e94\u8be5\u662f\u8868\u793a\u8981\u8fd4\u56de\u7684\u5185\u5bb9\u7684\u5b57\u7b26\u4e32\u3002 \u4e00\u4e2a\u4f7f\u7528 StaticHTMLRenderer \u7684\u89c6\u56fe\u7684\u4f8b\u5b50\uff1a @api_view(('GET',)) @renderer_classes((StaticHTMLRenderer,)) def simple_html_view(request): data = '<html><body><h1>Hello, world</h1></body></html>' return Response(data) \u4f60\u53ef\u4ee5\u4f7f\u7528 StaticHTMLRenderer \u4f7f\u7528REST\u6846\u67b6\u8fd4\u56de\u5e38\u89c4HTML\u9875\u9762\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5355\u4e2a\u8def\u5f84\u8fd4\u56deHTML\u548cAPI\u54cd\u5e94\u3002 .media_type : text/html .format : '.html' .charset : utf-8 \u4e5f\u53ef\u4ee5\u770b\u770b\uff1a TemplateHTMLRenderer","title":"StaticHTMLRenderer"},{"location":"api-guide/renderers_zh/#browsableapirenderer","text":"\u5c06\u6570\u636e\u6e32\u67d3\u6210\u53ef\u6d4f\u89c8\u7684API\uff1a \u6b64\u6e32\u67d3\u5668\u5c06\u786e\u5b9a\u54ea\u4e2a\u5176\u4ed6\u6e32\u67d3\u5668\u5c06\u88ab\u8d4b\u4e88\u6700\u9ad8\u4f18\u5148\u7ea7\uff0c\u5e76\u4f7f\u7528\u5b83\u5728HTML\u9875\u9762\u4e2d\u663e\u793aAPI\u3002 .media_type : text/html .format : '.api' .charset : utf-8 .template : 'rest_framework/api.html'","title":"BrowsableAPIRenderer"},{"location":"api-guide/renderers_zh/#browsableapirenderer_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u54cd\u5e94\u5185\u5bb9\u5c06\u4ee5\u4e0e BrowsableAPIRenderer \u4e0d\u540c\u7684\u6700\u9ad8\u4f18\u5148\u7ea7\u6e32\u67d3\u5668\u6e32\u67d3\u3002\u5982\u679c\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u6b64\u884c\u4e3a\uff0c\u4f8b\u5982\u4f7f\u7528HTML\u4f5c\u4e3a\u9ed8\u8ba4\u8fd4\u56de\u683c\u5f0f\uff0c\u4f46\u5728\u53ef\u6d4f\u89c8\u7684API\u4e2d\u4f7f\u7528JSON\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 get_default_renderer() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002\u4f8b\u5982\uff1a class CustomBrowsableAPIRenderer(BrowsableAPIRenderer): def get_default_renderer(self, view): return JSONRenderer()","title":"\u81ea\u5b9a\u4e49 BrowsableAPIRenderer"},{"location":"api-guide/renderers_zh/#adminrenderer","text":"\u5c06\u6570\u636e\u6e32\u67d3\u7ed9HTML\u4ee5\u8fdb\u884c\u7c7b\u4f3c\u7ba1\u7406\u7684\u663e\u793a\uff1a \u6b64\u6e32\u67d3\u5668\u9002\u7528\u4e8eCRUD\u98ce\u683c\u7684Web API\uff0c\u8fd8\u5e94\u63d0\u4f9b\u7528\u4e8e\u7ba1\u7406\u6570\u636e\u7684\u7528\u6237\u53cb\u597d\u754c\u9762\u3002 \u8bf7\u6ce8\u610f\uff0c\u5305\u542b\u5d4c\u5957\u6216\u5217\u8868\u5e8f\u5217\u5316\u5668\u7684\u8f93\u5165\u89c6\u56fe\u5bf9\u4e8e AdminRenderer \u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u56e0\u4e3aHTML\u8868\u5355\u65e0\u6cd5\u6b63\u786e\u652f\u6301\u5b83\u4eec\u3002 \u6ce8\u610f : \u5f53\u6570\u636e\u4e2d\u5b58\u5728\u6b63\u786e\u914d\u7f6e\u7684 URL_FIELD_NAME \uff08\u7f3a\u7701 url \uff09\u5c5e\u6027\u65f6\uff0c AdminRenderer \u624d\u80fd\u591f\u5305\u542b\u6307\u5411\u8be6\u7ec6\u9875\u9762\u7684\u94fe\u63a5\u3002\u5bf9\u4e8e HyperlinkedModelSerializer \uff0c\u8fd9\u5c06\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u662f\u5bf9\u4e8e ModelSerializer \u6216\u8005\u7b80\u5355\u7684 Serializer \u7c7b\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u660e\u786e\u5730\u5305\u542b\u8be5\u5b57\u6bb5\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\u6a21\u578b get_absolute_url \u65b9\u6cd5\uff1a class AccountSerializer(serializers.ModelSerializer): url = serializers.CharField(source='get_absolute_url', read_only=True) class Meta: model = Account .media_type : text/html .format : '.admin' .charset : utf-8 .template : 'rest_framework/admin.html'","title":"AdminRenderer"},{"location":"api-guide/renderers_zh/#htmlformrenderer","text":"\u5c06\u5e8f\u5217\u5316\u7a0b\u5e8f\u8fd4\u56de\u7684\u6570\u636e\u6e32\u67d3\u4e3aHTML\u8868\u5355\u3002\u6b64\u6e32\u67d3\u5668\u7684\u8f93\u51fa\u4e0d\u5305\u62ec\u5c01\u95ed\u7684 <form> \u6807\u7b7e\uff0c\u9690\u85cf\u7684CSRF\u8f93\u5165\u6216\u4efb\u4f55\u63d0\u4ea4\u6309\u94ae\u3002 \u6b64\u6e32\u67d3\u5668\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\uff0c\u800c\u662f\u53ef\u4ee5\u901a\u8fc7\u5c06\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\u4f20\u9012\u7ed9 render_form \u6a21\u677f\u6807\u8bb0\u6765\u66ff\u4ee3\u6a21\u677f\u3002 {% load rest_framework %} <form action=\"/submit-report/\" method=\"post\"> {% csrf_token %} {% render_form serializer %} <input type=\"submit\" value=\"Save\" /> </form> \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 HTML\u548c\u8868\u5355 \u6587\u6863\u3002 .media_type : text/html .format : '.form' .charset : utf-8 .template : 'rest_framework/horizontal/form.html'","title":"HTMLFormRenderer"},{"location":"api-guide/renderers_zh/#multipartrenderer","text":"\u6b64\u6e32\u67d3\u5668\u7528\u4e8e\u6e32\u67d3HTML multipart\u8868\u5355\u6570\u636e\u3002 \u5b83\u4e0d\u9002\u5408\u4f5c\u4e3a\u54cd\u5e94\u6e32\u67d3\u5668 \uff0c\u800c\u662f\u7528\u4e8e\u521b\u5efa\u6d4b\u8bd5\u8bf7\u6c42\uff0c\u4f7f\u7528REST framework\u7684 \u6d4b\u8bd5\u5ba2\u6237\u7aef\u548c\u6d4b\u8bd5\u8bf7\u6c42\u5de5\u5382 \u3002 .media_type : multipart/form-data; boundary=BoUnDaRyStRiNg .format : '.multipart' .charset : utf-8","title":"MultiPartRenderer"},{"location":"api-guide/renderers_zh/#custom-renderers","text":"\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\uff0c\u4f60\u5e94\u8be5\u91cd\u5199 BaseRenderer \uff0c\u8bbe\u7f6e .media_type \u548c .format \u5c5e\u6027\uff0c\u5e76\u4e14\u5b9e\u73b0 .render(self, data, media_type=None, renderer_context=None) \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5b57\u8282bytestring\uff0c\u5b83\u5c06\u88ab\u7528\u4e8eHTTP\u54cd\u5e94\u7684\u4e3b\u4f53\u3002 \u4f20\u9012\u7ed9 .render() \u65b9\u6cd5\u7684\u53c2\u6570\u662f\uff1a","title":"Custom renderers"},{"location":"api-guide/renderers_zh/#data","text":"\u8bf7\u6c42\u6570\u636e\uff0c\u7531 Response() \u5b9e\u4f8b\u5316\u8bbe\u7f6e\u3002","title":"data"},{"location":"api-guide/renderers_zh/#media_typenone","text":"\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u786e\u5b9a\u7684\u6240\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u6839\u636e\u5ba2\u6237\u7aef\u7684 Accept: \u5934\uff0c\u8fd9\u53ef\u80fd\u6bd4\u6e32\u67d3\u5668\u7684 media_type \u5c5e\u6027\u66f4\u5177\u4f53\uff0c\u53ef\u80fd\u5305\u62ec\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u3002\u4f8b\u5982 \"application/json; nested=true\" \u3002","title":"media_type=None"},{"location":"api-guide/renderers_zh/#renderer_contextnone","text":"\u53ef\u9009\u7684\u3002\u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u662f\u4e00\u4e2a\u7531view\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u7684\u5b57\u5178\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u5b57\u5178\u4f1a\u5305\u62ec\u4ee5\u4e0b\u952e\uff1a view , request , response , args , kwargs \u3002","title":"renderer_context=None"},{"location":"api-guide/renderers_zh/#_5","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u660e\u6587\u6e32\u67d3\u5668\uff0c\u5b83\u5c06\u4f7f\u7528\u53c2\u6570\u4f5c\u4e3a\u54cd\u5e94 data \u7684\u5185\u5bb9\u8fd4\u56de\u54cd\u5e94\u3002 from django.utils.encoding import smart_unicode from rest_framework import renderers class PlainTextRenderer(renderers.BaseRenderer): media_type = 'text/plain' format = 'txt' def render(self, data, media_type=None, renderer_context=None): return data.encode(self.charset)","title":"\u4f8b\u5b50"},{"location":"api-guide/renderers_zh/#_6","text":"\u5047\u8bbe\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\u7c7b\u6b63\u5728\u4f7f\u7528 UTF-8 \u7f16\u7801\u3002\u8981\u4f7f\u7528\u5176\u4ed6\u7f16\u7801\uff0c\u8bf7\u5728\u6e32\u67d3\u5668\u8bbe\u7f6e charset \u5c5e\u6027\u3002 class PlainTextRenderer(renderers.BaseRenderer): media_type = 'text/plain' format = 'txt' charset = 'iso-8859-1' def render(self, data, media_type=None, renderer_context=None): return data.encode(self.charset) \u6ce8\u610f\uff0c\u5982\u679c\u4e00\u4e2a\u6e32\u67d3\u7c7b\u8fd4\u56de\u4e86\u4e00\u4e2aunicode\u5b57\u7b26\u4e32\uff0c\u5219\u54cd\u5e94\u5185\u5bb9\u5c06\u88ab Response \u7c7b\u5f3a\u5236\u8f6c\u6362\u6210bytestring\uff0c\u6e32\u67d3\u5668\u4e0a\u7684\u8bbe\u7f6e\u7684 charset \u5c5e\u6027\u5c06\u7528\u4e8e\u786e\u5b9a\u7f16\u7801\u3002 \u5982\u679c\u6e32\u67d3\u5668\u8fd4\u56de\u4e00\u4e2abytestring\u8868\u793a\u539f\u59cb\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\uff0c\u5219\u5e94\u8be5\u8bbe\u7f6e\u5b57\u7b26\u96c6\u7684\u503c\u4e3a None \uff0c\u786e\u4fdd\u54cd\u5e94\u8bf7\u6c42\u5934\u7684 Content-Type \u4e2d\u4e0d\u4f1a\u8bbe\u7f6e charset \u503c\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u5c06 render_style \u5c5e\u6027\u8bbe\u7f6e\u6210 'binary' \u3002\u8fd9\u4e48\u505a\u4e5f\u5c06\u786e\u4fdd\u53ef\u6d4f\u89c8\u7684API\u4e0d\u4f1a\u5c1d\u8bd5\u5c06\u4e8c\u8fdb\u5236\u5185\u5bb9\u663e\u793a\u4e3a\u5b57\u7b26\u4e32\u3002 class JPEGRenderer(renderers.BaseRenderer): media_type = 'image/jpeg' format = 'jpg' charset = None render_style = 'binary' def render(self, data, media_type=None, renderer_context=None): return data","title":"\u8bbe\u7f6e\u5b57\u7b26\u96c6"},{"location":"api-guide/renderers_zh/#_7","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528REST framework\u7684\u6e32\u67d3\u5668\u505a\u4e00\u4e9b\u975e\u5e38\u7075\u6d3b\u7684\u4e8b\u60c5\u3002\u4e00\u4e9b\u4f8b\u5b50... \u6839\u636e\u8bf7\u6c42\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4ece\u540c\u4e00\u4e2a\u8def\u5f84\u65e2\u80fd\u63d0\u4f9b\u5355\u72ec\u7684\u6216\u8005\u5d4c\u5957\u7684\u8868\u793a\u3002 \u63d0\u4f9b\u5e38\u89c4HTML\u7f51\u9875\u548c\u6765\u81ea\u540c\u4e00\u8def\u5f84\u7684\u57fa\u4e8eJSON\u7684API\u54cd\u5e94\u3002 \u4e3aAPI\u5ba2\u6237\u7aef\u6307\u5b9a\u8981\u4f7f\u7528\u7684\u591a\u79cd\u7c7b\u578b\u7684HTML\u8868\u793a\u5f62\u5f0f\u3002 \u672a\u6307\u5b9a\u6e32\u67d3\u5668\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4f8b\u5982\u4f7f\u7528 media_type = 'image/*' \uff0c\u5e76\u4f7f\u7528 Accept \u6807\u5934\u6765\u66f4\u6539\u54cd\u5e94\u7684\u7f16\u7801\u3002","title":"\u9ad8\u7ea7\u6e32\u67d3\u5668\u4f7f\u7528"},{"location":"api-guide/renderers_zh/#_8","text":"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u89c6\u56fe\u6839\u636e\u6240\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u4f7f\u7528\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u3002\u5982\u679c\u4f60\u9700\u8981\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u6839\u636e request.accepted_renderer \u6765\u786e\u5b9a\u5c06\u7528\u4e8e\u54cd\u5e94\u7684\u534f\u5546\u6e32\u67d3\u5668\u3002 \u4f8b\u5982: @api_view(('GET',)) @renderer_classes((TemplateHTMLRenderer, JSONRenderer)) def list_users(request): \"\"\" \u4e00\u4e2a\u53ef\u4ee5\u8fd4\u56de\u7cfb\u7edf\u4e2d\u7528\u6237\u7684JSON\u6216HTML\u8868\u793a\u7684\u89c6\u56fe\u3002 \"\"\" queryset = Users.objects.filter(active=True) if request.accepted_renderer.format == 'html': # TemplateHTMLRenderer \u91c7\u7528\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\uff0c # \u5e76\u4e14\u989d\u5916\u9700\u8981\u4e00\u4e2a 'template_name'\u3002 # \u5b83\u4e0d\u9700\u8981\u5e8f\u5217\u5316\u3002 data = {'users': queryset} return Response(data, template_name='list_users.html') # JSONRenderer \u9700\u8981\u6b63\u5e38\u7684\u5e8f\u5217\u5316\u6570\u636e\u3002 serializer = UserSerializer(instance=queryset) data = serializer.data return Response(data)","title":"\u5a92\u4f53\u7c7b\u578b\u7684\u4e0d\u540c\u884c\u4e3a"},{"location":"api-guide/renderers_zh/#_9","text":"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u5e0c\u671b\u6e32\u67d3\u5668\u63d0\u4f9b\u4e00\u4e9b\u5217\u5a92\u4f53\u7c7b\u578b\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e3a media_type \u8bbe\u7f6e\u8bf8\u5982 image/* \u6216 */* \u8fd9\u6837\u7684\u503c\u6765\u6307\u5b9a\u5e94\u8be5\u54cd\u5e94\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u5982\u679c\u4f60\u6307\u5b9a\u4e86\u6e32\u67d3\u5668\u7684\u5a92\u4f53\u7c7b\u578b\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u5728\u8fd4\u56de\u54cd\u5e94\u65f6\u4f7f\u7528 content_type \u5c5e\u6027\u660e\u786e\u6307\u5b9a\u5a92\u4f53\u7c7b\u578b\u3002 \u4f8b\u5982: return Response(data, content_type='image/png')","title":"\u4e0d\u660e\u786e\u7684\u5a92\u4f53\u7c7b\u578b"},{"location":"api-guide/renderers_zh/#_10","text":"\u8bb8\u591aWeb API\u7684\u76ee\u6807\uff0c\u7b80\u5355\u7684\u5177\u6709\u8d85\u94fe\u63a5\u7684 JSON \u54cd\u5e94\u53ef\u80fd\u5c31\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u5982\u679c\u4f60\u60f3\u5b8c\u5168\u62e5\u62b1RESTful\u8bbe\u8ba1\u548c HATEOAS \u5219\u9700\u8981\u66f4\u8be6\u7ec6\u5730\u8003\u8651\u5a92\u4f53\u7c7b\u578b\u7684\u8bbe\u8ba1\u548c\u4f7f\u7528\u3002 \u7528 Roy Fielding\u7684\u8bdd \u6765\u8bf4\uff0c\"REST API \u5e94\u8be5\u82b1\u8d39\u6240\u6709\u7684\u63cf\u8ff0\u6027\u52aa\u529b\u6765\u5b9a\u4e49\u7528\u4e8e\u8868\u793a\u8d44\u6e90\u548c\u9a71\u52a8\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u7684\u5a92\u4f53\u7c7b\u578b\uff08\u4eec\uff09\uff0c\u6216\u8005\u4e3a\u73b0\u6709\u7684\u6807\u51c6\u5a92\u4f53\u7c7b\u578b\u5b9a\u4e49\u6269\u5c55\u5173\u7cfb\u540d\u79f0\u548c/\u6216\u8d85\u6587\u672c\u542f\u7528\u6807\u8bb0\u3002\"\u3002 \u6709\u5173\u81ea\u5b9a\u4e49\u5a92\u4f53\u7c7b\u578b\u7684\u4f18\u79c0\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605GitHub\u5173\u4e8e\u81ea\u5b9a\u4e49 application/vnd.github+json \u5a92\u4f53\u7c7b\u578b\u7684\u5e94\u7528\u4ee5\u53ca Mike Amundsen\u7684IANA\u8ba4\u53ef\u7684 application/vnd.collection+json JSON\u8d85\u5a92\u4f53\u3002","title":"\u8bbe\u8ba1\u4f60\u7684\u5a92\u4f53\u7c7b\u578b"},{"location":"api-guide/renderers_zh/#html","text":"\u901a\u5e38\u6e32\u67d3\u5668\u90fd\u5177\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u65e0\u8bba\u5b83\u5904\u7406\u7684\u662f\u6b63\u5e38\u7684\u54cd\u5e94\u8fd8\u662f\u7531\u5f02\u5e38\u5f15\u8d77\u7684\u54cd\u5e94\uff0c\u5982 Http404 \u6216 PermissionDenied \u5f02\u5e38\uff0c\u6216\u8005\u4e00\u4e2a APIException \u7684\u5b50\u7c7b\u3002 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 TemplateHTMLRenderer \u6216 StaticHTMLRenderer \u65f6\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u884c\u4e3a\u7565\u6709\u4e0d\u540c\u3002\u5e76\u4e14\u53cd\u6620 Django\u5bf9\u9519\u8bef\u89c6\u56fe\u7684\u9ed8\u8ba4\u5904\u7406 . \u7531HTML\u6e32\u67d3\u5668\u5f15\u53d1\u548c\u5904\u7406\u7684\u5f02\u5e38\u5c06\u5c1d\u8bd5\u6309\u7167\u4f18\u5148\u987a\u5e8f\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u4e4b\u4e00\u8fdb\u884c\u6e32\u67d3\u3002 \u52a0\u8f7d\u5e76\u6e32\u67d3\u4e00\u4e2a\u540d\u4e3a {status_code}.html \u7684\u6a21\u677f\u3002 \u52a0\u8f7d\u5e76\u6e32\u67d3\u4e00\u4e2a\u540d\u4e3a api_exception.html \u7684\u6a21\u677f\u3002 \u6e32\u67d3HTTP\u72b6\u6001\u7801\u548c\u6587\u672c\uff0c\u4f8b\u5982 \"404 Not Found\"\u3002 \u6a21\u677f\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5305\u62ec status_code \u548c details \u7684 RequestContext \u6e32\u67d3\u3002 \u6ce8\u610f : \u5982\u679c\u8bbe\u7f6e\u4e86 DEBUG=True \uff0cDjango\u5c06\u5c55\u793a\u5b83\u7684\u6807\u51c6\u56de\u6eaf\u9519\u8bef\u9875\u9762\u800c\u4e0d\u662f\u6e32\u67d3HTTP\u72b6\u6001\u7801\u548c\u6587\u672c\u3002","title":"HTML\u9519\u8bef\u89c6\u56fe"},{"location":"api-guide/renderers_zh/#_11","text":"\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5305\u90fd\u662f\u53ef\u7528\u7684\u3002","title":"\u7b2c\u4e09\u65b9\u5305"},{"location":"api-guide/renderers_zh/#yaml","text":"REST framework YAML \u63d0\u4f9b YAML \u89e3\u6790\u548c\u6e32\u67d3\u652f\u6301\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002","title":"YAML"},{"location":"api-guide/renderers_zh/#_12","text":"\u4f7f\u7528pip\u5b89\u88c5\u3002 $ pip install djangorestframework-yaml \u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_yaml.parsers.YAMLParser', ), 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_yaml.renderers.YAMLRenderer', ), }","title":"\u5b89\u88c5\u548c\u914d\u7f6e"},{"location":"api-guide/renderers_zh/#xml","text":"REST Framework XML \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u975e\u6b63\u5f0fXML\u683c\u5f0f\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002","title":"XML"},{"location":"api-guide/renderers_zh/#_13","text":"\u4f7f\u7528pip\u5b89\u88c5\u3002 $ pip install djangorestframework-xml \u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_xml.parsers.XMLParser', ), 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_xml.renderers.XMLRenderer', ), }","title":"\u5b89\u88c5\u548c\u914d\u7f6e"},{"location":"api-guide/renderers_zh/#jsonp","text":"REST framework JSONP \u63d0\u4f9bJSONP\u6e32\u67d3\u652f\u6301\u3002\u5b83\u4e4b\u524d\u76f4\u63a5\u5305\u542b\u5728REST framework \u5305\u4e2d\uff0c\u73b0\u5728\u88ab\u66ff\u4ee3\u4e3a\u7b2c\u4e09\u65b9\u5305\u652f\u6301\u3002 \u8b66\u544a : \u5982\u679c\u4f60\u9700\u8981\u8de8\u57df\u7684AJAX\u8bf7\u6c42\uff0c\u4f60\u901a\u5e38\u5e94\u8be5\u4f7f\u7528\u66f4\u73b0\u4ee3\u5316\u7684 CORS \u65b9\u6cd5\u4ee3\u66ff JSONP \u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u9605 CORS\u6587\u6863 \u3002 jsonp \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6d4f\u89c8\u5668hack\u65b9\u6cd5\uff0c \u4ec5\u9002\u7528\u4e8e\u5168\u5c40\u53ef\u8bfb\u7684API\u8def\u5f84 \uff0c\u5176\u4e2d GET \u8bf7\u6c42\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4efb\u4f55\u7528\u6237\u6743\u9650\u3002","title":"JSONP"},{"location":"api-guide/renderers_zh/#_14","text":"\u4f7f\u7528pip\u5b89\u88c5\u3002 $ pip install djangorestframework-jsonp \u4fee\u6539\u4f60\u7684REST framework\u8bbe\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_jsonp.renderers.JSONPRenderer', ), }","title":"\u5b89\u88c5\u548c\u914d\u7f6e"},{"location":"api-guide/renderers_zh/#messagepack","text":"MessagePack \u662f\u4e00\u79cd\u5feb\u901f\uff0c\u9ad8\u6548\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u683c\u5f0f\u3002 Juan Riaza \u7ef4\u62a4\u7740 djangorestframework-msgpack \u5305\uff0c\u5b83\u4e3aREST framework\u63d0\u4f9bMessagePack\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u652f\u6301\u3002","title":"MessagePack"},{"location":"api-guide/renderers_zh/#csv","text":"\u9017\u53f7\u5206\u9694\u7684\u503c\u662f\u7eaf\u6587\u672c\u6570\u636e\u683c\u5f0f\uff0c\u53ef\u4ee5\u8f7b\u677e\u5bfc\u5165\u5230\u7535\u5b50\u8868\u683c\u5e94\u7528\u4e2d\u3002 Mjumbe Poe \u7ef4\u62a4\u7740 djangorestframework-csv \u5305\uff0c\u5b83\u4e3aREST framework\u63d0\u4f9b\u4e86CSV\u6e32\u67d3\u5668\u652f\u6301\u3002","title":"CSV"},{"location":"api-guide/renderers_zh/#ultrajson","text":"UltraJSON \u662f\u4e00\u4e2a\u4f18\u5316\u7684C JSON\u7f16\u7801\u5668\uff0c\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8JSON\u6e32\u67d3\u901f\u5ea6\u3002 Jacob Haslehurst \u7ef4\u62a4\u7740\u4f7f\u7528UJSON\u5305\u5b9e\u73b0JSON\u6e32\u67d3\u7684 drf-ujson-renderer \u5305\u3002","title":"UltraJSON"},{"location":"api-guide/renderers_zh/#camelcase-json","text":"djangorestframework-camel-case \u4e3aREST framework\u63d0\u4f9b\u4e86\u9a7c\u5cf0\u6837\u5f0f\u7684JSON\u6e32\u67d3\u5668\u548c\u89e3\u6790\u5668\u3002\u8fd9\u4f7f\u5e8f\u5217\u5316\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528Python\u98ce\u683c\u7684\u4e0b\u5212\u7ebf\u5b57\u6bb5\u540d\uff0c\u4f46\u662f\u5728API\u4e2d\u663e\u793a\u6210Javascript\u6837\u5f0f\u7684\u9a7c\u5cf0\u5b57\u6bb5\u540d\u3002\u5b83\u88ab Vitaly Babiy \u7ef4\u62a4\u7740\u3002","title":"CamelCase JSON"},{"location":"api-guide/renderers_zh/#pandas-csv-excel-png","text":"Django REST Pandas \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u548c\u6e32\u67d3\u5668\uff0c\u901a\u8fc7 Pandas DataFrame API\u63d0\u4f9b\u989d\u5916\u7684\u6570\u636e\u5904\u7406\u548c\u8f93\u51fa\u3002Django REST Pandas\u5305\u62ecPandas\u98ce\u683c\u7684CSV\u6587\u4ef6\uff0cExcel\u8868\u683c(\u5305\u62ec .xls \u548c .xlsx )\u4ee5\u53ca\u8bb8\u591a \u5176\u4ed6\u683c\u5f0f \u7684\u6e32\u67d3\u5668\u3002\u4f5c\u4e3a wq \u9879\u76ee \u7684\u4e00\u90e8\u5206\u7531 S. Andrew Sheppard \u7ef4\u62a4\u7740\u3002","title":"Pandas (CSV, Excel, PNG)"},{"location":"api-guide/renderers_zh/#latex","text":"Rest Framework Latex \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528Laulatex\u8f93\u51faPDF\u7684\u6e32\u67d3\u5668\u3002\u5b83\u7531 Pebble (S/F Software) \u7ef4\u62a4\u7740\u3002","title":"LaTeX"},{"location":"api-guide/requests/","text":"Requests If you're doing REST-based web service stuff ... you should ignore request.POST. \u2014 Malcom Tredinnick, Django developers group REST framework's Request class extends the standard HttpRequest , adding support for REST framework's flexible request parsing and request authentication. Request parsing REST framework's Request objects provide flexible request parsing that allows you to treat requests with JSON data or other media types in the same way that you would normally deal with form data. .data request.data returns the parsed content of the request body. This is similar to the standard request.POST and request.FILES attributes except that: It includes all parsed content, including file and non-file inputs. It supports parsing the content of HTTP methods other than POST , meaning that you can access the content of PUT and PATCH requests. It supports REST framework's flexible request parsing, rather than just supporting form data. For example you can handle incoming JSON data in the same way that you handle incoming form data. For more details see the parsers documentation . .query_params request.query_params is a more correctly named synonym for request.GET . For clarity inside your code, we recommend using request.query_params instead of the Django's standard request.GET . Doing so will help keep your codebase more correct and obvious - any HTTP method type may include query parameters, not just GET requests. .parsers The APIView class or @api_view decorator will ensure that this property is automatically set to a list of Parser instances, based on the parser_classes set on the view or based on the DEFAULT_PARSER_CLASSES setting. You won't typically need to access this property. Note: If a client sends malformed content, then accessing request.data may raise a ParseError . By default REST framework's APIView class or @api_view decorator will catch the error and return a 400 Bad Request response. If a client sends a request with a content-type that cannot be parsed then a UnsupportedMediaType exception will be raised, which by default will be caught and return a 415 Unsupported Media Type response. Content negotiation The request exposes some properties that allow you to determine the result of the content negotiation stage. This allows you to implement behaviour such as selecting a different serialization schemes for different media types. .accepted_renderer The renderer instance that was selected by the content negotiation stage. .accepted_media_type A string representing the media type that was accepted by the content negotiation stage. Authentication REST framework provides flexible, per-request authentication, that gives you the ability to: Use different authentication policies for different parts of your API. Support the use of multiple authentication policies. Provide both user and token information associated with the incoming request. .user request.user typically returns an instance of django.contrib.auth.models.User , although the behavior depends on the authentication policy being used. If the request is unauthenticated the default value of request.user is an instance of django.contrib.auth.models.AnonymousUser . For more details see the authentication documentation . .auth request.auth returns any additional authentication context. The exact behavior of request.auth depends on the authentication policy being used, but it may typically be an instance of the token that the request was authenticated against. If the request is unauthenticated, or if no additional context is present, the default value of request.auth is None . For more details see the authentication documentation . .authenticators The APIView class or @api_view decorator will ensure that this property is automatically set to a list of Authentication instances, based on the authentication_classes set on the view or based on the DEFAULT_AUTHENTICATORS setting. You won't typically need to access this property. Note: You may see a WrappedAttributeError raised when calling the .user or .auth properties. These errors originate from an authenticator as a standard AttributeError , however it's necessary that they be re-raised as a different exception type in order to prevent them from being suppressed by the outer property access. Python will not recognize that the AttributeError originates from the authenticator and will instead assume that the request object does not have a .user or .auth property. The authenticator will need to be fixed. Browser enhancements REST framework supports a few browser enhancements such as browser-based PUT , PATCH and DELETE forms. .method request.method returns the uppercased string representation of the request's HTTP method. Browser-based PUT , PATCH and DELETE forms are transparently supported. For more information see the browser enhancements documentation . .content_type request.content_type , returns a string object representing the media type of the HTTP request's body, or an empty string if no media type was provided. You won't typically need to directly access the request's content type, as you'll normally rely on REST framework's default request parsing behavior. If you do need to access the content type of the request you should use the .content_type property in preference to using request.META.get('HTTP_CONTENT_TYPE') , as it provides transparent support for browser-based non-form content. For more information see the browser enhancements documentation . .stream request.stream returns a stream representing the content of the request body. You won't typically need to directly access the request's content, as you'll normally rely on REST framework's default request parsing behavior. Standard HttpRequest attributes As REST framework's Request extends Django's HttpRequest , all the other standard attributes and methods are also available. For example the request.META and request.session dictionaries are available as normal. Note that due to implementation reasons the Request class does not inherit from HttpRequest class, but instead extends the class using composition.","title":"Requests"},{"location":"api-guide/requests/#requests","text":"If you're doing REST-based web service stuff ... you should ignore request.POST. \u2014 Malcom Tredinnick, Django developers group REST framework's Request class extends the standard HttpRequest , adding support for REST framework's flexible request parsing and request authentication.","title":"Requests"},{"location":"api-guide/requests/#request-parsing","text":"REST framework's Request objects provide flexible request parsing that allows you to treat requests with JSON data or other media types in the same way that you would normally deal with form data.","title":"Request parsing"},{"location":"api-guide/requests/#data","text":"request.data returns the parsed content of the request body. This is similar to the standard request.POST and request.FILES attributes except that: It includes all parsed content, including file and non-file inputs. It supports parsing the content of HTTP methods other than POST , meaning that you can access the content of PUT and PATCH requests. It supports REST framework's flexible request parsing, rather than just supporting form data. For example you can handle incoming JSON data in the same way that you handle incoming form data. For more details see the parsers documentation .","title":".data"},{"location":"api-guide/requests/#query_params","text":"request.query_params is a more correctly named synonym for request.GET . For clarity inside your code, we recommend using request.query_params instead of the Django's standard request.GET . Doing so will help keep your codebase more correct and obvious - any HTTP method type may include query parameters, not just GET requests.","title":".query_params"},{"location":"api-guide/requests/#parsers","text":"The APIView class or @api_view decorator will ensure that this property is automatically set to a list of Parser instances, based on the parser_classes set on the view or based on the DEFAULT_PARSER_CLASSES setting. You won't typically need to access this property. Note: If a client sends malformed content, then accessing request.data may raise a ParseError . By default REST framework's APIView class or @api_view decorator will catch the error and return a 400 Bad Request response. If a client sends a request with a content-type that cannot be parsed then a UnsupportedMediaType exception will be raised, which by default will be caught and return a 415 Unsupported Media Type response.","title":".parsers"},{"location":"api-guide/requests/#content-negotiation","text":"The request exposes some properties that allow you to determine the result of the content negotiation stage. This allows you to implement behaviour such as selecting a different serialization schemes for different media types.","title":"Content negotiation"},{"location":"api-guide/requests/#accepted_renderer","text":"The renderer instance that was selected by the content negotiation stage.","title":".accepted_renderer"},{"location":"api-guide/requests/#accepted_media_type","text":"A string representing the media type that was accepted by the content negotiation stage.","title":".accepted_media_type"},{"location":"api-guide/requests/#authentication","text":"REST framework provides flexible, per-request authentication, that gives you the ability to: Use different authentication policies for different parts of your API. Support the use of multiple authentication policies. Provide both user and token information associated with the incoming request.","title":"Authentication"},{"location":"api-guide/requests/#user","text":"request.user typically returns an instance of django.contrib.auth.models.User , although the behavior depends on the authentication policy being used. If the request is unauthenticated the default value of request.user is an instance of django.contrib.auth.models.AnonymousUser . For more details see the authentication documentation .","title":".user"},{"location":"api-guide/requests/#auth","text":"request.auth returns any additional authentication context. The exact behavior of request.auth depends on the authentication policy being used, but it may typically be an instance of the token that the request was authenticated against. If the request is unauthenticated, or if no additional context is present, the default value of request.auth is None . For more details see the authentication documentation .","title":".auth"},{"location":"api-guide/requests/#authenticators","text":"The APIView class or @api_view decorator will ensure that this property is automatically set to a list of Authentication instances, based on the authentication_classes set on the view or based on the DEFAULT_AUTHENTICATORS setting. You won't typically need to access this property. Note: You may see a WrappedAttributeError raised when calling the .user or .auth properties. These errors originate from an authenticator as a standard AttributeError , however it's necessary that they be re-raised as a different exception type in order to prevent them from being suppressed by the outer property access. Python will not recognize that the AttributeError originates from the authenticator and will instead assume that the request object does not have a .user or .auth property. The authenticator will need to be fixed.","title":".authenticators"},{"location":"api-guide/requests/#browser-enhancements","text":"REST framework supports a few browser enhancements such as browser-based PUT , PATCH and DELETE forms.","title":"Browser enhancements"},{"location":"api-guide/requests/#method","text":"request.method returns the uppercased string representation of the request's HTTP method. Browser-based PUT , PATCH and DELETE forms are transparently supported. For more information see the browser enhancements documentation .","title":".method"},{"location":"api-guide/requests/#content_type","text":"request.content_type , returns a string object representing the media type of the HTTP request's body, or an empty string if no media type was provided. You won't typically need to directly access the request's content type, as you'll normally rely on REST framework's default request parsing behavior. If you do need to access the content type of the request you should use the .content_type property in preference to using request.META.get('HTTP_CONTENT_TYPE') , as it provides transparent support for browser-based non-form content. For more information see the browser enhancements documentation .","title":".content_type"},{"location":"api-guide/requests/#stream","text":"request.stream returns a stream representing the content of the request body. You won't typically need to directly access the request's content, as you'll normally rely on REST framework's default request parsing behavior.","title":".stream"},{"location":"api-guide/requests/#standard-httprequest-attributes","text":"As REST framework's Request extends Django's HttpRequest , all the other standard attributes and methods are also available. For example the request.META and request.session dictionaries are available as normal. Note that due to implementation reasons the Request class does not inherit from HttpRequest class, but instead extends the class using composition.","title":"Standard HttpRequest attributes"},{"location":"api-guide/requests_zh/","text":"Requests\uff08\u8bf7\u6c42\uff09 \u5982\u679c\u4f60\u6b63\u5728\u505a\u57fa\u4e8eREST\u7684Web\u670d\u52a1...\u4f60\u6700\u597d\u5ffd\u7565request.POST\u3002 \u2014 Malcom Tredinnick, Django developers group REST framework\u7684 Request \u7c7b\u6269\u5c55\u4e86\u6807\u51c6\u7684 HttpRequest \uff0c\u6dfb\u52a0\u5bf9REST framework\u7684\u7075\u6d3b\u8bf7\u6c42\u89e3\u6790\u548c\u8bf7\u6c42\u8eab\u4efd\u9a8c\u8bc1\u7684\u652f\u6301\u3002 Request parsing\uff08\u8bf7\u6c42\u89e3\u6790\uff09 REST framework\u7684\u8bf7\u6c42\u5bf9\u8c61\u63d0\u4f9b\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\uff0c\u5141\u8bb8\u4f60\u4ee5\u4e0e\u901a\u5e38\u5904\u7406\u8868\u5355\u6570\u636e\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528JSON\u6570\u636e\u6216\u5176\u4ed6\u5a92\u4f53\u7c7b\u578b\u5904\u7406\u8bf7\u6c42\u3002 .data request.data \u8fd4\u56de\u8bf7\u6c42\u6b63\u6587\u7684\u89e3\u6790\u5185\u5bb9\u3002\u8fd9\u4e0e\u6807\u51c6\u7684 request.POST \u548c request.FILES \u5c5e\u6027\u7c7b\u4f3c\uff0c\u9664\u4e86\u4e0b\u9762\u7684\uff1a \u5b83\u5305\u62ec\u6240\u6709\u89e3\u6790\u7684\u5185\u5bb9, \u5305\u62ec \u6587\u4ef6\u6216\u975e\u6587\u4ef6 \u8f93\u5165\u3002 \u5b83\u652f\u6301\u89e3\u6790\u9664 POST \u4e4b\u5916\u7684HTTP\u65b9\u6cd5\u7684\u5185\u5bb9\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u8bbf\u95ee PUT \u548c PATCH \u8bf7\u6c42\u7684\u5185\u5bb9\u3002 \u5b83\u652f\u6301REST framework\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\uff0c\u800c\u4e0d\u4ec5\u4ec5\u652f\u6301\u8868\u5355\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4e0e\u5904\u7406\u4f20\u5165\u8868\u5355\u6570\u636e\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4f20\u5165\u7684JSON\u6570\u636e\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u9605 parsers documentation . .query_params request.query_params \u662f request.GET \u7684\u4e00\u4e2a\u66f4\u51c6\u786e\u7684\u540c\u4e49\u8bcd\u3002 \u4e3a\u4e86\u8ba9\u4f60\u7684\u4ee3\u7801\u6e05\u6670\u660e\u4e86, \u6211\u4eec\u5efa\u8bae\u4f7f\u7528 request.query_params \u800c\u4e0d\u662fDjango\u6807\u51c6\u7684 request.GET \u3002\u8fd9\u6837\u505a\u6709\u52a9\u4e8e\u4fdd\u6301\u4ee3\u7801\u5e93\u66f4\u52a0\u6b63\u786e\u548c\u660e\u4e86\u2014\u2014\u4efb\u4f55HTTP\u65b9\u6cd5\u7c7b\u578b\u53ef\u80fd\u5305\u62ec\u67e5\u8be2\u53c2\u6570\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f GET \u8bf7\u6c42\u3002 .parsers APIView \u7c7b\u6216 @api_view \u88c5\u9970\u5668\u5c06\u6839\u636eview\u4e2d\u8bbe\u7f6e\u7684 parser_classes \u96c6\u5408\u6216\u57fa\u4e8e DEFAULT_PARSER_CLASSES \u8bbe\u7f6e\uff0c\u786e\u4fdd\u6b64\u5c5e\u6027\u81ea\u52a8\u8bbe\u7f6e\u4e3a Parser \u5b9e\u4f8b\u5217\u8868\u3002 \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u8bbf\u95ee\u8fd9\u4e2a\u5c5e\u6027\u3002 Note: \u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u683c\u5f0f\u9519\u8bef\u7684\u5185\u5bb9\uff0c\u5219\u8bbf\u95ee request.data \u53ef\u80fd\u4f1a\u5f15\u53d1 ParseError \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0bREST framework\u7684 APIView \u7c7b\u6216 @api_view \u88c5\u9970\u5668\u5c06\u6355\u83b7\u9519\u8bef\u5e76\u8fd4\u56de 400 Bad Request \u54cd\u5e94\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u5177\u6709\u65e0\u6cd5\u89e3\u6790\u7684\u5443\u9006\u8363\u7c7b\u578b\u7684\u8bf7\u6c42\uff0c\u5219\u4f1a\u5f15\u53d1 UnsupportedMediaType \u5f02\u5e38, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u6355\u83b7\u8be5\u5f02\u5e38\u5e76\u8fd4\u56de 415 Unsupported Media Type \u54cd\u5e94\u3002 Content negotiation\uff08\u5185\u5bb9\u534f\u5546\uff09 \u8bf7\u6c42\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5c5e\u6027\u5141\u8bb8\u4f60\u786e\u5b9a\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u7684\u7ed3\u679c\u3002\u8fd9\u5141\u8bb8\u4f60\u5b9e\u73b0\u5177\u4f53\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u4e3a\u4e0d\u540c\u7684\u5a92\u4f53\u7c7b\u578b\u9009\u62e9\u4e0d\u7528\u7684\u5e8f\u5217\u5316\u65b9\u6848\u3002 .accepted_renderer \u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u9009\u62e9\u7684render\u5b9e\u4f8b\u3002 .accepted_media_type \u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002 Authentication\uff08\u8ba4\u8bc1\uff09 REST framework \u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\uff0c\u6bcf\u6b21\u8bf7\u6c42\u7684\u9a8c\u8bc1\uff0c\u8ba9\u4f60\u80fd\u591f\uff1a * \u5bf9API\u7684\u4e0d\u540c\u90e8\u5206\u4f7f\u7528\u4e0d\u540c\u7684\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002 * \u652f\u6301\u4f7f\u7528\u591a\u4e2a\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002 * \u63d0\u4f9b\u4e0e\u4f20\u5165\u8bf7\u6c42\u76f8\u5173\u8054\u7684\u7528\u6237\u548c\u4ee4\u724c\u4fe1\u606f\u3002 .user request.user \u901a\u5e38\u8fd4\u56de\u4e00\u4e2a django.contrib.auth.models.User \u5b9e\u4f8b, \u5c3d\u7ba1\u8be5\u884c\u4e3a\u53d6\u51b3\u4e8e\u6240\u4f7f\u7528\u7684\u7684\u8ba4\u8bc1\u7b56\u7565\u3002 \u5982\u679c\u8bf7\u6c42\u672a\u8ba4\u8bc1\u5219 request.user \u7684\u9ed8\u8ba4\u503c\u4e3a django.contrib.auth.models.AnonymousUser \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 authentication documentation . .auth request.auth \u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u4e0a\u4e0b\u6587\u3002 request.auth \u7684\u786e\u5207\u884c\u4e3a\u53d6\u51b3\u4e8e\u6240\u4f7f\u7528\u7684\u7684\u8ba4\u8bc1\u7b56\u7565\uff0c\u4f46\u5b83\u901a\u5e38\u53ef\u4ee5\u662f\u8bf7\u6c42\u88ab\u8ba4\u8bc1\u7684token\u7684\u5b9e\u4f8b\u3002 \u5982\u679c\u8bf7\u6c42\u672a\u8ba4\u8bc1\u6216\u8005\u6ca1\u6709\u5176\u4ed6\u4e0a\u4e0b\u6587\uff0c\u5219 request.auth \u7684\u9ed8\u8ba4\u503c\u4e3a None . \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 authentication documentation . .authenticators APIView \u7c7b\u6216 @api_view \u88c5\u9970\u5668\u5c06\u6839\u636e\u5728view\u4e2d\u8bbe\u7f6e\u7684 authentication_classes \u6216\u57fa\u4e8e DEFAULT_AUTHENTICATORS \u8bbe\u7f6e\uff0c\u786e\u4fdd\u6b64\u5c5e\u6027\u81ea\u52a8\u8bbe\u7f6e\u4e3a Authentication \u5b9e\u4f8b\u7684\u5217\u8868\u3002 \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u8bbf\u95ee\u6b64\u5c5e\u6027\u3002 Browser enhancements\uff08\u6d4f\u89c8\u5668\u589e\u5f3a\uff09 REST framework \u652f\u6301\u4e00\u4e9b\u6d4f\u89c8\u5668\u589e\u5f3a\u529f\u80fd\uff0c\u4f8b\u5982\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684 PUT , PATCH \u548c DELETE \u8868\u5355\u3002 .method request.method \u8fd4\u56de\u8bf7\u6c42\u7684HTTP\u65b9\u6cd5\u7684 \u5927\u5199 \u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 \u900f\u660e\u5730\u652f\u6301\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684 PUT , PATCH \u548c DELETE \u8868\u5355\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 browser enhancements documentation . .content_type request.content_type \u8fd4\u56de\u8868\u793aHTTP\u8bf7\u6c42\u6b63\u6587\u7684\u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u5982\u679c\u672a\u63d0\u4f9b\u5a92\u4f53\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002 \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u5c06\u4f9d\u8d56\u4e8eREST framework\u7684\u9ed8\u8ba4\u8bf7\u6c42\u89e3\u6790\u884c\u4e3a\u3002 \u5982\u679c\u4f60\u786e\u5b9e\u9700\u8981\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 .content_type \u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 request.META.get('HTTP_CONTENT_TYPE') , \u56e0\u4e3a\u5b83\u4e3a\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u975e\u8868\u5355\u5185\u5bb9\u63d0\u4f9b\u4e86\u900f\u660e\u7684\u652f\u6301\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 browser enhancements documentation . .stream request.stream \u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u4e3b\u4f53\u5185\u5bb9\u7684\u6d41\u3002 \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u5c06\u4f9d\u8d56\u4e8eREST framework\u7684\u9ed8\u8ba4\u8bf7\u6c42\u89e3\u6790\u884c\u4e3a\u3002 Standard HttpRequest attributes\uff08\u6807\u51c6HttpRequest\u5c5e\u6027\uff09 \u7531\u4e8e REST framework \u7684 Request \u6269\u5c55\u4e86 Django\u7684 HttpRequest , \u6240\u4ee5\u6240\u6709\u5176\u4ed6\u6807\u51c6\u5c5e\u6027\u548c\u65b9\u6cd5\u4e5f\u662f\u53ef\u7528\u7684\u3002\u4f8b\u5982 request.META \u548c request.session \u5b57\u5178\u6b63\u5e38\u53ef\u7528\u3002 \u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u5b9e\u73b0\u539f\u56e0\uff0c Request \u7c7b\u5e76\u4e0d\u4f1a\u4ece HttpRequest \u7c7b\u7ee7\u627f, \u800c\u662f\u4f7f\u7528\u5408\u6210\u6269\u5c55\u7c7b\u3002","title":"Requests"},{"location":"api-guide/requests_zh/#requests","text":"\u5982\u679c\u4f60\u6b63\u5728\u505a\u57fa\u4e8eREST\u7684Web\u670d\u52a1...\u4f60\u6700\u597d\u5ffd\u7565request.POST\u3002 \u2014 Malcom Tredinnick, Django developers group REST framework\u7684 Request \u7c7b\u6269\u5c55\u4e86\u6807\u51c6\u7684 HttpRequest \uff0c\u6dfb\u52a0\u5bf9REST framework\u7684\u7075\u6d3b\u8bf7\u6c42\u89e3\u6790\u548c\u8bf7\u6c42\u8eab\u4efd\u9a8c\u8bc1\u7684\u652f\u6301\u3002","title":"Requests\uff08\u8bf7\u6c42\uff09"},{"location":"api-guide/requests_zh/#request-parsing","text":"REST framework\u7684\u8bf7\u6c42\u5bf9\u8c61\u63d0\u4f9b\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\uff0c\u5141\u8bb8\u4f60\u4ee5\u4e0e\u901a\u5e38\u5904\u7406\u8868\u5355\u6570\u636e\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528JSON\u6570\u636e\u6216\u5176\u4ed6\u5a92\u4f53\u7c7b\u578b\u5904\u7406\u8bf7\u6c42\u3002","title":"Request parsing\uff08\u8bf7\u6c42\u89e3\u6790\uff09"},{"location":"api-guide/requests_zh/#data","text":"request.data \u8fd4\u56de\u8bf7\u6c42\u6b63\u6587\u7684\u89e3\u6790\u5185\u5bb9\u3002\u8fd9\u4e0e\u6807\u51c6\u7684 request.POST \u548c request.FILES \u5c5e\u6027\u7c7b\u4f3c\uff0c\u9664\u4e86\u4e0b\u9762\u7684\uff1a \u5b83\u5305\u62ec\u6240\u6709\u89e3\u6790\u7684\u5185\u5bb9, \u5305\u62ec \u6587\u4ef6\u6216\u975e\u6587\u4ef6 \u8f93\u5165\u3002 \u5b83\u652f\u6301\u89e3\u6790\u9664 POST \u4e4b\u5916\u7684HTTP\u65b9\u6cd5\u7684\u5185\u5bb9\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u8bbf\u95ee PUT \u548c PATCH \u8bf7\u6c42\u7684\u5185\u5bb9\u3002 \u5b83\u652f\u6301REST framework\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\uff0c\u800c\u4e0d\u4ec5\u4ec5\u652f\u6301\u8868\u5355\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4e0e\u5904\u7406\u4f20\u5165\u8868\u5355\u6570\u636e\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4f20\u5165\u7684JSON\u6570\u636e\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u9605 parsers documentation .","title":".data"},{"location":"api-guide/requests_zh/#query_params","text":"request.query_params \u662f request.GET \u7684\u4e00\u4e2a\u66f4\u51c6\u786e\u7684\u540c\u4e49\u8bcd\u3002 \u4e3a\u4e86\u8ba9\u4f60\u7684\u4ee3\u7801\u6e05\u6670\u660e\u4e86, \u6211\u4eec\u5efa\u8bae\u4f7f\u7528 request.query_params \u800c\u4e0d\u662fDjango\u6807\u51c6\u7684 request.GET \u3002\u8fd9\u6837\u505a\u6709\u52a9\u4e8e\u4fdd\u6301\u4ee3\u7801\u5e93\u66f4\u52a0\u6b63\u786e\u548c\u660e\u4e86\u2014\u2014\u4efb\u4f55HTTP\u65b9\u6cd5\u7c7b\u578b\u53ef\u80fd\u5305\u62ec\u67e5\u8be2\u53c2\u6570\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f GET \u8bf7\u6c42\u3002","title":".query_params"},{"location":"api-guide/requests_zh/#parsers","text":"APIView \u7c7b\u6216 @api_view \u88c5\u9970\u5668\u5c06\u6839\u636eview\u4e2d\u8bbe\u7f6e\u7684 parser_classes \u96c6\u5408\u6216\u57fa\u4e8e DEFAULT_PARSER_CLASSES \u8bbe\u7f6e\uff0c\u786e\u4fdd\u6b64\u5c5e\u6027\u81ea\u52a8\u8bbe\u7f6e\u4e3a Parser \u5b9e\u4f8b\u5217\u8868\u3002 \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u8bbf\u95ee\u8fd9\u4e2a\u5c5e\u6027\u3002 Note: \u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u683c\u5f0f\u9519\u8bef\u7684\u5185\u5bb9\uff0c\u5219\u8bbf\u95ee request.data \u53ef\u80fd\u4f1a\u5f15\u53d1 ParseError \u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0bREST framework\u7684 APIView \u7c7b\u6216 @api_view \u88c5\u9970\u5668\u5c06\u6355\u83b7\u9519\u8bef\u5e76\u8fd4\u56de 400 Bad Request \u54cd\u5e94\u3002 \u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u5177\u6709\u65e0\u6cd5\u89e3\u6790\u7684\u5443\u9006\u8363\u7c7b\u578b\u7684\u8bf7\u6c42\uff0c\u5219\u4f1a\u5f15\u53d1 UnsupportedMediaType \u5f02\u5e38, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u6355\u83b7\u8be5\u5f02\u5e38\u5e76\u8fd4\u56de 415 Unsupported Media Type \u54cd\u5e94\u3002","title":".parsers"},{"location":"api-guide/requests_zh/#content-negotiation","text":"\u8bf7\u6c42\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5c5e\u6027\u5141\u8bb8\u4f60\u786e\u5b9a\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u7684\u7ed3\u679c\u3002\u8fd9\u5141\u8bb8\u4f60\u5b9e\u73b0\u5177\u4f53\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u4e3a\u4e0d\u540c\u7684\u5a92\u4f53\u7c7b\u578b\u9009\u62e9\u4e0d\u7528\u7684\u5e8f\u5217\u5316\u65b9\u6848\u3002","title":"Content negotiation\uff08\u5185\u5bb9\u534f\u5546\uff09"},{"location":"api-guide/requests_zh/#accepted_renderer","text":"\u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u9009\u62e9\u7684render\u5b9e\u4f8b\u3002","title":".accepted_renderer"},{"location":"api-guide/requests_zh/#accepted_media_type","text":"\u7531\u5185\u5bb9\u534f\u5546\u9636\u6bb5\u63a5\u53d7\u7684\u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002","title":".accepted_media_type"},{"location":"api-guide/requests_zh/#authentication","text":"REST framework \u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\uff0c\u6bcf\u6b21\u8bf7\u6c42\u7684\u9a8c\u8bc1\uff0c\u8ba9\u4f60\u80fd\u591f\uff1a * \u5bf9API\u7684\u4e0d\u540c\u90e8\u5206\u4f7f\u7528\u4e0d\u540c\u7684\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002 * \u652f\u6301\u4f7f\u7528\u591a\u4e2a\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002 * \u63d0\u4f9b\u4e0e\u4f20\u5165\u8bf7\u6c42\u76f8\u5173\u8054\u7684\u7528\u6237\u548c\u4ee4\u724c\u4fe1\u606f\u3002","title":"Authentication\uff08\u8ba4\u8bc1\uff09"},{"location":"api-guide/requests_zh/#user","text":"request.user \u901a\u5e38\u8fd4\u56de\u4e00\u4e2a django.contrib.auth.models.User \u5b9e\u4f8b, \u5c3d\u7ba1\u8be5\u884c\u4e3a\u53d6\u51b3\u4e8e\u6240\u4f7f\u7528\u7684\u7684\u8ba4\u8bc1\u7b56\u7565\u3002 \u5982\u679c\u8bf7\u6c42\u672a\u8ba4\u8bc1\u5219 request.user \u7684\u9ed8\u8ba4\u503c\u4e3a django.contrib.auth.models.AnonymousUser \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 authentication documentation .","title":".user"},{"location":"api-guide/requests_zh/#auth","text":"request.auth \u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u4e0a\u4e0b\u6587\u3002 request.auth \u7684\u786e\u5207\u884c\u4e3a\u53d6\u51b3\u4e8e\u6240\u4f7f\u7528\u7684\u7684\u8ba4\u8bc1\u7b56\u7565\uff0c\u4f46\u5b83\u901a\u5e38\u53ef\u4ee5\u662f\u8bf7\u6c42\u88ab\u8ba4\u8bc1\u7684token\u7684\u5b9e\u4f8b\u3002 \u5982\u679c\u8bf7\u6c42\u672a\u8ba4\u8bc1\u6216\u8005\u6ca1\u6709\u5176\u4ed6\u4e0a\u4e0b\u6587\uff0c\u5219 request.auth \u7684\u9ed8\u8ba4\u503c\u4e3a None . \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 authentication documentation .","title":".auth"},{"location":"api-guide/requests_zh/#authenticators","text":"APIView \u7c7b\u6216 @api_view \u88c5\u9970\u5668\u5c06\u6839\u636e\u5728view\u4e2d\u8bbe\u7f6e\u7684 authentication_classes \u6216\u57fa\u4e8e DEFAULT_AUTHENTICATORS \u8bbe\u7f6e\uff0c\u786e\u4fdd\u6b64\u5c5e\u6027\u81ea\u52a8\u8bbe\u7f6e\u4e3a Authentication \u5b9e\u4f8b\u7684\u5217\u8868\u3002 \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u8bbf\u95ee\u6b64\u5c5e\u6027\u3002","title":".authenticators"},{"location":"api-guide/requests_zh/#browser-enhancements","text":"REST framework \u652f\u6301\u4e00\u4e9b\u6d4f\u89c8\u5668\u589e\u5f3a\u529f\u80fd\uff0c\u4f8b\u5982\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684 PUT , PATCH \u548c DELETE \u8868\u5355\u3002","title":"Browser enhancements\uff08\u6d4f\u89c8\u5668\u589e\u5f3a\uff09"},{"location":"api-guide/requests_zh/#method","text":"request.method \u8fd4\u56de\u8bf7\u6c42\u7684HTTP\u65b9\u6cd5\u7684 \u5927\u5199 \u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 \u900f\u660e\u5730\u652f\u6301\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684 PUT , PATCH \u548c DELETE \u8868\u5355\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 browser enhancements documentation .","title":".method"},{"location":"api-guide/requests_zh/#content_type","text":"request.content_type \u8fd4\u56de\u8868\u793aHTTP\u8bf7\u6c42\u6b63\u6587\u7684\u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u5982\u679c\u672a\u63d0\u4f9b\u5a92\u4f53\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002 \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u5c06\u4f9d\u8d56\u4e8eREST framework\u7684\u9ed8\u8ba4\u8bf7\u6c42\u89e3\u6790\u884c\u4e3a\u3002 \u5982\u679c\u4f60\u786e\u5b9e\u9700\u8981\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 .content_type \u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 request.META.get('HTTP_CONTENT_TYPE') , \u56e0\u4e3a\u5b83\u4e3a\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u975e\u8868\u5355\u5185\u5bb9\u63d0\u4f9b\u4e86\u900f\u660e\u7684\u652f\u6301\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 browser enhancements documentation .","title":".content_type"},{"location":"api-guide/requests_zh/#stream","text":"request.stream \u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8bf7\u6c42\u4e3b\u4f53\u5185\u5bb9\u7684\u6d41\u3002 \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u5c06\u4f9d\u8d56\u4e8eREST framework\u7684\u9ed8\u8ba4\u8bf7\u6c42\u89e3\u6790\u884c\u4e3a\u3002","title":".stream"},{"location":"api-guide/requests_zh/#standard-httprequest-attributeshttprequest","text":"\u7531\u4e8e REST framework \u7684 Request \u6269\u5c55\u4e86 Django\u7684 HttpRequest , \u6240\u4ee5\u6240\u6709\u5176\u4ed6\u6807\u51c6\u5c5e\u6027\u548c\u65b9\u6cd5\u4e5f\u662f\u53ef\u7528\u7684\u3002\u4f8b\u5982 request.META \u548c request.session \u5b57\u5178\u6b63\u5e38\u53ef\u7528\u3002 \u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u5b9e\u73b0\u539f\u56e0\uff0c Request \u7c7b\u5e76\u4e0d\u4f1a\u4ece HttpRequest \u7c7b\u7ee7\u627f, \u800c\u662f\u4f7f\u7528\u5408\u6210\u6269\u5c55\u7c7b\u3002","title":"Standard HttpRequest attributes\uff08\u6807\u51c6HttpRequest\u5c5e\u6027\uff09"},{"location":"api-guide/responses/","text":"Responses Unlike basic HttpResponse objects, TemplateResponse objects retain the details of the context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process. \u2014 Django documentation REST framework supports HTTP content negotiation by providing a Response class which allows you to return content that can be rendered into multiple content types, depending on the client request. The Response class subclasses Django's SimpleTemplateResponse . Response objects are initialised with data, which should consist of native Python primitives. REST framework then uses standard HTTP content negotiation to determine how it should render the final response content. There's no requirement for you to use the Response class, you can also return regular HttpResponse or StreamingHttpResponse objects from your views if required. Using the Response class simply provides a nicer interface for returning content-negotiated Web API responses, that can be rendered to multiple formats. Unless you want to heavily customize REST framework for some reason, you should always use an APIView class or @api_view function for views that return Response objects. Doing so ensures that the view can perform content negotiation and select the appropriate renderer for the response, before it is returned from the view. Creating responses Response() Signature: Response(data, status=None, template_name=None, headers=None, content_type=None) Unlike regular HttpResponse objects, you do not instantiate Response objects with rendered content. Instead you pass in unrendered data, which may consist of any Python primitives. The renderers used by the Response class cannot natively handle complex datatypes such as Django model instances, so you need to serialize the data into primitive datatypes before creating the Response object. You can use REST framework's Serializer classes to perform this data serialization, or use your own custom serialization. Arguments: data : The serialized data for the response. status : A status code for the response. Defaults to 200. See also status codes . template_name : A template name to use if HTMLRenderer is selected. headers : A dictionary of HTTP headers to use in the response. content_type : The content type of the response. Typically, this will be set automatically by the renderer as determined by content negotiation, but there may be some cases where you need to specify the content type explicitly. Attributes .data The unrendered, serialized data of the response. .status_code The numeric status code of the HTTP response. .content The rendered content of the response. The .render() method must have been called before .content can be accessed. .template_name The template_name , if supplied. Only required if HTMLRenderer or some other custom template renderer is the accepted renderer for the response. .accepted_renderer The renderer instance that will be used to render the response. Set automatically by the APIView or @api_view immediately before the response is returned from the view. .accepted_media_type The media type that was selected by the content negotiation stage. Set automatically by the APIView or @api_view immediately before the response is returned from the view. .renderer_context A dictionary of additional context information that will be passed to the renderer's .render() method. Set automatically by the APIView or @api_view immediately before the response is returned from the view. Standard HttpResponse attributes The Response class extends SimpleTemplateResponse , and all the usual attributes and methods are also available on the response. For example you can set headers on the response in the standard way: response = Response() response['Cache-Control'] = 'no-cache' .render() Signature: .render() As with any other TemplateResponse , this method is called to render the serialized data of the response into the final response content. When .render() is called, the response content will be set to the result of calling the .render(data, accepted_media_type, renderer_context) method on the accepted_renderer instance. You won't typically need to call .render() yourself, as it's handled by Django's standard response cycle.","title":"Responses"},{"location":"api-guide/responses/#responses","text":"Unlike basic HttpResponse objects, TemplateResponse objects retain the details of the context that was provided by the view to compute the response. The final output of the response is not computed until it is needed, later in the response process. \u2014 Django documentation REST framework supports HTTP content negotiation by providing a Response class which allows you to return content that can be rendered into multiple content types, depending on the client request. The Response class subclasses Django's SimpleTemplateResponse . Response objects are initialised with data, which should consist of native Python primitives. REST framework then uses standard HTTP content negotiation to determine how it should render the final response content. There's no requirement for you to use the Response class, you can also return regular HttpResponse or StreamingHttpResponse objects from your views if required. Using the Response class simply provides a nicer interface for returning content-negotiated Web API responses, that can be rendered to multiple formats. Unless you want to heavily customize REST framework for some reason, you should always use an APIView class or @api_view function for views that return Response objects. Doing so ensures that the view can perform content negotiation and select the appropriate renderer for the response, before it is returned from the view.","title":"Responses"},{"location":"api-guide/responses/#creating-responses","text":"","title":"Creating responses"},{"location":"api-guide/responses/#response","text":"Signature: Response(data, status=None, template_name=None, headers=None, content_type=None) Unlike regular HttpResponse objects, you do not instantiate Response objects with rendered content. Instead you pass in unrendered data, which may consist of any Python primitives. The renderers used by the Response class cannot natively handle complex datatypes such as Django model instances, so you need to serialize the data into primitive datatypes before creating the Response object. You can use REST framework's Serializer classes to perform this data serialization, or use your own custom serialization. Arguments: data : The serialized data for the response. status : A status code for the response. Defaults to 200. See also status codes . template_name : A template name to use if HTMLRenderer is selected. headers : A dictionary of HTTP headers to use in the response. content_type : The content type of the response. Typically, this will be set automatically by the renderer as determined by content negotiation, but there may be some cases where you need to specify the content type explicitly.","title":"Response()"},{"location":"api-guide/responses/#attributes","text":"","title":"Attributes"},{"location":"api-guide/responses/#data","text":"The unrendered, serialized data of the response.","title":".data"},{"location":"api-guide/responses/#status_code","text":"The numeric status code of the HTTP response.","title":".status_code"},{"location":"api-guide/responses/#content","text":"The rendered content of the response. The .render() method must have been called before .content can be accessed.","title":".content"},{"location":"api-guide/responses/#template_name","text":"The template_name , if supplied. Only required if HTMLRenderer or some other custom template renderer is the accepted renderer for the response.","title":".template_name"},{"location":"api-guide/responses/#accepted_renderer","text":"The renderer instance that will be used to render the response. Set automatically by the APIView or @api_view immediately before the response is returned from the view.","title":".accepted_renderer"},{"location":"api-guide/responses/#accepted_media_type","text":"The media type that was selected by the content negotiation stage. Set automatically by the APIView or @api_view immediately before the response is returned from the view.","title":".accepted_media_type"},{"location":"api-guide/responses/#renderer_context","text":"A dictionary of additional context information that will be passed to the renderer's .render() method. Set automatically by the APIView or @api_view immediately before the response is returned from the view.","title":".renderer_context"},{"location":"api-guide/responses/#standard-httpresponse-attributes","text":"The Response class extends SimpleTemplateResponse , and all the usual attributes and methods are also available on the response. For example you can set headers on the response in the standard way: response = Response() response['Cache-Control'] = 'no-cache'","title":"Standard HttpResponse attributes"},{"location":"api-guide/responses/#render","text":"Signature: .render() As with any other TemplateResponse , this method is called to render the serialized data of the response into the final response content. When .render() is called, the response content will be set to the result of calling the .render(data, accepted_media_type, renderer_context) method on the accepted_renderer instance. You won't typically need to call .render() yourself, as it's handled by Django's standard response cycle.","title":".render()"},{"location":"api-guide/responses_zh/","text":"Responses \u4e0e\u57fa\u672c\u7684HttpResponse\u5bf9\u8c61\u4e0d\u540c, TemplateResponse \u5bf9\u8c61\u4fdd\u7559view\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\u7684\u8be6\u7ec6\u4fe1\u606f\u4ee5\u8ba1\u7b97 response. Response\u7684\u6700\u7ec8\u8f93\u51fa\u76f4\u5230\u5b83\u5728\u7a0d\u540e\u7684\u54cd\u5e94\u8fc7\u7a0b\u4e2d\u88ab\u9700\u8981\u624d\u4f1a\u8ba1\u7b97\u3002 \u2014 Django \u6587\u6863 REST framework \u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a Response \u7c7b\u6765\u652f\u6301 HTTP content negotiation\uff0c\u8be5\u7c7b\u5141\u8bb8\u4f60\u8fd4\u56de\u53ef\u4ee5\u5448\u73b0\u4e3a\u591a\u79cd\u5185\u5bb9\u7c7b\u578b\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002 Response \u7c7b\u662f Django\u4e2d SimpleTemplateResponse \u7c7b\u7684\u4e00\u4e2a\u5b50\u7c7b\u3002 Response \u5bf9\u8c61\u7528Python\u57fa\u672c\u6570\u636e\u7c7b\u578b\u521d\u59cb\u5316\u3002 \u7136\u540eREST framework \u4f7f\u7528\u6807\u51c6\u7684HTTP content negotiation \u6765\u786e\u5b9a\u5982\u4f55\u5448\u73b0\u6700\u7ec8\u7684\u54cd\u5e94\u5185\u5bb9\u3002 \u4f60\u5e76\u4e0d\u9700\u8981\u4e00\u5b9a\u662f\u7528 Response \u7c7b\uff0c\u4f60\u53ef\u4ee5\u4ece\u4f60\u7684\u89c6\u56fe\u8fd4\u56de\u5e38\u89c4\u7684 HttpResponse \u6216\u8005 StreamingHttpResponse \u5bf9\u8c61\u3002\u4f7f\u7528 Response \u7c7b\u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5448\u73b0\u591a\u79cd\u683c\u5f0f\u7684\u66f4\u597d\u7684\u754c\u9762\u6765\u8fd4\u56de content-negotiated \u7684 Web API \u54cd\u5e94\u3002 \u9664\u975e\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u4f60\u8981\u5bf9 REST framework \u505a\u5927\u91cf\u7684\u81ea\u5b9a\u4e49\uff0c\u5426\u5219\u4f60\u5e94\u8be5\u59cb\u7ec8\u5bf9\u8fd4\u56de\u5bf9\u8c61\u7684views\u4f7f\u7528 APIView \u7c7b\u6216\u8005 @api_view \u51fd\u6570\u3002\u8fd9\u6837\u505a\u53ef\u4ee5\u786e\u4fdd\u89c6\u56fe\u5728\u8fd4\u56de\u4e4b\u524d\u80fd\u591f\u6267\u884c content negotiation \u5e76\u4e14\u4e3a\u54cd\u5e94\u9009\u62e9\u9002\u5f53\u7684\u6e32\u67d3\u5668\u3002 \u521b\u5efa responses Response() \u7b7e\u540d: Response(data, status=None, template_name=None, headers=None, content_type=None) \u4e0e\u5e38\u89c4\u7684 HttpResponse \u5bf9\u8c61\u4e0d\u540c\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528\u6e32\u67d3\u5185\u5bb9\u6765\u5b9e\u4f8b\u5316\u4e00\u4e2a Response \u5bf9\u8c61\uff0c\u800c\u662f\u4f20\u9012\u672a\u6e32\u67d3\u7684\u6570\u636e\uff0c\u5305\u542b\u4efb\u4f55Python\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002 Response \u7c7b\u4f7f\u7528\u7684\u6e32\u67d3\u5668\u65e0\u6cd5\u81ea\u884c\u5904\u7406\u50cf Django model \u5b9e\u4f8b\u8fd9\u6837\u7684\u590d\u6742\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u5728\u521b\u5efa Response \u5bf9\u8c61\u4e4b\u524d\u5c06\u6570\u636e\u5e8f\u5217\u5316\u4e3a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 REST framework\u7684 Serializer \u7c7b\u6765\u6267\u884c\u6b64\u7c7b\u6570\u636e\u7684\u5e8f\u5217\u5316\uff0c\u6216\u8005\u4f7f\u7528\u4f60\u81ea\u5b9a\u4e49\u7684\u6765\u5e8f\u5217\u5316\u3002 \u53c2\u6570: data : response\u7684\u6570\u5217\u5316\u6570\u636e. status : response\u7684\u72b6\u6001\u7801\u3002\u9ed8\u8ba4\u662f200. \u53e6\u884c\u53c2\u9605 status codes . template_name : HTMLRenderer \u9009\u62e9\u8981\u4f7f\u7528\u7684\u6a21\u677f\u540d\u79f0\u3002 headers : A dictionary of HTTP headers to use in the response. content_type : response\u7684\u5185\u5bb9\u7c7b\u578b\u3002\u901a\u5e38\u7531\u6e32\u67d3\u5668\u81ea\u884c\u8bbe\u7f6e\uff0c\u7531content negotiation\u786e\u5b9a\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u660e\u786e\u6307\u5b9a\u5185\u5bb9\u7c7b\u578b\u3002 \u5c5e\u6027 .data Request \u5bf9\u8c61\u7684\u672a\u6e32\u67d3\u5185\u5bb9\u3002 .status_code HTTP \u54cd\u5e94\u7684\u6570\u5b57\u72b6\u6001\u5417\u3002 .content response\u7684\u5448\u73b0\u5185\u5bb9\u3002 .render() \u65b9\u6cd5\u5fc5\u987b\u5148\u8c03\u7528\u624d\u80fd\u8bbf\u95ee .content \u3002 .template_name template_name \u53ea\u6709\u5728\u4f7f\u7528 HTMLRenderer \u6216\u8005\u5176\u4ed6\u81ea\u5b9a\u4e49\u6a21\u677f\u4f5c\u4e3aresponse\u7684\u6e32\u67d3\u5668\u65f6\u624d\u9700\u8981\u63d0\u4f9b\u8be5\u5c5e\u6027\u3002 .accepted_renderer \u5c06\u7528\u4e8e\u5448\u73b0response\u7684render\u5b9e\u4f8b\u3002 \u81ea\u52a8\u901a\u8fc7 APIView \u6216\u8005 @api_view \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002 .accepted_media_type \u7531 content negotiation \u9636\u6bb5\u9009\u62e9\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u81ea\u52a8\u901a\u8fc7 APIView \u6216\u8005 @api_view \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002 .renderer_context \u4e00\u4e2a\u5c06\u4f20\u9012\u7ed9\u6e32\u67d3\u5668\u7684 .render() \u65b9\u6cd5\u7684\u9644\u52a0\u4e0a\u4e0b\u6587\u4fe1\u606f\u5b57\u5178\u3002 \u81ea\u52a8\u901a\u8fc7 APIView \u6216\u8005 @api_view \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002 \u6807\u51c6\u7684HttpResponse \u5c5e\u6027 Response \u7c7b\u6269\u5c55\u4e86 SimpleTemplateResponse \uff0c\u5e76\u4e14\u6240\u6709\u5e38\u7528\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u90fd\u662f\u63d0\u4f9b\u7684\u3002\u6bd4\u5982\u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684\u65b9\u6cd5\u8bbe\u7f6eresponse\u7684header\u4fe1\u606f\uff1a response = Response() response['Cache-Control'] = 'no-cache' .render() Signature: .render() \u548c\u5176\u4ed6\u7684 TemplateResponse \u4e00\u6837\uff0c\u8c03\u7528\u8be5\u65b9\u6cd5\u5c06response\u7684\u5e8f\u5217\u5316\u6570\u636e\u5448\u73b0\u4e3a\u6700\u7ec8\u7684response\u5185\u5bb9\u3002 \u5f53 .render() \u88ab\u8c03\u7528\u65f6\uff0c response\u7684\u5185\u5bb9\u5c06\u88ab\u8bbe\u7f6e\u6210\u5728 accepted_renderer \u5b9e\u4f8b\u4e0a\u8c03\u7528 .render(data, accepted_media_type, renderer_context) \u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\u3002 \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u81ea\u5df1\u8c03\u7528 .render() \uff0c\u56e0\u4e3a\u5b83\u662f\u7531Django\u7684\u6807\u51c6\u54cd\u5e94\u5468\u671f\u6765\u5904\u7406\u7684\u3002","title":"Responses"},{"location":"api-guide/responses_zh/#responses","text":"\u4e0e\u57fa\u672c\u7684HttpResponse\u5bf9\u8c61\u4e0d\u540c, TemplateResponse \u5bf9\u8c61\u4fdd\u7559view\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\u7684\u8be6\u7ec6\u4fe1\u606f\u4ee5\u8ba1\u7b97 response. Response\u7684\u6700\u7ec8\u8f93\u51fa\u76f4\u5230\u5b83\u5728\u7a0d\u540e\u7684\u54cd\u5e94\u8fc7\u7a0b\u4e2d\u88ab\u9700\u8981\u624d\u4f1a\u8ba1\u7b97\u3002 \u2014 Django \u6587\u6863 REST framework \u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a Response \u7c7b\u6765\u652f\u6301 HTTP content negotiation\uff0c\u8be5\u7c7b\u5141\u8bb8\u4f60\u8fd4\u56de\u53ef\u4ee5\u5448\u73b0\u4e3a\u591a\u79cd\u5185\u5bb9\u7c7b\u578b\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002 Response \u7c7b\u662f Django\u4e2d SimpleTemplateResponse \u7c7b\u7684\u4e00\u4e2a\u5b50\u7c7b\u3002 Response \u5bf9\u8c61\u7528Python\u57fa\u672c\u6570\u636e\u7c7b\u578b\u521d\u59cb\u5316\u3002 \u7136\u540eREST framework \u4f7f\u7528\u6807\u51c6\u7684HTTP content negotiation \u6765\u786e\u5b9a\u5982\u4f55\u5448\u73b0\u6700\u7ec8\u7684\u54cd\u5e94\u5185\u5bb9\u3002 \u4f60\u5e76\u4e0d\u9700\u8981\u4e00\u5b9a\u662f\u7528 Response \u7c7b\uff0c\u4f60\u53ef\u4ee5\u4ece\u4f60\u7684\u89c6\u56fe\u8fd4\u56de\u5e38\u89c4\u7684 HttpResponse \u6216\u8005 StreamingHttpResponse \u5bf9\u8c61\u3002\u4f7f\u7528 Response \u7c7b\u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5448\u73b0\u591a\u79cd\u683c\u5f0f\u7684\u66f4\u597d\u7684\u754c\u9762\u6765\u8fd4\u56de content-negotiated \u7684 Web API \u54cd\u5e94\u3002 \u9664\u975e\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u4f60\u8981\u5bf9 REST framework \u505a\u5927\u91cf\u7684\u81ea\u5b9a\u4e49\uff0c\u5426\u5219\u4f60\u5e94\u8be5\u59cb\u7ec8\u5bf9\u8fd4\u56de\u5bf9\u8c61\u7684views\u4f7f\u7528 APIView \u7c7b\u6216\u8005 @api_view \u51fd\u6570\u3002\u8fd9\u6837\u505a\u53ef\u4ee5\u786e\u4fdd\u89c6\u56fe\u5728\u8fd4\u56de\u4e4b\u524d\u80fd\u591f\u6267\u884c content negotiation \u5e76\u4e14\u4e3a\u54cd\u5e94\u9009\u62e9\u9002\u5f53\u7684\u6e32\u67d3\u5668\u3002","title":"Responses"},{"location":"api-guide/responses_zh/#responses_1","text":"","title":"\u521b\u5efa responses"},{"location":"api-guide/responses_zh/#response","text":"\u7b7e\u540d: Response(data, status=None, template_name=None, headers=None, content_type=None) \u4e0e\u5e38\u89c4\u7684 HttpResponse \u5bf9\u8c61\u4e0d\u540c\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528\u6e32\u67d3\u5185\u5bb9\u6765\u5b9e\u4f8b\u5316\u4e00\u4e2a Response \u5bf9\u8c61\uff0c\u800c\u662f\u4f20\u9012\u672a\u6e32\u67d3\u7684\u6570\u636e\uff0c\u5305\u542b\u4efb\u4f55Python\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002 Response \u7c7b\u4f7f\u7528\u7684\u6e32\u67d3\u5668\u65e0\u6cd5\u81ea\u884c\u5904\u7406\u50cf Django model \u5b9e\u4f8b\u8fd9\u6837\u7684\u590d\u6742\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u5728\u521b\u5efa Response \u5bf9\u8c61\u4e4b\u524d\u5c06\u6570\u636e\u5e8f\u5217\u5316\u4e3a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 REST framework\u7684 Serializer \u7c7b\u6765\u6267\u884c\u6b64\u7c7b\u6570\u636e\u7684\u5e8f\u5217\u5316\uff0c\u6216\u8005\u4f7f\u7528\u4f60\u81ea\u5b9a\u4e49\u7684\u6765\u5e8f\u5217\u5316\u3002 \u53c2\u6570: data : response\u7684\u6570\u5217\u5316\u6570\u636e. status : response\u7684\u72b6\u6001\u7801\u3002\u9ed8\u8ba4\u662f200. \u53e6\u884c\u53c2\u9605 status codes . template_name : HTMLRenderer \u9009\u62e9\u8981\u4f7f\u7528\u7684\u6a21\u677f\u540d\u79f0\u3002 headers : A dictionary of HTTP headers to use in the response. content_type : response\u7684\u5185\u5bb9\u7c7b\u578b\u3002\u901a\u5e38\u7531\u6e32\u67d3\u5668\u81ea\u884c\u8bbe\u7f6e\uff0c\u7531content negotiation\u786e\u5b9a\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u660e\u786e\u6307\u5b9a\u5185\u5bb9\u7c7b\u578b\u3002","title":"Response()"},{"location":"api-guide/responses_zh/#_1","text":"","title":"\u5c5e\u6027"},{"location":"api-guide/responses_zh/#data","text":"Request \u5bf9\u8c61\u7684\u672a\u6e32\u67d3\u5185\u5bb9\u3002","title":".data"},{"location":"api-guide/responses_zh/#status_code","text":"HTTP \u54cd\u5e94\u7684\u6570\u5b57\u72b6\u6001\u5417\u3002","title":".status_code"},{"location":"api-guide/responses_zh/#content","text":"response\u7684\u5448\u73b0\u5185\u5bb9\u3002 .render() \u65b9\u6cd5\u5fc5\u987b\u5148\u8c03\u7528\u624d\u80fd\u8bbf\u95ee .content \u3002","title":".content"},{"location":"api-guide/responses_zh/#template_name","text":"template_name \u53ea\u6709\u5728\u4f7f\u7528 HTMLRenderer \u6216\u8005\u5176\u4ed6\u81ea\u5b9a\u4e49\u6a21\u677f\u4f5c\u4e3aresponse\u7684\u6e32\u67d3\u5668\u65f6\u624d\u9700\u8981\u63d0\u4f9b\u8be5\u5c5e\u6027\u3002","title":".template_name"},{"location":"api-guide/responses_zh/#accepted_renderer","text":"\u5c06\u7528\u4e8e\u5448\u73b0response\u7684render\u5b9e\u4f8b\u3002 \u81ea\u52a8\u901a\u8fc7 APIView \u6216\u8005 @api_view \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002","title":".accepted_renderer"},{"location":"api-guide/responses_zh/#accepted_media_type","text":"\u7531 content negotiation \u9636\u6bb5\u9009\u62e9\u7684\u5a92\u4f53\u7c7b\u578b\u3002 \u81ea\u52a8\u901a\u8fc7 APIView \u6216\u8005 @api_view \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002","title":".accepted_media_type"},{"location":"api-guide/responses_zh/#renderer_context","text":"\u4e00\u4e2a\u5c06\u4f20\u9012\u7ed9\u6e32\u67d3\u5668\u7684 .render() \u65b9\u6cd5\u7684\u9644\u52a0\u4e0a\u4e0b\u6587\u4fe1\u606f\u5b57\u5178\u3002 \u81ea\u52a8\u901a\u8fc7 APIView \u6216\u8005 @api_view \u5728view\u8fd4\u56deresponse\u4e4b\u524d\u8bbe\u7f6e\u3002","title":".renderer_context"},{"location":"api-guide/responses_zh/#httpresponse","text":"Response \u7c7b\u6269\u5c55\u4e86 SimpleTemplateResponse \uff0c\u5e76\u4e14\u6240\u6709\u5e38\u7528\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u90fd\u662f\u63d0\u4f9b\u7684\u3002\u6bd4\u5982\u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684\u65b9\u6cd5\u8bbe\u7f6eresponse\u7684header\u4fe1\u606f\uff1a response = Response() response['Cache-Control'] = 'no-cache'","title":"\u6807\u51c6\u7684HttpResponse \u5c5e\u6027"},{"location":"api-guide/responses_zh/#render","text":"Signature: .render() \u548c\u5176\u4ed6\u7684 TemplateResponse \u4e00\u6837\uff0c\u8c03\u7528\u8be5\u65b9\u6cd5\u5c06response\u7684\u5e8f\u5217\u5316\u6570\u636e\u5448\u73b0\u4e3a\u6700\u7ec8\u7684response\u5185\u5bb9\u3002 \u5f53 .render() \u88ab\u8c03\u7528\u65f6\uff0c response\u7684\u5185\u5bb9\u5c06\u88ab\u8bbe\u7f6e\u6210\u5728 accepted_renderer \u5b9e\u4f8b\u4e0a\u8c03\u7528 .render(data, accepted_media_type, renderer_context) \u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\u3002 \u4f60\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u81ea\u5df1\u8c03\u7528 .render() \uff0c\u56e0\u4e3a\u5b83\u662f\u7531Django\u7684\u6807\u51c6\u54cd\u5e94\u5468\u671f\u6765\u5904\u7406\u7684\u3002","title":".render()"},{"location":"api-guide/reverse/","text":"Returning URLs The central feature that distinguishes the REST architectural style from other network-based styles is its emphasis on a uniform interface between components. \u2014 Roy Fielding, Architectural Styles and the Design of Network-based Software Architectures As a rule, it's probably better practice to return absolute URIs from your Web APIs, such as http://example.com/foobar , rather than returning relative URIs, such as /foobar . The advantages of doing so are: It's more explicit. It leaves less work for your API clients. There's no ambiguity about the meaning of the string when it's found in representations such as JSON that do not have a native URI type. It makes it easy to do things like markup HTML representations with hyperlinks. REST framework provides two utility functions to make it more simple to return absolute URIs from your Web API. There's no requirement for you to use them, but if you do then the self-describing API will be able to automatically hyperlink its output for you, which makes browsing the API much easier. reverse Signature: reverse(viewname, *args, **kwargs) Has the same behavior as django.urls.reverse , except that it returns a fully qualified URL, using the request to determine the host and port. You should include the request as a keyword argument to the function, for example: from rest_framework.reverse import reverse from rest_framework.views import APIView from django.utils.timezone import now class APIRootView(APIView): def get(self, request): year = now().year data = { ... 'year-summary-url': reverse('year-summary', args=[year], request=request) } return Response(data) reverse_lazy Signature: reverse_lazy(viewname, *args, **kwargs) Has the same behavior as django.urls.reverse_lazy , except that it returns a fully qualified URL, using the request to determine the host and port. As with the reverse function, you should include the request as a keyword argument to the function, for example: api_root = reverse_lazy('api-root', request=request)","title":"Returning URLs"},{"location":"api-guide/reverse/#returning-urls","text":"The central feature that distinguishes the REST architectural style from other network-based styles is its emphasis on a uniform interface between components. \u2014 Roy Fielding, Architectural Styles and the Design of Network-based Software Architectures As a rule, it's probably better practice to return absolute URIs from your Web APIs, such as http://example.com/foobar , rather than returning relative URIs, such as /foobar . The advantages of doing so are: It's more explicit. It leaves less work for your API clients. There's no ambiguity about the meaning of the string when it's found in representations such as JSON that do not have a native URI type. It makes it easy to do things like markup HTML representations with hyperlinks. REST framework provides two utility functions to make it more simple to return absolute URIs from your Web API. There's no requirement for you to use them, but if you do then the self-describing API will be able to automatically hyperlink its output for you, which makes browsing the API much easier.","title":"Returning URLs"},{"location":"api-guide/reverse/#reverse","text":"Signature: reverse(viewname, *args, **kwargs) Has the same behavior as django.urls.reverse , except that it returns a fully qualified URL, using the request to determine the host and port. You should include the request as a keyword argument to the function, for example: from rest_framework.reverse import reverse from rest_framework.views import APIView from django.utils.timezone import now class APIRootView(APIView): def get(self, request): year = now().year data = { ... 'year-summary-url': reverse('year-summary', args=[year], request=request) } return Response(data)","title":"reverse"},{"location":"api-guide/reverse/#reverse_lazy","text":"Signature: reverse_lazy(viewname, *args, **kwargs) Has the same behavior as django.urls.reverse_lazy , except that it returns a fully qualified URL, using the request to determine the host and port. As with the reverse function, you should include the request as a keyword argument to the function, for example: api_root = reverse_lazy('api-root', request=request)","title":"reverse_lazy"},{"location":"api-guide/reverse_zh/","text":"Returning URLs \uff08\u8fd4\u56deURL\uff09 The central feature that distinguishes the REST architectural style from other network-based styles is its emphasis on a uniform interface between components. \u2014 Roy Fielding, Architectural Styles and the Design of Network-based Software Architectures \u901a\u5e38\uff0c\u4ecewebapi\u8fd4\u56de\u7edd\u5bf9uri\u53ef\u80fd\u662f\u66f4\u597d\u7684\u505a\u6cd5\uff0c\u4f8b\u5982 http://example.com/foobar \uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u76f8\u5bf9url\uff0c\u4f8b\u5982 /foobar \u3002 \u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff1a * \u66f4\u52a0\u660e\u786e\u3002 * \u4e3aAPI\u5ba2\u6237\u7aef\u7559\u4e0b\u4e86\u66f4\u5c11\u7684\u5de5\u4f5c\u91cf\u3002 * \u5f53\u5728JSON\u7b49\u6ca1\u6709\u672c\u673aURI\u7c7b\u578b\u7684\u8868\u793a\u4e2d\u627e\u5230\u5b57\u7b26\u4e32\u65f6\uff0c\u5b83\u7684\u542b\u4e49\u6ca1\u6709\u4efb\u4f55\u6b67\u4e49\u3002 * \u4f7f\u5f97\u4f7f\u7528\u8d85\u94fe\u63a5\u6807\u8bb0HTML\u8868\u793a\u4e4b\u7c7b\u7684\u4e8b\u60c5\u53d8\u5f97\u5f88\u5bb9\u6613\u3002 REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5b9e\u7528\u7684\u51fd\u6570\uff0c\u4f7f\u4ecewebapi\u8fd4\u56de\u7edd\u5bf9URI\u53d8\u5f97\u66f4\u52a0\u7b80\u4fbf\u3002 \u4f7f\u7528\u5b83\u4eec\u4e0d\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u6837\u505a\uff0c\u90a3\u4e48\u81ea\u63cf\u8ff0API\u5c06\u80fd\u591f\u81ea\u52a8\u5c06\u8f93\u51fa\u8f6c\u4e3a\u8d85\u94fe\u63a5\uff0c\u8fd9\u4f7f\u5f97\u6d4f\u89c8API\u66f4\u52a0\u5bb9\u6613\u3002 reverse Signature: reverse(viewname, *args, **kwargs) Has the same behavior as django.urls.reverse , except that it returns a fully qualified URL, using the request to determine the host and port. \u4e0e django.urls.reverse \u5177\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u4f46\u5b83\u4f7f\u7528\u8bf7\u6c42\u6765\u786e\u5b9a\u4e3b\u673a\u548c\u7aef\u53e3,\u8fd4\u56de\u4e00\u4e2a\u5b8c\u5168\u5408\u683c\u7684URL\uff0c\u3002 You should include the request as a keyword argument to the function, for example: \u5e94\u5f53 \u5c06\u8bf7\u6c42\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u5305\u542b\u5230 \u51fd\u6570\u4e2d\uff0c\u4f8b\u5982\uff1a from rest_framework.reverse import reverse from rest_framework.views import APIView from django.utils.timezone import now class APIRootView(APIView): def get(self, request): year = now().year data = { ... 'year-summary-url': reverse('year-summary', args=[year], request=request) } return Response(data) reverse_lazy Signature: reverse_lazy(viewname, *args, **kwargs) \u4e0e django.urls.reverse_lazy \u5177\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u4f46\u5b83\u4f7f\u7528\u8bf7\u6c42\u6765\u786e\u5b9a\u4e3b\u673a\u548c\u7aef\u53e3,\u8fd4\u56de\u4e00\u4e2a\u5b8c\u5168\u5408\u683c\u7684URL\u3002 \u4e0e reverse \u51fd\u6570\u4e00\u6837\uff0c\u5e94\u8be5 \u5c06\u8bf7\u6c42\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u5305\u542b \u5230\u51fd\u6570\u4e2d\uff0c\u4f8b\u5982\uff1a api_root = reverse_lazy('api-root', request=request)","title":"Returning URLs \uff08\u8fd4\u56deURL\uff09"},{"location":"api-guide/reverse_zh/#returning-urls-url","text":"The central feature that distinguishes the REST architectural style from other network-based styles is its emphasis on a uniform interface between components. \u2014 Roy Fielding, Architectural Styles and the Design of Network-based Software Architectures \u901a\u5e38\uff0c\u4ecewebapi\u8fd4\u56de\u7edd\u5bf9uri\u53ef\u80fd\u662f\u66f4\u597d\u7684\u505a\u6cd5\uff0c\u4f8b\u5982 http://example.com/foobar \uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u76f8\u5bf9url\uff0c\u4f8b\u5982 /foobar \u3002 \u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff1a * \u66f4\u52a0\u660e\u786e\u3002 * \u4e3aAPI\u5ba2\u6237\u7aef\u7559\u4e0b\u4e86\u66f4\u5c11\u7684\u5de5\u4f5c\u91cf\u3002 * \u5f53\u5728JSON\u7b49\u6ca1\u6709\u672c\u673aURI\u7c7b\u578b\u7684\u8868\u793a\u4e2d\u627e\u5230\u5b57\u7b26\u4e32\u65f6\uff0c\u5b83\u7684\u542b\u4e49\u6ca1\u6709\u4efb\u4f55\u6b67\u4e49\u3002 * \u4f7f\u5f97\u4f7f\u7528\u8d85\u94fe\u63a5\u6807\u8bb0HTML\u8868\u793a\u4e4b\u7c7b\u7684\u4e8b\u60c5\u53d8\u5f97\u5f88\u5bb9\u6613\u3002 REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5b9e\u7528\u7684\u51fd\u6570\uff0c\u4f7f\u4ecewebapi\u8fd4\u56de\u7edd\u5bf9URI\u53d8\u5f97\u66f4\u52a0\u7b80\u4fbf\u3002 \u4f7f\u7528\u5b83\u4eec\u4e0d\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u6837\u505a\uff0c\u90a3\u4e48\u81ea\u63cf\u8ff0API\u5c06\u80fd\u591f\u81ea\u52a8\u5c06\u8f93\u51fa\u8f6c\u4e3a\u8d85\u94fe\u63a5\uff0c\u8fd9\u4f7f\u5f97\u6d4f\u89c8API\u66f4\u52a0\u5bb9\u6613\u3002","title":"Returning URLs \uff08\u8fd4\u56deURL\uff09"},{"location":"api-guide/reverse_zh/#reverse","text":"Signature: reverse(viewname, *args, **kwargs) Has the same behavior as django.urls.reverse , except that it returns a fully qualified URL, using the request to determine the host and port. \u4e0e django.urls.reverse \u5177\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u4f46\u5b83\u4f7f\u7528\u8bf7\u6c42\u6765\u786e\u5b9a\u4e3b\u673a\u548c\u7aef\u53e3,\u8fd4\u56de\u4e00\u4e2a\u5b8c\u5168\u5408\u683c\u7684URL\uff0c\u3002 You should include the request as a keyword argument to the function, for example: \u5e94\u5f53 \u5c06\u8bf7\u6c42\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u5305\u542b\u5230 \u51fd\u6570\u4e2d\uff0c\u4f8b\u5982\uff1a from rest_framework.reverse import reverse from rest_framework.views import APIView from django.utils.timezone import now class APIRootView(APIView): def get(self, request): year = now().year data = { ... 'year-summary-url': reverse('year-summary', args=[year], request=request) } return Response(data)","title":"reverse"},{"location":"api-guide/reverse_zh/#reverse_lazy","text":"Signature: reverse_lazy(viewname, *args, **kwargs) \u4e0e django.urls.reverse_lazy \u5177\u6709\u76f8\u540c\u7684\u884c\u4e3a\uff0c\u4f46\u5b83\u4f7f\u7528\u8bf7\u6c42\u6765\u786e\u5b9a\u4e3b\u673a\u548c\u7aef\u53e3,\u8fd4\u56de\u4e00\u4e2a\u5b8c\u5168\u5408\u683c\u7684URL\u3002 \u4e0e reverse \u51fd\u6570\u4e00\u6837\uff0c\u5e94\u8be5 \u5c06\u8bf7\u6c42\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u5305\u542b \u5230\u51fd\u6570\u4e2d\uff0c\u4f8b\u5982\uff1a api_root = reverse_lazy('api-root', request=request)","title":"reverse_lazy"},{"location":"api-guide/routers/","text":"Routers Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. Instead of declaring separate routes for your index... a resourceful route declares them in a single line of code. \u2014 Ruby on Rails Documentation Some Web frameworks such as Rails provide functionality for automatically determining how the URLs for an application should be mapped to the logic that deals with handling incoming requests. REST framework adds support for automatic URL routing to Django, and provides you with a simple, quick and consistent way of wiring your view logic to a set of URLs. Usage Here's an example of a simple URL conf, that uses SimpleRouter . from rest_framework import routers router = routers.SimpleRouter() router.register(r'users', UserViewSet) router.register(r'accounts', AccountViewSet) urlpatterns = router.urls There are two mandatory arguments to the register() method: prefix - The URL prefix to use for this set of routes. viewset - The viewset class. Optionally, you may also specify an additional argument: basename - The base to use for the URL names that are created. If unset the basename will be automatically generated based on the queryset attribute of the viewset, if it has one. Note that if the viewset does not include a queryset attribute then you must set basename when registering the viewset. The example above would generate the following URL patterns: URL pattern: ^users/$ Name: 'user-list' URL pattern: ^users/{pk}/$ Name: 'user-detail' URL pattern: ^accounts/$ Name: 'account-list' URL pattern: ^accounts/{pk}/$ Name: 'account-detail' Note : The basename argument is used to specify the initial part of the view name pattern. In the example above, that's the user or account part. Typically you won't need to specify the basename argument, but if you have a viewset where you've defined a custom get_queryset method, then the viewset may not have a .queryset attribute set. If you try to register that viewset you'll see an error like this: 'basename' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute. This means you'll need to explicitly set the basename argument when registering the viewset, as it could not be automatically determined from the model name. Using include with routers The .urls attribute on a router instance is simply a standard list of URL patterns. There are a number of different styles for how you can include these URLs. For example, you can append router.urls to a list of existing views... router = routers.SimpleRouter() router.register(r'users', UserViewSet) router.register(r'accounts', AccountViewSet) urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), ] urlpatterns += router.urls Alternatively you can use Django's include function, like so... urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), url(r'^', include(router.urls)), ] You may use include with an application namespace: urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), url(r'^api/', include((router.urls, 'app_name'))), ] Or both an application and instance namespace: urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), url(r'^api/', include((router.urls, 'app_name'), namespace='instance_name')), ] See Django's URL namespaces docs and the include API reference for more details. Note : If using namespacing with hyperlinked serializers you'll also need to ensure that any view_name parameters on the serializers correctly reflect the namespace. In the examples above you'd need to include a parameter such as view_name='app_name:user-detail' for serializer fields hyperlinked to the user detail view. The automatic view_name generation uses a pattern like %(model_name)-detail . Unless your models names actually clash you may be better off not namespacing your Django REST Framework views when using hyperlinked serializers. Routing for extra actions A viewset may mark extra actions for routing by decorating a method with the @action decorator. These extra actions will be included in the generated routes. For example, given the set_password method on the UserViewSet class: from myapp.permissions import IsAdminOrIsSelf from rest_framework.decorators import action class UserViewSet(ModelViewSet): ... @action(methods=['post'], detail=True, permission_classes=[IsAdminOrIsSelf]) def set_password(self, request, pk=None): ... The following route would be generated: URL pattern: ^users/{pk}/set_password/$ URL name: 'user-set-password' By default, the URL pattern is based on the method name, and the URL name is the combination of the ViewSet.basename and the hyphenated method name. If you don't want to use the defaults for either of these values, you can instead provide the url_path and url_name arguments to the @action decorator. For example, if you want to change the URL for our custom action to ^users/{pk}/change-password/$ , you could write: from myapp.permissions import IsAdminOrIsSelf from rest_framework.decorators import action class UserViewSet(ModelViewSet): ... @action(methods=['post'], detail=True, permission_classes=[IsAdminOrIsSelf], url_path='change-password', url_name='change_password') def set_password(self, request, pk=None): ... The above example would now generate the following URL pattern: URL path: ^users/{pk}/change-password/$ URL name: 'user-change_password' API Guide SimpleRouter This router includes routes for the standard set of list , create , retrieve , update , partial_update and destroy actions. The viewset can also mark additional methods to be routed, using the @action decorator. URL Style HTTP Method Action URL Name {prefix}/ GET list {basename}-list POST create {prefix}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/ GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name} By default the URLs created by SimpleRouter are appended with a trailing slash. This behavior can be modified by setting the trailing_slash argument to False when instantiating the router. For example: router = SimpleRouter(trailing_slash=False) Trailing slashes are conventional in Django, but are not used by default in some other frameworks such as Rails. Which style you choose to use is largely a matter of preference, although some javascript frameworks may expect a particular routing style. The router will match lookup values containing any characters except slashes and period characters. For a more restrictive (or lenient) lookup pattern, set the lookup_value_regex attribute on the viewset. For example, you can limit the lookup to valid UUIDs: class MyModelViewSet(mixins.RetrieveModelMixin, viewsets.GenericViewSet): lookup_field = 'my_model_id' lookup_value_regex = '[0-9a-f]{32}' DefaultRouter This router is similar to SimpleRouter as above, but additionally includes a default API root view, that returns a response containing hyperlinks to all the list views. It also generates routes for optional .json style format suffixes. URL Style HTTP Method Action URL Name [.format] GET automatically generated root view api-root {prefix}/[.format] GET list {basename}-list POST create {prefix}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/[.format] GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name} As with SimpleRouter the trailing slashes on the URL routes can be removed by setting the trailing_slash argument to False when instantiating the router. router = DefaultRouter(trailing_slash=False) Custom Routers Implementing a custom router isn't something you'd need to do very often, but it can be useful if you have specific requirements about how the URLs for your API are structured. Doing so allows you to encapsulate the URL structure in a reusable way that ensures you don't have to write your URL patterns explicitly for each new view. The simplest way to implement a custom router is to subclass one of the existing router classes. The .routes attribute is used to template the URL patterns that will be mapped to each viewset. The .routes attribute is a list of Route named tuples. The arguments to the Route named tuple are: url : A string representing the URL to be routed. May include the following format strings: {prefix} - The URL prefix to use for this set of routes. {lookup} - The lookup field used to match against a single instance. {trailing_slash} - Either a '/' or an empty string, depending on the trailing_slash argument. mapping : A mapping of HTTP method names to the view methods name : The name of the URL as used in reverse calls. May include the following format string: {basename} - The base to use for the URL names that are created. initkwargs : A dictionary of any additional arguments that should be passed when instantiating the view. Note that the detail , basename , and suffix arguments are reserved for viewset introspection and are also used by the browsable API to generate the view name and breadcrumb links. Customizing dynamic routes You can also customize how the @action decorator is routed. Include the DynamicRoute named tuple in the .routes list, setting the detail argument as appropriate for the list-based and detail-based routes. In addition to detail , the arguments to DynamicRoute are: url : A string representing the URL to be routed. May include the same format strings as Route , and additionally accepts the {url_path} format string. name : The name of the URL as used in reverse calls. May include the following format strings: {basename} - The base to use for the URL names that are created. {url_name} - The url_name provided to the @action . initkwargs : A dictionary of any additional arguments that should be passed when instantiating the view. Example The following example will only route to the list and retrieve actions, and does not use the trailing slash convention. from rest_framework.routers import Route, DynamicRoute, SimpleRouter class CustomReadOnlyRouter(SimpleRouter): \"\"\" A router for read-only APIs, which doesn't use trailing slashes. \"\"\" routes = [ Route( url=r'^{prefix}$', mapping={'get': 'list'}, name='{basename}-list', detail=False, initkwargs={'suffix': 'List'} ), Route( url=r'^{prefix}/{lookup}$', mapping={'get': 'retrieve'}, name='{basename}-detail', detail=True, initkwargs={'suffix': 'Detail'} ), DynamicRoute( url=r'^{prefix}/{lookup}/{url_path}$', name='{basename}-{url_name}', detail=True, initkwargs={} ) ] Let's take a look at the routes our CustomReadOnlyRouter would generate for a simple viewset. views.py : class UserViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" A viewset that provides the standard actions \"\"\" queryset = User.objects.all() serializer_class = UserSerializer lookup_field = 'username' @action(detail=True) def group_names(self, request, pk=None): \"\"\" Returns a list of all the group names that the given user belongs to. \"\"\" user = self.get_object() groups = user.groups.all() return Response([group.name for group in groups]) urls.py : router = CustomReadOnlyRouter() router.register('users', UserViewSet) urlpatterns = router.urls The following mappings would be generated... URL HTTP Method Action URL Name /users GET list user-list /users/{username} GET retrieve user-detail /users/{username}/group_names GET group_names user-group-names For another example of setting the .routes attribute, see the source code for the SimpleRouter class. Advanced custom routers If you want to provide totally custom behavior, you can override BaseRouter and override the get_urls(self) method. The method should inspect the registered viewsets and return a list of URL patterns. The registered prefix, viewset and basename tuples may be inspected by accessing the self.registry attribute. You may also want to override the get_default_basename(self, viewset) method, or else always explicitly set the basename argument when registering your viewsets with the router. Third Party Packages The following third party packages are also available. DRF Nested Routers The drf-nested-routers package provides routers and relationship fields for working with nested resources. ModelRouter (wq.db.rest) The wq.db package provides an advanced ModelRouter class (and singleton instance) that extends DefaultRouter with a register_model() API. Much like Django's admin.site.register , the only required argument to rest.router.register_model is a model class. Reasonable defaults for a url prefix, serializer, and viewset will be inferred from the model and global configuration. from wq.db import rest from myapp.models import MyModel rest.router.register_model(MyModel) DRF-extensions The DRF-extensions package provides routers for creating nested viewsets , collection level controllers with customizable endpoint names .","title":"Routers"},{"location":"api-guide/routers/#routers","text":"Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. Instead of declaring separate routes for your index... a resourceful route declares them in a single line of code. \u2014 Ruby on Rails Documentation Some Web frameworks such as Rails provide functionality for automatically determining how the URLs for an application should be mapped to the logic that deals with handling incoming requests. REST framework adds support for automatic URL routing to Django, and provides you with a simple, quick and consistent way of wiring your view logic to a set of URLs.","title":"Routers"},{"location":"api-guide/routers/#usage","text":"Here's an example of a simple URL conf, that uses SimpleRouter . from rest_framework import routers router = routers.SimpleRouter() router.register(r'users', UserViewSet) router.register(r'accounts', AccountViewSet) urlpatterns = router.urls There are two mandatory arguments to the register() method: prefix - The URL prefix to use for this set of routes. viewset - The viewset class. Optionally, you may also specify an additional argument: basename - The base to use for the URL names that are created. If unset the basename will be automatically generated based on the queryset attribute of the viewset, if it has one. Note that if the viewset does not include a queryset attribute then you must set basename when registering the viewset. The example above would generate the following URL patterns: URL pattern: ^users/$ Name: 'user-list' URL pattern: ^users/{pk}/$ Name: 'user-detail' URL pattern: ^accounts/$ Name: 'account-list' URL pattern: ^accounts/{pk}/$ Name: 'account-detail' Note : The basename argument is used to specify the initial part of the view name pattern. In the example above, that's the user or account part. Typically you won't need to specify the basename argument, but if you have a viewset where you've defined a custom get_queryset method, then the viewset may not have a .queryset attribute set. If you try to register that viewset you'll see an error like this: 'basename' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute. This means you'll need to explicitly set the basename argument when registering the viewset, as it could not be automatically determined from the model name.","title":"Usage"},{"location":"api-guide/routers/#using-include-with-routers","text":"The .urls attribute on a router instance is simply a standard list of URL patterns. There are a number of different styles for how you can include these URLs. For example, you can append router.urls to a list of existing views... router = routers.SimpleRouter() router.register(r'users', UserViewSet) router.register(r'accounts', AccountViewSet) urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), ] urlpatterns += router.urls Alternatively you can use Django's include function, like so... urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), url(r'^', include(router.urls)), ] You may use include with an application namespace: urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), url(r'^api/', include((router.urls, 'app_name'))), ] Or both an application and instance namespace: urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), url(r'^api/', include((router.urls, 'app_name'), namespace='instance_name')), ] See Django's URL namespaces docs and the include API reference for more details. Note : If using namespacing with hyperlinked serializers you'll also need to ensure that any view_name parameters on the serializers correctly reflect the namespace. In the examples above you'd need to include a parameter such as view_name='app_name:user-detail' for serializer fields hyperlinked to the user detail view. The automatic view_name generation uses a pattern like %(model_name)-detail . Unless your models names actually clash you may be better off not namespacing your Django REST Framework views when using hyperlinked serializers.","title":"Using include with routers"},{"location":"api-guide/routers/#routing-for-extra-actions","text":"A viewset may mark extra actions for routing by decorating a method with the @action decorator. These extra actions will be included in the generated routes. For example, given the set_password method on the UserViewSet class: from myapp.permissions import IsAdminOrIsSelf from rest_framework.decorators import action class UserViewSet(ModelViewSet): ... @action(methods=['post'], detail=True, permission_classes=[IsAdminOrIsSelf]) def set_password(self, request, pk=None): ... The following route would be generated: URL pattern: ^users/{pk}/set_password/$ URL name: 'user-set-password' By default, the URL pattern is based on the method name, and the URL name is the combination of the ViewSet.basename and the hyphenated method name. If you don't want to use the defaults for either of these values, you can instead provide the url_path and url_name arguments to the @action decorator. For example, if you want to change the URL for our custom action to ^users/{pk}/change-password/$ , you could write: from myapp.permissions import IsAdminOrIsSelf from rest_framework.decorators import action class UserViewSet(ModelViewSet): ... @action(methods=['post'], detail=True, permission_classes=[IsAdminOrIsSelf], url_path='change-password', url_name='change_password') def set_password(self, request, pk=None): ... The above example would now generate the following URL pattern: URL path: ^users/{pk}/change-password/$ URL name: 'user-change_password'","title":"Routing for extra actions"},{"location":"api-guide/routers/#api-guide","text":"","title":"API Guide"},{"location":"api-guide/routers/#simplerouter","text":"This router includes routes for the standard set of list , create , retrieve , update , partial_update and destroy actions. The viewset can also mark additional methods to be routed, using the @action decorator. URL Style HTTP Method Action URL Name {prefix}/ GET list {basename}-list POST create {prefix}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/ GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/ GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name} By default the URLs created by SimpleRouter are appended with a trailing slash. This behavior can be modified by setting the trailing_slash argument to False when instantiating the router. For example: router = SimpleRouter(trailing_slash=False) Trailing slashes are conventional in Django, but are not used by default in some other frameworks such as Rails. Which style you choose to use is largely a matter of preference, although some javascript frameworks may expect a particular routing style. The router will match lookup values containing any characters except slashes and period characters. For a more restrictive (or lenient) lookup pattern, set the lookup_value_regex attribute on the viewset. For example, you can limit the lookup to valid UUIDs: class MyModelViewSet(mixins.RetrieveModelMixin, viewsets.GenericViewSet): lookup_field = 'my_model_id' lookup_value_regex = '[0-9a-f]{32}'","title":"SimpleRouter"},{"location":"api-guide/routers/#defaultrouter","text":"This router is similar to SimpleRouter as above, but additionally includes a default API root view, that returns a response containing hyperlinks to all the list views. It also generates routes for optional .json style format suffixes. URL Style HTTP Method Action URL Name [.format] GET automatically generated root view api-root {prefix}/[.format] GET list {basename}-list POST create {prefix}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=False)` decorated method {basename}-{url_name} {prefix}/{lookup}/[.format] GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{url_path}/[.format] GET, or as specified by `methods` argument `@action(detail=True)` decorated method {basename}-{url_name} As with SimpleRouter the trailing slashes on the URL routes can be removed by setting the trailing_slash argument to False when instantiating the router. router = DefaultRouter(trailing_slash=False)","title":"DefaultRouter"},{"location":"api-guide/routers/#custom-routers","text":"Implementing a custom router isn't something you'd need to do very often, but it can be useful if you have specific requirements about how the URLs for your API are structured. Doing so allows you to encapsulate the URL structure in a reusable way that ensures you don't have to write your URL patterns explicitly for each new view. The simplest way to implement a custom router is to subclass one of the existing router classes. The .routes attribute is used to template the URL patterns that will be mapped to each viewset. The .routes attribute is a list of Route named tuples. The arguments to the Route named tuple are: url : A string representing the URL to be routed. May include the following format strings: {prefix} - The URL prefix to use for this set of routes. {lookup} - The lookup field used to match against a single instance. {trailing_slash} - Either a '/' or an empty string, depending on the trailing_slash argument. mapping : A mapping of HTTP method names to the view methods name : The name of the URL as used in reverse calls. May include the following format string: {basename} - The base to use for the URL names that are created. initkwargs : A dictionary of any additional arguments that should be passed when instantiating the view. Note that the detail , basename , and suffix arguments are reserved for viewset introspection and are also used by the browsable API to generate the view name and breadcrumb links.","title":"Custom Routers"},{"location":"api-guide/routers/#customizing-dynamic-routes","text":"You can also customize how the @action decorator is routed. Include the DynamicRoute named tuple in the .routes list, setting the detail argument as appropriate for the list-based and detail-based routes. In addition to detail , the arguments to DynamicRoute are: url : A string representing the URL to be routed. May include the same format strings as Route , and additionally accepts the {url_path} format string. name : The name of the URL as used in reverse calls. May include the following format strings: {basename} - The base to use for the URL names that are created. {url_name} - The url_name provided to the @action . initkwargs : A dictionary of any additional arguments that should be passed when instantiating the view.","title":"Customizing dynamic routes"},{"location":"api-guide/routers/#example","text":"The following example will only route to the list and retrieve actions, and does not use the trailing slash convention. from rest_framework.routers import Route, DynamicRoute, SimpleRouter class CustomReadOnlyRouter(SimpleRouter): \"\"\" A router for read-only APIs, which doesn't use trailing slashes. \"\"\" routes = [ Route( url=r'^{prefix}$', mapping={'get': 'list'}, name='{basename}-list', detail=False, initkwargs={'suffix': 'List'} ), Route( url=r'^{prefix}/{lookup}$', mapping={'get': 'retrieve'}, name='{basename}-detail', detail=True, initkwargs={'suffix': 'Detail'} ), DynamicRoute( url=r'^{prefix}/{lookup}/{url_path}$', name='{basename}-{url_name}', detail=True, initkwargs={} ) ] Let's take a look at the routes our CustomReadOnlyRouter would generate for a simple viewset. views.py : class UserViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" A viewset that provides the standard actions \"\"\" queryset = User.objects.all() serializer_class = UserSerializer lookup_field = 'username' @action(detail=True) def group_names(self, request, pk=None): \"\"\" Returns a list of all the group names that the given user belongs to. \"\"\" user = self.get_object() groups = user.groups.all() return Response([group.name for group in groups]) urls.py : router = CustomReadOnlyRouter() router.register('users', UserViewSet) urlpatterns = router.urls The following mappings would be generated... URL HTTP Method Action URL Name /users GET list user-list /users/{username} GET retrieve user-detail /users/{username}/group_names GET group_names user-group-names For another example of setting the .routes attribute, see the source code for the SimpleRouter class.","title":"Example"},{"location":"api-guide/routers/#advanced-custom-routers","text":"If you want to provide totally custom behavior, you can override BaseRouter and override the get_urls(self) method. The method should inspect the registered viewsets and return a list of URL patterns. The registered prefix, viewset and basename tuples may be inspected by accessing the self.registry attribute. You may also want to override the get_default_basename(self, viewset) method, or else always explicitly set the basename argument when registering your viewsets with the router.","title":"Advanced custom routers"},{"location":"api-guide/routers/#third-party-packages","text":"The following third party packages are also available.","title":"Third Party Packages"},{"location":"api-guide/routers/#drf-nested-routers","text":"The drf-nested-routers package provides routers and relationship fields for working with nested resources.","title":"DRF Nested Routers"},{"location":"api-guide/routers/#modelrouter-wqdbrest","text":"The wq.db package provides an advanced ModelRouter class (and singleton instance) that extends DefaultRouter with a register_model() API. Much like Django's admin.site.register , the only required argument to rest.router.register_model is a model class. Reasonable defaults for a url prefix, serializer, and viewset will be inferred from the model and global configuration. from wq.db import rest from myapp.models import MyModel rest.router.register_model(MyModel)","title":"ModelRouter (wq.db.rest)"},{"location":"api-guide/routers/#drf-extensions","text":"The DRF-extensions package provides routers for creating nested viewsets , collection level controllers with customizable endpoint names .","title":"DRF-extensions"},{"location":"api-guide/routers_zh/","text":"Routers \u8d44\u6e90\u8def\u7531\u5141\u8bb8\u4f60\u5feb\u901f\u58f0\u660e\u7ed9\u5b9a\u7684\u6709\u8db3\u591f\u63a7\u5236\u5668\u7684\u6240\u6709\u516c\u5171\u8def\u7531\u3002\u800c\u4e0d\u662f\u4e3a\u4f60\u7684index...\u58f0\u660e\u5355\u72ec\u7684\u8def\u7531\uff0c\u4e00\u4e2a\u5f3a\u5927\u7684\u8def\u7531\u80fd\u5728\u4e00\u884c\u4ee3\u7801\u4e2d\u58f0\u660e\u5b83\u4eec\u3002 \u2014 [Ruby on Rails \u6587\u6863][cite] \u67d0\u4e9bWeb\u6846\u67b6\uff08\u5982Rails\uff09\u63d0\u4f9b\u4e86\u81ea\u52a8\u786e\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684URL\u5e94\u5982\u4f55\u6620\u5c04\u5230\u5904\u7406\u4f20\u5165\u8bf7\u6c42\u7684\u903b\u8f91\u7684\u529f\u80fd\u3002 REST\u6846\u67b6\u6dfb\u52a0\u4e86\u5bf9\u81ea\u52a8URL\u8def\u7531\u5230Django\u7684\u652f\u6301\uff0c\u5e76\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u3001\u5feb\u901f\u548c\u4e00\u81f4\u7684\u65b9\u5f0f\u6765\u5c06\u89c6\u56fe\u903b\u8f91\u8fde\u63a5\u5230\u4e00\u7ec4URL\u3002 Usage \u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684URL conf\u7684\u4f8b\u5b50\uff0c\u5b83\u4f7f\u7528 SimpleRouter \u3002 from rest_framework import routers router = routers.SimpleRouter() router.register(r'users', UserViewSet) router.register(r'accounts', AccountViewSet) urlpatterns = router.urls register() \u65b9\u6cd5\u6709\u4e24\u4e2a\u5f3a\u5236\u53c2\u6570\uff1a prefix - \u7528\u4e8e\u6b64\u7ec4\u8def\u7531\u7684URL\u524d\u7f00\u3002 viewset - \u5904\u7406\u8bf7\u6c42\u7684viewset\u7c7b\u3002 \u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u9644\u52a0\u53c2\u6570\uff08\u53ef\u9009\uff09\uff1a base_name - \u7528\u4e8e\u521b\u5efa\u7684URL\u540d\u79f0\u7684\u57fa\u672c\u540d\u79f0\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\u8be5\u53c2\u6570\uff0c\u5c06\u6839\u636e\u89c6\u56fe\u96c6\u7684 queryset \u5c5e\u6027\uff08\u5982\u679c\u6709\uff09\u6765\u81ea\u52a8\u751f\u6210\u57fa\u672c\u540d\u79f0\u3002\u6ce8\u610f\uff0c\u5982\u679c\u89c6\u56fe\u96c6\u4e0d\u5305\u62ec queryset \u5c5e\u6027\uff0c\u90a3\u4e48\u5728\u6ce8\u518c\u89c6\u56fe\u96c6\u65f6\u5fc5\u987b\u8bbe\u7f6e base_name \u3002 \u4e0a\u9762\u7684\u793a\u4f8b\u5c06\u751f\u6210\u4ee5\u4e0bURL\u6a21\u5f0f\uff1a URL pattern: ^users/$ Name: 'user-list' URL pattern: ^users/{pk}/$ Name: 'user-detail' URL pattern: ^accounts/$ Name: 'account-list' URL pattern: ^accounts/{pk}/$ Name: 'account-detail' \u6ce8\u610f : base_name \u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u89c6\u56fe\u540d\u79f0\u6a21\u5f0f\u7684\u521d\u59cb\u90e8\u5206\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u662f\u6307 user \u6216 account \u90e8\u5206\u3002 \u901a\u5e38\uff0c\u4f60 \u4e0d\u9700\u8981 \u6307\u5b9a base_name \u53c2\u6570\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709\u81ea\u5b9a\u4e49 get_queryset \u65b9\u6cd5\u7684\u89c6\u56fe\u96c6\uff0c\u90a3\u4e48\u90a3\u4e2a\u89c6\u56fe\u96c6\u53ef\u80fd\u6ca1\u6709\u8bbe\u7f6e .queryset \u5c5e\u6027\u3002\u5f53\u4f60\u6ce8\u518c\u8fd9\u4e2a\u89c6\u56fe\u96c6\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u6709\u53ef\u80fd\u4f1a\u770b\u5230\u7c7b\u4f3c\u5982\u4e0b\u7684\u9519\u8bef\uff1a 'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute. \u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u5728\u6ce8\u518c\u89c6\u56fe\u96c6\u65f6\u663e\u5f0f\u8bbe\u7f6e base_name \u53c2\u6570\uff0c\u56e0\u4e3a\u65e0\u6cd5\u4ecemodel\u540d\u81ea\u52a8\u786e\u5b9a\u3002 \u5728\u8def\u7531\u4e2d\u4f7f\u7528 include \u8def\u7531\u5668\u5b9e\u4f8b\u4e0a\u7684 .urls \u5c5e\u6027\u53ea\u662f\u4e00\u4e2aURL\u6a21\u5f0f\u7684\u6807\u51c6\u5217\u8868\u3002\u5bf9\u4e8e\u5982\u4f55\u6dfb\u52a0\u8fd9\u4e9bURL\uff0c\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5199\u6cd5\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06 router.urls \u9644\u52a0\u5230\u73b0\u6709\u89c6\u56fe\u7684\u5217\u8868\u4e2d... router = routers.SimpleRouter() router.register(r'users', UserViewSet) router.register(r'accounts', AccountViewSet) urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), ] urlpatterns += router.urls \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528Django\u7684 include \u51fd\u6570\uff0c\u50cf\u8fd9\u6837... urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), url(r'^', include(router.urls)), ] \u8def\u7531\u5668URL\u6a21\u5f0f\u4e5f\u652f\u6301\u547d\u540d\u7a7a\u95f4\u7684\u5199\u6cd5\u3002 urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), url(r'^api/', include(router.urls, namespace='api')), ] \u5982\u679c\u4f7f\u7528\u5e26\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u5668\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4f60\u8fd8\u9700\u8981\u786e\u4fdd\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u4efb\u4f55 view_name \u53c2\u6570\u6b63\u786e\u5730\u53cd\u6620\u547d\u540d\u7a7a\u95f4\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u4f60\u9700\u8981\u8ba9\u8d85\u94fe\u63a5\u5230\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u89c6\u56fe\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u5305\u542b\u4e00\u4e2a\u53c2\u6570\uff0c\u4f8b\u5982 view_name ='api\uff1auser-detail' \u3002 \u989d\u5916\u94fe\u63a5\u548c\u64cd\u4f5c \u7528 @detail_route \u6216 @list_route \u88c5\u9970\u7684\u89c6\u56fe\u96c6\u4e0a\u7684\u4efb\u4f55\u65b9\u6cd5\u4e5f\u5c06\u88ab\u8def\u7531\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684\u65b9\u6cd5\u5728 UserViewSet \u7c7b\uff1a from myapp.permissions import IsAdminOrIsSelf from rest_framework.decorators import detail_route class UserViewSet(ModelViewSet): ... @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf]) def set_password(self, request, pk=None): ... \u5c06\u53e6\u5916\u751f\u6210\u4ee5\u4e0bURL\u6a21\u5f0f\uff1a URL pattern: ^users/{pk}/set_password/$ Name: 'user-set-password' \u5982\u679c\u4f60\u4e0d\u60f3\u8ba9\u81ea\u5b9a\u4e49\u7684\u64cd\u4f5c\u4f7f\u7528\u81ea\u52a8\u751f\u6210\u7684\u9ed8\u8ba4URL\uff0c\u4f60\u53ef\u4ee5\u6539\u7528url_path\u53c2\u6570\u8fdb\u884c\u81ea\u5b9a\u4e49\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u8981\u5c06\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684URL\u66f4\u6539\u4e3a ^users/{pk}/change-password/$ , \u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a from myapp.permissions import IsAdminOrIsSelf from rest_framework.decorators import detail_route class UserViewSet(ModelViewSet): ... @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf], url_path='change-password') def set_password(self, request, pk=None): ... \u4ee5\u4e0a\u793a\u4f8b\u5c06\u751f\u6210\u4ee5\u4e0bURL\u683c\u5f0f\uff1a URL pattern: ^users/{pk}/change-password/$ Name: 'user-change-password' \u5728\u4f60\u4e0d\u60f3\u4f7f\u7528\u4e3a\u81ea\u5b9a\u4e49\u64cd\u4f5c\u751f\u6210\u7684\u9ed8\u8ba4\u540d\u79f0\u7684\u60c5\u51b5\u4e0b\uff0cni\u53ef\u4ee5\u4f7f\u7528url_name\u53c2\u6570\u6765\u81ea\u5b9a\u4e49\u5b83\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8981\u5c06\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684\u540d\u79f0\u66f4\u6539\u4e3a 'user-change-password' \uff0c\u5219\u53ef\u4ee5\u5199\u4e3a\uff1a from myapp.permissions import IsAdminOrIsSelf from rest_framework.decorators import detail_route class UserViewSet(ModelViewSet): ... @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf], url_name='change-password') def set_password(self, request, pk=None): ... \u4ee5\u4e0a\u793a\u4f8b\u73b0\u5728\u5c06\u751f\u6210\u4ee5\u4e0bURL\u683c\u5f0f\uff1a URL pattern: ^users/{pk}/set_password/$ Name: 'user-change-password' \u4f60\u8fd8\u53ef\u4ee5\u540c\u65f6\u8bbe\u7f6eurl_path\u548curl_name\u53c2\u6570\u5bf9\u81ea\u5b9a\u4e49\u89c6\u56fe\u7684URL\u751f\u6210\u8fdb\u884c\u989d\u5916\u7684\u63a7\u5236\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605viewset\u6587\u6863 [\u6807\u8bb0\u8def\u7531\u7684\u989d\u5916\u64cd\u4f5c][route-decorators]. API \u5411\u5bfc SimpleRouter \u8be5\u8def\u7531\u5668\u5305\u62ec\u6807\u51c6\u96c6\u5408 list , create , retrieve , update , partial_update \u548c destroy \u52a8\u4f5c\u7684\u8def\u7531\u3002\u89c6\u56fe\u96c6\u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528 @ detail_route \u6216 @ list_route \u88c5\u9970\u5668\u6807\u8bb0\u8981\u88ab\u8def\u7531\u7684\u5176\u4ed6\u65b9\u6cd5\u3002 URL \u6837\u5f0f HTTP \u65b9\u6cd5 \u52a8\u4f5c URL \u540d {prefix}/ GET list {basename}-list POST create {prefix}/{methodname}/ GET, or as specified by `methods` argument `@list_route` decorated method {basename}-{methodname} {prefix}/{lookup}/ GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{methodname}/ GET, or as specified by `methods` argument `@detail_route` decorated method {basename}-{methodname} \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531 SimpleRouter \u521b\u5efa\u7684URL\u5c06\u9644\u52a0\u5c3e\u90e8\u659c\u6760\u3002 \u5728\u5b9e\u4f8b\u5316\u8def\u7531\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06 trailing_slash \u53c2\u6570\u8bbe\u7f6e\u4e3a`False'\u6765\u4fee\u6539\u6b64\u884c\u4e3a\u3002\u6bd4\u5982\uff1a router = SimpleRouter(trailing_slash=False) \u5c3e\u90e8\u659c\u6760\u5728Django\u4e2d\u662f\u5e38\u89c1\u7684\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u4e00\u4e9b\u6846\u67b6\uff08\u5982Rails\uff09\u4e2d\u9ed8\u8ba4\u4e0d\u4f7f\u7528\u3002\u4f60\u9009\u62e9\u4f7f\u7528\u54ea\u79cd\u98ce\u683c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4f60\u4e2a\u4eba\u504f\u597d\u95ee\u9898\uff0c\u867d\u7136\u4e00\u4e9bjavascript\u6846\u67b6\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u7279\u5b9a\u7684\u8def\u7531\u98ce\u683c\u3002 \u8def\u7531\u5668\u5c06\u5339\u914d\u5305\u542b\u9664\u659c\u6760\u548c\u53e5\u70b9\u5b57\u7b26\u4ee5\u5916\u7684\u4efb\u4f55\u5b57\u7b26\u7684\u67e5\u627e\u503c\u3002\u5bf9\u4e8e\u66f4\u4e25\u683c\uff08\u6216\u66f4\u5bbd\u677e\uff09\u7684\u67e5\u627e\u6a21\u5f0f\uff0c\u8bf7\u5728\u89c6\u56fe\u96c6\u4e0a\u8bbe\u7f6e lookup_value_regex \u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06\u67e5\u627e\u9650\u5236\u4e3a\u6709\u6548\u7684UUID\uff1a class MyModelViewSet(mixins.RetrieveModelMixin, viewsets.GenericViewSet): lookup_field = 'my_model_id' lookup_value_regex = '[0-9a-f]{32}' DefaultRouter \u8fd9\u4e2a\u8def\u7531\u5668\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684 SimpleRouter \uff0c\u4f46\u662f\u8fd8\u5305\u62ec\u4e00\u4e2a\u9ed8\u8ba4\u8fd4\u56de\u6240\u6709\u5217\u8868\u89c6\u56fe\u7684\u8d85\u94fe\u63a5\u7684API\u6839\u89c6\u56fe\u3002\u5b83\u8fd8\u751f\u6210\u53ef\u9009\u7684 .json \u6837\u5f0f\u683c\u5f0f\u540e\u7f00\u7684\u8def\u7531\u3002 URL \u6837\u5f0f HTTP \u65b9\u6cd5 \u52a8\u4f5c URL \u540d\u79f0 [.format] GET automatically generated root view api-root {prefix}/[.format] GET list {basename}-list POST create {prefix}/{methodname}/[.format] GET, or as specified by `methods` argument `@list_route` decorated method {basename}-{methodname} {prefix}/{lookup}/[.format] GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{methodname}/[.format] GET, or as specified by `methods` argument `@detail_route` decorated method {basename}-{methodname} \u4e0e SimpleRouter \u4e00\u6837\uff0c\u5728\u5b9e\u4f8b\u5316\u8def\u7531\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06 trailing_slash \u53c2\u6570\u8bbe\u7f6e\u4e3a`False'\u6765\u5220\u9664URL\u8def\u7531\u7684\u5c3e\u90e8\u659c\u6760\u3002 router = DefaultRouter(trailing_slash=False) \u81ea\u5b9a\u4e49 Routers \u901a\u5e38\u4f60\u5e76\u4e0d\u9700\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8def\u7531\u5668\uff0c\u4f46\u5982\u679c\u4f60\u5bf9API\u7684\u7f51\u5740\u7ed3\u6784\u6709\u7279\u5b9a\u7684\u8981\u6c42\uff0c\u90a3\u5b83\u5c31\u5341\u5206\u6709\u7528\u4e86\u3002\u8fd9\u6837\u505a\u5141\u8bb8\u4f60\u4ee5\u53ef\u91cd\u7528\u7684\u65b9\u5f0f\u5c01\u88c5URL\u7ed3\u6784\uff0c\u786e\u4fdd\u4f60\u4e0d\u5fc5\u4e3a\u6bcf\u4e2a\u65b0\u89c6\u56fe\u663e\u5f0f\u5730\u7f16\u5199URL\u6a21\u5f0f\u3002 \u5b9e\u73b0\u81ea\u5b9a\u4e49\u8def\u7531\u5668\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u7ee7\u627f\u4e00\u4e2a\u73b0\u6709\u7684\u8def\u7531\u5668\u7c7b\u3002 .routes \u5c5e\u6027\u7528\u4e8e\u6a21\u677f\u5c06\u88ab\u6620\u5c04\u5230\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684URL\u6a21\u5f0f\u3002 .routes \u5c5e\u6027\u662f\u4e00\u4e2a\u540d\u4e3atuples\u7684Route\u5bf9\u8c61\u7684\u5217\u8868\u3002 Route \u547d\u540d\u5143\u7ec4\u7684\u53c2\u6570\u662f\uff1a url : \u8868\u793a\u8981\u8def\u7531\u7684URL\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a {prefix} - \u7528\u4e8e\u6b64\u7ec4\u8def\u7531\u7684URL\u524d\u7f00\u3002 {lookup} - \u7528\u4e8e\u4e0e\u5355\u4e2a\u5b9e\u4f8b\u8fdb\u884c\u5339\u914d\u7684\u67e5\u627e\u5b57\u6bb5\u3002 {trailing_slash} - \u53ef\u4ee5\u662f\u4e00\u4e2a'/'\u6216\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd9\u53d6\u51b3\u4e8e trailing_slash \u53c2\u6570\u3002 mapping : HTTP\u65b9\u6cd5\u540d\u79f0\u5230\u89c6\u56fe\u65b9\u6cd5\u7684\u6620\u5c04 name : \u5728 reverse \u8c03\u7528\u4e2d\u4f7f\u7528\u7684URL\u7684\u540d\u79f0\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a {basename} - \u7528\u4e8e\u521b\u5efa\u7684URL\u540d\u79f0\u7684\u57fa\u672c\u540d\u79f0 initkwargs : \u5b9e\u4f8b\u5316\u89c6\u56fe\u65f6\u5e94\u4f20\u9012\u7684\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u7684\u5b57\u5178\u3002\u6ce8\u610f\uff0c suffix \u53c2\u6570\u88ab\u4fdd\u7559\u7528\u4e8e\u6807\u8bc6\u89c6\u56fe\u96c6\u7c7b\u578b\uff0c\u5728\u751f\u6210\u89c6\u56fe\u540d\u79f0\u548c\u9762\u5305\u5c51\u94fe\u63a5\u65f6\u4f7f\u7528\u3002 \u81ea\u5b9a\u4e49\u52a8\u6001\u8def\u7531 \u4f60\u8fd8\u53ef\u4ee5\u5b9a\u5236 @ list_route \u548c @detail_route \u88c5\u9970\u5668\u7684\u8def\u7531\u3002\u8981\u8def\u7531\u8fd9\u4e9b\u88c5\u9970\u5668\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\uff0c\u8bf7\u5728 .routes \u5217\u8868\u4e2d\u5305\u542b\u4e00\u4e2a DynamicListRoute \u548c/\u6216 DynamicDetailRoute \u547d\u540d\u7684\u5143\u7ec4\u3002 DynamicListRoute \u548c DynamicDetailRoute \u7684\u53c2\u6570\u662f\uff1a url : \u8868\u793a\u8981\u8def\u7531\u7684URL\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u4ee5\u5305\u62ec\u4e0e\u201cRoute\u201d\u76f8\u540c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53e6\u5916\u63a5\u53d7 {methodname} \u548c {methodnamehyphen} \u683c\u5f0f\u5b57\u7b26\u4e32\u3002 name : \u5728 reverse \u8c03\u7528\u4e2d\u4f7f\u7528\u7684URL\u7684\u540d\u79f0\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a {basename} \uff0c {methodname} \u548c {methodnamehyphen} \u3002 initkwargs : \u5b9e\u4f8b\u5316\u89c6\u56fe\u65f6\u5e94\u4f20\u9012\u7684\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u7684\u5b57\u5178\u3002 \u4f8b\u5b50 \u4ee5\u4e0b\u793a\u4f8b\u5c06\u53ea\u8def\u7531\u5230 list \u548c retrieve \u64cd\u4f5c\uff0c\u5e76\u4e14\u4e0d\u4f7f\u7528\u5c3e\u90e8\u659c\u7ebf\u7ea6\u5b9a\u3002 from rest_framework.routers import Route, DynamicDetailRoute, SimpleRouter class CustomReadOnlyRouter(SimpleRouter): \"\"\" A router for read-only APIs, which doesn't use trailing slashes. \"\"\" routes = [ Route( url=r'^{prefix}$', mapping={'get': 'list'}, name='{basename}-list', initkwargs={'suffix': 'List'} ), Route( url=r'^{prefix}/{lookup}$', mapping={'get': 'retrieve'}, name='{basename}-detail', initkwargs={'suffix': 'Detail'} ), DynamicDetailRoute( url=r'^{prefix}/{lookup}/{methodnamehyphen}$', name='{basename}-{methodnamehyphen}', initkwargs={} ) ] \u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u5b9a\u4e49\u7684 CustomReadOnlyRouter \u4e3a\u7b80\u5355\u89c6\u56fe\u751f\u6210\u7684\u8def\u7531\u3002 views.py : class UserViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" A viewset that provides the standard actions \"\"\" queryset = User.objects.all() serializer_class = UserSerializer lookup_field = 'username' @detail_route() def group_names(self, request): \"\"\" Returns a list of all the group names that the given user belongs to. \"\"\" user = self.get_object() groups = user.groups.all() return Response([group.name for group in groups]) urls.py : router = CustomReadOnlyRouter() router.register('users', UserViewSet) urlpatterns = router.urls \u5c06\u751f\u6210\u4ee5\u4e0b\u6620\u5c04... URL HTTP \u65b9\u6cd5 \u52a8\u4f5c URL \u540d\u79f0 /users GET list user-list /users/{username} GET retrieve user-detail /users/{username}/group-names GET group_names user-group-names","title":"Routers"},{"location":"api-guide/routers_zh/#routers","text":"\u8d44\u6e90\u8def\u7531\u5141\u8bb8\u4f60\u5feb\u901f\u58f0\u660e\u7ed9\u5b9a\u7684\u6709\u8db3\u591f\u63a7\u5236\u5668\u7684\u6240\u6709\u516c\u5171\u8def\u7531\u3002\u800c\u4e0d\u662f\u4e3a\u4f60\u7684index...\u58f0\u660e\u5355\u72ec\u7684\u8def\u7531\uff0c\u4e00\u4e2a\u5f3a\u5927\u7684\u8def\u7531\u80fd\u5728\u4e00\u884c\u4ee3\u7801\u4e2d\u58f0\u660e\u5b83\u4eec\u3002 \u2014 [Ruby on Rails \u6587\u6863][cite] \u67d0\u4e9bWeb\u6846\u67b6\uff08\u5982Rails\uff09\u63d0\u4f9b\u4e86\u81ea\u52a8\u786e\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684URL\u5e94\u5982\u4f55\u6620\u5c04\u5230\u5904\u7406\u4f20\u5165\u8bf7\u6c42\u7684\u903b\u8f91\u7684\u529f\u80fd\u3002 REST\u6846\u67b6\u6dfb\u52a0\u4e86\u5bf9\u81ea\u52a8URL\u8def\u7531\u5230Django\u7684\u652f\u6301\uff0c\u5e76\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u3001\u5feb\u901f\u548c\u4e00\u81f4\u7684\u65b9\u5f0f\u6765\u5c06\u89c6\u56fe\u903b\u8f91\u8fde\u63a5\u5230\u4e00\u7ec4URL\u3002","title":"Routers"},{"location":"api-guide/routers_zh/#usage","text":"\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684URL conf\u7684\u4f8b\u5b50\uff0c\u5b83\u4f7f\u7528 SimpleRouter \u3002 from rest_framework import routers router = routers.SimpleRouter() router.register(r'users', UserViewSet) router.register(r'accounts', AccountViewSet) urlpatterns = router.urls register() \u65b9\u6cd5\u6709\u4e24\u4e2a\u5f3a\u5236\u53c2\u6570\uff1a prefix - \u7528\u4e8e\u6b64\u7ec4\u8def\u7531\u7684URL\u524d\u7f00\u3002 viewset - \u5904\u7406\u8bf7\u6c42\u7684viewset\u7c7b\u3002 \u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u9644\u52a0\u53c2\u6570\uff08\u53ef\u9009\uff09\uff1a base_name - \u7528\u4e8e\u521b\u5efa\u7684URL\u540d\u79f0\u7684\u57fa\u672c\u540d\u79f0\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\u8be5\u53c2\u6570\uff0c\u5c06\u6839\u636e\u89c6\u56fe\u96c6\u7684 queryset \u5c5e\u6027\uff08\u5982\u679c\u6709\uff09\u6765\u81ea\u52a8\u751f\u6210\u57fa\u672c\u540d\u79f0\u3002\u6ce8\u610f\uff0c\u5982\u679c\u89c6\u56fe\u96c6\u4e0d\u5305\u62ec queryset \u5c5e\u6027\uff0c\u90a3\u4e48\u5728\u6ce8\u518c\u89c6\u56fe\u96c6\u65f6\u5fc5\u987b\u8bbe\u7f6e base_name \u3002 \u4e0a\u9762\u7684\u793a\u4f8b\u5c06\u751f\u6210\u4ee5\u4e0bURL\u6a21\u5f0f\uff1a URL pattern: ^users/$ Name: 'user-list' URL pattern: ^users/{pk}/$ Name: 'user-detail' URL pattern: ^accounts/$ Name: 'account-list' URL pattern: ^accounts/{pk}/$ Name: 'account-detail' \u6ce8\u610f : base_name \u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u89c6\u56fe\u540d\u79f0\u6a21\u5f0f\u7684\u521d\u59cb\u90e8\u5206\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5c31\u662f\u6307 user \u6216 account \u90e8\u5206\u3002 \u901a\u5e38\uff0c\u4f60 \u4e0d\u9700\u8981 \u6307\u5b9a base_name \u53c2\u6570\uff0c\u4f46\u662f\u5982\u679c\u4f60\u6709\u81ea\u5b9a\u4e49 get_queryset \u65b9\u6cd5\u7684\u89c6\u56fe\u96c6\uff0c\u90a3\u4e48\u90a3\u4e2a\u89c6\u56fe\u96c6\u53ef\u80fd\u6ca1\u6709\u8bbe\u7f6e .queryset \u5c5e\u6027\u3002\u5f53\u4f60\u6ce8\u518c\u8fd9\u4e2a\u89c6\u56fe\u96c6\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u6709\u53ef\u80fd\u4f1a\u770b\u5230\u7c7b\u4f3c\u5982\u4e0b\u7684\u9519\u8bef\uff1a 'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute. \u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u5728\u6ce8\u518c\u89c6\u56fe\u96c6\u65f6\u663e\u5f0f\u8bbe\u7f6e base_name \u53c2\u6570\uff0c\u56e0\u4e3a\u65e0\u6cd5\u4ecemodel\u540d\u81ea\u52a8\u786e\u5b9a\u3002","title":"Usage"},{"location":"api-guide/routers_zh/#include","text":"\u8def\u7531\u5668\u5b9e\u4f8b\u4e0a\u7684 .urls \u5c5e\u6027\u53ea\u662f\u4e00\u4e2aURL\u6a21\u5f0f\u7684\u6807\u51c6\u5217\u8868\u3002\u5bf9\u4e8e\u5982\u4f55\u6dfb\u52a0\u8fd9\u4e9bURL\uff0c\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5199\u6cd5\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06 router.urls \u9644\u52a0\u5230\u73b0\u6709\u89c6\u56fe\u7684\u5217\u8868\u4e2d... router = routers.SimpleRouter() router.register(r'users', UserViewSet) router.register(r'accounts', AccountViewSet) urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), ] urlpatterns += router.urls \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528Django\u7684 include \u51fd\u6570\uff0c\u50cf\u8fd9\u6837... urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), url(r'^', include(router.urls)), ] \u8def\u7531\u5668URL\u6a21\u5f0f\u4e5f\u652f\u6301\u547d\u540d\u7a7a\u95f4\u7684\u5199\u6cd5\u3002 urlpatterns = [ url(r'^forgot-password/$', ForgotPasswordFormView.as_view()), url(r'^api/', include(router.urls, namespace='api')), ] \u5982\u679c\u4f7f\u7528\u5e26\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u5668\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4f60\u8fd8\u9700\u8981\u786e\u4fdd\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u4efb\u4f55 view_name \u53c2\u6570\u6b63\u786e\u5730\u53cd\u6620\u547d\u540d\u7a7a\u95f4\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u4f60\u9700\u8981\u8ba9\u8d85\u94fe\u63a5\u5230\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u89c6\u56fe\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u5305\u542b\u4e00\u4e2a\u53c2\u6570\uff0c\u4f8b\u5982 view_name ='api\uff1auser-detail' \u3002","title":"\u5728\u8def\u7531\u4e2d\u4f7f\u7528 include"},{"location":"api-guide/routers_zh/#_1","text":"\u7528 @detail_route \u6216 @list_route \u88c5\u9970\u7684\u89c6\u56fe\u96c6\u4e0a\u7684\u4efb\u4f55\u65b9\u6cd5\u4e5f\u5c06\u88ab\u8def\u7531\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684\u65b9\u6cd5\u5728 UserViewSet \u7c7b\uff1a from myapp.permissions import IsAdminOrIsSelf from rest_framework.decorators import detail_route class UserViewSet(ModelViewSet): ... @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf]) def set_password(self, request, pk=None): ... \u5c06\u53e6\u5916\u751f\u6210\u4ee5\u4e0bURL\u6a21\u5f0f\uff1a URL pattern: ^users/{pk}/set_password/$ Name: 'user-set-password' \u5982\u679c\u4f60\u4e0d\u60f3\u8ba9\u81ea\u5b9a\u4e49\u7684\u64cd\u4f5c\u4f7f\u7528\u81ea\u52a8\u751f\u6210\u7684\u9ed8\u8ba4URL\uff0c\u4f60\u53ef\u4ee5\u6539\u7528url_path\u53c2\u6570\u8fdb\u884c\u81ea\u5b9a\u4e49\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u8981\u5c06\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684URL\u66f4\u6539\u4e3a ^users/{pk}/change-password/$ , \u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a from myapp.permissions import IsAdminOrIsSelf from rest_framework.decorators import detail_route class UserViewSet(ModelViewSet): ... @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf], url_path='change-password') def set_password(self, request, pk=None): ... \u4ee5\u4e0a\u793a\u4f8b\u5c06\u751f\u6210\u4ee5\u4e0bURL\u683c\u5f0f\uff1a URL pattern: ^users/{pk}/change-password/$ Name: 'user-change-password' \u5728\u4f60\u4e0d\u60f3\u4f7f\u7528\u4e3a\u81ea\u5b9a\u4e49\u64cd\u4f5c\u751f\u6210\u7684\u9ed8\u8ba4\u540d\u79f0\u7684\u60c5\u51b5\u4e0b\uff0cni\u53ef\u4ee5\u4f7f\u7528url_name\u53c2\u6570\u6765\u81ea\u5b9a\u4e49\u5b83\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8981\u5c06\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684\u540d\u79f0\u66f4\u6539\u4e3a 'user-change-password' \uff0c\u5219\u53ef\u4ee5\u5199\u4e3a\uff1a from myapp.permissions import IsAdminOrIsSelf from rest_framework.decorators import detail_route class UserViewSet(ModelViewSet): ... @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf], url_name='change-password') def set_password(self, request, pk=None): ... \u4ee5\u4e0a\u793a\u4f8b\u73b0\u5728\u5c06\u751f\u6210\u4ee5\u4e0bURL\u683c\u5f0f\uff1a URL pattern: ^users/{pk}/set_password/$ Name: 'user-change-password' \u4f60\u8fd8\u53ef\u4ee5\u540c\u65f6\u8bbe\u7f6eurl_path\u548curl_name\u53c2\u6570\u5bf9\u81ea\u5b9a\u4e49\u89c6\u56fe\u7684URL\u751f\u6210\u8fdb\u884c\u989d\u5916\u7684\u63a7\u5236\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605viewset\u6587\u6863 [\u6807\u8bb0\u8def\u7531\u7684\u989d\u5916\u64cd\u4f5c][route-decorators].","title":"\u989d\u5916\u94fe\u63a5\u548c\u64cd\u4f5c"},{"location":"api-guide/routers_zh/#api","text":"","title":"API \u5411\u5bfc"},{"location":"api-guide/routers_zh/#simplerouter","text":"\u8be5\u8def\u7531\u5668\u5305\u62ec\u6807\u51c6\u96c6\u5408 list , create , retrieve , update , partial_update \u548c destroy \u52a8\u4f5c\u7684\u8def\u7531\u3002\u89c6\u56fe\u96c6\u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528 @ detail_route \u6216 @ list_route \u88c5\u9970\u5668\u6807\u8bb0\u8981\u88ab\u8def\u7531\u7684\u5176\u4ed6\u65b9\u6cd5\u3002 URL \u6837\u5f0f HTTP \u65b9\u6cd5 \u52a8\u4f5c URL \u540d {prefix}/ GET list {basename}-list POST create {prefix}/{methodname}/ GET, or as specified by `methods` argument `@list_route` decorated method {basename}-{methodname} {prefix}/{lookup}/ GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{methodname}/ GET, or as specified by `methods` argument `@detail_route` decorated method {basename}-{methodname} \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7531 SimpleRouter \u521b\u5efa\u7684URL\u5c06\u9644\u52a0\u5c3e\u90e8\u659c\u6760\u3002 \u5728\u5b9e\u4f8b\u5316\u8def\u7531\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06 trailing_slash \u53c2\u6570\u8bbe\u7f6e\u4e3a`False'\u6765\u4fee\u6539\u6b64\u884c\u4e3a\u3002\u6bd4\u5982\uff1a router = SimpleRouter(trailing_slash=False) \u5c3e\u90e8\u659c\u6760\u5728Django\u4e2d\u662f\u5e38\u89c1\u7684\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u4e00\u4e9b\u6846\u67b6\uff08\u5982Rails\uff09\u4e2d\u9ed8\u8ba4\u4e0d\u4f7f\u7528\u3002\u4f60\u9009\u62e9\u4f7f\u7528\u54ea\u79cd\u98ce\u683c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u4f60\u4e2a\u4eba\u504f\u597d\u95ee\u9898\uff0c\u867d\u7136\u4e00\u4e9bjavascript\u6846\u67b6\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u7279\u5b9a\u7684\u8def\u7531\u98ce\u683c\u3002 \u8def\u7531\u5668\u5c06\u5339\u914d\u5305\u542b\u9664\u659c\u6760\u548c\u53e5\u70b9\u5b57\u7b26\u4ee5\u5916\u7684\u4efb\u4f55\u5b57\u7b26\u7684\u67e5\u627e\u503c\u3002\u5bf9\u4e8e\u66f4\u4e25\u683c\uff08\u6216\u66f4\u5bbd\u677e\uff09\u7684\u67e5\u627e\u6a21\u5f0f\uff0c\u8bf7\u5728\u89c6\u56fe\u96c6\u4e0a\u8bbe\u7f6e lookup_value_regex \u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06\u67e5\u627e\u9650\u5236\u4e3a\u6709\u6548\u7684UUID\uff1a class MyModelViewSet(mixins.RetrieveModelMixin, viewsets.GenericViewSet): lookup_field = 'my_model_id' lookup_value_regex = '[0-9a-f]{32}'","title":"SimpleRouter"},{"location":"api-guide/routers_zh/#defaultrouter","text":"\u8fd9\u4e2a\u8def\u7531\u5668\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684 SimpleRouter \uff0c\u4f46\u662f\u8fd8\u5305\u62ec\u4e00\u4e2a\u9ed8\u8ba4\u8fd4\u56de\u6240\u6709\u5217\u8868\u89c6\u56fe\u7684\u8d85\u94fe\u63a5\u7684API\u6839\u89c6\u56fe\u3002\u5b83\u8fd8\u751f\u6210\u53ef\u9009\u7684 .json \u6837\u5f0f\u683c\u5f0f\u540e\u7f00\u7684\u8def\u7531\u3002 URL \u6837\u5f0f HTTP \u65b9\u6cd5 \u52a8\u4f5c URL \u540d\u79f0 [.format] GET automatically generated root view api-root {prefix}/[.format] GET list {basename}-list POST create {prefix}/{methodname}/[.format] GET, or as specified by `methods` argument `@list_route` decorated method {basename}-{methodname} {prefix}/{lookup}/[.format] GET retrieve {basename}-detail PUT update PATCH partial_update DELETE destroy {prefix}/{lookup}/{methodname}/[.format] GET, or as specified by `methods` argument `@detail_route` decorated method {basename}-{methodname} \u4e0e SimpleRouter \u4e00\u6837\uff0c\u5728\u5b9e\u4f8b\u5316\u8def\u7531\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06 trailing_slash \u53c2\u6570\u8bbe\u7f6e\u4e3a`False'\u6765\u5220\u9664URL\u8def\u7531\u7684\u5c3e\u90e8\u659c\u6760\u3002 router = DefaultRouter(trailing_slash=False)","title":"DefaultRouter"},{"location":"api-guide/routers_zh/#routers_1","text":"\u901a\u5e38\u4f60\u5e76\u4e0d\u9700\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8def\u7531\u5668\uff0c\u4f46\u5982\u679c\u4f60\u5bf9API\u7684\u7f51\u5740\u7ed3\u6784\u6709\u7279\u5b9a\u7684\u8981\u6c42\uff0c\u90a3\u5b83\u5c31\u5341\u5206\u6709\u7528\u4e86\u3002\u8fd9\u6837\u505a\u5141\u8bb8\u4f60\u4ee5\u53ef\u91cd\u7528\u7684\u65b9\u5f0f\u5c01\u88c5URL\u7ed3\u6784\uff0c\u786e\u4fdd\u4f60\u4e0d\u5fc5\u4e3a\u6bcf\u4e2a\u65b0\u89c6\u56fe\u663e\u5f0f\u5730\u7f16\u5199URL\u6a21\u5f0f\u3002 \u5b9e\u73b0\u81ea\u5b9a\u4e49\u8def\u7531\u5668\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u7ee7\u627f\u4e00\u4e2a\u73b0\u6709\u7684\u8def\u7531\u5668\u7c7b\u3002 .routes \u5c5e\u6027\u7528\u4e8e\u6a21\u677f\u5c06\u88ab\u6620\u5c04\u5230\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684URL\u6a21\u5f0f\u3002 .routes \u5c5e\u6027\u662f\u4e00\u4e2a\u540d\u4e3atuples\u7684Route\u5bf9\u8c61\u7684\u5217\u8868\u3002 Route \u547d\u540d\u5143\u7ec4\u7684\u53c2\u6570\u662f\uff1a url : \u8868\u793a\u8981\u8def\u7531\u7684URL\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a {prefix} - \u7528\u4e8e\u6b64\u7ec4\u8def\u7531\u7684URL\u524d\u7f00\u3002 {lookup} - \u7528\u4e8e\u4e0e\u5355\u4e2a\u5b9e\u4f8b\u8fdb\u884c\u5339\u914d\u7684\u67e5\u627e\u5b57\u6bb5\u3002 {trailing_slash} - \u53ef\u4ee5\u662f\u4e00\u4e2a'/'\u6216\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd9\u53d6\u51b3\u4e8e trailing_slash \u53c2\u6570\u3002 mapping : HTTP\u65b9\u6cd5\u540d\u79f0\u5230\u89c6\u56fe\u65b9\u6cd5\u7684\u6620\u5c04 name : \u5728 reverse \u8c03\u7528\u4e2d\u4f7f\u7528\u7684URL\u7684\u540d\u79f0\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a {basename} - \u7528\u4e8e\u521b\u5efa\u7684URL\u540d\u79f0\u7684\u57fa\u672c\u540d\u79f0 initkwargs : \u5b9e\u4f8b\u5316\u89c6\u56fe\u65f6\u5e94\u4f20\u9012\u7684\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u7684\u5b57\u5178\u3002\u6ce8\u610f\uff0c suffix \u53c2\u6570\u88ab\u4fdd\u7559\u7528\u4e8e\u6807\u8bc6\u89c6\u56fe\u96c6\u7c7b\u578b\uff0c\u5728\u751f\u6210\u89c6\u56fe\u540d\u79f0\u548c\u9762\u5305\u5c51\u94fe\u63a5\u65f6\u4f7f\u7528\u3002","title":"\u81ea\u5b9a\u4e49 Routers"},{"location":"api-guide/routers_zh/#_2","text":"\u4f60\u8fd8\u53ef\u4ee5\u5b9a\u5236 @ list_route \u548c @detail_route \u88c5\u9970\u5668\u7684\u8def\u7531\u3002\u8981\u8def\u7531\u8fd9\u4e9b\u88c5\u9970\u5668\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\uff0c\u8bf7\u5728 .routes \u5217\u8868\u4e2d\u5305\u542b\u4e00\u4e2a DynamicListRoute \u548c/\u6216 DynamicDetailRoute \u547d\u540d\u7684\u5143\u7ec4\u3002 DynamicListRoute \u548c DynamicDetailRoute \u7684\u53c2\u6570\u662f\uff1a url : \u8868\u793a\u8981\u8def\u7531\u7684URL\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u4ee5\u5305\u62ec\u4e0e\u201cRoute\u201d\u76f8\u540c\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53e6\u5916\u63a5\u53d7 {methodname} \u548c {methodnamehyphen} \u683c\u5f0f\u5b57\u7b26\u4e32\u3002 name : \u5728 reverse \u8c03\u7528\u4e2d\u4f7f\u7528\u7684URL\u7684\u540d\u79f0\u3002\u53ef\u80fd\u5305\u62ec\u4ee5\u4e0b\u683c\u5f0f\u5b57\u7b26\u4e32\uff1a {basename} \uff0c {methodname} \u548c {methodnamehyphen} \u3002 initkwargs : \u5b9e\u4f8b\u5316\u89c6\u56fe\u65f6\u5e94\u4f20\u9012\u7684\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u7684\u5b57\u5178\u3002","title":"\u81ea\u5b9a\u4e49\u52a8\u6001\u8def\u7531"},{"location":"api-guide/routers_zh/#_3","text":"\u4ee5\u4e0b\u793a\u4f8b\u5c06\u53ea\u8def\u7531\u5230 list \u548c retrieve \u64cd\u4f5c\uff0c\u5e76\u4e14\u4e0d\u4f7f\u7528\u5c3e\u90e8\u659c\u7ebf\u7ea6\u5b9a\u3002 from rest_framework.routers import Route, DynamicDetailRoute, SimpleRouter class CustomReadOnlyRouter(SimpleRouter): \"\"\" A router for read-only APIs, which doesn't use trailing slashes. \"\"\" routes = [ Route( url=r'^{prefix}$', mapping={'get': 'list'}, name='{basename}-list', initkwargs={'suffix': 'List'} ), Route( url=r'^{prefix}/{lookup}$', mapping={'get': 'retrieve'}, name='{basename}-detail', initkwargs={'suffix': 'Detail'} ), DynamicDetailRoute( url=r'^{prefix}/{lookup}/{methodnamehyphen}$', name='{basename}-{methodnamehyphen}', initkwargs={} ) ] \u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u5b9a\u4e49\u7684 CustomReadOnlyRouter \u4e3a\u7b80\u5355\u89c6\u56fe\u751f\u6210\u7684\u8def\u7531\u3002 views.py : class UserViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" A viewset that provides the standard actions \"\"\" queryset = User.objects.all() serializer_class = UserSerializer lookup_field = 'username' @detail_route() def group_names(self, request): \"\"\" Returns a list of all the group names that the given user belongs to. \"\"\" user = self.get_object() groups = user.groups.all() return Response([group.name for group in groups]) urls.py : router = CustomReadOnlyRouter() router.register('users', UserViewSet) urlpatterns = router.urls \u5c06\u751f\u6210\u4ee5\u4e0b\u6620\u5c04... URL HTTP \u65b9\u6cd5 \u52a8\u4f5c URL \u540d\u79f0 /users GET list user-list /users/{username} GET retrieve user-detail /users/{username}/group-names GET group_names user-group-names < /table \u6709\u5173\u8bbe\u7f6e`.routes`\u5c5e\u6027\u7684\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605`SimpleRouter`\u7c7b\u7684\u6e90\u4ee3\u7801\u3002 ## \u9ad8\u7ea7\u81ea\u5b9a\u4e49\u8def\u7531\u5668 \u5982\u679c\u4f60\u60f3\u63d0\u4f9b\u5b8c\u5168\u81ea\u5b9a\u4e49\u7684\u884c\u4e3a\uff0c\u4f60\u53ef\u4ee5\u8986\u5199`BaseRouter`\u5e76\u5199`get_urls\uff08self\uff09`\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u5e94\u8be5\u68c0\u67e5\u6ce8\u518c\u7684\u89c6\u56fe\u5e76\u8fd4\u56de\u4e00\u4e2aURL\u6a21\u5f0f\u5217\u8868\u3002\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee`self.registry`\u5c5e\u6027\u6765\u68c0\u67e5\u6ce8\u518c\u7684\u524d\u7f00\uff0c\u89c6\u56fe\u96c6\u548c\u57fa\u672c\u540d\u5143\u7ec4\u3002 \u4f60\u53ef\u80fd\u8fd8\u60f3\u8986\u76d6`get_default_base_name\uff08self\uff0cviewset\uff09`\u65b9\u6cd5\uff0c\u6216\u8005\u5728\u8def\u7531\u5668\u6ce8\u518c\u4f60\u7684\u89c6\u56fe\u65f6\u603b\u662f\u663e\u5f0f\u5730\u8bbe\u7f6e`base_name`\u53c2\u6570\u3002 # \u7b2c\u4e09\u65b9\u5305 \u8fd8\u63d0\u4f9b\u4ee5\u4e0b\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u3002 ## DRF\u5d4c\u5957\u8def\u7531\u5668 [drf-nested-routers \u5305][drf-nested-routers] \u63d0\u4f9b\u4e86\u4f7f\u7528\u5d4c\u5957\u8d44\u6e90\u7684\u8def\u7531\u5668\u548c\u5173\u7cfb\u5b57\u6bb5\u3002 ## ModelRouter (wq.db.rest) The [wq.db \u5305][wq.db] \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528`register_model()`API\u6269\u5c55`DefaultRouter`\u7684\u9ad8\u7ea7[ModelRouter] [wq.db-router]\u7c7b\uff08\u548csingleton\u5b9e\u4f8b\uff09\u3002\u5f88\u50cfDjango\u7684`admin.site.register`\uff0c`rest.router.register_model`\u552f\u4e00\u9700\u8981\u7684\u53c2\u6570\u662f\u4e00\u4e2amodel\u7c7b\u3002url\u524d\u7f00\uff0c\u5e8f\u5217\u5316\u5668\u548c\u89c6\u56fe\u96c6\u7684\u5408\u7406\u9ed8\u8ba4\u503c\u5c06\u4ece\u6a21\u578b\u548c\u5168\u5c40\u914d\u7f6e\u4e2d\u63a8\u65ad\u51fa\u6765\u3002 from wq.db import rest from myapp.models import MyModel rest.router.register_model(MyModel) ## DRF-extensions [`DRF-extensions`\u5305][drf-extensions] \u63d0\u4f9b\u7528\u4e8e\u521b\u5efa [\u5d4c\u5957\u89c6\u56fe][drf-extensions-nested-viewsets]\u7684[\u8def\u7531\u5668][drf-extensions-routers], \u5177\u6709 [\u53ef\u5b9a\u5236\u7aef\u70b9\u540d\u79f0][drf-extensions-customizable-endpoint-names]\u7684[\u96c6\u5408\u7ea7\u522b\u63a7\u5236\u5668][drf-extensions-collection-level-controllers]\u3002 [cite]: http://guides.rubyonrails.org/routing.html [route-decorators]: viewsets.md#marking-extra-actions-for-routing [drf-nested-routers]: https://github.com/alanjds/drf-nested-routers [wq.db]: http://wq.io/wq.db [wq.db-router]: http://wq.io/docs/router [drf-extensions]: http://chibisov.github.io/drf-extensions/docs/ [drf-extensions-routers]: http://chibisov.github.io/drf-extensions/docs/#routers [drf-extensions-nested-viewsets]: http://chibisov.github.io/drf-extensions/docs/#nested-routes [drf-extensions-collection-level-controllers]: http://chibisov.github.io/drf-extensions/docs/#collection-level-controllers [drf-extensions-customizable-endpoint-names]: http://chibisov.github.io/drf-extensions/docs/#controller-endpoint-name","title":"\u4f8b\u5b50"},{"location":"api-guide/schemas/","text":"Schema A machine-readable [schema] describes what resources are available via the API, what their URLs are, how they are represented and what operations they support. \u2014 Heroku, [JSON Schema for the Heroku Platform API][cite] API schemas are a useful tool that allow for a range of use cases, including generating reference documentation, or driving dynamic client libraries that can interact with your API. Django REST Framework provides support for automatic generation of OpenAPI schemas. Generating an OpenAPI Schema Install dependencies pip install pyyaml uritemplate pyyaml is used to generate schema into YAML-based OpenAPI format. uritemplate is used internally to get parameters in path. Generating a static schema with the generateschema management command If your schema is static, you can use the generateschema management command: ./manage.py generateschema --file openapi-schema.yml Once you've generated a schema in this way you can annotate it with any additional information that cannot be automatically inferred by the schema generator. You might want to check your API schema into version control and update it with each new release, or serve the API schema from your site's static media. Generating a dynamic schema with SchemaView If you require a dynamic schema, because foreign key choices depend on database values, for example, you can route a SchemaView that will generate and serve your schema on demand. To route a SchemaView , use the get_schema_view() helper. In urls.py : from rest_framework.schemas import get_schema_view urlpatterns = [ # ... # Use the `get_schema_view()` helper to add a `SchemaView` to project URLs. # * `title` and `description` parameters are passed to `SchemaGenerator`. # * Provide view name for use with `reverse()`. path('openapi', get_schema_view( title=\"Your Project\", description=\"API for all things \u2026\", version=\"1.0.0\" ), name='openapi-schema'), # ... ] get_schema_view() The get_schema_view() helper takes the following keyword arguments: title : May be used to provide a descriptive title for the schema definition. description : Longer descriptive text. version : The version of the API. url : May be used to pass a canonical base URL for the schema. schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/' ) urlconf : A string representing the import path to the URL conf that you want to generate an API schema for. This defaults to the value of Django's ROOT_URLCONF setting. schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', urlconf='myproject.urls' ) patterns : List of url patterns to limit the schema introspection to. If you only want the myproject.api urls to be exposed in the schema: schema_url_patterns = [ url(r'^api/', include('myproject.api.urls')), ] schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', patterns=schema_url_patterns, ) generator_class : May be used to specify a SchemaGenerator subclass to be passed to the SchemaView . authentication_classes : May be used to specify the list of authentication classes that will apply to the schema endpoint. Defaults to settings.DEFAULT_AUTHENTICATION_CLASSES permission_classes : May be used to specify the list of permission classes that will apply to the schema endpoint. Defaults to settings.DEFAULT_PERMISSION_CLASSES . renderer_classes : May be used to pass the set of renderer classes that can be used to render the API root endpoint. Customizing Schema Generation You may customize schema generation at the level of the schema as a whole, or on a per-view basis. Schema Level Customization In order to customize the top-level schema subclass rest_framework.schemas.openapi.SchemaGenerator and provide it as an argument to the generateschema command or get_schema_view() helper function. SchemaGenerator A class that walks a list of routed URL patterns, requests the schema for each view and collates the resulting OpenAPI schema. Typically you'll instantiate SchemaGenerator with a title argument, like so: generator = SchemaGenerator(title='Stock Prices API') Arguments: title required : The name of the API. description : Longer descriptive text. version : The version of the API. Defaults to 0.1.0 . url : The root URL of the API schema. This option is not required unless the schema is included under path prefix. patterns : A list of URLs to inspect when generating the schema. Defaults to the project's URL conf. urlconf : A URL conf module name to use when generating the schema. Defaults to settings.ROOT_URLCONF . get_schema(self, request) Returns a dictionary that represents the OpenAPI schema: generator = SchemaGenerator(title='Stock Prices API') schema = generator.get_schema() The request argument is optional, and may be used if you want to apply per-user permissions to the resulting schema generation. This is a good point to override if you want to customize the generated dictionary, for example to add custom specification extensions . Per-View Customization By default, view introspection is performed by an AutoSchema instance accessible via the schema attribute on APIView . This provides the appropriate Open API operation object for the view, request method and path: auto_schema = view.schema operation = auto_schema.get_operation(...) In compiling the schema, SchemaGenerator calls view.schema.get_operation() for each view, allowed method, and path. Note : For basic APIView subclasses, default introspection is essentially limited to the URL kwarg path parameters. For GenericAPIView subclasses, which includes all the provided class based views, AutoSchema will attempt to introspect serializer, pagination and filter fields, as well as provide richer path field descriptions. (The key hooks here are the relevant GenericAPIView attributes and methods: get_serializer , pagination_class , filter_backends and so on.) In order to customize the operation generation, you should provide an AutoSchema subclass, overriding get_operation() as you need: from rest_framework.views import APIView from rest_framework.schemas.openapi import AutoSchema class CustomSchema(AutoSchema): def get_operation(...): # Implement custom introspection here (or in other sub-methods) class CustomView(APIView): \"\"\"APIView subclass with custom schema introspection.\"\"\" schema = CustomSchema() This provides complete control over view introspection. You may disable schema generation for a view by setting schema to None : class CustomView(APIView): ... schema = None # Will not appear in schema This also applies to extra actions for ViewSet s: class CustomViewSet(viewsets.ModelViewSet): @action(detail=True, schema=None) def extra_action(self, request, pk=None): ... If you wish to provide a base AutoSchema subclass to be used throughout your project you may adjust settings.DEFAULT_SCHEMA_CLASS appropriately. Grouping Operations With Tags Tags can be used to group logical operations. Each tag name in the list MUST be unique. Django REST Framework generates tags automatically with the following logic: Tag name will be first element from the path. Also, any _ in path name will be replaced by a - . Consider below examples. Example 1: Consider a user management system. The following table will illustrate the tag generation logic. Here first element from the paths is: users . Hence tag wil be users Http Method Path Tags PUT, PATCH, GET(Retrieve), DELETE /users/{id}/ ['users'] POST, GET(List) /users/ ['users'] Example 2: Consider a restaurant management system. The System has restaurants. Each restaurant has branches. Consider REST APIs to deal with a branch of a particular restaurant. Here first element from the paths is: restaurants . Hence tag wil be restaurants . Http Method Path Tags PUT, PATCH, GET(Retrieve), DELETE: /restaurants/{restaurant_id}/branches/{branch_id} ['restaurants'] POST, GET(List): /restaurants/{restaurant_id}/branches/ ['restaurants'] Example 3: Consider Order items for an e commerce company. Http Method Path Tags PUT, PATCH, GET(Retrieve), DELETE /order_items/{id}/ ['order-items'] POST, GET(List) /order_items/ ['order-items'] Overriding auto generated tags: You can override auto-generated tags by passing tags argument to the constructor of AutoSchema . tags argument must be a list or tuple of string. from rest_framework.schemas.openapi import AutoSchema from rest_framework.views import APIView class MyView(APIView): schema = AutoSchema(tags=['tag1', 'tag2']) ... If you need more customization, you can override the get_tags method of AutoSchema class. Consider the following example: from rest_framework.schemas.openapi import AutoSchema from rest_framework.views import APIView class MySchema(AutoSchema): ... def get_tags(self, path, method): if method == 'POST': tags = ['tag1', 'tag2'] elif method == 'GET': tags = ['tag2', 'tag3'] elif path == '/example/path/': tags = ['tag3', 'tag4'] else: tags = ['tag5', 'tag6', 'tag7'] return tags class MyView(APIView): schema = MySchema() ... OperationId The schema generator generates an operationid for each operation. This operationId is deduced from the model name, serializer name or view name. The operationId may looks like \"listItems\", \"retrieveItem\", \"updateItem\", etc.. The operationId is camelCase by convention. If you have several views with the same model, the generator may generate duplicate operationId. In order to work around this, you can override the second part of the operationId: operation name. from rest_framework.schemas.openapi import AutoSchema class ExampleView(APIView): \"\"\"APIView subclass with custom schema introspection.\"\"\" schema = AutoSchema(operation_id_base=\"Custom\") The previous example will generate the following operationId: \"listCustoms\", \"retrieveCustom\", \"updateCustom\", \"partialUpdateCustom\", \"destroyCustom\". You need to provide the singular form of he operation name. For the list operation, a \"s\" will be appended at the end of the operation. If you need more configuration over the operationId field, you can override the get_operation_id_base and get_operation_id methods from the AutoSchema class: class CustomSchema(AutoSchema): def get_operation_id_base(self, path, method, action): pass def get_operation_id(self, path, method): pass class MyView(APIView): schema = AutoSchema(component_name=\"Ulysses\") Components Since DRF 3.12, Schema uses the OpenAPI Components . This method defines components in the schema and references them inside request and response objects. By default, the component's name is deduced from the Serializer's name. Using OpenAPI's components provides the following advantages: The schema is more readable and lightweight. If you use the schema to generate an SDK (using openapi-generator or swagger-codegen ). The generator can name your SDK's models. Handling component's schema errors You may get the following error while generating the schema: \"Serializer\" is an invalid class name for schema generation. Serializer's class name should be unique and explicit. e.g. \"ItemSerializer\". This error occurs when the Serializer name is \"Serializer\". You should choose a component's name unique across your schema and different than \"Serializer\". You may also get the following warning: Schema component \"ComponentName\" has been overriden with a different value. This warning occurs when different components have the same name in one schema. Your component name should be unique across your project. This is likely an error that may lead to an invalid schema. You have two ways to solve the previous issues: You can rename your serializer with a unique name and another name than \"Serializer\". You can set the component_name kwarg parameter of the AutoSchema constructor (see below). You can override the get_component_name method of the AutoSchema class (see below). Set a custom component's name for your view To override the component's name in your view, you can use the component_name parameter of the AutoSchema constructor: from rest_framework.schemas.openapi import AutoSchema class MyView(APIView): schema = AutoSchema(component_name=\"Ulysses\") Override the default implementation If you want to have more control and customization about how the schema's components are generated, you can override the get_component_name and get_components method from the AutoSchema class. from rest_framework.schemas.openapi import AutoSchema class CustomSchema(AutoSchema): def get_components(self, path, method): # Implement your custom implementation def get_component_name(self, serializer): # Implement your custom implementation class CustomView(APIView): \"\"\"APIView subclass with custom schema introspection.\"\"\" schema = CustomSchema()","title":"Schemas"},{"location":"api-guide/schemas/#schema","text":"A machine-readable [schema] describes what resources are available via the API, what their URLs are, how they are represented and what operations they support. \u2014 Heroku, [JSON Schema for the Heroku Platform API][cite] API schemas are a useful tool that allow for a range of use cases, including generating reference documentation, or driving dynamic client libraries that can interact with your API. Django REST Framework provides support for automatic generation of OpenAPI schemas.","title":"Schema"},{"location":"api-guide/schemas/#generating-an-openapi-schema","text":"","title":"Generating an OpenAPI Schema"},{"location":"api-guide/schemas/#install-dependencies","text":"pip install pyyaml uritemplate pyyaml is used to generate schema into YAML-based OpenAPI format. uritemplate is used internally to get parameters in path.","title":"Install dependencies"},{"location":"api-guide/schemas/#generating-a-static-schema-with-the-generateschema-management-command","text":"If your schema is static, you can use the generateschema management command: ./manage.py generateschema --file openapi-schema.yml Once you've generated a schema in this way you can annotate it with any additional information that cannot be automatically inferred by the schema generator. You might want to check your API schema into version control and update it with each new release, or serve the API schema from your site's static media.","title":"Generating a static schema with the generateschema management command"},{"location":"api-guide/schemas/#generating-a-dynamic-schema-with-schemaview","text":"If you require a dynamic schema, because foreign key choices depend on database values, for example, you can route a SchemaView that will generate and serve your schema on demand. To route a SchemaView , use the get_schema_view() helper. In urls.py : from rest_framework.schemas import get_schema_view urlpatterns = [ # ... # Use the `get_schema_view()` helper to add a `SchemaView` to project URLs. # * `title` and `description` parameters are passed to `SchemaGenerator`. # * Provide view name for use with `reverse()`. path('openapi', get_schema_view( title=\"Your Project\", description=\"API for all things \u2026\", version=\"1.0.0\" ), name='openapi-schema'), # ... ]","title":"Generating a dynamic schema with SchemaView"},{"location":"api-guide/schemas/#get_schema_view","text":"The get_schema_view() helper takes the following keyword arguments: title : May be used to provide a descriptive title for the schema definition. description : Longer descriptive text. version : The version of the API. url : May be used to pass a canonical base URL for the schema. schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/' ) urlconf : A string representing the import path to the URL conf that you want to generate an API schema for. This defaults to the value of Django's ROOT_URLCONF setting. schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', urlconf='myproject.urls' ) patterns : List of url patterns to limit the schema introspection to. If you only want the myproject.api urls to be exposed in the schema: schema_url_patterns = [ url(r'^api/', include('myproject.api.urls')), ] schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', patterns=schema_url_patterns, ) generator_class : May be used to specify a SchemaGenerator subclass to be passed to the SchemaView . authentication_classes : May be used to specify the list of authentication classes that will apply to the schema endpoint. Defaults to settings.DEFAULT_AUTHENTICATION_CLASSES permission_classes : May be used to specify the list of permission classes that will apply to the schema endpoint. Defaults to settings.DEFAULT_PERMISSION_CLASSES . renderer_classes : May be used to pass the set of renderer classes that can be used to render the API root endpoint.","title":"get_schema_view()"},{"location":"api-guide/schemas/#customizing-schema-generation","text":"You may customize schema generation at the level of the schema as a whole, or on a per-view basis.","title":"Customizing Schema Generation"},{"location":"api-guide/schemas/#schema-level-customization","text":"In order to customize the top-level schema subclass rest_framework.schemas.openapi.SchemaGenerator and provide it as an argument to the generateschema command or get_schema_view() helper function.","title":"Schema Level Customization"},{"location":"api-guide/schemas/#schemagenerator","text":"A class that walks a list of routed URL patterns, requests the schema for each view and collates the resulting OpenAPI schema. Typically you'll instantiate SchemaGenerator with a title argument, like so: generator = SchemaGenerator(title='Stock Prices API') Arguments: title required : The name of the API. description : Longer descriptive text. version : The version of the API. Defaults to 0.1.0 . url : The root URL of the API schema. This option is not required unless the schema is included under path prefix. patterns : A list of URLs to inspect when generating the schema. Defaults to the project's URL conf. urlconf : A URL conf module name to use when generating the schema. Defaults to settings.ROOT_URLCONF .","title":"SchemaGenerator"},{"location":"api-guide/schemas/#get_schemaself-request","text":"Returns a dictionary that represents the OpenAPI schema: generator = SchemaGenerator(title='Stock Prices API') schema = generator.get_schema() The request argument is optional, and may be used if you want to apply per-user permissions to the resulting schema generation. This is a good point to override if you want to customize the generated dictionary, for example to add custom specification extensions .","title":"get_schema(self, request)"},{"location":"api-guide/schemas/#per-view-customization","text":"By default, view introspection is performed by an AutoSchema instance accessible via the schema attribute on APIView . This provides the appropriate Open API operation object for the view, request method and path: auto_schema = view.schema operation = auto_schema.get_operation(...) In compiling the schema, SchemaGenerator calls view.schema.get_operation() for each view, allowed method, and path. Note : For basic APIView subclasses, default introspection is essentially limited to the URL kwarg path parameters. For GenericAPIView subclasses, which includes all the provided class based views, AutoSchema will attempt to introspect serializer, pagination and filter fields, as well as provide richer path field descriptions. (The key hooks here are the relevant GenericAPIView attributes and methods: get_serializer , pagination_class , filter_backends and so on.) In order to customize the operation generation, you should provide an AutoSchema subclass, overriding get_operation() as you need: from rest_framework.views import APIView from rest_framework.schemas.openapi import AutoSchema class CustomSchema(AutoSchema): def get_operation(...): # Implement custom introspection here (or in other sub-methods) class CustomView(APIView): \"\"\"APIView subclass with custom schema introspection.\"\"\" schema = CustomSchema() This provides complete control over view introspection. You may disable schema generation for a view by setting schema to None : class CustomView(APIView): ... schema = None # Will not appear in schema This also applies to extra actions for ViewSet s: class CustomViewSet(viewsets.ModelViewSet): @action(detail=True, schema=None) def extra_action(self, request, pk=None): ... If you wish to provide a base AutoSchema subclass to be used throughout your project you may adjust settings.DEFAULT_SCHEMA_CLASS appropriately.","title":"Per-View Customization"},{"location":"api-guide/schemas/#grouping-operations-with-tags","text":"Tags can be used to group logical operations. Each tag name in the list MUST be unique.","title":"Grouping Operations With Tags"},{"location":"api-guide/schemas/#django-rest-framework-generates-tags-automatically-with-the-following-logic","text":"Tag name will be first element from the path. Also, any _ in path name will be replaced by a - . Consider below examples. Example 1: Consider a user management system. The following table will illustrate the tag generation logic. Here first element from the paths is: users . Hence tag wil be users Http Method Path Tags PUT, PATCH, GET(Retrieve), DELETE /users/{id}/ ['users'] POST, GET(List) /users/ ['users'] Example 2: Consider a restaurant management system. The System has restaurants. Each restaurant has branches. Consider REST APIs to deal with a branch of a particular restaurant. Here first element from the paths is: restaurants . Hence tag wil be restaurants . Http Method Path Tags PUT, PATCH, GET(Retrieve), DELETE: /restaurants/{restaurant_id}/branches/{branch_id} ['restaurants'] POST, GET(List): /restaurants/{restaurant_id}/branches/ ['restaurants'] Example 3: Consider Order items for an e commerce company. Http Method Path Tags PUT, PATCH, GET(Retrieve), DELETE /order_items/{id}/ ['order-items'] POST, GET(List) /order_items/ ['order-items']","title":"Django REST Framework generates tags automatically with the following logic:"},{"location":"api-guide/schemas/#overriding-auto-generated-tags","text":"You can override auto-generated tags by passing tags argument to the constructor of AutoSchema . tags argument must be a list or tuple of string. from rest_framework.schemas.openapi import AutoSchema from rest_framework.views import APIView class MyView(APIView): schema = AutoSchema(tags=['tag1', 'tag2']) ... If you need more customization, you can override the get_tags method of AutoSchema class. Consider the following example: from rest_framework.schemas.openapi import AutoSchema from rest_framework.views import APIView class MySchema(AutoSchema): ... def get_tags(self, path, method): if method == 'POST': tags = ['tag1', 'tag2'] elif method == 'GET': tags = ['tag2', 'tag3'] elif path == '/example/path/': tags = ['tag3', 'tag4'] else: tags = ['tag5', 'tag6', 'tag7'] return tags class MyView(APIView): schema = MySchema() ...","title":"Overriding auto generated tags:"},{"location":"api-guide/schemas/#operationid","text":"The schema generator generates an operationid for each operation. This operationId is deduced from the model name, serializer name or view name. The operationId may looks like \"listItems\", \"retrieveItem\", \"updateItem\", etc.. The operationId is camelCase by convention. If you have several views with the same model, the generator may generate duplicate operationId. In order to work around this, you can override the second part of the operationId: operation name. from rest_framework.schemas.openapi import AutoSchema class ExampleView(APIView): \"\"\"APIView subclass with custom schema introspection.\"\"\" schema = AutoSchema(operation_id_base=\"Custom\") The previous example will generate the following operationId: \"listCustoms\", \"retrieveCustom\", \"updateCustom\", \"partialUpdateCustom\", \"destroyCustom\". You need to provide the singular form of he operation name. For the list operation, a \"s\" will be appended at the end of the operation. If you need more configuration over the operationId field, you can override the get_operation_id_base and get_operation_id methods from the AutoSchema class: class CustomSchema(AutoSchema): def get_operation_id_base(self, path, method, action): pass def get_operation_id(self, path, method): pass class MyView(APIView): schema = AutoSchema(component_name=\"Ulysses\")","title":"OperationId"},{"location":"api-guide/schemas/#components","text":"Since DRF 3.12, Schema uses the OpenAPI Components . This method defines components in the schema and references them inside request and response objects. By default, the component's name is deduced from the Serializer's name. Using OpenAPI's components provides the following advantages: The schema is more readable and lightweight. If you use the schema to generate an SDK (using openapi-generator or swagger-codegen ). The generator can name your SDK's models.","title":"Components"},{"location":"api-guide/schemas/#handling-components-schema-errors","text":"You may get the following error while generating the schema: \"Serializer\" is an invalid class name for schema generation. Serializer's class name should be unique and explicit. e.g. \"ItemSerializer\". This error occurs when the Serializer name is \"Serializer\". You should choose a component's name unique across your schema and different than \"Serializer\". You may also get the following warning: Schema component \"ComponentName\" has been overriden with a different value. This warning occurs when different components have the same name in one schema. Your component name should be unique across your project. This is likely an error that may lead to an invalid schema. You have two ways to solve the previous issues: You can rename your serializer with a unique name and another name than \"Serializer\". You can set the component_name kwarg parameter of the AutoSchema constructor (see below). You can override the get_component_name method of the AutoSchema class (see below).","title":"Handling component's schema errors"},{"location":"api-guide/schemas/#set-a-custom-components-name-for-your-view","text":"To override the component's name in your view, you can use the component_name parameter of the AutoSchema constructor: from rest_framework.schemas.openapi import AutoSchema class MyView(APIView): schema = AutoSchema(component_name=\"Ulysses\")","title":"Set a custom component's name for your view"},{"location":"api-guide/schemas/#override-the-default-implementation","text":"If you want to have more control and customization about how the schema's components are generated, you can override the get_component_name and get_components method from the AutoSchema class. from rest_framework.schemas.openapi import AutoSchema class CustomSchema(AutoSchema): def get_components(self, path, method): # Implement your custom implementation def get_component_name(self, serializer): # Implement your custom implementation class CustomView(APIView): \"\"\"APIView subclass with custom schema introspection.\"\"\" schema = CustomSchema()","title":"Override the default implementation"},{"location":"api-guide/serializers/","text":"Serializers Expanding the usefulness of the serializers is something that we would like to address. However, it's not a trivial problem, and it will take some serious design work. \u2014 Russell Keith-Magee, Django users group Serializers allow complex data such as querysets and model instances to be converted to native Python datatypes that can then be easily rendered into JSON , XML or other content types. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming data. The serializers in REST framework work very similarly to Django's Form and ModelForm classes. We provide a Serializer class which gives you a powerful, generic way to control the output of your responses, as well as a ModelSerializer class which provides a useful shortcut for creating serializers that deal with model instances and querysets. Declaring Serializers Let's start by creating a simple object we can use for example purposes: from datetime import datetime class Comment: def __init__(self, email, content, created=None): self.email = email self.content = content self.created = created or datetime.now() comment = Comment(email='leila@example.com', content='foo bar') We'll declare a serializer that we can use to serialize and deserialize data that corresponds to Comment objects. Declaring a serializer looks very similar to declaring a form: from rest_framework import serializers class CommentSerializer(serializers.Serializer): email = serializers.EmailField() content = serializers.CharField(max_length=200) created = serializers.DateTimeField() Serializing objects We can now use CommentSerializer to serialize a comment, or list of comments. Again, using the Serializer class looks a lot like using a Form class. serializer = CommentSerializer(comment) serializer.data # {'email': 'leila@example.com', 'content': 'foo bar', 'created': '2016-01-27T15:17:10.375877'} At this point we've translated the model instance into Python native datatypes. To finalise the serialization process we render the data into json . from rest_framework.renderers import JSONRenderer json = JSONRenderer().render(serializer.data) json # b'{\"email\":\"leila@example.com\",\"content\":\"foo bar\",\"created\":\"2016-01-27T15:17:10.375877\"}' Deserializing objects Deserialization is similar. First we parse a stream into Python native datatypes... import io from rest_framework.parsers import JSONParser stream = io.BytesIO(json) data = JSONParser().parse(stream) ...then we restore those native datatypes into a dictionary of validated data. serializer = CommentSerializer(data=data) serializer.is_valid() # True serializer.validated_data # {'content': 'foo bar', 'email': 'leila@example.com', 'created': datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)} Saving instances If we want to be able to return complete object instances based on the validated data we need to implement one or both of the .create() and .update() methods. For example: class CommentSerializer(serializers.Serializer): email = serializers.EmailField() content = serializers.CharField(max_length=200) created = serializers.DateTimeField() def create(self, validated_data): return Comment(**validated_data) def update(self, instance, validated_data): instance.email = validated_data.get('email', instance.email) instance.content = validated_data.get('content', instance.content) instance.created = validated_data.get('created', instance.created) return instance If your object instances correspond to Django models you'll also want to ensure that these methods save the object to the database. For example, if Comment was a Django model, the methods might look like this: def create(self, validated_data): return Comment.objects.create(**validated_data) def update(self, instance, validated_data): instance.email = validated_data.get('email', instance.email) instance.content = validated_data.get('content', instance.content) instance.created = validated_data.get('created', instance.created) instance.save() return instance Now when deserializing data, we can call .save() to return an object instance, based on the validated data. comment = serializer.save() Calling .save() will either create a new instance, or update an existing instance, depending on if an existing instance was passed when instantiating the serializer class: # .save() will create a new instance. serializer = CommentSerializer(data=data) # .save() will update the existing `comment` instance. serializer = CommentSerializer(comment, data=data) Both the .create() and .update() methods are optional. You can implement either neither, one, or both of them, depending on the use-case for your serializer class. Passing additional attributes to .save() Sometimes you'll want your view code to be able to inject additional data at the point of saving the instance. This additional data might include information like the current user, the current time, or anything else that is not part of the request data. You can do so by including additional keyword arguments when calling .save() . For example: serializer.save(owner=request.user) Any additional keyword arguments will be included in the validated_data argument when .create() or .update() are called. Overriding .save() directly. In some cases the .create() and .update() method names may not be meaningful. For example, in a contact form we may not be creating new instances, but instead sending an email or other message. In these cases you might instead choose to override .save() directly, as being more readable and meaningful. For example: class ContactForm(serializers.Serializer): email = serializers.EmailField() message = serializers.CharField() def save(self): email = self.validated_data['email'] message = self.validated_data['message'] send_email(from=email, message=message) Note that in the case above we're now having to access the serializer .validated_data property directly. Validation When deserializing data, you always need to call is_valid() before attempting to access the validated data, or save an object instance. If any validation errors occur, the .errors property will contain a dictionary representing the resulting error messages. For example: serializer = CommentSerializer(data={'email': 'foobar', 'content': 'baz'}) serializer.is_valid() # False serializer.errors # {'email': ['Enter a valid e-mail address.'], 'created': ['This field is required.']} Each key in the dictionary will be the field name, and the values will be lists of strings of any error messages corresponding to that field. The non_field_errors key may also be present, and will list any general validation errors. The name of the non_field_errors key may be customized using the NON_FIELD_ERRORS_KEY REST framework setting. When deserializing a list of items, errors will be returned as a list of dictionaries representing each of the deserialized items. Raising an exception on invalid data The .is_valid() method takes an optional raise_exception flag that will cause it to raise a serializers.ValidationError exception if there are validation errors. These exceptions are automatically dealt with by the default exception handler that REST framework provides, and will return HTTP 400 Bad Request responses by default. # Return a 400 response if the data was invalid. serializer.is_valid(raise_exception=True) Field-level validation You can specify custom field-level validation by adding .validate_<field_name> methods to your Serializer subclass. These are similar to the .clean_<field_name> methods on Django forms. These methods take a single argument, which is the field value that requires validation. Your validate_<field_name> methods should return the validated value or raise a serializers.ValidationError . For example: from rest_framework import serializers class BlogPostSerializer(serializers.Serializer): title = serializers.CharField(max_length=100) content = serializers.CharField() def validate_title(self, value): \"\"\" Check that the blog post is about Django. \"\"\" if 'django' not in value.lower(): raise serializers.ValidationError(\"Blog post is not about Django\") return value Note: If your <field_name> is declared on your serializer with the parameter required=False then this validation step will not take place if the field is not included. Object-level validation To do any other validation that requires access to multiple fields, add a method called .validate() to your Serializer subclass. This method takes a single argument, which is a dictionary of field values. It should raise a serializers.ValidationError if necessary, or just return the validated values. For example: from rest_framework import serializers class EventSerializer(serializers.Serializer): description = serializers.CharField(max_length=100) start = serializers.DateTimeField() finish = serializers.DateTimeField() def validate(self, data): \"\"\" Check that start is before finish. \"\"\" if data['start'] > data['finish']: raise serializers.ValidationError(\"finish must occur after start\") return data Validators Individual fields on a serializer can include validators, by declaring them on the field instance, for example: def multiple_of_ten(value): if value % 10 != 0: raise serializers.ValidationError('Not a multiple of ten') class GameRecord(serializers.Serializer): score = IntegerField(validators=[multiple_of_ten]) ... Serializer classes can also include reusable validators that are applied to the complete set of field data. These validators are included by declaring them on an inner Meta class, like so: class EventSerializer(serializers.Serializer): name = serializers.CharField() room_number = serializers.IntegerField(choices=[101, 102, 103, 201]) date = serializers.DateField() class Meta: # Each room only has one event per day. validators = [ UniqueTogetherValidator( queryset=Event.objects.all(), fields=['room_number', 'date'] ) ] For more information see the validators documentation . Accessing the initial data and instance When passing an initial object or queryset to a serializer instance, the object will be made available as .instance . If no initial object is passed then the .instance attribute will be None . When passing data to a serializer instance, the unmodified data will be made available as .initial_data . If the data keyword argument is not passed then the .initial_data attribute will not exist. Partial updates By default, serializers must be passed values for all required fields or they will raise validation errors. You can use the partial argument in order to allow partial updates. # Update `comment` with partial data serializer = CommentSerializer(comment, data={'content': 'foo bar'}, partial=True) Dealing with nested objects The previous examples are fine for dealing with objects that only have simple datatypes, but sometimes we also need to be able to represent more complex objects, where some of the attributes of an object might not be simple datatypes such as strings, dates or integers. The Serializer class is itself a type of Field , and can be used to represent relationships where one object type is nested inside another. class UserSerializer(serializers.Serializer): email = serializers.EmailField() username = serializers.CharField(max_length=100) class CommentSerializer(serializers.Serializer): user = UserSerializer() content = serializers.CharField(max_length=200) created = serializers.DateTimeField() If a nested representation may optionally accept the None value you should pass the required=False flag to the nested serializer. class CommentSerializer(serializers.Serializer): user = UserSerializer(required=False) # May be an anonymous user. content = serializers.CharField(max_length=200) created = serializers.DateTimeField() Similarly if a nested representation should be a list of items, you should pass the many=True flag to the nested serialized. class CommentSerializer(serializers.Serializer): user = UserSerializer(required=False) edits = EditItemSerializer(many=True) # A nested list of 'edit' items. content = serializers.CharField(max_length=200) created = serializers.DateTimeField() Writable nested representations When dealing with nested representations that support deserializing the data, any errors with nested objects will be nested under the field name of the nested object. serializer = CommentSerializer(data={'user': {'email': 'foobar', 'username': 'doe'}, 'content': 'baz'}) serializer.is_valid() # False serializer.errors # {'user': {'email': ['Enter a valid e-mail address.']}, 'created': ['This field is required.']} Similarly, the .validated_data property will include nested data structures. Writing .create() methods for nested representations If you're supporting writable nested representations you'll need to write .create() or .update() methods that handle saving multiple objects. The following example demonstrates how you might handle creating a user with a nested profile object. class UserSerializer(serializers.ModelSerializer): profile = ProfileSerializer() class Meta: model = User fields = ['username', 'email', 'profile'] def create(self, validated_data): profile_data = validated_data.pop('profile') user = User.objects.create(**validated_data) Profile.objects.create(user=user, **profile_data) return user Writing .update() methods for nested representations For updates you'll want to think carefully about how to handle updates to relationships. For example if the data for the relationship is None , or not provided, which of the following should occur? Set the relationship to NULL in the database. Delete the associated instance. Ignore the data and leave the instance as it is. Raise a validation error. Here's an example for an .update() method on our previous UserSerializer class. def update(self, instance, validated_data): profile_data = validated_data.pop('profile') # Unless the application properly enforces that this field is # always set, the following could raise a `DoesNotExist`, which # would need to be handled. profile = instance.profile instance.username = validated_data.get('username', instance.username) instance.email = validated_data.get('email', instance.email) instance.save() profile.is_premium_member = profile_data.get( 'is_premium_member', profile.is_premium_member ) profile.has_support_contract = profile_data.get( 'has_support_contract', profile.has_support_contract ) profile.save() return instance Because the behavior of nested creates and updates can be ambiguous, and may require complex dependencies between related models, REST framework 3 requires you to always write these methods explicitly. The default ModelSerializer .create() and .update() methods do not include support for writable nested representations. There are however, third-party packages available such as DRF Writable Nested that support automatic writable nested representations. Handling saving related instances in model manager classes An alternative to saving multiple related instances in the serializer is to write custom model manager classes that handle creating the correct instances. For example, suppose we wanted to ensure that User instances and Profile instances are always created together as a pair. We might write a custom manager class that looks something like this: class UserManager(models.Manager): ... def create(self, username, email, is_premium_member=False, has_support_contract=False): user = User(username=username, email=email) user.save() profile = Profile( user=user, is_premium_member=is_premium_member, has_support_contract=has_support_contract ) profile.save() return user This manager class now more nicely encapsulates that user instances and profile instances are always created at the same time. Our .create() method on the serializer class can now be re-written to use the new manager method. def create(self, validated_data): return User.objects.create( username=validated_data['username'], email=validated_data['email'], is_premium_member=validated_data['profile']['is_premium_member'], has_support_contract=validated_data['profile']['has_support_contract'] ) For more details on this approach see the Django documentation on model managers , and this blogpost on using model and manager classes . Dealing with multiple objects The Serializer class can also handle serializing or deserializing lists of objects. Serializing multiple objects To serialize a queryset or list of objects instead of a single object instance, you should pass the many=True flag when instantiating the serializer. You can then pass a queryset or list of objects to be serialized. queryset = Book.objects.all() serializer = BookSerializer(queryset, many=True) serializer.data # [ # {'id': 0, 'title': 'The electric kool-aid acid test', 'author': 'Tom Wolfe'}, # {'id': 1, 'title': 'If this is a man', 'author': 'Primo Levi'}, # {'id': 2, 'title': 'The wind-up bird chronicle', 'author': 'Haruki Murakami'} # ] Deserializing multiple objects The default behavior for deserializing multiple objects is to support multiple object creation, but not support multiple object updates. For more information on how to support or customize either of these cases, see the ListSerializer documentation below. Including extra context There are some cases where you need to provide extra context to the serializer in addition to the object being serialized. One common case is if you're using a serializer that includes hyperlinked relations, which requires the serializer to have access to the current request so that it can properly generate fully qualified URLs. You can provide arbitrary additional context by passing a context argument when instantiating the serializer. For example: serializer = AccountSerializer(account, context={'request': request}) serializer.data # {'id': 6, 'owner': 'denvercoder9', 'created': datetime.datetime(2013, 2, 12, 09, 44, 56, 678870), 'details': 'http://example.com/accounts/6/details'} The context dictionary can be used within any serializer field logic, such as a custom .to_representation() method, by accessing the self.context attribute. ModelSerializer Often you'll want serializer classes that map closely to Django model definitions. The ModelSerializer class provides a shortcut that lets you automatically create a Serializer class with fields that correspond to the Model fields. The ModelSerializer class is the same as a regular Serializer class, except that : It will automatically generate a set of fields for you, based on the model. It will automatically generate validators for the serializer, such as unique_together validators. It includes simple default implementations of .create() and .update() . Declaring a ModelSerializer looks like this: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ['id', 'account_name', 'users', 'created'] By default, all the model fields on the class will be mapped to a corresponding serializer fields. Any relationships such as foreign keys on the model will be mapped to PrimaryKeyRelatedField . Reverse relationships are not included by default unless explicitly included as specified in the serializer relations documentation. Inspecting a ModelSerializer Serializer classes generate helpful verbose representation strings, that allow you to fully inspect the state of their fields. This is particularly useful when working with ModelSerializers where you want to determine what set of fields and validators are being automatically created for you. To do so, open the Django shell, using python manage.py shell , then import the serializer class, instantiate it, and print the object representation\u2026 >>> from myapp.serializers import AccountSerializer >>> serializer = AccountSerializer() >>> print(repr(serializer)) AccountSerializer(): id = IntegerField(label='ID', read_only=True) name = CharField(allow_blank=True, max_length=100, required=False) owner = PrimaryKeyRelatedField(queryset=User.objects.all()) Specifying which fields to include If you only want a subset of the default fields to be used in a model serializer, you can do so using fields or exclude options, just as you would with a ModelForm . It is strongly recommended that you explicitly set all fields that should be serialized using the fields attribute. This will make it less likely to result in unintentionally exposing data when your models change. For example: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ['id', 'account_name', 'users', 'created'] You can also set the fields attribute to the special value '__all__' to indicate that all fields in the model should be used. For example: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = '__all__' You can set the exclude attribute to a list of fields to be excluded from the serializer. For example: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account exclude = ['users'] In the example above, if the Account model had 3 fields account_name , users , and created , this will result in the fields account_name and created to be serialized. The names in the fields and exclude attributes will normally map to model fields on the model class. Alternatively names in the fields options can map to properties or methods which take no arguments that exist on the model class. Since version 3.3.0, it is mandatory to provide one of the attributes fields or exclude . Specifying nested serialization The default ModelSerializer uses primary keys for relationships, but you can also easily generate nested representations using the depth option: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ['id', 'account_name', 'users', 'created'] depth = 1 The depth option should be set to an integer value that indicates the depth of relationships that should be traversed before reverting to a flat representation. If you want to customize the way the serialization is done you'll need to define the field yourself. Specifying fields explicitly You can add extra fields to a ModelSerializer or override the default fields by declaring fields on the class, just as you would for a Serializer class. class AccountSerializer(serializers.ModelSerializer): url = serializers.CharField(source='get_absolute_url', read_only=True) groups = serializers.PrimaryKeyRelatedField(many=True) class Meta: model = Account Extra fields can correspond to any property or callable on the model. Specifying read only fields You may wish to specify multiple fields as read-only. Instead of adding each field explicitly with the read_only=True attribute, you may use the shortcut Meta option, read_only_fields . This option should be a list or tuple of field names, and is declared as follows: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ['id', 'account_name', 'users', 'created'] read_only_fields = ['account_name'] Model fields which have editable=False set, and AutoField fields will be set to read-only by default, and do not need to be added to the read_only_fields option. Note : There is a special-case where a read-only field is part of a unique_together constraint at the model level. In this case the field is required by the serializer class in order to validate the constraint, but should also not be editable by the user. The right way to deal with this is to specify the field explicitly on the serializer, providing both the read_only=True and default=\u2026 keyword arguments. One example of this is a read-only relation to the currently authenticated User which is unique_together with another identifier. In this case you would declare the user field like so: user = serializers.PrimaryKeyRelatedField(read_only=True, default=serializers.CurrentUserDefault()) Please review the Validators Documentation for details on the UniqueTogetherValidator and CurrentUserDefault classes. Additional keyword arguments There is also a shortcut allowing you to specify arbitrary additional keyword arguments on fields, using the extra_kwargs option. As in the case of read_only_fields , this means you do not need to explicitly declare the field on the serializer. This option is a dictionary, mapping field names to a dictionary of keyword arguments. For example: class CreateUserSerializer(serializers.ModelSerializer): class Meta: model = User fields = ['email', 'username', 'password'] extra_kwargs = {'password': {'write_only': True}} def create(self, validated_data): user = User( email=validated_data['email'], username=validated_data['username'] ) user.set_password(validated_data['password']) user.save() return user Please keep in mind that, if the field has already been explicitly declared on the serializer class, then the extra_kwargs option will be ignored. Relational fields When serializing model instances, there are a number of different ways you might choose to represent relationships. The default representation for ModelSerializer is to use the primary keys of the related instances. Alternative representations include serializing using hyperlinks, serializing complete nested representations, or serializing with a custom representation. For full details see the serializer relations documentation. Customizing field mappings The ModelSerializer class also exposes an API that you can override in order to alter how serializer fields are automatically determined when instantiating the serializer. Normally if a ModelSerializer does not generate the fields you need by default then you should either add them to the class explicitly, or simply use a regular Serializer class instead. However in some cases you may want to create a new base class that defines how the serializer fields are created for any given model. .serializer_field_mapping A mapping of Django model classes to REST framework serializer classes. You can override this mapping to alter the default serializer classes that should be used for each model class. .serializer_related_field This property should be the serializer field class, that is used for relational fields by default. For ModelSerializer this defaults to PrimaryKeyRelatedField . For HyperlinkedModelSerializer this defaults to serializers.HyperlinkedRelatedField . serializer_url_field The serializer field class that should be used for any url field on the serializer. Defaults to serializers.HyperlinkedIdentityField serializer_choice_field The serializer field class that should be used for any choice fields on the serializer. Defaults to serializers.ChoiceField The field_class and field_kwargs API The following methods are called to determine the class and keyword arguments for each field that should be automatically included on the serializer. Each of these methods should return a two tuple of (field_class, field_kwargs) . .build_standard_field(self, field_name, model_field) Called to generate a serializer field that maps to a standard model field. The default implementation returns a serializer class based on the serializer_field_mapping attribute. .build_relational_field(self, field_name, relation_info) Called to generate a serializer field that maps to a relational model field. The default implementation returns a serializer class based on the serializer_related_field attribute. The relation_info argument is a named tuple, that contains model_field , related_model , to_many and has_through_model properties. .build_nested_field(self, field_name, relation_info, nested_depth) Called to generate a serializer field that maps to a relational model field, when the depth option has been set. The default implementation dynamically creates a nested serializer class based on either ModelSerializer or HyperlinkedModelSerializer . The nested_depth will be the value of the depth option, minus one. The relation_info argument is a named tuple, that contains model_field , related_model , to_many and has_through_model properties. .build_property_field(self, field_name, model_class) Called to generate a serializer field that maps to a property or zero-argument method on the model class. The default implementation returns a ReadOnlyField class. .build_url_field(self, field_name, model_class) Called to generate a serializer field for the serializer's own url field. The default implementation returns a HyperlinkedIdentityField class. .build_unknown_field(self, field_name, model_class) Called when the field name did not map to any model field or model property. The default implementation raises an error, although subclasses may customize this behavior. HyperlinkedModelSerializer The HyperlinkedModelSerializer class is similar to the ModelSerializer class except that it uses hyperlinks to represent relationships, rather than primary keys. By default the serializer will include a url field instead of a primary key field. The url field will be represented using a HyperlinkedIdentityField serializer field, and any relationships on the model will be represented using a HyperlinkedRelatedField serializer field. You can explicitly include the primary key by adding it to the fields option, for example: class AccountSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Account fields = ['url', 'id', 'account_name', 'users', 'created'] Absolute and relative URLs When instantiating a HyperlinkedModelSerializer you must include the current request in the serializer context, for example: serializer = AccountSerializer(queryset, context={'request': request}) Doing so will ensure that the hyperlinks can include an appropriate hostname, so that the resulting representation uses fully qualified URLs, such as: http://api.example.com/accounts/1/ Rather than relative URLs, such as: /accounts/1/ If you do want to use relative URLs, you should explicitly pass {'request': None} in the serializer context. How hyperlinked views are determined There needs to be a way of determining which views should be used for hyperlinking to model instances. By default hyperlinks are expected to correspond to a view name that matches the style '{model_name}-detail' , and looks up the instance by a pk keyword argument. You can override a URL field view name and lookup field by using either, or both of, the view_name and lookup_field options in the extra_kwargs setting, like so: class AccountSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Account fields = ['account_url', 'account_name', 'users', 'created'] extra_kwargs = { 'url': {'view_name': 'accounts', 'lookup_field': 'account_name'}, 'users': {'lookup_field': 'username'} } Alternatively you can set the fields on the serializer explicitly. For example: class AccountSerializer(serializers.HyperlinkedModelSerializer): url = serializers.HyperlinkedIdentityField( view_name='accounts', lookup_field='slug' ) users = serializers.HyperlinkedRelatedField( view_name='user-detail', lookup_field='username', many=True, read_only=True ) class Meta: model = Account fields = ['url', 'account_name', 'users', 'created'] Tip : Properly matching together hyperlinked representations and your URL conf can sometimes be a bit fiddly. Printing the repr of a HyperlinkedModelSerializer instance is a particularly useful way to inspect exactly which view names and lookup fields the relationships are expected to map too. Changing the URL field name The name of the URL field defaults to 'url'. You can override this globally, by using the URL_FIELD_NAME setting. ListSerializer The ListSerializer class provides the behavior for serializing and validating multiple objects at once. You won't typically need to use ListSerializer directly, but should instead simply pass many=True when instantiating a serializer. When a serializer is instantiated and many=True is passed, a ListSerializer instance will be created. The serializer class then becomes a child of the parent ListSerializer The following argument can also be passed to a ListSerializer field or a serializer that is passed many=True : allow_empty This is True by default, but can be set to False if you want to disallow empty lists as valid input. Customizing ListSerializer behavior There are a few use cases when you might want to customize the ListSerializer behavior. For example: You want to provide particular validation of the lists, such as checking that one element does not conflict with another element in a list. You want to customize the create or update behavior of multiple objects. For these cases you can modify the class that is used when many=True is passed, by using the list_serializer_class option on the serializer Meta class. For example: class CustomListSerializer(serializers.ListSerializer): ... class CustomSerializer(serializers.Serializer): ... class Meta: list_serializer_class = CustomListSerializer Customizing multiple create The default implementation for multiple object creation is to simply call .create() for each item in the list. If you want to customize this behavior, you'll need to customize the .create() method on ListSerializer class that is used when many=True is passed. For example: class BookListSerializer(serializers.ListSerializer): def create(self, validated_data): books = [Book(**item) for item in validated_data] return Book.objects.bulk_create(books) class BookSerializer(serializers.Serializer): ... class Meta: list_serializer_class = BookListSerializer Customizing multiple update By default the ListSerializer class does not support multiple updates. This is because the behavior that should be expected for insertions and deletions is ambiguous. To support multiple updates you'll need to do so explicitly. When writing your multiple update code make sure to keep the following in mind: How do you determine which instance should be updated for each item in the list of data? How should insertions be handled? Are they invalid, or do they create new objects? How should removals be handled? Do they imply object deletion, or removing a relationship? Should they be silently ignored, or are they invalid? How should ordering be handled? Does changing the position of two items imply any state change or is it ignored? You will need to add an explicit id field to the instance serializer. The default implicitly-generated id field is marked as read_only . This causes it to be removed on updates. Once you declare it explicitly, it will be available in the list serializer's update method. Here's an example of how you might choose to implement multiple updates: class BookListSerializer(serializers.ListSerializer): def update(self, instance, validated_data): # Maps for id->instance and id->data item. book_mapping = {book.id: book for book in instance} data_mapping = {item['id']: item for item in validated_data} # Perform creations and updates. ret = [] for book_id, data in data_mapping.items(): book = book_mapping.get(book_id, None) if book is None: ret.append(self.child.create(data)) else: ret.append(self.child.update(book, data)) # Perform deletions. for book_id, book in book_mapping.items(): if book_id not in data_mapping: book.delete() return ret class BookSerializer(serializers.Serializer): # We need to identify elements in the list using their primary key, # so use a writable field here, rather than the default which would be read-only. id = serializers.IntegerField() ... class Meta: list_serializer_class = BookListSerializer It is possible that a third party package may be included alongside the 3.1 release that provides some automatic support for multiple update operations, similar to the allow_add_remove behavior that was present in REST framework 2. Customizing ListSerializer initialization When a serializer with many=True is instantiated, we need to determine which arguments and keyword arguments should be passed to the .__init__() method for both the child Serializer class, and for the parent ListSerializer class. The default implementation is to pass all arguments to both classes, except for validators , and any custom keyword arguments, both of which are assumed to be intended for the child serializer class. Occasionally you might need to explicitly specify how the child and parent classes should be instantiated when many=True is passed. You can do so by using the many_init class method. @classmethod def many_init(cls, *args, **kwargs): # Instantiate the child serializer. kwargs['child'] = cls() # Instantiate the parent list serializer. return CustomListSerializer(*args, **kwargs) BaseSerializer BaseSerializer class that can be used to easily support alternative serialization and deserialization styles. This class implements the same basic API as the Serializer class: .data - Returns the outgoing primitive representation. .is_valid() - Deserializes and validates incoming data. .validated_data - Returns the validated incoming data. .errors - Returns any errors during validation. .save() - Persists the validated data into an object instance. There are four methods that can be overridden, depending on what functionality you want the serializer class to support: .to_representation() - Override this to support serialization, for read operations. .to_internal_value() - Override this to support deserialization, for write operations. .create() and .update() - Override either or both of these to support saving instances. Because this class provides the same interface as the Serializer class, you can use it with the existing generic class-based views exactly as you would for a regular Serializer or ModelSerializer . The only difference you'll notice when doing so is the BaseSerializer classes will not generate HTML forms in the browsable API. This is because the data they return does not include all the field information that would allow each field to be rendered into a suitable HTML input. Read-only BaseSerializer classes To implement a read-only serializer using the BaseSerializer class, we just need to override the .to_representation() method. Let's take a look at an example using a simple Django model: class HighScore(models.Model): created = models.DateTimeField(auto_now_add=True) player_name = models.CharField(max_length=10) score = models.IntegerField() It's simple to create a read-only serializer for converting HighScore instances into primitive data types. class HighScoreSerializer(serializers.BaseSerializer): def to_representation(self, instance): return { 'score': instance.score, 'player_name': instance.player_name } We can now use this class to serialize single HighScore instances: @api_view(['GET']) def high_score(request, pk): instance = HighScore.objects.get(pk=pk) serializer = HighScoreSerializer(instance) return Response(serializer.data) Or use it to serialize multiple instances: @api_view(['GET']) def all_high_scores(request): queryset = HighScore.objects.order_by('-score') serializer = HighScoreSerializer(queryset, many=True) return Response(serializer.data) Read-write BaseSerializer classes To create a read-write serializer we first need to implement a .to_internal_value() method. This method returns the validated values that will be used to construct the object instance, and may raise a serializers.ValidationError if the supplied data is in an incorrect format. Once you've implemented .to_internal_value() , the basic validation API will be available on the serializer, and you will be able to use .is_valid() , .validated_data and .errors . If you want to also support .save() you'll need to also implement either or both of the .create() and .update() methods. Here's a complete example of our previous HighScoreSerializer , that's been updated to support both read and write operations. class HighScoreSerializer(serializers.BaseSerializer): def to_internal_value(self, data): score = data.get('score') player_name = data.get('player_name') # Perform the data validation. if not score: raise serializers.ValidationError({ 'score': 'This field is required.' }) if not player_name: raise serializers.ValidationError({ 'player_name': 'This field is required.' }) if len(player_name) > 10: raise serializers.ValidationError({ 'player_name': 'May not be more than 10 characters.' }) # Return the validated values. This will be available as # the `.validated_data` property. return { 'score': int(score), 'player_name': player_name } def to_representation(self, instance): return { 'score': instance.score, 'player_name': instance.player_name } def create(self, validated_data): return HighScore.objects.create(**validated_data) Creating new base classes The BaseSerializer class is also useful if you want to implement new generic serializer classes for dealing with particular serialization styles, or for integrating with alternative storage backends. The following class is an example of a generic serializer that can handle coercing arbitrary objects into primitive representations. class ObjectSerializer(serializers.BaseSerializer): \"\"\" A read-only serializer that coerces arbitrary complex objects into primitive representations. \"\"\" def to_representation(self, instance): output = {} for attribute_name in dir(instance): attribute = getattr(instance, attribute_name) if attribute_name.startswith('_'): # Ignore private attributes. pass elif hasattr(attribute, '__call__'): # Ignore methods and other callables. pass elif isinstance(attribute, (str, int, bool, float, type(None))): # Primitive types can be passed through unmodified. output[attribute_name] = attribute elif isinstance(attribute, list): # Recursively deal with items in lists. output[attribute_name] = [ self.to_representation(item) for item in attribute ] elif isinstance(attribute, dict): # Recursively deal with items in dictionaries. output[attribute_name] = { str(key): self.to_representation(value) for key, value in attribute.items() } else: # Force anything else to its string representation. output[attribute_name] = str(attribute) return output Advanced serializer usage Overriding serialization and deserialization behavior If you need to alter the serialization or deserialization behavior of a serializer class, you can do so by overriding the .to_representation() or .to_internal_value() methods. Some reasons this might be useful include... Adding new behavior for new serializer base classes. Modifying the behavior slightly for an existing class. Improving serialization performance for a frequently accessed API endpoint that returns lots of data. The signatures for these methods are as follows: .to_representation(self, instance) Takes the object instance that requires serialization, and should return a primitive representation. Typically this means returning a structure of built-in Python datatypes. The exact types that can be handled will depend on the render classes you have configured for your API. May be overridden in order to modify the representation style. For example: def to_representation(self, instance): \"\"\"Convert `username` to lowercase.\"\"\" ret = super().to_representation(instance) ret['username'] = ret['username'].lower() return ret .to_internal_value(self, data) Takes the unvalidated incoming data as input and should return the validated data that will be made available as serializer.validated_data . The return value will also be passed to the .create() or .update() methods if .save() is called on the serializer class. If any of the validation fails, then the method should raise a serializers.ValidationError(errors) . The errors argument should be a dictionary mapping field names (or settings.NON_FIELD_ERRORS_KEY ) to a list of error messages. If you don't need to alter deserialization behavior and instead want to provide object-level validation, it's recommended that you instead override the .validate() method. The data argument passed to this method will normally be the value of request.data , so the datatype it provides will depend on the parser classes you have configured for your API. Serializer Inheritance Similar to Django forms, you can extend and reuse serializers through inheritance. This allows you to declare a common set of fields or methods on a parent class that can then be used in a number of serializers. For example, class MyBaseSerializer(Serializer): my_field = serializers.CharField() def validate_my_field(self, value): ... class MySerializer(MyBaseSerializer): ... Like Django's Model and ModelForm classes, the inner Meta class on serializers does not implicitly inherit from it's parents' inner Meta classes. If you want the Meta class to inherit from a parent class you must do so explicitly. For example: class AccountSerializer(MyBaseSerializer): class Meta(MyBaseSerializer.Meta): model = Account Typically we would recommend not using inheritance on inner Meta classes, but instead declaring all options explicitly. Additionally, the following caveats apply to serializer inheritance: Normal Python name resolution rules apply. If you have multiple base classes that declare a Meta inner class, only the first one will be used. This means the child\u2019s Meta , if it exists, otherwise the Meta of the first parent, etc. It\u2019s possible to declaratively remove a Field inherited from a parent class by setting the name to be None on the subclass. class MyBaseSerializer(ModelSerializer): my_field = serializers.CharField() class MySerializer(MyBaseSerializer): my_field = None However, you can only use this technique to opt out from a field defined declaratively by a parent class; it won\u2019t prevent the ModelSerializer from generating a default field. To opt-out from default fields, see Specifying which fields to include . Dynamically modifying fields Once a serializer has been initialized, the dictionary of fields that are set on the serializer may be accessed using the .fields attribute. Accessing and modifying this attribute allows you to dynamically modify the serializer. Modifying the fields argument directly allows you to do interesting things such as changing the arguments on serializer fields at runtime, rather than at the point of declaring the serializer. Example For example, if you wanted to be able to set which fields should be used by a serializer at the point of initializing it, you could create a serializer class like so: class DynamicFieldsModelSerializer(serializers.ModelSerializer): \"\"\" A ModelSerializer that takes an additional `fields` argument that controls which fields should be displayed. \"\"\" def __init__(self, *args, **kwargs): # Don't pass the 'fields' arg up to the superclass fields = kwargs.pop('fields', None) # Instantiate the superclass normally super(DynamicFieldsModelSerializer, self).__init__(*args, **kwargs) if fields is not None: # Drop any fields that are not specified in the `fields` argument. allowed = set(fields) existing = set(self.fields) for field_name in existing - allowed: self.fields.pop(field_name) This would then allow you to do the following: >>> class UserSerializer(DynamicFieldsModelSerializer): >>> class Meta: >>> model = User >>> fields = ['id', 'username', 'email'] >>> >>> print(UserSerializer(user)) {'id': 2, 'username': 'jonwatts', 'email': 'jon@example.com'} >>> >>> print(UserSerializer(user, fields=('id', 'email'))) {'id': 2, 'email': 'jon@example.com'} Customizing the default fields REST framework 2 provided an API to allow developers to override how a ModelSerializer class would automatically generate the default set of fields. This API included the .get_field() , .get_pk_field() and other methods. Because the serializers have been fundamentally redesigned with 3.0 this API no longer exists. You can still modify the fields that get created but you'll need to refer to the source code, and be aware that if the changes you make are against private bits of API then they may be subject to change. Third party packages The following third party packages are also available. Django REST marshmallow The django-rest-marshmallow package provides an alternative implementation for serializers, using the python marshmallow library. It exposes the same API as the REST framework serializers, and can be used as a drop-in replacement in some use-cases. Serpy The serpy package is an alternative implementation for serializers that is built for speed. Serpy serializes complex datatypes to simple native types. The native types can be easily converted to JSON or any other format needed. MongoengineModelSerializer The django-rest-framework-mongoengine package provides a MongoEngineModelSerializer serializer class that supports using MongoDB as the storage layer for Django REST framework. GeoFeatureModelSerializer The django-rest-framework-gis package provides a GeoFeatureModelSerializer serializer class that supports GeoJSON both for read and write operations. HStoreSerializer The django-rest-framework-hstore package provides an HStoreSerializer to support django-hstore DictionaryField model field and its schema-mode feature. Dynamic REST The dynamic-rest package extends the ModelSerializer and ModelViewSet interfaces, adding API query parameters for filtering, sorting, and including / excluding all fields and relationships defined by your serializers. Dynamic Fields Mixin The drf-dynamic-fields package provides a mixin to dynamically limit the fields per serializer to a subset specified by an URL parameter. DRF FlexFields The drf-flex-fields package extends the ModelSerializer and ModelViewSet to provide commonly used functionality for dynamically setting fields and expanding primitive fields to nested models, both from URL parameters and your serializer class definitions. Serializer Extensions The django-rest-framework-serializer-extensions package provides a collection of tools to DRY up your serializers, by allowing fields to be defined on a per-view/request basis. Fields can be whitelisted, blacklisted and child serializers can be optionally expanded. HTML JSON Forms The html-json-forms package provides an algorithm and serializer for processing <form> submissions per the (inactive) HTML JSON Form specification . The serializer facilitates processing of arbitrarily nested JSON structures within HTML. For example, <input name=\"items[0][id]\" value=\"5\"> will be interpreted as {\"items\": [{\"id\": \"5\"}]} . DRF-Base64 DRF-Base64 provides a set of field and model serializers that handles the upload of base64-encoded files. QueryFields djangorestframework-queryfields allows API clients to specify which fields will be sent in the response via inclusion/exclusion query parameters. DRF Writable Nested The drf-writable-nested package provides writable nested model serializer which allows to create/update models with nested related data.","title":"Serializers"},{"location":"api-guide/serializers/#serializers","text":"Expanding the usefulness of the serializers is something that we would like to address. However, it's not a trivial problem, and it will take some serious design work. \u2014 Russell Keith-Magee, Django users group Serializers allow complex data such as querysets and model instances to be converted to native Python datatypes that can then be easily rendered into JSON , XML or other content types. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming data. The serializers in REST framework work very similarly to Django's Form and ModelForm classes. We provide a Serializer class which gives you a powerful, generic way to control the output of your responses, as well as a ModelSerializer class which provides a useful shortcut for creating serializers that deal with model instances and querysets.","title":"Serializers"},{"location":"api-guide/serializers/#declaring-serializers","text":"Let's start by creating a simple object we can use for example purposes: from datetime import datetime class Comment: def __init__(self, email, content, created=None): self.email = email self.content = content self.created = created or datetime.now() comment = Comment(email='leila@example.com', content='foo bar') We'll declare a serializer that we can use to serialize and deserialize data that corresponds to Comment objects. Declaring a serializer looks very similar to declaring a form: from rest_framework import serializers class CommentSerializer(serializers.Serializer): email = serializers.EmailField() content = serializers.CharField(max_length=200) created = serializers.DateTimeField()","title":"Declaring Serializers"},{"location":"api-guide/serializers/#serializing-objects","text":"We can now use CommentSerializer to serialize a comment, or list of comments. Again, using the Serializer class looks a lot like using a Form class. serializer = CommentSerializer(comment) serializer.data # {'email': 'leila@example.com', 'content': 'foo bar', 'created': '2016-01-27T15:17:10.375877'} At this point we've translated the model instance into Python native datatypes. To finalise the serialization process we render the data into json . from rest_framework.renderers import JSONRenderer json = JSONRenderer().render(serializer.data) json # b'{\"email\":\"leila@example.com\",\"content\":\"foo bar\",\"created\":\"2016-01-27T15:17:10.375877\"}'","title":"Serializing objects"},{"location":"api-guide/serializers/#deserializing-objects","text":"Deserialization is similar. First we parse a stream into Python native datatypes... import io from rest_framework.parsers import JSONParser stream = io.BytesIO(json) data = JSONParser().parse(stream) ...then we restore those native datatypes into a dictionary of validated data. serializer = CommentSerializer(data=data) serializer.is_valid() # True serializer.validated_data # {'content': 'foo bar', 'email': 'leila@example.com', 'created': datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)}","title":"Deserializing objects"},{"location":"api-guide/serializers/#saving-instances","text":"If we want to be able to return complete object instances based on the validated data we need to implement one or both of the .create() and .update() methods. For example: class CommentSerializer(serializers.Serializer): email = serializers.EmailField() content = serializers.CharField(max_length=200) created = serializers.DateTimeField() def create(self, validated_data): return Comment(**validated_data) def update(self, instance, validated_data): instance.email = validated_data.get('email', instance.email) instance.content = validated_data.get('content', instance.content) instance.created = validated_data.get('created', instance.created) return instance If your object instances correspond to Django models you'll also want to ensure that these methods save the object to the database. For example, if Comment was a Django model, the methods might look like this: def create(self, validated_data): return Comment.objects.create(**validated_data) def update(self, instance, validated_data): instance.email = validated_data.get('email', instance.email) instance.content = validated_data.get('content', instance.content) instance.created = validated_data.get('created', instance.created) instance.save() return instance Now when deserializing data, we can call .save() to return an object instance, based on the validated data. comment = serializer.save() Calling .save() will either create a new instance, or update an existing instance, depending on if an existing instance was passed when instantiating the serializer class: # .save() will create a new instance. serializer = CommentSerializer(data=data) # .save() will update the existing `comment` instance. serializer = CommentSerializer(comment, data=data) Both the .create() and .update() methods are optional. You can implement either neither, one, or both of them, depending on the use-case for your serializer class.","title":"Saving instances"},{"location":"api-guide/serializers/#passing-additional-attributes-to-save","text":"Sometimes you'll want your view code to be able to inject additional data at the point of saving the instance. This additional data might include information like the current user, the current time, or anything else that is not part of the request data. You can do so by including additional keyword arguments when calling .save() . For example: serializer.save(owner=request.user) Any additional keyword arguments will be included in the validated_data argument when .create() or .update() are called.","title":"Passing additional attributes to .save()"},{"location":"api-guide/serializers/#overriding-save-directly","text":"In some cases the .create() and .update() method names may not be meaningful. For example, in a contact form we may not be creating new instances, but instead sending an email or other message. In these cases you might instead choose to override .save() directly, as being more readable and meaningful. For example: class ContactForm(serializers.Serializer): email = serializers.EmailField() message = serializers.CharField() def save(self): email = self.validated_data['email'] message = self.validated_data['message'] send_email(from=email, message=message) Note that in the case above we're now having to access the serializer .validated_data property directly.","title":"Overriding .save() directly."},{"location":"api-guide/serializers/#validation","text":"When deserializing data, you always need to call is_valid() before attempting to access the validated data, or save an object instance. If any validation errors occur, the .errors property will contain a dictionary representing the resulting error messages. For example: serializer = CommentSerializer(data={'email': 'foobar', 'content': 'baz'}) serializer.is_valid() # False serializer.errors # {'email': ['Enter a valid e-mail address.'], 'created': ['This field is required.']} Each key in the dictionary will be the field name, and the values will be lists of strings of any error messages corresponding to that field. The non_field_errors key may also be present, and will list any general validation errors. The name of the non_field_errors key may be customized using the NON_FIELD_ERRORS_KEY REST framework setting. When deserializing a list of items, errors will be returned as a list of dictionaries representing each of the deserialized items.","title":"Validation"},{"location":"api-guide/serializers/#raising-an-exception-on-invalid-data","text":"The .is_valid() method takes an optional raise_exception flag that will cause it to raise a serializers.ValidationError exception if there are validation errors. These exceptions are automatically dealt with by the default exception handler that REST framework provides, and will return HTTP 400 Bad Request responses by default. # Return a 400 response if the data was invalid. serializer.is_valid(raise_exception=True)","title":"Raising an exception on invalid data"},{"location":"api-guide/serializers/#field-level-validation","text":"You can specify custom field-level validation by adding .validate_<field_name> methods to your Serializer subclass. These are similar to the .clean_<field_name> methods on Django forms. These methods take a single argument, which is the field value that requires validation. Your validate_<field_name> methods should return the validated value or raise a serializers.ValidationError . For example: from rest_framework import serializers class BlogPostSerializer(serializers.Serializer): title = serializers.CharField(max_length=100) content = serializers.CharField() def validate_title(self, value): \"\"\" Check that the blog post is about Django. \"\"\" if 'django' not in value.lower(): raise serializers.ValidationError(\"Blog post is not about Django\") return value Note: If your <field_name> is declared on your serializer with the parameter required=False then this validation step will not take place if the field is not included.","title":"Field-level validation"},{"location":"api-guide/serializers/#object-level-validation","text":"To do any other validation that requires access to multiple fields, add a method called .validate() to your Serializer subclass. This method takes a single argument, which is a dictionary of field values. It should raise a serializers.ValidationError if necessary, or just return the validated values. For example: from rest_framework import serializers class EventSerializer(serializers.Serializer): description = serializers.CharField(max_length=100) start = serializers.DateTimeField() finish = serializers.DateTimeField() def validate(self, data): \"\"\" Check that start is before finish. \"\"\" if data['start'] > data['finish']: raise serializers.ValidationError(\"finish must occur after start\") return data","title":"Object-level validation"},{"location":"api-guide/serializers/#validators","text":"Individual fields on a serializer can include validators, by declaring them on the field instance, for example: def multiple_of_ten(value): if value % 10 != 0: raise serializers.ValidationError('Not a multiple of ten') class GameRecord(serializers.Serializer): score = IntegerField(validators=[multiple_of_ten]) ... Serializer classes can also include reusable validators that are applied to the complete set of field data. These validators are included by declaring them on an inner Meta class, like so: class EventSerializer(serializers.Serializer): name = serializers.CharField() room_number = serializers.IntegerField(choices=[101, 102, 103, 201]) date = serializers.DateField() class Meta: # Each room only has one event per day. validators = [ UniqueTogetherValidator( queryset=Event.objects.all(), fields=['room_number', 'date'] ) ] For more information see the validators documentation .","title":"Validators"},{"location":"api-guide/serializers/#accessing-the-initial-data-and-instance","text":"When passing an initial object or queryset to a serializer instance, the object will be made available as .instance . If no initial object is passed then the .instance attribute will be None . When passing data to a serializer instance, the unmodified data will be made available as .initial_data . If the data keyword argument is not passed then the .initial_data attribute will not exist.","title":"Accessing the initial data and instance"},{"location":"api-guide/serializers/#partial-updates","text":"By default, serializers must be passed values for all required fields or they will raise validation errors. You can use the partial argument in order to allow partial updates. # Update `comment` with partial data serializer = CommentSerializer(comment, data={'content': 'foo bar'}, partial=True)","title":"Partial updates"},{"location":"api-guide/serializers/#dealing-with-nested-objects","text":"The previous examples are fine for dealing with objects that only have simple datatypes, but sometimes we also need to be able to represent more complex objects, where some of the attributes of an object might not be simple datatypes such as strings, dates or integers. The Serializer class is itself a type of Field , and can be used to represent relationships where one object type is nested inside another. class UserSerializer(serializers.Serializer): email = serializers.EmailField() username = serializers.CharField(max_length=100) class CommentSerializer(serializers.Serializer): user = UserSerializer() content = serializers.CharField(max_length=200) created = serializers.DateTimeField() If a nested representation may optionally accept the None value you should pass the required=False flag to the nested serializer. class CommentSerializer(serializers.Serializer): user = UserSerializer(required=False) # May be an anonymous user. content = serializers.CharField(max_length=200) created = serializers.DateTimeField() Similarly if a nested representation should be a list of items, you should pass the many=True flag to the nested serialized. class CommentSerializer(serializers.Serializer): user = UserSerializer(required=False) edits = EditItemSerializer(many=True) # A nested list of 'edit' items. content = serializers.CharField(max_length=200) created = serializers.DateTimeField()","title":"Dealing with nested objects"},{"location":"api-guide/serializers/#writable-nested-representations","text":"When dealing with nested representations that support deserializing the data, any errors with nested objects will be nested under the field name of the nested object. serializer = CommentSerializer(data={'user': {'email': 'foobar', 'username': 'doe'}, 'content': 'baz'}) serializer.is_valid() # False serializer.errors # {'user': {'email': ['Enter a valid e-mail address.']}, 'created': ['This field is required.']} Similarly, the .validated_data property will include nested data structures.","title":"Writable nested representations"},{"location":"api-guide/serializers/#writing-create-methods-for-nested-representations","text":"If you're supporting writable nested representations you'll need to write .create() or .update() methods that handle saving multiple objects. The following example demonstrates how you might handle creating a user with a nested profile object. class UserSerializer(serializers.ModelSerializer): profile = ProfileSerializer() class Meta: model = User fields = ['username', 'email', 'profile'] def create(self, validated_data): profile_data = validated_data.pop('profile') user = User.objects.create(**validated_data) Profile.objects.create(user=user, **profile_data) return user","title":"Writing .create() methods for nested representations"},{"location":"api-guide/serializers/#writing-update-methods-for-nested-representations","text":"For updates you'll want to think carefully about how to handle updates to relationships. For example if the data for the relationship is None , or not provided, which of the following should occur? Set the relationship to NULL in the database. Delete the associated instance. Ignore the data and leave the instance as it is. Raise a validation error. Here's an example for an .update() method on our previous UserSerializer class. def update(self, instance, validated_data): profile_data = validated_data.pop('profile') # Unless the application properly enforces that this field is # always set, the following could raise a `DoesNotExist`, which # would need to be handled. profile = instance.profile instance.username = validated_data.get('username', instance.username) instance.email = validated_data.get('email', instance.email) instance.save() profile.is_premium_member = profile_data.get( 'is_premium_member', profile.is_premium_member ) profile.has_support_contract = profile_data.get( 'has_support_contract', profile.has_support_contract ) profile.save() return instance Because the behavior of nested creates and updates can be ambiguous, and may require complex dependencies between related models, REST framework 3 requires you to always write these methods explicitly. The default ModelSerializer .create() and .update() methods do not include support for writable nested representations. There are however, third-party packages available such as DRF Writable Nested that support automatic writable nested representations.","title":"Writing .update() methods for nested representations"},{"location":"api-guide/serializers/#handling-saving-related-instances-in-model-manager-classes","text":"An alternative to saving multiple related instances in the serializer is to write custom model manager classes that handle creating the correct instances. For example, suppose we wanted to ensure that User instances and Profile instances are always created together as a pair. We might write a custom manager class that looks something like this: class UserManager(models.Manager): ... def create(self, username, email, is_premium_member=False, has_support_contract=False): user = User(username=username, email=email) user.save() profile = Profile( user=user, is_premium_member=is_premium_member, has_support_contract=has_support_contract ) profile.save() return user This manager class now more nicely encapsulates that user instances and profile instances are always created at the same time. Our .create() method on the serializer class can now be re-written to use the new manager method. def create(self, validated_data): return User.objects.create( username=validated_data['username'], email=validated_data['email'], is_premium_member=validated_data['profile']['is_premium_member'], has_support_contract=validated_data['profile']['has_support_contract'] ) For more details on this approach see the Django documentation on model managers , and this blogpost on using model and manager classes .","title":"Handling saving related instances in model manager classes"},{"location":"api-guide/serializers/#dealing-with-multiple-objects","text":"The Serializer class can also handle serializing or deserializing lists of objects.","title":"Dealing with multiple objects"},{"location":"api-guide/serializers/#serializing-multiple-objects","text":"To serialize a queryset or list of objects instead of a single object instance, you should pass the many=True flag when instantiating the serializer. You can then pass a queryset or list of objects to be serialized. queryset = Book.objects.all() serializer = BookSerializer(queryset, many=True) serializer.data # [ # {'id': 0, 'title': 'The electric kool-aid acid test', 'author': 'Tom Wolfe'}, # {'id': 1, 'title': 'If this is a man', 'author': 'Primo Levi'}, # {'id': 2, 'title': 'The wind-up bird chronicle', 'author': 'Haruki Murakami'} # ]","title":"Serializing multiple objects"},{"location":"api-guide/serializers/#deserializing-multiple-objects","text":"The default behavior for deserializing multiple objects is to support multiple object creation, but not support multiple object updates. For more information on how to support or customize either of these cases, see the ListSerializer documentation below.","title":"Deserializing multiple objects"},{"location":"api-guide/serializers/#including-extra-context","text":"There are some cases where you need to provide extra context to the serializer in addition to the object being serialized. One common case is if you're using a serializer that includes hyperlinked relations, which requires the serializer to have access to the current request so that it can properly generate fully qualified URLs. You can provide arbitrary additional context by passing a context argument when instantiating the serializer. For example: serializer = AccountSerializer(account, context={'request': request}) serializer.data # {'id': 6, 'owner': 'denvercoder9', 'created': datetime.datetime(2013, 2, 12, 09, 44, 56, 678870), 'details': 'http://example.com/accounts/6/details'} The context dictionary can be used within any serializer field logic, such as a custom .to_representation() method, by accessing the self.context attribute.","title":"Including extra context"},{"location":"api-guide/serializers/#modelserializer","text":"Often you'll want serializer classes that map closely to Django model definitions. The ModelSerializer class provides a shortcut that lets you automatically create a Serializer class with fields that correspond to the Model fields. The ModelSerializer class is the same as a regular Serializer class, except that : It will automatically generate a set of fields for you, based on the model. It will automatically generate validators for the serializer, such as unique_together validators. It includes simple default implementations of .create() and .update() . Declaring a ModelSerializer looks like this: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ['id', 'account_name', 'users', 'created'] By default, all the model fields on the class will be mapped to a corresponding serializer fields. Any relationships such as foreign keys on the model will be mapped to PrimaryKeyRelatedField . Reverse relationships are not included by default unless explicitly included as specified in the serializer relations documentation.","title":"ModelSerializer"},{"location":"api-guide/serializers/#inspecting-a-modelserializer","text":"Serializer classes generate helpful verbose representation strings, that allow you to fully inspect the state of their fields. This is particularly useful when working with ModelSerializers where you want to determine what set of fields and validators are being automatically created for you. To do so, open the Django shell, using python manage.py shell , then import the serializer class, instantiate it, and print the object representation\u2026 >>> from myapp.serializers import AccountSerializer >>> serializer = AccountSerializer() >>> print(repr(serializer)) AccountSerializer(): id = IntegerField(label='ID', read_only=True) name = CharField(allow_blank=True, max_length=100, required=False) owner = PrimaryKeyRelatedField(queryset=User.objects.all())","title":"Inspecting a ModelSerializer"},{"location":"api-guide/serializers/#specifying-which-fields-to-include","text":"If you only want a subset of the default fields to be used in a model serializer, you can do so using fields or exclude options, just as you would with a ModelForm . It is strongly recommended that you explicitly set all fields that should be serialized using the fields attribute. This will make it less likely to result in unintentionally exposing data when your models change. For example: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ['id', 'account_name', 'users', 'created'] You can also set the fields attribute to the special value '__all__' to indicate that all fields in the model should be used. For example: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = '__all__' You can set the exclude attribute to a list of fields to be excluded from the serializer. For example: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account exclude = ['users'] In the example above, if the Account model had 3 fields account_name , users , and created , this will result in the fields account_name and created to be serialized. The names in the fields and exclude attributes will normally map to model fields on the model class. Alternatively names in the fields options can map to properties or methods which take no arguments that exist on the model class. Since version 3.3.0, it is mandatory to provide one of the attributes fields or exclude .","title":"Specifying which fields to include"},{"location":"api-guide/serializers/#specifying-nested-serialization","text":"The default ModelSerializer uses primary keys for relationships, but you can also easily generate nested representations using the depth option: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ['id', 'account_name', 'users', 'created'] depth = 1 The depth option should be set to an integer value that indicates the depth of relationships that should be traversed before reverting to a flat representation. If you want to customize the way the serialization is done you'll need to define the field yourself.","title":"Specifying nested serialization"},{"location":"api-guide/serializers/#specifying-fields-explicitly","text":"You can add extra fields to a ModelSerializer or override the default fields by declaring fields on the class, just as you would for a Serializer class. class AccountSerializer(serializers.ModelSerializer): url = serializers.CharField(source='get_absolute_url', read_only=True) groups = serializers.PrimaryKeyRelatedField(many=True) class Meta: model = Account Extra fields can correspond to any property or callable on the model.","title":"Specifying fields explicitly"},{"location":"api-guide/serializers/#specifying-read-only-fields","text":"You may wish to specify multiple fields as read-only. Instead of adding each field explicitly with the read_only=True attribute, you may use the shortcut Meta option, read_only_fields . This option should be a list or tuple of field names, and is declared as follows: class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ['id', 'account_name', 'users', 'created'] read_only_fields = ['account_name'] Model fields which have editable=False set, and AutoField fields will be set to read-only by default, and do not need to be added to the read_only_fields option. Note : There is a special-case where a read-only field is part of a unique_together constraint at the model level. In this case the field is required by the serializer class in order to validate the constraint, but should also not be editable by the user. The right way to deal with this is to specify the field explicitly on the serializer, providing both the read_only=True and default=\u2026 keyword arguments. One example of this is a read-only relation to the currently authenticated User which is unique_together with another identifier. In this case you would declare the user field like so: user = serializers.PrimaryKeyRelatedField(read_only=True, default=serializers.CurrentUserDefault()) Please review the Validators Documentation for details on the UniqueTogetherValidator and CurrentUserDefault classes.","title":"Specifying read only fields"},{"location":"api-guide/serializers/#additional-keyword-arguments","text":"There is also a shortcut allowing you to specify arbitrary additional keyword arguments on fields, using the extra_kwargs option. As in the case of read_only_fields , this means you do not need to explicitly declare the field on the serializer. This option is a dictionary, mapping field names to a dictionary of keyword arguments. For example: class CreateUserSerializer(serializers.ModelSerializer): class Meta: model = User fields = ['email', 'username', 'password'] extra_kwargs = {'password': {'write_only': True}} def create(self, validated_data): user = User( email=validated_data['email'], username=validated_data['username'] ) user.set_password(validated_data['password']) user.save() return user Please keep in mind that, if the field has already been explicitly declared on the serializer class, then the extra_kwargs option will be ignored.","title":"Additional keyword arguments"},{"location":"api-guide/serializers/#relational-fields","text":"When serializing model instances, there are a number of different ways you might choose to represent relationships. The default representation for ModelSerializer is to use the primary keys of the related instances. Alternative representations include serializing using hyperlinks, serializing complete nested representations, or serializing with a custom representation. For full details see the serializer relations documentation.","title":"Relational fields"},{"location":"api-guide/serializers/#customizing-field-mappings","text":"The ModelSerializer class also exposes an API that you can override in order to alter how serializer fields are automatically determined when instantiating the serializer. Normally if a ModelSerializer does not generate the fields you need by default then you should either add them to the class explicitly, or simply use a regular Serializer class instead. However in some cases you may want to create a new base class that defines how the serializer fields are created for any given model.","title":"Customizing field mappings"},{"location":"api-guide/serializers/#serializer_field_mapping","text":"A mapping of Django model classes to REST framework serializer classes. You can override this mapping to alter the default serializer classes that should be used for each model class.","title":".serializer_field_mapping"},{"location":"api-guide/serializers/#serializer_related_field","text":"This property should be the serializer field class, that is used for relational fields by default. For ModelSerializer this defaults to PrimaryKeyRelatedField . For HyperlinkedModelSerializer this defaults to serializers.HyperlinkedRelatedField .","title":".serializer_related_field"},{"location":"api-guide/serializers/#serializer_url_field","text":"The serializer field class that should be used for any url field on the serializer. Defaults to serializers.HyperlinkedIdentityField","title":"serializer_url_field"},{"location":"api-guide/serializers/#serializer_choice_field","text":"The serializer field class that should be used for any choice fields on the serializer. Defaults to serializers.ChoiceField","title":"serializer_choice_field"},{"location":"api-guide/serializers/#the-field_class-and-field_kwargs-api","text":"The following methods are called to determine the class and keyword arguments for each field that should be automatically included on the serializer. Each of these methods should return a two tuple of (field_class, field_kwargs) .","title":"The field_class and field_kwargs API"},{"location":"api-guide/serializers/#build_standard_fieldself-field_name-model_field","text":"Called to generate a serializer field that maps to a standard model field. The default implementation returns a serializer class based on the serializer_field_mapping attribute.","title":".build_standard_field(self, field_name, model_field)"},{"location":"api-guide/serializers/#build_relational_fieldself-field_name-relation_info","text":"Called to generate a serializer field that maps to a relational model field. The default implementation returns a serializer class based on the serializer_related_field attribute. The relation_info argument is a named tuple, that contains model_field , related_model , to_many and has_through_model properties.","title":".build_relational_field(self, field_name, relation_info)"},{"location":"api-guide/serializers/#build_nested_fieldself-field_name-relation_info-nested_depth","text":"Called to generate a serializer field that maps to a relational model field, when the depth option has been set. The default implementation dynamically creates a nested serializer class based on either ModelSerializer or HyperlinkedModelSerializer . The nested_depth will be the value of the depth option, minus one. The relation_info argument is a named tuple, that contains model_field , related_model , to_many and has_through_model properties.","title":".build_nested_field(self, field_name, relation_info, nested_depth)"},{"location":"api-guide/serializers/#build_property_fieldself-field_name-model_class","text":"Called to generate a serializer field that maps to a property or zero-argument method on the model class. The default implementation returns a ReadOnlyField class.","title":".build_property_field(self, field_name, model_class)"},{"location":"api-guide/serializers/#build_url_fieldself-field_name-model_class","text":"Called to generate a serializer field for the serializer's own url field. The default implementation returns a HyperlinkedIdentityField class.","title":".build_url_field(self, field_name, model_class)"},{"location":"api-guide/serializers/#build_unknown_fieldself-field_name-model_class","text":"Called when the field name did not map to any model field or model property. The default implementation raises an error, although subclasses may customize this behavior.","title":".build_unknown_field(self, field_name, model_class)"},{"location":"api-guide/serializers/#hyperlinkedmodelserializer","text":"The HyperlinkedModelSerializer class is similar to the ModelSerializer class except that it uses hyperlinks to represent relationships, rather than primary keys. By default the serializer will include a url field instead of a primary key field. The url field will be represented using a HyperlinkedIdentityField serializer field, and any relationships on the model will be represented using a HyperlinkedRelatedField serializer field. You can explicitly include the primary key by adding it to the fields option, for example: class AccountSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Account fields = ['url', 'id', 'account_name', 'users', 'created']","title":"HyperlinkedModelSerializer"},{"location":"api-guide/serializers/#absolute-and-relative-urls","text":"When instantiating a HyperlinkedModelSerializer you must include the current request in the serializer context, for example: serializer = AccountSerializer(queryset, context={'request': request}) Doing so will ensure that the hyperlinks can include an appropriate hostname, so that the resulting representation uses fully qualified URLs, such as: http://api.example.com/accounts/1/ Rather than relative URLs, such as: /accounts/1/ If you do want to use relative URLs, you should explicitly pass {'request': None} in the serializer context.","title":"Absolute and relative URLs"},{"location":"api-guide/serializers/#how-hyperlinked-views-are-determined","text":"There needs to be a way of determining which views should be used for hyperlinking to model instances. By default hyperlinks are expected to correspond to a view name that matches the style '{model_name}-detail' , and looks up the instance by a pk keyword argument. You can override a URL field view name and lookup field by using either, or both of, the view_name and lookup_field options in the extra_kwargs setting, like so: class AccountSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Account fields = ['account_url', 'account_name', 'users', 'created'] extra_kwargs = { 'url': {'view_name': 'accounts', 'lookup_field': 'account_name'}, 'users': {'lookup_field': 'username'} } Alternatively you can set the fields on the serializer explicitly. For example: class AccountSerializer(serializers.HyperlinkedModelSerializer): url = serializers.HyperlinkedIdentityField( view_name='accounts', lookup_field='slug' ) users = serializers.HyperlinkedRelatedField( view_name='user-detail', lookup_field='username', many=True, read_only=True ) class Meta: model = Account fields = ['url', 'account_name', 'users', 'created'] Tip : Properly matching together hyperlinked representations and your URL conf can sometimes be a bit fiddly. Printing the repr of a HyperlinkedModelSerializer instance is a particularly useful way to inspect exactly which view names and lookup fields the relationships are expected to map too.","title":"How hyperlinked views are determined"},{"location":"api-guide/serializers/#changing-the-url-field-name","text":"The name of the URL field defaults to 'url'. You can override this globally, by using the URL_FIELD_NAME setting.","title":"Changing the URL field name"},{"location":"api-guide/serializers/#listserializer","text":"The ListSerializer class provides the behavior for serializing and validating multiple objects at once. You won't typically need to use ListSerializer directly, but should instead simply pass many=True when instantiating a serializer. When a serializer is instantiated and many=True is passed, a ListSerializer instance will be created. The serializer class then becomes a child of the parent ListSerializer The following argument can also be passed to a ListSerializer field or a serializer that is passed many=True :","title":"ListSerializer"},{"location":"api-guide/serializers/#allow_empty","text":"This is True by default, but can be set to False if you want to disallow empty lists as valid input.","title":"allow_empty"},{"location":"api-guide/serializers/#customizing-listserializer-behavior","text":"There are a few use cases when you might want to customize the ListSerializer behavior. For example: You want to provide particular validation of the lists, such as checking that one element does not conflict with another element in a list. You want to customize the create or update behavior of multiple objects. For these cases you can modify the class that is used when many=True is passed, by using the list_serializer_class option on the serializer Meta class. For example: class CustomListSerializer(serializers.ListSerializer): ... class CustomSerializer(serializers.Serializer): ... class Meta: list_serializer_class = CustomListSerializer","title":"Customizing ListSerializer behavior"},{"location":"api-guide/serializers/#customizing-multiple-create","text":"The default implementation for multiple object creation is to simply call .create() for each item in the list. If you want to customize this behavior, you'll need to customize the .create() method on ListSerializer class that is used when many=True is passed. For example: class BookListSerializer(serializers.ListSerializer): def create(self, validated_data): books = [Book(**item) for item in validated_data] return Book.objects.bulk_create(books) class BookSerializer(serializers.Serializer): ... class Meta: list_serializer_class = BookListSerializer","title":"Customizing multiple create"},{"location":"api-guide/serializers/#customizing-multiple-update","text":"By default the ListSerializer class does not support multiple updates. This is because the behavior that should be expected for insertions and deletions is ambiguous. To support multiple updates you'll need to do so explicitly. When writing your multiple update code make sure to keep the following in mind: How do you determine which instance should be updated for each item in the list of data? How should insertions be handled? Are they invalid, or do they create new objects? How should removals be handled? Do they imply object deletion, or removing a relationship? Should they be silently ignored, or are they invalid? How should ordering be handled? Does changing the position of two items imply any state change or is it ignored? You will need to add an explicit id field to the instance serializer. The default implicitly-generated id field is marked as read_only . This causes it to be removed on updates. Once you declare it explicitly, it will be available in the list serializer's update method. Here's an example of how you might choose to implement multiple updates: class BookListSerializer(serializers.ListSerializer): def update(self, instance, validated_data): # Maps for id->instance and id->data item. book_mapping = {book.id: book for book in instance} data_mapping = {item['id']: item for item in validated_data} # Perform creations and updates. ret = [] for book_id, data in data_mapping.items(): book = book_mapping.get(book_id, None) if book is None: ret.append(self.child.create(data)) else: ret.append(self.child.update(book, data)) # Perform deletions. for book_id, book in book_mapping.items(): if book_id not in data_mapping: book.delete() return ret class BookSerializer(serializers.Serializer): # We need to identify elements in the list using their primary key, # so use a writable field here, rather than the default which would be read-only. id = serializers.IntegerField() ... class Meta: list_serializer_class = BookListSerializer It is possible that a third party package may be included alongside the 3.1 release that provides some automatic support for multiple update operations, similar to the allow_add_remove behavior that was present in REST framework 2.","title":"Customizing multiple update"},{"location":"api-guide/serializers/#customizing-listserializer-initialization","text":"When a serializer with many=True is instantiated, we need to determine which arguments and keyword arguments should be passed to the .__init__() method for both the child Serializer class, and for the parent ListSerializer class. The default implementation is to pass all arguments to both classes, except for validators , and any custom keyword arguments, both of which are assumed to be intended for the child serializer class. Occasionally you might need to explicitly specify how the child and parent classes should be instantiated when many=True is passed. You can do so by using the many_init class method. @classmethod def many_init(cls, *args, **kwargs): # Instantiate the child serializer. kwargs['child'] = cls() # Instantiate the parent list serializer. return CustomListSerializer(*args, **kwargs)","title":"Customizing ListSerializer initialization"},{"location":"api-guide/serializers/#baseserializer","text":"BaseSerializer class that can be used to easily support alternative serialization and deserialization styles. This class implements the same basic API as the Serializer class: .data - Returns the outgoing primitive representation. .is_valid() - Deserializes and validates incoming data. .validated_data - Returns the validated incoming data. .errors - Returns any errors during validation. .save() - Persists the validated data into an object instance. There are four methods that can be overridden, depending on what functionality you want the serializer class to support: .to_representation() - Override this to support serialization, for read operations. .to_internal_value() - Override this to support deserialization, for write operations. .create() and .update() - Override either or both of these to support saving instances. Because this class provides the same interface as the Serializer class, you can use it with the existing generic class-based views exactly as you would for a regular Serializer or ModelSerializer . The only difference you'll notice when doing so is the BaseSerializer classes will not generate HTML forms in the browsable API. This is because the data they return does not include all the field information that would allow each field to be rendered into a suitable HTML input.","title":"BaseSerializer"},{"location":"api-guide/serializers/#read-only-baseserializer-classes","text":"To implement a read-only serializer using the BaseSerializer class, we just need to override the .to_representation() method. Let's take a look at an example using a simple Django model: class HighScore(models.Model): created = models.DateTimeField(auto_now_add=True) player_name = models.CharField(max_length=10) score = models.IntegerField() It's simple to create a read-only serializer for converting HighScore instances into primitive data types. class HighScoreSerializer(serializers.BaseSerializer): def to_representation(self, instance): return { 'score': instance.score, 'player_name': instance.player_name } We can now use this class to serialize single HighScore instances: @api_view(['GET']) def high_score(request, pk): instance = HighScore.objects.get(pk=pk) serializer = HighScoreSerializer(instance) return Response(serializer.data) Or use it to serialize multiple instances: @api_view(['GET']) def all_high_scores(request): queryset = HighScore.objects.order_by('-score') serializer = HighScoreSerializer(queryset, many=True) return Response(serializer.data)","title":"Read-only BaseSerializer classes"},{"location":"api-guide/serializers/#read-write-baseserializer-classes","text":"To create a read-write serializer we first need to implement a .to_internal_value() method. This method returns the validated values that will be used to construct the object instance, and may raise a serializers.ValidationError if the supplied data is in an incorrect format. Once you've implemented .to_internal_value() , the basic validation API will be available on the serializer, and you will be able to use .is_valid() , .validated_data and .errors . If you want to also support .save() you'll need to also implement either or both of the .create() and .update() methods. Here's a complete example of our previous HighScoreSerializer , that's been updated to support both read and write operations. class HighScoreSerializer(serializers.BaseSerializer): def to_internal_value(self, data): score = data.get('score') player_name = data.get('player_name') # Perform the data validation. if not score: raise serializers.ValidationError({ 'score': 'This field is required.' }) if not player_name: raise serializers.ValidationError({ 'player_name': 'This field is required.' }) if len(player_name) > 10: raise serializers.ValidationError({ 'player_name': 'May not be more than 10 characters.' }) # Return the validated values. This will be available as # the `.validated_data` property. return { 'score': int(score), 'player_name': player_name } def to_representation(self, instance): return { 'score': instance.score, 'player_name': instance.player_name } def create(self, validated_data): return HighScore.objects.create(**validated_data)","title":"Read-write BaseSerializer classes"},{"location":"api-guide/serializers/#creating-new-base-classes","text":"The BaseSerializer class is also useful if you want to implement new generic serializer classes for dealing with particular serialization styles, or for integrating with alternative storage backends. The following class is an example of a generic serializer that can handle coercing arbitrary objects into primitive representations. class ObjectSerializer(serializers.BaseSerializer): \"\"\" A read-only serializer that coerces arbitrary complex objects into primitive representations. \"\"\" def to_representation(self, instance): output = {} for attribute_name in dir(instance): attribute = getattr(instance, attribute_name) if attribute_name.startswith('_'): # Ignore private attributes. pass elif hasattr(attribute, '__call__'): # Ignore methods and other callables. pass elif isinstance(attribute, (str, int, bool, float, type(None))): # Primitive types can be passed through unmodified. output[attribute_name] = attribute elif isinstance(attribute, list): # Recursively deal with items in lists. output[attribute_name] = [ self.to_representation(item) for item in attribute ] elif isinstance(attribute, dict): # Recursively deal with items in dictionaries. output[attribute_name] = { str(key): self.to_representation(value) for key, value in attribute.items() } else: # Force anything else to its string representation. output[attribute_name] = str(attribute) return output","title":"Creating new base classes"},{"location":"api-guide/serializers/#advanced-serializer-usage","text":"","title":"Advanced serializer usage"},{"location":"api-guide/serializers/#overriding-serialization-and-deserialization-behavior","text":"If you need to alter the serialization or deserialization behavior of a serializer class, you can do so by overriding the .to_representation() or .to_internal_value() methods. Some reasons this might be useful include... Adding new behavior for new serializer base classes. Modifying the behavior slightly for an existing class. Improving serialization performance for a frequently accessed API endpoint that returns lots of data. The signatures for these methods are as follows:","title":"Overriding serialization and deserialization behavior"},{"location":"api-guide/serializers/#to_representationself-instance","text":"Takes the object instance that requires serialization, and should return a primitive representation. Typically this means returning a structure of built-in Python datatypes. The exact types that can be handled will depend on the render classes you have configured for your API. May be overridden in order to modify the representation style. For example: def to_representation(self, instance): \"\"\"Convert `username` to lowercase.\"\"\" ret = super().to_representation(instance) ret['username'] = ret['username'].lower() return ret","title":".to_representation(self, instance)"},{"location":"api-guide/serializers/#to_internal_valueself-data","text":"Takes the unvalidated incoming data as input and should return the validated data that will be made available as serializer.validated_data . The return value will also be passed to the .create() or .update() methods if .save() is called on the serializer class. If any of the validation fails, then the method should raise a serializers.ValidationError(errors) . The errors argument should be a dictionary mapping field names (or settings.NON_FIELD_ERRORS_KEY ) to a list of error messages. If you don't need to alter deserialization behavior and instead want to provide object-level validation, it's recommended that you instead override the .validate() method. The data argument passed to this method will normally be the value of request.data , so the datatype it provides will depend on the parser classes you have configured for your API.","title":".to_internal_value(self, data)"},{"location":"api-guide/serializers/#serializer-inheritance","text":"Similar to Django forms, you can extend and reuse serializers through inheritance. This allows you to declare a common set of fields or methods on a parent class that can then be used in a number of serializers. For example, class MyBaseSerializer(Serializer): my_field = serializers.CharField() def validate_my_field(self, value): ... class MySerializer(MyBaseSerializer): ... Like Django's Model and ModelForm classes, the inner Meta class on serializers does not implicitly inherit from it's parents' inner Meta classes. If you want the Meta class to inherit from a parent class you must do so explicitly. For example: class AccountSerializer(MyBaseSerializer): class Meta(MyBaseSerializer.Meta): model = Account Typically we would recommend not using inheritance on inner Meta classes, but instead declaring all options explicitly. Additionally, the following caveats apply to serializer inheritance: Normal Python name resolution rules apply. If you have multiple base classes that declare a Meta inner class, only the first one will be used. This means the child\u2019s Meta , if it exists, otherwise the Meta of the first parent, etc. It\u2019s possible to declaratively remove a Field inherited from a parent class by setting the name to be None on the subclass. class MyBaseSerializer(ModelSerializer): my_field = serializers.CharField() class MySerializer(MyBaseSerializer): my_field = None However, you can only use this technique to opt out from a field defined declaratively by a parent class; it won\u2019t prevent the ModelSerializer from generating a default field. To opt-out from default fields, see Specifying which fields to include .","title":"Serializer Inheritance"},{"location":"api-guide/serializers/#dynamically-modifying-fields","text":"Once a serializer has been initialized, the dictionary of fields that are set on the serializer may be accessed using the .fields attribute. Accessing and modifying this attribute allows you to dynamically modify the serializer. Modifying the fields argument directly allows you to do interesting things such as changing the arguments on serializer fields at runtime, rather than at the point of declaring the serializer.","title":"Dynamically modifying fields"},{"location":"api-guide/serializers/#example","text":"For example, if you wanted to be able to set which fields should be used by a serializer at the point of initializing it, you could create a serializer class like so: class DynamicFieldsModelSerializer(serializers.ModelSerializer): \"\"\" A ModelSerializer that takes an additional `fields` argument that controls which fields should be displayed. \"\"\" def __init__(self, *args, **kwargs): # Don't pass the 'fields' arg up to the superclass fields = kwargs.pop('fields', None) # Instantiate the superclass normally super(DynamicFieldsModelSerializer, self).__init__(*args, **kwargs) if fields is not None: # Drop any fields that are not specified in the `fields` argument. allowed = set(fields) existing = set(self.fields) for field_name in existing - allowed: self.fields.pop(field_name) This would then allow you to do the following: >>> class UserSerializer(DynamicFieldsModelSerializer): >>> class Meta: >>> model = User >>> fields = ['id', 'username', 'email'] >>> >>> print(UserSerializer(user)) {'id': 2, 'username': 'jonwatts', 'email': 'jon@example.com'} >>> >>> print(UserSerializer(user, fields=('id', 'email'))) {'id': 2, 'email': 'jon@example.com'}","title":"Example"},{"location":"api-guide/serializers/#customizing-the-default-fields","text":"REST framework 2 provided an API to allow developers to override how a ModelSerializer class would automatically generate the default set of fields. This API included the .get_field() , .get_pk_field() and other methods. Because the serializers have been fundamentally redesigned with 3.0 this API no longer exists. You can still modify the fields that get created but you'll need to refer to the source code, and be aware that if the changes you make are against private bits of API then they may be subject to change.","title":"Customizing the default fields"},{"location":"api-guide/serializers/#third-party-packages","text":"The following third party packages are also available.","title":"Third party packages"},{"location":"api-guide/serializers/#django-rest-marshmallow","text":"The django-rest-marshmallow package provides an alternative implementation for serializers, using the python marshmallow library. It exposes the same API as the REST framework serializers, and can be used as a drop-in replacement in some use-cases.","title":"Django REST marshmallow"},{"location":"api-guide/serializers/#serpy","text":"The serpy package is an alternative implementation for serializers that is built for speed. Serpy serializes complex datatypes to simple native types. The native types can be easily converted to JSON or any other format needed.","title":"Serpy"},{"location":"api-guide/serializers/#mongoenginemodelserializer","text":"The django-rest-framework-mongoengine package provides a MongoEngineModelSerializer serializer class that supports using MongoDB as the storage layer for Django REST framework.","title":"MongoengineModelSerializer"},{"location":"api-guide/serializers/#geofeaturemodelserializer","text":"The django-rest-framework-gis package provides a GeoFeatureModelSerializer serializer class that supports GeoJSON both for read and write operations.","title":"GeoFeatureModelSerializer"},{"location":"api-guide/serializers/#hstoreserializer","text":"The django-rest-framework-hstore package provides an HStoreSerializer to support django-hstore DictionaryField model field and its schema-mode feature.","title":"HStoreSerializer"},{"location":"api-guide/serializers/#dynamic-rest","text":"The dynamic-rest package extends the ModelSerializer and ModelViewSet interfaces, adding API query parameters for filtering, sorting, and including / excluding all fields and relationships defined by your serializers.","title":"Dynamic REST"},{"location":"api-guide/serializers/#dynamic-fields-mixin","text":"The drf-dynamic-fields package provides a mixin to dynamically limit the fields per serializer to a subset specified by an URL parameter.","title":"Dynamic Fields Mixin"},{"location":"api-guide/serializers/#drf-flexfields","text":"The drf-flex-fields package extends the ModelSerializer and ModelViewSet to provide commonly used functionality for dynamically setting fields and expanding primitive fields to nested models, both from URL parameters and your serializer class definitions.","title":"DRF FlexFields"},{"location":"api-guide/serializers/#serializer-extensions","text":"The django-rest-framework-serializer-extensions package provides a collection of tools to DRY up your serializers, by allowing fields to be defined on a per-view/request basis. Fields can be whitelisted, blacklisted and child serializers can be optionally expanded.","title":"Serializer Extensions"},{"location":"api-guide/serializers/#html-json-forms","text":"The html-json-forms package provides an algorithm and serializer for processing <form> submissions per the (inactive) HTML JSON Form specification . The serializer facilitates processing of arbitrarily nested JSON structures within HTML. For example, <input name=\"items[0][id]\" value=\"5\"> will be interpreted as {\"items\": [{\"id\": \"5\"}]} .","title":"HTML JSON Forms"},{"location":"api-guide/serializers/#drf-base64","text":"DRF-Base64 provides a set of field and model serializers that handles the upload of base64-encoded files.","title":"DRF-Base64"},{"location":"api-guide/serializers/#queryfields","text":"djangorestframework-queryfields allows API clients to specify which fields will be sent in the response via inclusion/exclusion query parameters.","title":"QueryFields"},{"location":"api-guide/serializers/#drf-writable-nested","text":"The drf-writable-nested package provides writable nested model serializer which allows to create/update models with nested related data.","title":"DRF Writable Nested"},{"location":"api-guide/serializers_zh/","text":"\u5e8f\u5217\u5316\u5668 \u6269\u5c55serializers\u7684\u6709\u7528\u6027\u662f\u6211\u4eec\u60f3\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u95ee\u9898\uff0c\u800c\u662f\u9700\u8981\u4e00\u4e9b\u4e25\u8083\u7684\u8bbe\u8ba1\u5de5\u4f5c\u3002 \u2014 Russell Keith-Magee, Django\u7528\u6237\u7ec4 \u5e8f\u5217\u5316\u5668\u5141\u8bb8\u628a\u50cf\u67e5\u8be2\u96c6\u548c\u6a21\u578b\u5b9e\u4f8b\u8fd9\u6837\u7684\u590d\u6742\u6570\u636e\u8f6c\u6362\u4e3a\u53ef\u4ee5\u8f7b\u677e\u6e32\u67d3\u6210 JSON \uff0c XML \u6216\u5176\u4ed6\u5185\u5bb9\u7c7b\u578b\u7684\u539f\u751fPython\u7c7b\u578b\u3002\u5e8f\u5217\u5316\u5668\u8fd8\u63d0\u4f9b\u53cd\u5e8f\u5217\u5316\uff0c\u5728\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u4e4b\u540e\u5141\u8bb8\u89e3\u6790\u6570\u636e\u8f6c\u6362\u56de\u590d\u6742\u7c7b\u578b\u3002 REST framework\u4e2d\u7684serializers\u4e0eDjango\u7684 Form \u548c ModelForm \u7c7b\u975e\u5e38\u50cf\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a Serializer \u7c7b\uff0c\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u901a\u7528\u65b9\u6cd5\u6765\u63a7\u5236\u54cd\u5e94\u7684\u8f93\u51fa\uff0c\u4ee5\u53ca\u4e00\u4e2a ModelSerializer \u7c7b\uff0c\u5b83\u4e3a\u521b\u5efa\u7528\u4e8e\u5904\u7406\u6a21\u578b\u5b9e\u4f8b\u548c\u67e5\u8be2\u96c6\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u6709\u7528\u7684\u5feb\u6377\u5b9e\u73b0\u65b9\u5f0f\u3002 \u58f0\u660e\u5e8f\u5217\u5316\u5668 \u8ba9\u6211\u4eec\u4ece\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u8c61\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a from datetime import datetime class Comment(object): def __init__(self, email, content, created=None): self.email = email self.content = content self.created = created or datetime.now() comment = Comment(email='leila@example.com', content='foo bar') \u6211\u4eec\u5c06\u58f0\u660e\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e0e Comment \u5bf9\u8c61\u76f8\u5e94\u7684\u6570\u636e\u3002 \u58f0\u660e\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u770b\u8d77\u6765\u975e\u5e38\u50cf\u58f0\u660e\u4e00\u4e2aform\uff1a from rest_framework import serializers class CommentSerializer(serializers.Serializer): email = serializers.EmailField() content = serializers.CharField(max_length=200) created = serializers.DateTimeField() \u5e8f\u5217\u5316\u5bf9\u8c61 \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u7528 CommentSerializer \u53bb\u5e8f\u5217\u5316\u4e00\u4e2acomment\u6216comment\u5217\u8868\u3002\u540c\u6837\uff0c\u4f7f\u7528 Serializer \u7c7b\u770b\u8d77\u6765\u5f88\u50cf\u4f7f\u7528 Form \u7c7b\u3002 serializer = CommentSerializer(comment) serializer.data # {'email': 'leila@example.com', 'content': 'foo bar', 'created': '2016-01-27T15:17:10.375877'} \u6b64\u65f6\uff0c\u6211\u4eec\u5c06\u6a21\u578b\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b\u3002\u4e3a\u4e86\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8f6c\u5316\u4e3a json \u3002 from rest_framework.renderers import JSONRenderer json = JSONRenderer().render(serializer.data) json # b'{\"email\":\"leila@example.com\",\"content\":\"foo bar\",\"created\":\"2016-01-27T15:17:10.375877\"}' \u53cd\u5e8f\u5217\u5316\u5bf9\u8c61 \u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\u6211\u4eec\u5c06\u4e00\u4e2a\u6d41\u89e3\u6790\u4e3aPython\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b... from django.utils.six import BytesIO from rest_framework.parsers import JSONParser stream = BytesIO(json) data = JSONParser().parse(stream) ...\u7136\u540e\u6211\u4eec\u5c06\u8fd9\u4e9b\u539f\u751f\u6570\u636e\u7c7b\u578b\u6062\u590d\u5230\u5df2\u9a8c\u8bc1\u6570\u636e\u7684\u5b57\u5178\u4e2d\u3002 serializer = CommentSerializer(data=data) serializer.is_valid() # True serializer.validated_data # {'content': 'foo bar', 'email': 'leila@example.com', 'created': datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)} \u4fdd\u5b58\u5b9e\u4f8b \u5982\u679c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u8fd4\u56de\u57fa\u4e8e\u9a8c\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5176\u4e2d\u4e00\u4e2a\u6216\u5168\u90e8\u5b9e\u73b0 .create() \u548c update() \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a class CommentSerializer(serializers.Serializer): email = serializers.EmailField() content = serializers.CharField(max_length=200) created = serializers.DateTimeField() def create(self, validated_data): return Comment(**validated_data) def update(self, instance, validated_data): instance.email = validated_data.get('email', instance.email) instance.content = validated_data.get('content', instance.content) instance.created = validated_data.get('created', instance.created) return instance \u5982\u679c\u4f60\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5bf9\u5e94Django\u7684\u6a21\u578b\uff0c\u4f60\u8fd8\u9700\u8981\u786e\u4fdd\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u5bf9\u8c61\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u3002\u4f8b\u5982\uff0c\u5982\u679c Comment \u662f\u4e00\u4e2aDjango\u6a21\u578b\u7684\u8bdd\uff0c\u5177\u4f53\u7684\u65b9\u6cd5\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a def create(self, validated_data): return Comment.objects.create(**validated_data) def update(self, instance, validated_data): instance.email = validated_data.get('email', instance.email) instance.content = validated_data.get('content', instance.content) instance.created = validated_data.get('created', instance.created) instance.save() return instance \u73b0\u5728\u5f53\u6211\u4eec\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u65f6\u5019\uff0c\u57fa\u4e8e\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 .save() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u3002 comment = serializer.save() \u8c03\u7528 .save() \u65b9\u6cd5\u5c06\u521b\u5efa\u65b0\u5b9e\u4f8b\u6216\u8005\u66f4\u65b0\u73b0\u6709\u5b9e\u4f8b\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u65f6\u5019\u662f\u5426\u4f20\u9012\u4e86\u73b0\u6709\u5b9e\u4f8b\uff1a # .save() will create a new instance. serializer = CommentSerializer(data=data) # .save() will update the existing `comment` instance. serializer = CommentSerializer(comment, data=data) .create() \u548c .update() \u65b9\u6cd5\u90fd\u662f\u53ef\u9009\u7684\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u4f60\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u7528\u4f8b\u4e0d\u5b9e\u73b0\u3001\u5b9e\u73b0\u5b83\u4eec\u4e4b\u4e00\u6216\u90fd\u5b9e\u73b0\u3002 \u4f20\u9012\u9644\u52a0\u5c5e\u6027\u5230 .save() \u6709\u65f6\u4f60\u4f1a\u5e0c\u671b\u4f60\u7684\u89c6\u56fe\u4ee3\u7801\u80fd\u591f\u5728\u4fdd\u5b58\u5b9e\u4f8b\u65f6\u6ce8\u5165\u989d\u5916\u7684\u6570\u636e\u3002\u6b64\u989d\u5916\u6570\u636e\u53ef\u80fd\u5305\u62ec\u5f53\u524d\u7528\u6237\uff0c\u5f53\u524d\u65f6\u95f4\u6216\u4e0d\u662f\u8bf7\u6c42\u6570\u636e\u4e00\u90e8\u5206\u7684\u5176\u4ed6\u4fe1\u606f\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u8c03\u7528 .save() \u65f6\u6dfb\u52a0\u5176\u4ed6\u5173\u952e\u5b57\u53c2\u6570\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a serializer.save(owner=request.user) \u5728 .create() \u6216 .update() \u88ab\u8c03\u7528\u65f6\uff0c\u4efb\u4f55\u5176\u4ed6\u5173\u952e\u5b57\u53c2\u6570\u5c06\u88ab\u5305\u542b\u5728 validated_data \u53c2\u6570\u4e2d\u3002 \u76f4\u63a5\u91cd\u5199 .save() \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b .create() \u548c .update() \u65b9\u6cd5\u53ef\u80fd\u65e0\u610f\u4e49\u3002\u4f8b\u5982\u5728contact form\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b\uff0c\u800c\u662f\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u6216\u5176\u4ed6\u6d88\u606f\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u91cd\u5199 .save() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u90a3\u6837\u66f4\u53ef\u8bfb\u548c\u6709\u610f\u4e49\u3002 \u4f8b\u5982\uff1a class ContactForm(serializers.Serializer): email = serializers.EmailField() message = serializers.CharField() def save(self): email = self.validated_data['email'] message = self.validated_data['message'] send_email(from=email, message=message) \u8bf7\u6ce8\u610f\u5728\u4e0a\u8ff0\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u73b0\u5728\u4e0d\u5f97\u4e0d\u76f4\u63a5\u8bbf\u95eeserializer\u7684 .validated_data \u5c5e\u6027\u3002 \u9a8c\u8bc1 \u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u65f6\u5019\uff0c\u4f60\u59cb\u7ec8\u9700\u8981\u5148\u8c03\u7528 is_valid() \u65b9\u6cd5\uff0c\u7136\u540e\u518d\u5c1d\u8bd5\u53bb\u8bbf\u95ee\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u6570\u636e\u6216\u4fdd\u5b58\u5bf9\u8c61\u5b9e\u4f8b\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9a8c\u8bc1\u9519\u8bef\uff0c .errors \u5c5e\u6027\u5c06\u5305\u542b\u8868\u793a\u751f\u6210\u7684\u9519\u8bef\u6d88\u606f\u7684\u5b57\u5178\u3002\u4f8b\u5982\uff1a serializer = CommentSerializer(data={'email': 'foobar', 'content': 'baz'}) serializer.is_valid() # False serializer.errors # {'email': [u'Enter a valid e-mail address.'], 'created': [u'This field is required.']} \u5b57\u5178\u91cc\u7684\u6bcf\u4e00\u4e2a\u952e\u90fd\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u662f\u4e0e\u8be5\u5b57\u6bb5\u5bf9\u5e94\u7684\u4efb\u4f55\u9519\u8bef\u6d88\u606f\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002 non_field_errors \u952e\u53ef\u80fd\u5b58\u5728\uff0c\u5b83\u5c06\u5217\u51fa\u4efb\u4f55\u4e00\u822c\u9a8c\u8bc1\u9519\u8bef\u4fe1\u606f\u3002 non_field_errors \u7684\u540d\u79f0\u53ef\u4ee5\u901a\u8fc7REST framework\u8bbe\u7f6e\u4e2d\u7684 NON_FIELD_ERRORS_KEY \u6765\u81ea\u5b9a\u4e49\u3002 \u5f53\u5bf9\u5bf9\u8c61\u5217\u8868\u8fdb\u884c\u5e8f\u5217\u5316\u65f6\uff0c\u8fd4\u56de\u7684\u9519\u8bef\u662f\u6bcf\u4e2a\u53cd\u5e8f\u5217\u5316\u9879\u7684\u5b57\u5178\u5217\u8868\u3002 \u629b\u51fa\u65e0\u6548\u6570\u636e\u7684\u5f02\u5e38 .is_valid() \u65b9\u6cd5\u4f7f\u7528\u53ef\u9009\u7684 raise_exception \u6807\u5fd7\uff0c\u5982\u679c\u5b58\u5728\u9a8c\u8bc1\u9519\u8bef\u5c06\u4f1a\u629b\u51fa\u4e00\u4e2a serializers.ValidationError \u5f02\u5e38\u3002 \u8fd9\u4e9b\u5f02\u5e38\u7531REST framework\u63d0\u4f9b\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u81ea\u52a8\u5904\u7406\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u8fd4\u56de HTTP 400 Bad Request \u54cd\u5e94\u3002 # \u5982\u679c\u6570\u636e\u65e0\u6548\u5c31\u8fd4\u56de400\u54cd\u5e94 serializer.is_valid(raise_exception=True) \u5b57\u6bb5\u7ea7\u522b\u7684\u9a8c\u8bc1 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5411\u4f60\u7684 Serializer \u5b50\u7c7b\u4e2d\u6dfb\u52a0 .validate_<field_name> \u65b9\u6cd5\u6765\u6307\u5b9a\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7ea7\u522b\u7684\u9a8c\u8bc1\u3002\u8fd9\u4e9b\u7c7b\u4f3c\u4e8eDjango\u8868\u5355\u4e2d\u7684 .clean_<field_name> \u65b9\u6cd5\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u91c7\u7528\u5355\u4e2a\u53c2\u6570\uff0c\u5373\u9700\u8981\u9a8c\u8bc1\u7684\u5b57\u6bb5\u503c\u3002 \u4f60\u7684 validate_<field_name> \u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u6216\u8005\u629b\u51fa\u4e00\u4e2a serializers.ValidationError \u5f02\u5e38\u3002\u4f8b\u5982\uff1a from rest_framework import serializers class BlogPostSerializer(serializers.Serializer): title = serializers.CharField(max_length=100) content = serializers.CharField() def validate_title(self, value): \"\"\" Check that the blog post is about Django. \"\"\" if 'django' not in value.lower(): raise serializers.ValidationError(\"Blog post is not about Django\") return value \u6ce8\u610f\uff1a \u5982\u679c\u4f60\u5728\u5e8f\u5217\u5316\u5668\u4e2d\u58f0\u660e <field_name> \u7684\u65f6\u5019\u5e26\u6709 required=False \u53c2\u6570\uff0c\u5b57\u6bb5\u4e0d\u88ab\u5305\u542b\u7684\u65f6\u5019\u8fd9\u4e2a\u9a8c\u8bc1\u6b65\u9aa4\u5c31\u4e0d\u4f1a\u6267\u884c\u3002 \u5bf9\u8c61\u7ea7\u522b\u7684\u9a8c\u8bc1 \u8981\u6267\u884c\u9700\u8981\u8bbf\u95ee\u591a\u4e2a\u5b57\u6bb5\u7684\u4efb\u4f55\u5176\u4ed6\u9a8c\u8bc1\uff0c\u8bf7\u6dfb\u52a0\u4e00\u4e2a .validate() \u65b9\u6cd5\u5230\u4f60\u7684 Serializer \u5b50\u7c7b\u4e2d\u3002\u8fd9\u4e2a\u65b9\u6cd5\u91c7\u7528\u5b57\u6bb5\u503c\u5b57\u5178\u7684\u5355\u4e2a\u53c2\u6570\uff0c\u5982\u679c\u9700\u8981\u5e94\u8be5\u629b\u51fa\u4e00\u4e2a ValidationError \u5f02\u5e38\uff0c\u6216\u8005\u53ea\u662f\u8fd4\u56de\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u503c\u3002\u4f8b\u5982\uff1a from rest_framework import serializers class EventSerializer(serializers.Serializer): description = serializers.CharField(max_length=100) start = serializers.DateTimeField() finish = serializers.DateTimeField() def validate(self, data): \"\"\" Check that the start is before the stop. \"\"\" if data['start'] > data['finish']: raise serializers.ValidationError(\"finish must occur after start\") return data \u9a8c\u8bc1\u5668 \u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5404\u4e2a\u5b57\u6bb5\u90fd\u53ef\u4ee5\u5305\u542b\u9a8c\u8bc1\u5668\uff0c\u901a\u8fc7\u5728\u5b57\u6bb5\u5b9e\u4f8b\u4e0a\u58f0\u660e\uff0c\u4f8b\u5982\uff1a def multiple_of_ten(value): if value % 10 != 0: raise serializers.ValidationError('Not a multiple of ten') class GameRecord(serializers.Serializer): score = IntegerField(validators=[multiple_of_ten]) ... \u5e8f\u5217\u5316\u5668\u7c7b\u8fd8\u53ef\u4ee5\u5305\u62ec\u5e94\u7528\u4e8e\u4e00\u7ec4\u5b57\u6bb5\u6570\u636e\u7684\u53ef\u91cd\u7528\u7684\u9a8c\u8bc1\u5668\u3002\u8fd9\u4e9b\u9a8c\u8bc1\u5668\u8981\u5728\u5185\u90e8\u7684 Meta \u7c7b\u4e2d\u58f0\u660e\uff0c\u5982\u4e0b\u6240\u793a\uff1a class EventSerializer(serializers.Serializer): name = serializers.CharField() room_number = serializers.IntegerField(choices=[101, 102, 103, 201]) date = serializers.DateField() class Meta: # \u6bcf\u95f4\u5c4b\u5b50\u6bcf\u5929\u53ea\u80fd\u67091\u4e2a\u6d3b\u52a8\u3002 validators = UniqueTogetherValidator( queryset=Event.objects.all(), fields=['room_number', 'date'] ) \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605 validators\u6587\u6863 \u3002 \u8bbf\u95ee\u521d\u59cb\u6570\u636e\u548c\u5b9e\u4f8b \u5c06\u521d\u59cb\u5316\u5bf9\u8c61\u6216\u8005\u67e5\u8be2\u96c6\u4f20\u9012\u7ed9\u5e8f\u5217\u5316\u5b9e\u4f8b\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 .instance \u8bbf\u95ee\u3002\u5982\u679c\u6ca1\u6709\u4f20\u9012\u521d\u59cb\u5316\u5bf9\u8c61\uff0c\u90a3\u4e48 .instance \u5c5e\u6027\u5c06\u662f None \u3002 \u5c06\u6570\u636e\u4f20\u9012\u7ed9\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\u65f6\uff0c\u672a\u4fee\u6539\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7 .initial_data \u83b7\u53d6\u3002\u5982\u679c\u6ca1\u6709\u4f20\u9012data\u5173\u952e\u5b57\u53c2\u6570\uff0c\u90a3\u4e48 .initial_data \u5c5e\u6027\u5c31\u4e0d\u5b58\u5728\u3002 \u90e8\u5206\u66f4\u65b0 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5e8f\u5217\u5316\u5668\u5fc5\u987b\u4f20\u9012\u6240\u6709\u5fc5\u586b\u5b57\u6bb5\u7684\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 partial \u53c2\u6570\u6765\u5141\u8bb8\u90e8\u5206\u66f4\u65b0\u3002 # \u4f7f\u7528\u90e8\u5206\u6570\u636e\u66f4\u65b0`comment` serializer = CommentSerializer(comment, data={'content': u'foo bar'}, partial=True) \u5904\u7406\u5d4c\u5957\u5bf9\u8c61 \u524d\u9762\u7684\u5b9e\u4f8b\u9002\u7528\u4e8e\u5904\u7406\u53ea\u6709\u7b80\u5355\u6570\u636e\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u9700\u8981\u8868\u793a\u66f4\u590d\u6742\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u5bf9\u8c61\u7684\u67d0\u4e9b\u5c5e\u6027\u53ef\u80fd\u4e0d\u662f\u5b57\u7b26\u4e32\u3001\u65e5\u671f\u3001\u6574\u6570\u8fd9\u6837\u7b80\u5355\u7684\u6570\u636e\u7c7b\u578b\u3002 Serializer \u7c7b\u672c\u8eab\u4e5f\u662f\u4e00\u79cd Field \uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5bf9\u8c61\u7c7b\u578b\u5d4c\u5957\u5728\u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u5173\u7cfb\u3002 class UserSerializer(serializers.Serializer): email = serializers.EmailField() username = serializers.CharField(max_length=100) class CommentSerializer(serializers.Serializer): user = UserSerializer() content = serializers.CharField(max_length=200) created = serializers.DateTimeField() \u5982\u679c\u5d4c\u5957\u8868\u793a\u53ef\u4ee5\u63a5\u6536 None \u503c\uff0c\u5219\u5e94\u8be5\u5c06 required=False \u6807\u5fd7\u4f20\u9012\u7ed9\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u3002 class CommentSerializer(serializers.Serializer): user = UserSerializer(required=False) # \u53ef\u80fd\u662f\u533f\u540d\u7528\u6237\u3002 content = serializers.CharField(max_length=200) created = serializers.DateTimeField() \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u5d4c\u5957\u7684\u5173\u8054\u5b57\u6bb5\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u5217\u8868\uff0c\u90a3\u4e48\u5e94\u8be5\u5c06 many=True \u6807\u5fd7\u4f20\u9012\u7ed9\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u3002 class CommentSerializer(serializers.Serializer): user = UserSerializer(required=False) edits = EditItemSerializer(many=True) # edit'\u9879\u7684\u5d4c\u5957\u5217\u8868 content = serializers.CharField(max_length=200) created = serializers.DateTimeField() \u53ef\u5199\u7684\u5d4c\u5957\u8868\u793a \u5f53\u5904\u7406\u652f\u6301\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u5d4c\u5957\u8868\u793a\u65f6\uff0c\u5d4c\u5957\u5bf9\u8c61\u7684\u4efb\u4f55\u9519\u8bef\u90fd\u5d4c\u5957\u5728\u5d4c\u5957\u5bf9\u8c61\u7684\u5b57\u6bb5\u540d\u4e0b\u3002 serializer = CommentSerializer(data={'user': {'email': 'foobar', 'username': 'doe'}, 'content': 'baz'}) serializer.is_valid() # False serializer.errors # {'user': {'email': [u'Enter a valid e-mail address.']}, 'created': [u'This field is required.']} \u7c7b\u4f3c\u7684\uff0c .validated_data \u5c5e\u6027\u5c06\u5305\u62ec\u5d4c\u5957\u6570\u636e\u7ed3\u6784\u3002 \u4e3a\u5d4c\u5957\u5173\u7cfb\u5b9a\u4e49 .create() \u65b9\u6cd5 \u5982\u679c\u4f60\u652f\u6301\u53ef\u5199\u7684\u5d4c\u5957\u8868\u793a\uff0c\u5219\u9700\u8981\u7f16\u5199 .create() \u6216 .update() \u5904\u7406\u4fdd\u5b58\u591a\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u5904\u7406\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u5d4c\u5957\u7684\u6982\u8981\u4fe1\u606f\u5bf9\u8c61\u7684\u7528\u6237\u3002 class UserSerializer(serializers.ModelSerializer): profile = ProfileSerializer() class Meta: model = User fields = ('username', 'email', 'profile') def create(self, validated_data): profile_data = validated_data.pop('profile') user = User.objects.create(**validated_data) Profile.objects.create(user=user, **profile_data) return user \u4e3a\u5d4c\u5957\u5173\u7cfb\u5b9a\u4e49 .update() \u65b9\u6cd5 \u5bf9\u4e8e\u66f4\u65b0\uff0c\u4f60\u9700\u8981\u4ed4\u7ec6\u8003\u8651\u5982\u4f55\u5904\u7406\u5173\u8054\u5b57\u6bb5\u7684\u66f4\u65b0\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5173\u8054\u5b57\u6bb5\u7684\u503c\u662f None \uff0c\u6216\u8005\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u4e0b\u9762\u54ea\u4e00\u9879\uff1f \u5728\u6570\u636e\u5e93\u4e2d\u5c06\u5173\u8054\u5b57\u6bb5\u8bbe\u7f6e\u6210 NULL \u3002 \u5220\u9664\u5173\u8054\u7684\u5b9e\u4f8b\u3002 \u5ffd\u7565\u6570\u636e\u5e76\u4fdd\u7559\u8fd9\u4e2a\u5b9e\u4f8b\u3002 \u629b\u51fa\u9a8c\u8bc1\u9519\u8bef\u3002 \u4e0b\u9762\u662f\u6211\u4eec\u4e4b\u524d UserSerializer \u7c7b\u4e2d update() \u65b9\u6cd5\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 def update(self, instance, validated_data): profile_data = validated_data.pop('profile') # \u9664\u975e\u5e94\u7528\u7a0b\u5e8f\u6b63\u786e\u6267\u884c\uff0c # \u4fdd\u8bc1\u8fd9\u4e2a\u5b57\u6bb5\u4e00\u76f4\u88ab\u8bbe\u7f6e\uff0c # \u5426\u5219\u5c31\u5e94\u8be5\u629b\u51fa\u4e00\u4e2a\u9700\u8981\u5904\u7406\u7684`DoesNotExist`\u3002 profile = instance.profile instance.username = validated_data.get('username', instance.username) instance.email = validated_data.get('email', instance.email) instance.save() profile.is_premium_member = profile_data.get( 'is_premium_member', profile.is_premium_member ) profile.has_support_contract = profile_data.get( 'has_support_contract', profile.has_support_contract ) profile.save() return instance \u56e0\u4e3a\u5d4c\u5957\u5173\u7cfb\u7684\u521b\u5efa\u548c\u66f4\u65b0\u884c\u4e3a\u53ef\u80fd\u4e0d\u660e\u786e\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u5173\u8054\u6a21\u578b\u95f4\u7684\u590d\u6742\u4f9d\u8d56\u5173\u7cfb\uff0cREST framework 3 \u8981\u6c42\u4f60\u59cb\u7ec8\u660e\u786e\u7684\u5b9a\u4e49\u8fd9\u4e9b\u65b9\u6cd5\u3002\u9ed8\u8ba4\u7684 ModelSerializer .create() \u548c .update() \u65b9\u6cd5\u4e0d\u5305\u62ec\u5bf9\u53ef\u5199\u5d4c\u5957\u5173\u8054\u7684\u652f\u6301\u3002 \u63d0\u4f9b\u81ea\u52a8\u652f\u6301\u67d0\u79cd\u7c7b\u578b\u7684\u81ea\u52a8\u5199\u5165\u5d4c\u5957\u5173\u8054\u7684\u7b2c\u4e09\u65b9\u5305\u53ef\u80fd\u4e0e3.1\u7248\u672c\u4e00\u540c\u653e\u51fa\u3002 \u5904\u7406\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u4fdd\u5b58\u5173\u8054\u5b9e\u4f8b \u5728\u5e8f\u5217\u5316\u5668\u4e2d\u4fdd\u5b58\u591a\u4e2a\u76f8\u5173\u5b9e\u4f8b\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u7f16\u5199\u5904\u7406\u521b\u5efa\u6b63\u786e\u5b9e\u4f8b\u7684\u81ea\u5b9a\u4e49\u6a21\u578b\u7ba1\u7406\u5668\u7c7b\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u786e\u4fdd User \u5b9e\u4f8b\u548c Profile \u5b9e\u4f8b\u603b\u662f\u4f5c\u4e3a\u4e00\u5bf9\u4e00\u8d77\u521b\u5efa\u3002\u6211\u4eec\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684\u81ea\u5b9a\u4e49\u7ba1\u7406\u5668\u7c7b\uff1a class UserManager(models.Manager): ... def create(self, username, email, is_premium_member=False, has_support_contract=False): user = User(username=username, email=email) user.save() profile = Profile( user=user, is_premium_member=is_premium_member, has_support_contract=has_support_contract ) profile.save() return user \u8fd9\u4e2a\u7ba1\u7406\u5668\u7c7b\u73b0\u5728\u66f4\u597d\u7684\u5c01\u88c5\u4e86\u7528\u6237\u5b9e\u4f8b\u548c\u7528\u6237\u4fe1\u606f\u5b9e\u4f8b\u603b\u662f\u5728\u540c\u4e00\u65f6\u95f4\u521b\u5efa\u3002\u6211\u4eec\u5728\u5e8f\u5217\u5316\u5668\u7c7b\u4e0a\u7684 .create() \u65b9\u6cd5\u73b0\u5728\u80fd\u591f\u7528\u65b0\u7684\u7ba1\u7406\u5668\u65b9\u6cd5\u91cd\u5199\u3002 def create(self, validated_data): return User.objects.create( username=validated_data['username'], email=validated_data['email'] is_premium_member=validated_data['profile']['is_premium_member'] has_support_contract=validated_data['profile']['has_support_contract'] ) \u6709\u5173\u6b64\u65b9\u6cd5\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605Django\u6587\u6863\u4e2d\u7684 \u6a21\u578b\u7ba1\u7406\u5668 \u548c \u4f7f\u7528\u6a21\u578b\u548c\u7ba1\u7406\u5668\u7c7b\u7684\u76f8\u5173\u535a\u5ba2 \u3002 \u5904\u7406\u591a\u4e2a\u5bf9\u8c61 Serializer \u7c7b\u8fd8\u53ef\u4ee5\u5e8f\u5217\u5316\u6216\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u7684\u5217\u8868\u3002 \u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61 \u4e3a\u4e86\u80fd\u591f\u5e8f\u5217\u5316\u4e00\u4e2a\u67e5\u8be2\u96c6\u6216\u8005\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u800c\u4e0d\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5bf9\u8c61\uff0c\u5e94\u8be5\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u65f6\u5019\u4f20\u4e00\u4e2a many=True \u53c2\u6570\u3002\u8fd9\u6837\u5c31\u80fd\u5e8f\u5217\u5316\u4e00\u4e2a\u67e5\u8be2\u96c6\u6216\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u3002 queryset = Book.objects.all() serializer = BookSerializer(queryset, many=True) serializer.data # [ # {'id': 0, 'title': 'The electric kool-aid acid test', 'author': 'Tom Wolfe'}, # {'id': 1, 'title': 'If this is a man', 'author': 'Primo Levi'}, # {'id': 2, 'title': 'The wind-up bird chronicle', 'author': 'Haruki Murakami'} # ] \u53cd\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61 \u53cd\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61\u9ed8\u8ba4\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u7684\u66f4\u65b0\u3002\u6709\u5173\u5982\u4f55\u652f\u6301\u6216\u81ea\u5b9a\u4e49\u8fd9\u4e9b\u60c5\u51b5\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605\u8fd9\u4e2a\u6587\u6863 ListSerializer \u3002 \u5305\u62ec\u989d\u5916\u7684\u4e0a\u4e0b\u6587 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9664\u4e86\u8981\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u4e3a\u5e8f\u5217\u5316\u7a0b\u5e8f\u63d0\u4f9b\u989d\u5916\u7684\u4e0a\u4e0b\u6587\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u5305\u542b\u8d85\u94fe\u63a5\u5173\u7cfb\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u8fd9\u9700\u8981\u5e8f\u5217\u5316\u5668\u80fd\u591f\u8bbf\u95ee\u5f53\u524d\u7684\u8bf7\u6c42\u4ee5\u4fbf\u6b63\u786e\u751f\u6210\u5b8c\u5168\u9650\u5b9a\u7684URL\u3002 \u4f60\u53ef\u4ee5\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7684\u65f6\u5019\u4f20\u9012\u4e00\u4e2a context \u53c2\u6570\u6765\u4f20\u9012\u4efb\u610f\u7684\u9644\u52a0\u4e0a\u4e0b\u6587\u3002\u4f8b\u5982\uff1a serializer = AccountSerializer(account, context={'request': request}) serializer.data # {'id': 6, 'owner': u'denvercoder9', 'created': datetime.datetime(2013, 2, 12, 09, 44, 56, 678870), 'details': 'http://example.com/accounts/6/details'} \u8fd9\u4e2a\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u53ef\u4ee5\u5728\u4efb\u4f55\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7684\u903b\u8f91\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982 .to_representation() \u65b9\u6cd5\u4e2d\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee self.context \u5c5e\u6027\u83b7\u53d6\u4e0a\u4e0b\u6587\u5b57\u5178\u3002 ModelSerializer \u901a\u5e38\u4f60\u4f1a\u60f3\u8981\u4e0eDjango\u6a21\u578b\u76f8\u5bf9\u5e94\u7684\u5e8f\u5217\u5316\u7c7b\u3002 ModelSerializer \u7c7b\u80fd\u591f\u8ba9\u4f60\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u6a21\u578b\u4e2d\u76f8\u5e94\u5b57\u6bb5\u7684 Serializer \u7c7b\u3002 \u8fd9\u4e2a ModelSerializer \u7c7b\u548c\u5e38\u89c4\u7684 Serializer \u7c7b\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f \uff1a \u5b83\u6839\u636e\u6a21\u578b\u81ea\u52a8\u751f\u6210\u4e00\u7ec4\u5b57\u6bb5\u3002 \u5b83\u81ea\u52a8\u751f\u6210\u5e8f\u5217\u5316\u5668\u7684\u9a8c\u8bc1\u5668\uff0c\u6bd4\u5982unique_together\u9a8c\u8bc1\u5668\u3002 \u5b83\u9ed8\u8ba4\u7b80\u5355\u5b9e\u73b0\u4e86 .create() \u65b9\u6cd5\u548c .update() \u65b9\u6cd5\u3002 \u58f0\u660e\u4e00\u4e2a ModelSerializer \u5982\u4e0b\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ('id', 'account_name', 'users', 'created') \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u6a21\u578b\u7684\u5b57\u6bb5\u90fd\u5c06\u6620\u5c04\u5230\u5e8f\u5217\u5316\u5668\u4e0a\u76f8\u5e94\u7684\u5b57\u6bb5\u3002 \u6a21\u578b\u4e2d\u4efb\u4f55\u5173\u8054\u5b57\u6bb5\u6bd4\u5982\u5916\u952e\u90fd\u5c06\u6620\u5c04\u5230 PrimaryKeyRelatedField \u5b57\u6bb5\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u5305\u62ec\u53cd\u5411\u5173\u8054\uff0c\u9664\u975e\u50cf serializer relations \u6587\u6863\u4e2d\u89c4\u5b9a\u7684\u90a3\u6837\u663e\u5f0f\u5305\u542b\u3002 \u68c0\u67e5 ModelSerializer \u5e8f\u5217\u5316\u7c7b\u751f\u6210\u6709\u7528\u7684\u8be6\u7ec6\u8868\u793a\u5b57\u7b26\u4e32\uff0c\u5141\u8bb8\u4f60\u5168\u9762\u68c0\u67e5\u5176\u5b57\u6bb5\u7684\u72b6\u6001\u3002 \u8fd9\u5728\u4f7f\u7528 ModelSerializers \u65f6\u7279\u522b\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u60f3\u786e\u5b9a\u81ea\u52a8\u521b\u5efa\u4e86\u54ea\u4e9b\u5b57\u6bb5\u548c\u9a8c\u8bc1\u5668\u3002 \u8981\u68c0\u67e5\u7684\u8bdd\uff0c\u6253\u5f00Django shell,\u6267\u884c python manage.py shell \uff0c\u7136\u540e\u5bfc\u5165\u5e8f\u5217\u5316\u5668\u7c7b\uff0c\u5b9e\u4f8b\u5316\u5b83\uff0c\u5e76\u6253\u5370\u5bf9\u8c61\u7684\u8868\u793a\uff1a >>> from myapp.serializers import AccountSerializer >>> serializer = AccountSerializer() >>> print(repr(serializer)) AccountSerializer(): id = IntegerField(label='ID', read_only=True) name = CharField(allow_blank=True, max_length=100, required=False) owner = PrimaryKeyRelatedField(queryset=User.objects.all()) \u6307\u5b9a\u8981\u5305\u62ec\u7684\u5b57\u6bb5 \u5982\u679c\u4f60\u5e0c\u671b\u5728\u6a21\u578b\u5e8f\u5217\u5316\u5668\u4e2d\u4f7f\u7528\u9ed8\u8ba4\u5b57\u6bb5\u7684\u4e00\u90e8\u5206\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 fields \u6216 exclude \u9009\u9879\u6765\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5c31\u50cf\u4f7f\u7528 ModelForm \u4e00\u6837\u3002\u5f3a\u70c8\u5efa\u8bae\u4f60\u4f7f\u7528 fields \u5c5e\u6027\u663e\u5f0f\u7684\u8bbe\u7f6e\u8981\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002\u8fd9\u6837\u5c31\u4e0d\u592a\u53ef\u80fd\u56e0\u4e3a\u4f60\u4fee\u6539\u4e86\u6a21\u578b\u800c\u65e0\u610f\u4e2d\u66b4\u9732\u4e86\u6570\u636e\u3002 \u4f8b\u5982\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ('id', 'account_name', 'users', 'created') \u4f60\u8fd8\u53ef\u4ee5\u5c06 fields \u5c5e\u6027\u8bbe\u7f6e\u6210 '__all__' \u6765\u8868\u660e\u4f7f\u7528\u6a21\u578b\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u3002 \u4f8b\u5982\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = '__all__' \u4f60\u53ef\u4ee5\u5c06 exclude \u5c5e\u6027\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4ece\u5e8f\u5217\u5316\u5668\u4e2d\u6392\u9664\u7684\u5b57\u6bb5\u5217\u8868\u3002 \u4f8b\u5982\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account exclude = ('users',) \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c Account \u6a21\u578b\u6709\u4e09\u4e2a\u5b57\u6bb5 account_name \uff0c users \u548c created \uff0c\u90a3\u4e48\u53ea\u6709 account_name \u548c created \u4f1a\u88ab\u5e8f\u5217\u5316\u3002 \u5728 fields \u548c exclude \u5c5e\u6027\u4e2d\u7684\u540d\u79f0\uff0c\u901a\u5e38\u4f1a\u6620\u5c04\u5230\u6a21\u578b\u7c7b\u4e2d\u7684\u6a21\u578b\u5b57\u6bb5\u3002 \u6216\u8005 fields \u9009\u9879\u4e2d\u7684\u540d\u79f0\u53ef\u4ee5\u6620\u5c04\u5230\u6a21\u578b\u7c7b\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u53c2\u6570\u7684\u5c5e\u6027\u6216\u65b9\u6cd5\u3002 \u6307\u5b9a\u5d4c\u5957\u5e8f\u5217\u5316 \u9ed8\u8ba4 ModelSerializer \u4f7f\u7528\u4e3b\u952e\u8fdb\u884c\u5173\u8054\uff0c\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 depth \u9009\u9879\u8f7b\u677e\u751f\u6210\u5d4c\u5957\u5173\u8054\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ('id', 'account_name', 'users', 'created') depth = 1 depth \u9009\u9879\u5e94\u8be5\u8bbe\u7f6e\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u8868\u660e\u5e94\u8be5\u904d\u5386\u7684\u5173\u8054\u6df1\u5ea6\u3002 \u5982\u679c\u8981\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u7684\u65b9\u5f0f\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u8be5\u5b50\u6bb5\u3002 \u660e\u786e\u6307\u5b9a\u5b57\u6bb5 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 ModelSerializer \u7c7b\u4e0a\u58f0\u660e\u5b57\u6bb5\u6765\u589e\u52a0\u989d\u5916\u7684\u5b57\u6bb5\u6216\u8005\u91cd\u5199\u9ed8\u8ba4\u7684\u5b57\u6bb5\uff0c\u5c31\u548c\u5728 Serializer \u7c7b\u4e00\u6837\u7684\u3002 class AccountSerializer(serializers.ModelSerializer): url = serializers.CharField(source='get_absolute_url', read_only=True) groups = serializers.PrimaryKeyRelatedField(many=True) class Meta: model = Account \u989d\u5916\u7684\u5b57\u6bb5\u53ef\u4ee5\u5bf9\u5e94\u6a21\u578b\u4e0a\u4efb\u4f55\u5c5e\u6027\u6216\u53ef\u8c03\u7528\u7684\u65b9\u6cd5\u3002 \u6307\u5b9a\u53ea\u8bfb\u5b57\u6bb5 \u4f60\u53ef\u80fd\u5e0c\u671b\u5c06\u591a\u4e2a\u5b57\u6bb5\u6307\u5b9a\u4e3a\u53ea\u8bfb\uff0c\u800c\u4e0d\u662f\u663e\u5f0f\u7684\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u6dfb\u52a0 read_only=True \u5c5e\u6027\uff0c\u8fd9\u79cd\u60c5\u51b5\u4f60\u53ef\u4ee5\u4f7f\u7528Meta\u7684 read_only_fields \u9009\u9879\u3002 \u8be5\u9009\u9879\u5e94\u8be5\u662f\u5b57\u6bb5\u540d\u79f0\u7684\u5217\u8868\u6216\u5143\u7956\uff0c\u5e76\u50cf\u4e0b\u9762\u8fd9\u6837\u58f0\u660e\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ('id', 'account_name', 'users', 'created') read_only_fields = ('account_name',) \u6a21\u578b\u4e2d\u5df2\u7ecf\u8bbe\u7f6e editable=False \u7684\u5b57\u6bb5\u548c\u9ed8\u8ba4\u5c31\u88ab\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\u7684 AutoField \u5b57\u6bb5\u90fd\u4e0d\u9700\u8981\u6dfb\u52a0\u5230 read_only_fields \u9009\u9879\u4e2d\u3002 \u6ce8\u610f : \u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u4e2d\u4e00\u4e2a\u53ea\u8bfb\u5b57\u6bb5\u662f\u6a21\u578b\u7ea7\u522b unique_together \u7ea6\u675f\u7684\u4e00\u90e8\u5206\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e8f\u5217\u5316\u5668\u7c7b\u9700\u8981\u8be5\u5b57\u6bb5\u624d\u80fd\u9a8c\u8bc1\u7ea6\u675f\uff0c\u4f46\u4e5f\u4e0d\u80fd\u7531\u7528\u6237\u7f16\u8f91\u3002 \u5904\u7406\u6b64\u95ee\u9898\u7684\u6b63\u786e\u65b9\u6cd5\u662f\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u663e\u5f0f\u6307\u5b9a\u8be5\u5b57\u6bb5\uff0c\u540c\u65f6\u63d0\u4f9b read_only=True \u548c default=\u2026 \u5173\u952e\u5b57\u53c2\u6570\u3002 \u8fd9\u79cd\u60c5\u51b5\u7684\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u548c\u5176\u4ed6\u6807\u8bc6\u7b26 unique_together \u7684\u5f53\u524d\u8ba4\u8bc1\u7684 User \u662f\u53ea\u8bfb\u7684\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u58f0\u660euser\u5b57\u6bb5\uff1a user = serializers.PrimaryKeyRelatedField(read_only=True, default=serializers.CurrentUserDefault()) \u6709\u5173 UniqueTogetherValidator \u548c CurrentUserDefault \u7c7b\u7684\u8be6\u7ec6\u6587\u6863\uff0c\u8bf7\u67e5\u9605 \u9a8c\u8bc1\u5668\u7684\u6587\u6863 \u3002 \u9644\u52a0\u5173\u952e\u5b57\u53c2\u6570 \u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 extra_kwargs \u9009\u9879\u5feb\u6377\u5730\u5728\u5b57\u6bb5\u4e0a\u6307\u5b9a\u4efb\u610f\u9644\u52a0\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\u5728 read_only_fields \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e0d\u9700\u8981\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u5f0f\u7684\u58f0\u660e\u8be5\u5b57\u6bb5\u3002 \u8fd9\u4e2a\u9009\u9879\u662f\u4e00\u4e2a\u5c06\u5177\u4f53\u5b57\u6bb5\u540d\u79f0\u5f53\u4f5c\u952e\u503c\u7684\u5b57\u5178\u3002\u4f8b\u5982\uff1a class CreateUserSerializer(serializers.ModelSerializer): class Meta: model = User fields = ('email', 'username', 'password') extra_kwargs = {'password': {'write_only': True}} def create(self, validated_data): user = User( email=validated_data['email'], username=validated_data['username'] ) user.set_password(validated_data['password']) user.save() return user \u5173\u8054\u5b57\u6bb5 \u5728\u5e8f\u5217\u5316\u6a21\u578b\u5b9e\u4f8b\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u8868\u793a\u5173\u8054\u5173\u7cfb\u3002\u5bf9\u4e8e ModelSerializer \u9ed8\u8ba4\u662f\u4f7f\u7528\u76f8\u5173\u5b9e\u4f8b\u7684\u4e3b\u952e\u3002 \u66ff\u4ee3\u7684\u5176\u4ed6\u65b9\u6cd5\u5305\u62ec\u4f7f\u7528\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\uff0c\u5e8f\u5217\u5316\u5b8c\u6574\u7684\u5d4c\u5957\u8868\u793a\u6216\u8005\u4f7f\u7528\u81ea\u5b9a\u4e49\u8868\u793a\u7684\u5e8f\u5217\u5316\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 serializer relations \u6587\u6863\u3002 \u81ea\u5b9a\u4e49\u5b57\u6bb5\u6620\u5c04 ModelSerializer\u7c7b\u8fd8\u516c\u5f00\u4e86\u4e00\u4e2a\u53ef\u4ee5\u8986\u76d6\u7684API\uff0c\u4ee5\u4fbf\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u65f6\u6539\u53d8\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7684\u81ea\u52a8\u786e\u5b9a\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c ModelSerializer \u6ca1\u6709\u751f\u6210\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f60\u9700\u8981\u7684\u5b57\u6bb5\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u5c06\u5b83\u4eec\u663e\u5f0f\u5730\u6dfb\u52a0\u5230\u7c7b\u4e2d\uff0c\u6216\u8005\u76f4\u63a5\u4f7f\u7528\u5e38\u89c4\u7684 Serializer \u7c7b\u3002\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u57fa\u7c7b\uff0c\u6765\u5b9a\u4e49\u7ed9\u4efb\u610f\u6a21\u578b\u521b\u5efa\u5e8f\u5217\u5316\u5b57\u6bb5\u7684\u65b9\u5f0f\u3002 .serializer_field_mapping \u5c06Django model\u7c7b\u6620\u5c04\u5230REST framework serializer\u7c7b\u3002\u4f60\u53ef\u4ee5\u8986\u5199\u8fd9\u4e2a\u6620\u5c04\u6765\u66f4\u6539\u6bcf\u4e2a\u6a21\u578b\u5e94\u8be5\u4f7f\u7528\u7684\u9ed8\u8ba4\u5e8f\u5217\u5316\u5668\u7c7b\u3002 .serializer_related_field \u8fd9\u4e2a\u5c5e\u6027\u5e94\u662f\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7528\u4e8e\u5173\u8054\u5b57\u6bb5\u3002 \u5bf9\u4e8e ModelSerializer \u6b64\u5c5e\u6027\u9ed8\u8ba4\u662f PrimaryKeyRelatedField \u3002 \u5bf9\u4e8e HyperlinkedModelSerializer \u6b64\u5c5e\u6027\u9ed8\u8ba4\u662f serializers.HyperlinkedRelatedField \u3002 serializer_url_field \u5e94\u8be5\u7528\u4e8e\u5e8f\u5217\u5316\u5668\u4e0a\u4efb\u4f55 url \u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\u3002 \u9ed8\u8ba4\u662f serializers.HyperlinkedIdentityField serializer_choice_field \u5e94\u7528\u4e8e\u5e8f\u5217\u5316\u5668\u4e0a\u4efb\u4f55\u9009\u62e9\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\u3002 \u9ed8\u8ba4\u662f serializers.ChoiceField The field_class\u548cfield_kwargs API \u8c03\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u6765\u786e\u5b9a\u5e94\u8be5\u81ea\u52a8\u5305\u542b\u5728\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u548c\u5173\u952e\u5b57\u53c2\u6570\u3002\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u5e94\u8be5\u8fd4\u56de\u4e24\u4e2a (field_class, field_kwargs) \u5143\u7956\u3002 .build_standard_field(self, field_name, model_field) \u8c03\u7528\u540e\u751f\u6210\u5bf9\u5e94\u6807\u51c6\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u6839\u636e serializer_field_mapping \u5c5e\u6027\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u3002 .build_relational_field(self, field_name, relation_info) \u8c03\u7528\u540e\u751f\u6210\u5bf9\u5e94\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u6839\u636e serializer_relational_field \u5c5e\u6027\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u3002 \u8fd9\u91cc\u7684 relation_info \u53c2\u6570\u662f\u4e00\u4e2a\u547d\u540d\u5143\u7956\uff0c\u5305\u542b model_field \uff0c related_model \uff0c to_many \u548c has_through_model \u5c5e\u6027\u3002 .build_nested_field(self, field_name, relation_info, nested_depth) \u5f53 depth \u9009\u9879\u88ab\u8bbe\u7f6e\u65f6\uff0c\u88ab\u8c03\u7528\u540e\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u5230\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u52a8\u6001\u7684\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e ModelSerializer \u6216 HyperlinkedModelSerializer \u7684\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u7c7b\u3002 nested_depth \u7684\u503c\u662f depth \u7684\u503c\u51cf1\u3002 relation_info \u53c2\u6570\u662f\u4e00\u4e2a\u547d\u540d\u5143\u7956\uff0c\u5305\u542b model_field \uff0c related_model \uff0c to_many \u548c has_through_model \u5c5e\u6027\u3002 .build_property_field(self, field_name, model_class) \u88ab\u8c03\u7528\u540e\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u5230\u6a21\u578b\u7c7b\u4e2d\u5c5e\u6027\u6216\u65e0\u53c2\u6570\u65b9\u6cd5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u8fd4\u56de\u4e00\u4e2a ReadOnlyField \u7c7b\u3002 .build_url_field(self, field_name, model_class) \u88ab\u8c03\u7528\u540e\u4e3a\u5e8f\u5217\u5316\u5668\u81ea\u5df1\u7684 url \u5b57\u6bb5\u751f\u6210\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002\u9ed8\u8ba4\u5b9e\u73b0\u662f\u8fd4\u56de\u4e00\u4e2a HyperlinkedIdentityField \u7c7b\u3002 .build_unknown_field(self, field_name, model_class) \u5f53\u5b57\u6bb5\u540d\u79f0\u6ca1\u6709\u5bf9\u5e94\u5230\u4efb\u4f55\u6a21\u578b\u5b57\u6bb5\u6216\u8005\u6a21\u578b\u5c5e\u6027\u65f6\u8c03\u7528\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u5c3d\u7ba1\u5b50\u7c7b\u53ef\u80fd\u4f1a\u81ea\u5b9a\u4e49\u8be5\u884c\u4e3a\u3002 HyperlinkedModelSerializer HyperlinkedModelSerializer \u7c7b\u7c7b\u4f3c\u4e8e ModelSerializer \u7c7b\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4f7f\u7528\u8d85\u94fe\u63a5\u6765\u8868\u793a\u5173\u8054\u5173\u7cfb\u800c\u4e0d\u662f\u4e3b\u952e\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e8f\u5217\u5316\u5668\u5c06\u5305\u542b\u4e00\u4e2a url \u5b57\u6bb5\u800c\u4e0d\u662f\u4e3b\u952e\u5b57\u6bb5\u3002 url\u5b57\u6bb5\u5c06\u4f7f\u7528 HyperlinkedIdentityField \u5b57\u6bb5\u6765\u8868\u793a\uff0c\u6a21\u578b\u7684\u4efb\u4f55\u5173\u8054\u90fd\u5c06\u4f7f\u7528 HyperlinkedRelatedField \u5b57\u6bb5\u6765\u8868\u793a\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e3b\u952e\u6dfb\u52a0\u5230 fields \u9009\u9879\u4e2d\u6765\u663e\u5f0f\u7684\u5305\u542b\uff0c\u4f8b\u5982\uff1a class AccountSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Account fields = ('url', 'id', 'account_name', 'users', 'created') \u7edd\u5bf9\u548c\u76f8\u5bf9URL \u5f53\u5b9e\u4f8b\u5316\u4e00\u4e2a HyperlinkedModelSerializer \u65f6\uff0c\u4f60\u5fc5\u987b\u5728\u5e8f\u5217\u5316\u5668\u7684\u4e0a\u4e0b\u6587\u4e2d\u5305\u542b\u5f53\u524d\u7684 request \u503c\uff0c\u4f8b\u5982\uff1a serializer = AccountSerializer(queryset, context={'request': request}) \u8fd9\u6837\u505a\u5c06\u786e\u4fdd\u8d85\u94fe\u63a5\u53ef\u4ee5\u5305\u542b\u6070\u5f53\u7684\u4e3b\u673a\u540d\uff0c\u4e00\u8fb9\u751f\u6210\u5b8c\u5168\u9650\u5b9a\u7684URL\uff0c\u4f8b\u5982\uff1a http://api.example.com/accounts/1/ \u800c\u4e0d\u662f\u76f8\u5bf9\u7684URL\uff0c\u4f8b\u5982\uff1a /accounts/1/ \u5982\u679c\u4f60 \u771f\u7684 \u8981\u4f7f\u7528\u76f8\u5bf9URL\uff0c\u4f60\u5e94\u8be5\u660e\u786e\u7684\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u4e0b\u6587\u4e2d\u4f20\u9012\u4e00\u4e2a {'request': None} \u3002 \u5982\u4f55\u786e\u5b9a\u8d85\u94fe\u63a5\u89c6\u56fe \u9700\u8981\u4e00\u79cd\u786e\u5b9a\u54ea\u4e9b\u89c6\u56fe\u80fd\u5e94\u7528\u8d85\u94fe\u63a5\u5230\u6a21\u578b\u5b9e\u4f8b\u7684\u65b9\u6cd5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8d85\u94fe\u63a5\u671f\u671b\u5bf9\u5e94\u5230\u4e00\u4e2a\u6837\u5f0f\u80fd\u5339\u914d '{model_name}-detail' \u7684\u89c6\u56fe\uff0c\u5e76\u901a\u8fc7 pk \u5173\u952e\u5b57\u53c2\u6570\u67e5\u627e\u5b9e\u4f8b\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 extra_kwargs \u4e2d\u8bbe\u7f6e view_name \u548c lookup_field \u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u6765\u91cd\u5199URL\u5b57\u6bb5\u89c6\u56fe\u540d\u79f0\u548c\u67e5\u8be2\u5b57\u6bb5\u3002\u5982\u4e0b\u6240\u793a\uff1a class AccountSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Account fields = ('account_url', 'account_name', 'users', 'created') extra_kwargs = { 'url': {'view_name': 'accounts', 'lookup_field': 'account_name'}, 'users': {'lookup_field': 'username'} } \u6216\u8005\u4f60\u53ef\u4ee5\u663e\u5f0f\u7684\u8bbe\u7f6e\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a class AccountSerializer(serializers.HyperlinkedModelSerializer): url = serializers.HyperlinkedIdentityField( view_name='accounts', lookup_field='slug' ) users = serializers.HyperlinkedRelatedField( view_name='user-detail', lookup_field='username', many=True, read_only=True ) class Meta: model = Account fields = ('url', 'account_name', 'users', 'created') \u63d0\u793a \uff1a\u6b63\u786e\u5339\u914d\u8d85\u94fe\u63a5\u8868\u793a\u548c\u4f60\u7684URL\u914d\u7f6e\u6709\u65f6\u53ef\u80fd\u4f1a\u6709\u70b9\u56f0\u96be\u3002\u6253\u5370\u4e00\u4e2a HyperlinkedModelSerializer \u5b9e\u4f8b\u7684 repr \u662f\u4e00\u4e2a\u7279\u522b\u6709\u7528\u7684\u65b9\u5f0f\u6765\u68c0\u67e5\u5173\u8054\u5173\u7cfb\u6620\u5c04\u7684\u90a3\u4e9b\u89c6\u56fe\u540d\u79f0\u548c\u67e5\u8be2\u5b57\u6bb5\u3002 \u66f4\u6539URL\u5b57\u6bb5\u540d\u79f0 URL\u5b57\u6bb5\u7684\u540d\u79f0\u9ed8\u8ba4\u4e3a'url'\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 URL_FIELD_NAME \u8bbe\u7f6e\u8fdb\u884c\u5168\u5c40\u6027\u4fee\u6539\u3002 ListSerializer ListSerializer \u7c7b\u80fd\u591f\u5e8f\u5217\u5316\u548c\u4e00\u6b21\u9a8c\u8bc1\u591a\u4e2a\u5bf9\u8c61\u3002\u4f60 \u901a\u5e38 \u4e0d\u9700\u8981\u76f4\u63a5\u4f7f\u7528 ListSerializer \uff0c\u800c\u662f\u5e94\u8be5\u5728\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u65f6\u7b80\u5355\u5730\u4f20\u9012\u4e00\u4e2a many=True \u53c2\u6570\u3002 \u5f53\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u5728\u5e26\u6709 many=True \u9009\u9879\u88ab\u5e8f\u5217\u5316\u65f6\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a ListSerializer \u5b9e\u4f8b\u3002\u8be5\u5e8f\u5217\u5316\u5668\u7c7b\u5c06\u6210\u4e3a ListSerializer \u7c7b\u7684\u5b50\u7c7b\u3002 \u4e0b\u9762\u7684\u53c2\u6570\u4e5f\u53ef\u4ee5\u4f20\u9012\u7ed9 ListSerializer \u5b57\u6bb5\u6216\u8005\u4e00\u4e2a\u5e26\u6709 many=True \u53c2\u6570\u7684\u5e8f\u5217\u5316\u5668\u3002 allow_empty \u9ed8\u8ba4\u662f True \uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u60f3\u628a\u7a7a\u5217\u8868\u5f53\u4f5c\u6709\u6548\u8f93\u5165\u7684\u8bdd\u53ef\u4ee5\u628a\u5b83\u8bbe\u7f6e\u6210 False \u3002 \u81ea\u5b9a\u4e49 ListSerializer \u884c\u4e3a \u4e0b\u9762\u662f\u4f60\u53ef\u80fd\u5e0c\u671b\u8981\u5b9a\u5236 ListSerializer \u884c\u4e3a\u7684 \u4e00\u4e9b \u60c5\u51b5\u3002\u4f8b\u5982\uff1a \u4f60\u5e0c\u671b\u63d0\u4f9b\u5217\u8868\u7684\u7279\u5b9a\u9a8c\u8bc1\uff0c\u4f8b\u5982\u68c0\u67e5\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u4e0e\u5217\u8868\u4e2d\u7684\u53e6\u5916\u4e00\u4e2a\u5143\u7d20\u51b2\u7a81\u3002 \u4f60\u8981\u81ea\u5b9a\u4e49\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\u6216\u66f4\u65b0\u884c\u4e3a\u3002 \u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u5f53\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5e8f\u5217\u5316\u5668\u7c7b\u7684 Meta \u7c7b\u4e0b\u9762\u7684 list_serializer_class \u9009\u9879\u6765\u4fee\u6539\u5f53 many=True \u65f6\u6b63\u5728\u4f7f\u7528\u7684\u7c7b\u3002 \u4f8b\u5982\uff1a class CustomListSerializer(serializers.ListSerializer): ... class CustomSerializer(serializers.Serializer): ... class Meta: list_serializer_class = CustomListSerializer \u81ea\u5b9a\u4e49\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa \u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\u9ed8\u8ba4\u5b9e\u73b0\u662f\u7b80\u5355\u5730\u8c03\u7528\u5217\u8868\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u7684 .create() \u65b9\u6cd5\u3002\u5982\u679c\u8981\u81ea\u5b9a\u4e49\u5b9e\u73b0\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u5f53\u88ab\u4f20\u9012 many=True \u53c2\u6570\u65f6\u4f7f\u7528\u7684 ListSerializer \u7c7b\u4e2d\u7684 .create() \u65b9\u6cd5\u3002 \u4f8b\u5982\uff1a class BookListSerializer(serializers.ListSerializer): def create(self, validated_data): books = [Book(**item) for item in validated_data] return Book.objects.bulk_create(books) class BookSerializer(serializers.Serializer): ... class Meta: list_serializer_class = BookListSerializer \u81ea\u5b9a\u4e49\u591a\u5bf9\u8c61\u7684\u66f4\u65b0 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c ListSerializer \u7c7b\u4e0d\u652f\u6301\u591a\u5bf9\u8c61\u7684\u66f4\u65b0\u3002\u8fd9\u662f\u56e0\u4e3a\u63d2\u5165\u548c\u5220\u9664\u7684\u9884\u671f\u884c\u4e3a\u662f\u4e0d\u660e\u786e\u7684\u3002 \u8981\u652f\u6301\u591a\u5bf9\u8c61\u66f4\u65b0\u7684\u8bdd\u4f60\u9700\u8981\u81ea\u5df1\u660e\u786e\u5730\u5b9e\u73b0\u3002\u7f16\u5199\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u7684\u4ee3\u7801\u65f6\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a \u5982\u4f55\u786e\u5b9a\u6570\u636e\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u5bf9\u5e94\u66f4\u65b0\u54ea\u4e2a\u5b9e\u4f8b\uff1f \u5982\u4f55\u5904\u7406\u63d2\u5165\uff1f\u5b83\u4eec\u662f\u65e0\u6548\u7684\uff1f\u8fd8\u662f\u521b\u5efa\u65b0\u5bf9\u8c61\uff1f \u79fb\u9664\u5e94\u8be5\u5982\u4f55\u5904\u7406\uff1f\u5b83\u4eec\u662f\u8981\u5220\u9664\u5bf9\u8c61\u8fd8\u662f\u5220\u9664\u5173\u8054\u5173\u7cfb\uff1f\u5b83\u4eec\u5e94\u8be5\u88ab\u5ffd\u7565\u8fd8\u662f\u63d0\u793a\u65e0\u6548\u64cd\u4f5c\uff1f \u6392\u5e8f\u5982\u4f55\u5904\u7406\uff1f\u6539\u53d8\u4e24\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u662f\u5426\u610f\u5473\u7740\u4efb\u4f55\u72b6\u6001\u6539\u53d8\u6216\u8005\u5e94\u8be5\u88ab\u5ffd\u89c6\uff1f \u4f60\u9700\u8981\u5411\u5b9e\u4f8b\u5e8f\u5217\u5316\u5668\u4e2d\u663e\u5f0f\u6dfb\u52a0\u4e00\u4e2a id \u5b57\u6bb5\u3002\u9ed8\u8ba4\u9690\u5f0f\u751f\u6210\u7684 id \u5b57\u6bb5\u662f read_only \u3002\u8fd9\u5c31\u5bfc\u81f4\u5b83\u5728\u66f4\u65b0\u65f6\u88ab\u5220\u9664\u3002\u4e00\u65e6\u4f60\u660e\u786e\u5730\u58f0\u660e\u5b83\uff0c\u5b83\u5c06\u5728\u5217\u8868\u5e8f\u5217\u5316\u5668\u7684 update \u65b9\u6cd5\u4e2d\u53ef\u7528\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f60\u53ef\u4ee5\u9009\u62e9\u7528\u6765\u505a\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u7684\u793a\u4f8b\uff1a class BookListSerializer(serializers.ListSerializer): def update(self, instance, validated_data): # Maps for id->instance and id->data item. book_mapping = {book.id: book for book in instance} data_mapping = {item['id']: item for item in validated_data} # Perform creations and updates. ret = [] for book_id, data in data_mapping.items(): book = book_mapping.get(book_id, None) if book is None: ret.append(self.child.create(data)) else: ret.append(self.child.update(book, data)) # Perform deletions. for book_id, book in book_mapping.items(): if book_id not in data_mapping: book.delete() return ret class BookSerializer(serializers.Serializer): # \u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e3b\u952e\u6765\u8bc6\u522b\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c # \u6240\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528\u53ef\u5199\u7684\u5b57\u6bb5\uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684\u53ea\u8bfb\u5b57\u6bb5\u3002 id = serializers.IntegerField() ... id = serializers.IntegerField(required=False) class Meta: list_serializer_class = BookListSerializer \u7c7b\u4f3c\u4e8eREST framework 2\u4e2d allow_add_remove \u7684\u81ea\u52a8\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u64cd\u4f5c\u53ef\u80fd\u4f1a\u57283.1\u7248\u672c\u7684\u7b2c\u4e09\u65b9\u5305\u4e2d\u63d0\u4f9b\u3002 \u81ea\u5b9a\u4e49ListSerializer\u521d\u59cb\u5316 \u5f53\u5e26\u6709 many=True \u53c2\u6570\u7684\u5e8f\u5217\u5316\u5668\u88ab\u5b9e\u4f8b\u5316\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u54ea\u4e9b\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570\u5e94\u8be5\u88ab\u4f20\u9012\u7ed9\u5b50\u7c7b Serializer \u548c\u7236\u7c7b ListSerializer \u7684 .__init__() \u65b9\u6cd5\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u5c06\u6240\u6709\u53c2\u6570\u90fd\u4f20\u9012\u7ed9\u4e24\u4e2a\u7c7b\uff0c\u51fa\u4e86 validators \u548c\u4efb\u4f55\u5173\u952e\u5b57\u53c2\u6570\u3002\u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u5047\u5b9a\u7528\u4e8e\u5b50\u5e8f\u5217\u5316\u5668\u7c7b\u3002 \u5076\u5c14\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u660e\u786e\u6307\u5b9a\u5f53\u88ab\u4f20\u9012 many=True \u53c2\u6570\u65f6\uff0c\u5b50\u7c7b\u548c\u7236\u7c7b\u5e94\u8be5\u5982\u4f55\u5b9e\u4f8b\u5316\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 many_init \u7c7b\u65b9\u6cd5\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002 @classmethod def many_init(cls, *args, **kwargs): # \u5b9e\u4f8b\u5316\u5b50\u5e8f\u5217\u5316\u5668\u7c7b\u3002 kwargs['child'] = cls() # \u5b9e\u4f8b\u5316\u5217\u8868\u5e8f\u5217\u5316\u7236\u7c7b return CustomListSerializer(*args, **kwargs) BaseSerializer BaseSerializer \u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u7528\u6765\u66ff\u4ee3\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684\u6837\u5f0f\u3002 \u8be5\u7c7b\u5b9e\u73b0\u4e0e Serializer \u7c7b\u76f8\u540c\u7684\u57fa\u672cAPI\uff1a .data - \u8fd4\u56de\u4f20\u51fa\u7684\u539f\u59cb\u6570\u636e\u3002 .is_valid() - \u53cd\u5e8f\u5217\u5316\u5e76\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u3002 .validated_data - \u8fd4\u56de\u7ecf\u8fc7\u9a8c\u8bc1\u540e\u7684\u4f20\u5165\u6570\u636e\u3002 .errors - \u8fd4\u56de\u9a8c\u8bc1\u671f\u95f4\u7684\u9519\u8bef\u3002 .save() - \u5c06\u9a8c\u8bc1\u7684\u6570\u636e\u4fdd\u7559\u5230\u5bf9\u8c61\u5b9e\u4f8b\u4e2d\u3002 \u5b83\u8fd8\u6709\u53ef\u4ee5\u8986\u5199\u7684\u56db\u79cd\u65b9\u6cd5\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u4f60\u60f3\u8981\u5e8f\u5217\u5316\u7c7b\u652f\u6301\u7684\u529f\u80fd\uff1a .to_representation() - \u91cd\u5199\u6b64\u65b9\u6cd5\u6765\u6539\u53d8\u8bfb\u53d6\u64cd\u4f5c\u7684\u5e8f\u5217\u5316\u7ed3\u679c\u3002 .to_internal_value() - \u91cd\u5199\u6b64\u65b9\u6cd5\u6765\u6539\u53d8\u5199\u5165\u64cd\u4f5c\u7684\u5e8f\u5217\u5316\u7ed3\u679c\u3002 .create() \u548c .update() - \u91cd\u5199\u5176\u4e2d\u4e00\u4e2a\u6216\u4e24\u4e2a\u6765\u6539\u53d8\u4fdd\u5b58\u5b9e\u4f8b\u65f6\u7684\u52a8\u4f5c\u3002 \u56e0\u4e3a\u6b64\u7c7b\u63d0\u4f9b\u4e0e Serializer \u7c7b\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5c06\u5b83\u4e0e\u73b0\u6709\u7684\u57fa\u4e8e\u7c7b\u7684\u901a\u7528\u89c6\u56fe\u4e00\u8d77\u4f7f\u7528\uff0c\u5c31\u50cf\u4f7f\u7528\u5e38\u89c4 Serializer \u6216 ModelSerializer \u4e00\u6837\u3002 \u8fd9\u6837\u505a\u65f6\u4f60\u9700\u8981\u6ce8\u610f\u5230\u7684\u552f\u4e00\u533a\u522b\u662f BaseSerializer \u7c7b\u5e76\u4e0d\u4f1a\u5728\u53ef\u6d4f\u89c8\u7684API\u9875\u9762\u4e2d\u751f\u6210HTML\u8868\u5355\u3002 \u53ea\u8bfb\u7684 BaseSerializer classes \u8981\u4f7f\u7528 BaseSerializer \u7c7b\u5b9e\u73b0\u53ea\u8bfb\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8986\u5199 .to_representation() \u65b9\u6cd5\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u7b80\u5355\u7684Django\u6a21\u578b\u7684\u793a\u4f8b\uff1a class HighScore(models.Model): created = models.DateTimeField(auto_now_add=True) player_name = models.CharField(max_length=10) score = models.IntegerField() \u521b\u5efa\u4e00\u4e2a\u53ea\u8bfb\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u6765\u5c06 HighScore \u5b9e\u4f8b\u8f6c\u6362\u4e3a\u539f\u59cb\u6570\u636e\u7c7b\u578b\u975e\u5e38\u7b80\u5355\u3002 class HighScoreSerializer(serializers.BaseSerializer): def to_representation(self, obj): return { 'score': obj.score, 'player_name': obj.player_name } \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u6765\u5e8f\u5217\u5316\u5355\u4e2a HighScore \u5b9e\u4f8b\uff1a @api_view(['GET']) def high_score(request, pk): instance = HighScore.objects.get(pk=pk) serializer = HighScoreSerializer(instance) return Response(serializer.data) \u6216\u8005\u4f7f\u7528\u5b83\u6765\u5e8f\u5217\u5316\u591a\u4e2a\u5b9e\u4f8b\uff1a @api_view(['GET']) def all_high_scores(request): queryset = HighScore.objects.order_by('-score') serializer = HighScoreSerializer(queryset, many=True) return Response(serializer.data) Read-write BaseSerializer classes \u8981\u521b\u5efa\u4e00\u4e2a\u8bfb\u5199\u90fd\u652f\u6301\u7684\u5e8f\u5217\u5316\u5668\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5b9e\u73b0 .to_internal_value() \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u7528\u6765\u6784\u9020\u5bf9\u8c61\u5b9e\u4f8b\u7684\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u503c\uff0c\u5982\u679c\u63d0\u4f9b\u7684\u6570\u636e\u683c\u5f0f\u4e0d\u6b63\u786e\uff0c\u5219\u53ef\u80fd\u5f15\u53d1 ValidationError \u3002 \u4e00\u65e6\u4f60\u5b9e\u73b0\u4e86 .to_internal_value() \u65b9\u6cd5\uff0c\u90a3\u4e9b\u57fa\u7840\u7684\u9a8c\u8bc1API\u90fd\u4f1a\u5728\u5e8f\u5217\u5316\u5bf9\u8c61\u4e0a\u53ef\u7528\u4e86\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 .is_valid() , .validated_data \u548c .errors \u65b9\u6cd5\u3002 \u5982\u679c\u4f60\u8fd8\u60f3\u652f\u6301 .save() \uff0c\u4f60\u8fd8\u9700\u8981\u5b9e\u73b0 .create() \u548c .update() \u65b9\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u3002 \u4e0b\u9762\u5c31\u662f\u5b8c\u6574\u7248\u7684\uff0c\u652f\u6301\u8bfb\u3001\u5199\u64cd\u4f5c\u7684 HighScoreSerializer \u5b8c\u6574\u793a\u4f8b\u4e86\u3002 class HighScoreSerializer(serializers.BaseSerializer): def to_internal_value(self, data): score = data.get('score') player_name = data.get('player_name') # \u6267\u884c\u6570\u636e\u6709\u6548\u6027\u6821\u9a8c if not score: raise ValidationError({ 'score': 'This field is required.' }) if not player_name: raise ValidationError({ 'player_name': 'This field is required.' }) if len(player_name) > 10: raise ValidationError({ 'player_name': 'May not be more than 10 characters.' }) # \u8fd4\u56de\u901a\u8fc7\u9a8c\u8bc1\u7684\u6570\u636e \u8fd9\u7528\u6765\u4f5c\u4e3a `.validated_data` \u5c5e\u6027\u7684\u503c\u3002 return { 'score': int(score), 'player_name': player_name } def to_representation(self, obj): return { 'score': obj.score, 'player_name': obj.player_name } def create(self, validated_data): return HighScore.objects.create(**validated_data) \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u57fa\u7c7b BaseSerializer \u7c7b\u8fd8\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u65b0\u7684\u901a\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u57fa\u7c7b\u6765\u5904\u7406\u7279\u5b9a\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u6216\u8005\u7528\u6765\u6574\u5408\u5907\u7528\u5b58\u50a8\u540e\u7aef\u3002 \u4e0b\u9762\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2a\u53ef\u4ee5\u5c06\u4efb\u610f\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u57fa\u672c\u8868\u793a\u7684\u901a\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u7684\u793a\u4f8b\u3002 class ObjectSerializer(serializers.BaseSerializer): \"\"\" \u4e00\u4e2a\u53ea\u8bfb\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u5b83\u5c06\u4efb\u610f\u590d\u6742\u7684\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u8868\u793a\u3002 \"\"\" def to_representation(self, obj): for attribute_name in dir(obj): attribute = getattr(obj, attribute_name) if attribute_name('_'): # \u5ffd\u7565\u79c1\u6709\u5c5e\u6027 pass elif hasattr(attribute, '__call__'): # \u5ffd\u7565\u65b9\u6cd5\u548c\u5176\u4ed6\u53ef\u8c03\u7528\u5bf9\u8c61 pass elif isinstance(attribute, (str, int, bool, float, type(None))): # \u5185\u7f6e\u7684\u539f\u59cb\u6570\u636e\u7c7b\u578b\u4e0d\u505a\u4fee\u6539 output[attribute_name] = attribute elif isinstance(attribute, list): # \u9012\u5f52\u5904\u7406\u5217\u8868\u4e2d\u7684\u5bf9\u8c61 output[attribute_name] = [ self.to_representation(item) for item in attribute ] elif isinstance(attribute, dict): # \u9012\u5f52\u5904\u7406\u5b57\u5178\u4e2d\u7684\u5bf9\u8c61 output[attribute_name] = { str(key): self.to_representation(value) for key, value in attribute.items() } else: # \u5c06\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a output[attribute_name] = str(attribute) serializer\u8fdb\u9636\u7528\u6cd5 \u91cd\u5199\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u884c\u4e3a \u5982\u679c\u4f60\u9700\u8981\u66f4\u6539\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u7684\u5e8f\u5217\u5316\uff0c\u53cd\u5e8f\u5217\u5316\u6216\u9a8c\u8bc1\u7684\u884c\u4e3a\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 .to_representation() \u6216 .to_internal_value() \u65b9\u6cd5\u6765\u5b8c\u6210\u3002 \u6211\u4eec\u53ef\u80fd\u8fd9\u4e48\u505a\u7684\u4e00\u4e9b\u539f\u56e0\u5305\u62ec...... \u4e3a\u65b0\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u57fa\u7c7b\u6dfb\u52a0\u65b0\u884c\u4e3a\u3002 \u5bf9\u73b0\u6709\u7684\u7c7b\u7a0d\u4f5c\u4fee\u6539\u3002 \u63d0\u9ad8\u9891\u7e41\u8bbf\u95ee\u8fd4\u56de\u5927\u91cf\u6570\u636e\u7684API\u7aef\u70b9\u7684\u5e8f\u5217\u5316\u6027\u80fd\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u7684\u7b7e\u540d\u5982\u4e0b\uff1a .to_representation(self, obj) \u63a5\u6536\u4e00\u4e2a\u9700\u8981\u88ab\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u4e4b\u540e\u7684\u8868\u793a\u3002\u901a\u5e38\uff0c\u8fd9\u610f\u5473\u7740\u8fd4\u56de\u5185\u7f6ePython\u6570\u636e\u7c7b\u578b\u7684\u7ed3\u6784\u3002\u53ef\u4ee5\u5904\u7406\u7684\u786e\u5207\u7c7b\u578b\u53d6\u51b3\u4e8e\u4f60\u4e3aAPI\u914d\u7f6e\u7684\u6e32\u67d3\u7c7b\u3002 .to_internal_value(self, data) \u5c06\u672a\u7ecf\u9a8c\u8bc1\u7684\u4f20\u5165\u6570\u636e\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u53ef\u4ee5\u901a\u8fc7 serializer.validated_data \u6765\u8bbf\u95ee\u7684\u5df2\u9a8c\u8bc1\u7684\u6570\u636e\u3002\u5982\u679c\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u4e0a\u8c03\u7528 .save() \uff0c\u5219\u8be5\u8fd4\u56de\u503c\u4e5f\u5c06\u4f20\u9012\u7ed9 .create() \u6216 .update() \u65b9\u6cd5\u3002 \u5982\u679c\u4efb\u4f55\u9a8c\u8bc1\u6761\u4ef6\u5931\u8d25\uff0c\u90a3\u4e48\u8be5\u65b9\u6cd5\u4f1a\u5f15\u53d1\u4e00\u4e2a serializers.ValidationError(errors) \u3002\u901a\u5e38\uff0c\u6b64\u5904\u7684 errors \u53c2\u6570\u5c06\u662f\u9519\u8bef\u6d88\u606f\u5b57\u5178\u7684\u4e00\u4e2a\u6620\u5c04\u5b57\u6bb5\u3002 \u4f20\u9012\u7ed9\u6b64\u65b9\u6cd5\u7684 data \u53c2\u6570\u901a\u5e38\u662f request.data \u7684\u503c\uff0c\u56e0\u6b64\u5b83\u63d0\u4f9b\u7684\u6570\u636e\u7c7b\u578b\u5c06\u53d6\u51b3\u4e8e\u4f60\u4e3aAPI\u914d\u7f6e\u7684\u89e3\u6790\u5668\u7c7b\u3002 Serializer \u7ee7\u627f \u4e0eDjango\u8868\u5355\u7c7b\u4f3c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u6269\u5c55\u548c\u91cd\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u8fd9\u5141\u8bb8\u4f60\u5728\u7236\u7c7b\u4e0a\u58f0\u660e\u4e00\u7ec4\u516c\u5171\u5b57\u6bb5\u6216\u65b9\u6cd5\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u8bb8\u591a\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c class MyBaseSerializer(Serializer): my_field = serializers.CharField() def validate_my_field(self): ... class MySerializer(MyBaseSerializer): ... \u50cfDjango\u7684 Model \u548c ModelForm \u7c7b\u4e00\u6837\uff0c\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5185\u90e8 Meta \u7c7b\u4e0d\u4f1a\u9690\u5f0f\u5730\u7ee7\u627f\u5b83\u7684\u7236\u5143\u7d20\u5185\u90e8\u7684 Meta \u7c7b\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4ece\u7236\u7c7b\u7ee7\u627f Meta \u7c7b\uff0c\u5219\u5fc5\u987b\u660e\u786e\u5730\u8fd9\u6837\u505a\u3002\u6bd4\u5982\uff1a class AccountSerializer(MyBaseSerializer): class Meta(MyBaseSerializer.Meta): model = Account \u901a\u5e38\u6211\u4eec\u5efa\u8bae \u4e0d\u8981 \u5728\u5185\u90e8Meta\u7c7b\u4e0a\u4f7f\u7528\u7ee7\u627f\uff0c\u800c\u662f\u660e\u786e\u58f0\u660e\u6240\u6709\u9009\u9879\u3002 \u6b64\u5916\uff0c\u4ee5\u4e0b\u8b66\u544a\u9002\u7528\u4e8e\u5e8f\u5217\u5316\u7a0b\u5e8f\u7ee7\u627f\uff1a \u6b63\u5e38\u7684Python\u540d\u79f0\u89e3\u6790\u89c4\u5219\u9002\u7528\u3002\u5982\u679c\u4f60\u6709\u591a\u4e2a\u58f0\u660e\u4e86 Meta \u7c7b\u7684\u57fa\u7c7b\uff0c\u5219\u53ea\u4f7f\u7528\u7b2c\u4e00\u4e2a\u7c7b\u3002\u8fd9\u610f\u5473\u8981\u4e48\u662f\u5b69\u5b50\u7684 Meta \uff08\u5982\u679c\u5b58\u5728\uff09\uff0c\u5426\u5219\u5c31\u662f\u7b2c\u4e00\u4e2a\u7236\u6bcd\u7684 Meta \u7b49\u3002 \u901a\u8fc7\u5728\u5b50\u7c7b\u4e0a\u5c06\u540d\u79f0\u8bbe\u7f6e\u4e3a None \uff0c\u53ef\u4ee5\u58f0\u660e\u6027\u5730\u5220\u9664\u4ece\u7236\u7c7b\u7ee7\u627f\u7684 Field \u3002 class MyBaseSerializer(ModelSerializer): my_field = serializers.CharField() class MySerializer(MyBaseSerializer): my_field = None \u4f46\u662f\uff0c\u4f60\u53ea\u80fd\u4f7f\u7528\u6b64\u6280\u672f\u53bb\u6389\u7236\u7c7b\u58f0\u660e\u6027\u5b9a\u4e49\u7684\u5b57\u6bb5\uff1b\u5b83\u4e0d\u4f1a\u963b\u6b62 ModelSerializer \u751f\u6210\u9ed8\u8ba4\u5b57\u6bb5\u3002\u60f3\u8981\u4ece\u9ed8\u8ba4\u5b57\u6bb5\u4e2d\u9009\u62e9\u53bb\u6389\u67d0\u4e2a\u5b57\u6bb5\uff0c\u8bf7\u53c2\u9605 \u6307\u5b9a\u8981\u5305\u62ec\u7684\u5b57\u6bb5 \u3002 Dynamically modifying fields Once a serializer has been initialized, the dictionary of fields that are set on the serializer may be accessed using the .fields attribute. Accessing and modifying this attribute allows you to dynamically modify the serializer. Modifying the fields argument directly allows you to do interesting things such as changing the arguments on serializer fields at runtime, rather than at the point of declaring the serializer. Example For example, if you wanted to be able to set which fields should be used by a serializer at the point of initializing it, you could create a serializer class like so: class DynamicFieldsModelSerializer(serializers.ModelSerializer): \"\"\" A ModelSerializer that takes an additional `fields` argument that controls which fields should be displayed. \"\"\" def __init__(self, *args, **kwargs): # Don't pass the 'fields' arg up to the superclass fields = kwargs.pop('fields', None) # Instantiate the superclass normally super(DynamicFieldsModelSerializer, self).__init__(*args, **kwargs) if fields is not None: # Drop any fields that are not specified in the `fields` argument. allowed = set(fields) existing = set(self.fields.keys()) for field_name in existing - allowed: self.fields.pop(field_name) This would then allow you to do the following: >>> class UserSerializer(DynamicFieldsModelSerializer): >>> class Meta: >>> model = User >>> fields = ('id', 'username', 'email') >>> >>> print UserSerializer(user) {'id': 2, 'username': 'jonwatts', 'email': 'jon@example.com'} >>> >>> print UserSerializer(user, fields=('id', 'email')) {'id': 2, 'email': 'jon@example.com'} Customizing the default fields REST framework 2 provided an API to allow developers to override how a ModelSerializer class would automatically generate the default set of fields. This API included the .get_field() , .get_pk_field() and other methods. Because the serializers have been fundamentally redesigned with 3.0 this API no longer exists. You can still modify the fields that get created but you'll need to refer to the source code, and be aware that if the changes you make are against private bits of API then they may be subject to change. Third party packages The following third party packages are also available. Django REST marshmallow The django-rest-marshmallow package provides an alternative implementation for serializers, using the python marshmallow library. It exposes the same API as the REST framework serializers, and can be used as a drop-in replacement in some use-cases. Serpy The serpy package is an alternative implementation for serializers that is built for speed. Serpy serializes complex datatypes to simple native types. The native types can be easily converted to JSON or any other format needed. MongoengineModelSerializer The django-rest-framework-mongoengine package provides a MongoEngineModelSerializer serializer class that supports using MongoDB as the storage layer for Django REST framework. GeoFeatureModelSerializer The django-rest-framework-gis package provides a GeoFeatureModelSerializer serializer class that supports GeoJSON both for read and write operations. HStoreSerializer The django-rest-framework-hstore package provides an HStoreSerializer to support django-hstore DictionaryField model field and its schema-mode feature. Dynamic REST The dynamic-rest package extends the ModelSerializer and ModelViewSet interfaces, adding API query parameters for filtering, sorting, and including / excluding all fields and relationships defined by your serializers. Dynamic Fields Mixin The drf-dynamic-fields package provides a mixin to dynamically limit the fields per serializer to a subset specified by an URL parameter. DRF FlexFields The drf-flex-fields package extends the ModelSerializer and ModelViewSet to provide commonly used functionality for dynamically setting fields and expanding primitive fields to nested models, both from URL parameters and your serializer class definitions. Serializer Extensions The django-rest-framework-serializer-extensions package provides a collection of tools to DRY up your serializers, by allowing fields to be defined on a per-view/request basis. Fields can be whitelisted, blacklisted and child serializers can be optionally expanded. HTML JSON Forms The html-json-forms package provides an algorithm and serializer for processing <form> submissions per the (inactive) HTML JSON Form specification . The serializer facilitates processing of arbitrarily nested JSON structures within HTML. For example, <input name=\"items[0][id]\" value=\"5\"> will be interpreted as {\"items\": [{\"id\": \"5\"}]} . DRF-Base64 DRF-Base64 provides a set of field and model serializers that handles the upload of base64-encoded files. QueryFields djangorestframework-queryfields allows API clients to specify which fields will be sent in the response via inclusion/exclusion query parameters. DRF Writable Nested The drf-writable-nested package provides writable nested model serializer which allows to create/update models with nested related data.","title":"Serializers"},{"location":"api-guide/serializers_zh/#_1","text":"\u6269\u5c55serializers\u7684\u6709\u7528\u6027\u662f\u6211\u4eec\u60f3\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u95ee\u9898\uff0c\u800c\u662f\u9700\u8981\u4e00\u4e9b\u4e25\u8083\u7684\u8bbe\u8ba1\u5de5\u4f5c\u3002 \u2014 Russell Keith-Magee, Django\u7528\u6237\u7ec4 \u5e8f\u5217\u5316\u5668\u5141\u8bb8\u628a\u50cf\u67e5\u8be2\u96c6\u548c\u6a21\u578b\u5b9e\u4f8b\u8fd9\u6837\u7684\u590d\u6742\u6570\u636e\u8f6c\u6362\u4e3a\u53ef\u4ee5\u8f7b\u677e\u6e32\u67d3\u6210 JSON \uff0c XML \u6216\u5176\u4ed6\u5185\u5bb9\u7c7b\u578b\u7684\u539f\u751fPython\u7c7b\u578b\u3002\u5e8f\u5217\u5316\u5668\u8fd8\u63d0\u4f9b\u53cd\u5e8f\u5217\u5316\uff0c\u5728\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u4e4b\u540e\u5141\u8bb8\u89e3\u6790\u6570\u636e\u8f6c\u6362\u56de\u590d\u6742\u7c7b\u578b\u3002 REST framework\u4e2d\u7684serializers\u4e0eDjango\u7684 Form \u548c ModelForm \u7c7b\u975e\u5e38\u50cf\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a Serializer \u7c7b\uff0c\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u901a\u7528\u65b9\u6cd5\u6765\u63a7\u5236\u54cd\u5e94\u7684\u8f93\u51fa\uff0c\u4ee5\u53ca\u4e00\u4e2a ModelSerializer \u7c7b\uff0c\u5b83\u4e3a\u521b\u5efa\u7528\u4e8e\u5904\u7406\u6a21\u578b\u5b9e\u4f8b\u548c\u67e5\u8be2\u96c6\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u6709\u7528\u7684\u5feb\u6377\u5b9e\u73b0\u65b9\u5f0f\u3002","title":"\u5e8f\u5217\u5316\u5668"},{"location":"api-guide/serializers_zh/#_2","text":"\u8ba9\u6211\u4eec\u4ece\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u8c61\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a from datetime import datetime class Comment(object): def __init__(self, email, content, created=None): self.email = email self.content = content self.created = created or datetime.now() comment = Comment(email='leila@example.com', content='foo bar') \u6211\u4eec\u5c06\u58f0\u660e\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e0e Comment \u5bf9\u8c61\u76f8\u5e94\u7684\u6570\u636e\u3002 \u58f0\u660e\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u770b\u8d77\u6765\u975e\u5e38\u50cf\u58f0\u660e\u4e00\u4e2aform\uff1a from rest_framework import serializers class CommentSerializer(serializers.Serializer): email = serializers.EmailField() content = serializers.CharField(max_length=200) created = serializers.DateTimeField()","title":"\u58f0\u660e\u5e8f\u5217\u5316\u5668"},{"location":"api-guide/serializers_zh/#_3","text":"\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u7528 CommentSerializer \u53bb\u5e8f\u5217\u5316\u4e00\u4e2acomment\u6216comment\u5217\u8868\u3002\u540c\u6837\uff0c\u4f7f\u7528 Serializer \u7c7b\u770b\u8d77\u6765\u5f88\u50cf\u4f7f\u7528 Form \u7c7b\u3002 serializer = CommentSerializer(comment) serializer.data # {'email': 'leila@example.com', 'content': 'foo bar', 'created': '2016-01-27T15:17:10.375877'} \u6b64\u65f6\uff0c\u6211\u4eec\u5c06\u6a21\u578b\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b\u3002\u4e3a\u4e86\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8f6c\u5316\u4e3a json \u3002 from rest_framework.renderers import JSONRenderer json = JSONRenderer().render(serializer.data) json # b'{\"email\":\"leila@example.com\",\"content\":\"foo bar\",\"created\":\"2016-01-27T15:17:10.375877\"}'","title":"\u5e8f\u5217\u5316\u5bf9\u8c61"},{"location":"api-guide/serializers_zh/#_4","text":"\u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\u6211\u4eec\u5c06\u4e00\u4e2a\u6d41\u89e3\u6790\u4e3aPython\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b... from django.utils.six import BytesIO from rest_framework.parsers import JSONParser stream = BytesIO(json) data = JSONParser().parse(stream) ...\u7136\u540e\u6211\u4eec\u5c06\u8fd9\u4e9b\u539f\u751f\u6570\u636e\u7c7b\u578b\u6062\u590d\u5230\u5df2\u9a8c\u8bc1\u6570\u636e\u7684\u5b57\u5178\u4e2d\u3002 serializer = CommentSerializer(data=data) serializer.is_valid() # True serializer.validated_data # {'content': 'foo bar', 'email': 'leila@example.com', 'created': datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)}","title":"\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61"},{"location":"api-guide/serializers_zh/#_5","text":"\u5982\u679c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u8fd4\u56de\u57fa\u4e8e\u9a8c\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5176\u4e2d\u4e00\u4e2a\u6216\u5168\u90e8\u5b9e\u73b0 .create() \u548c update() \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a class CommentSerializer(serializers.Serializer): email = serializers.EmailField() content = serializers.CharField(max_length=200) created = serializers.DateTimeField() def create(self, validated_data): return Comment(**validated_data) def update(self, instance, validated_data): instance.email = validated_data.get('email', instance.email) instance.content = validated_data.get('content', instance.content) instance.created = validated_data.get('created', instance.created) return instance \u5982\u679c\u4f60\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5bf9\u5e94Django\u7684\u6a21\u578b\uff0c\u4f60\u8fd8\u9700\u8981\u786e\u4fdd\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u5bf9\u8c61\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u3002\u4f8b\u5982\uff0c\u5982\u679c Comment \u662f\u4e00\u4e2aDjango\u6a21\u578b\u7684\u8bdd\uff0c\u5177\u4f53\u7684\u65b9\u6cd5\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a def create(self, validated_data): return Comment.objects.create(**validated_data) def update(self, instance, validated_data): instance.email = validated_data.get('email', instance.email) instance.content = validated_data.get('content', instance.content) instance.created = validated_data.get('created', instance.created) instance.save() return instance \u73b0\u5728\u5f53\u6211\u4eec\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u65f6\u5019\uff0c\u57fa\u4e8e\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 .save() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u3002 comment = serializer.save() \u8c03\u7528 .save() \u65b9\u6cd5\u5c06\u521b\u5efa\u65b0\u5b9e\u4f8b\u6216\u8005\u66f4\u65b0\u73b0\u6709\u5b9e\u4f8b\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u65f6\u5019\u662f\u5426\u4f20\u9012\u4e86\u73b0\u6709\u5b9e\u4f8b\uff1a # .save() will create a new instance. serializer = CommentSerializer(data=data) # .save() will update the existing `comment` instance. serializer = CommentSerializer(comment, data=data) .create() \u548c .update() \u65b9\u6cd5\u90fd\u662f\u53ef\u9009\u7684\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u4f60\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u7528\u4f8b\u4e0d\u5b9e\u73b0\u3001\u5b9e\u73b0\u5b83\u4eec\u4e4b\u4e00\u6216\u90fd\u5b9e\u73b0\u3002","title":"\u4fdd\u5b58\u5b9e\u4f8b"},{"location":"api-guide/serializers_zh/#save","text":"\u6709\u65f6\u4f60\u4f1a\u5e0c\u671b\u4f60\u7684\u89c6\u56fe\u4ee3\u7801\u80fd\u591f\u5728\u4fdd\u5b58\u5b9e\u4f8b\u65f6\u6ce8\u5165\u989d\u5916\u7684\u6570\u636e\u3002\u6b64\u989d\u5916\u6570\u636e\u53ef\u80fd\u5305\u62ec\u5f53\u524d\u7528\u6237\uff0c\u5f53\u524d\u65f6\u95f4\u6216\u4e0d\u662f\u8bf7\u6c42\u6570\u636e\u4e00\u90e8\u5206\u7684\u5176\u4ed6\u4fe1\u606f\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u8c03\u7528 .save() \u65f6\u6dfb\u52a0\u5176\u4ed6\u5173\u952e\u5b57\u53c2\u6570\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a serializer.save(owner=request.user) \u5728 .create() \u6216 .update() \u88ab\u8c03\u7528\u65f6\uff0c\u4efb\u4f55\u5176\u4ed6\u5173\u952e\u5b57\u53c2\u6570\u5c06\u88ab\u5305\u542b\u5728 validated_data \u53c2\u6570\u4e2d\u3002","title":"\u4f20\u9012\u9644\u52a0\u5c5e\u6027\u5230.save()"},{"location":"api-guide/serializers_zh/#save_1","text":"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b .create() \u548c .update() \u65b9\u6cd5\u53ef\u80fd\u65e0\u610f\u4e49\u3002\u4f8b\u5982\u5728contact form\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b\uff0c\u800c\u662f\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u6216\u5176\u4ed6\u6d88\u606f\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u91cd\u5199 .save() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u90a3\u6837\u66f4\u53ef\u8bfb\u548c\u6709\u610f\u4e49\u3002 \u4f8b\u5982\uff1a class ContactForm(serializers.Serializer): email = serializers.EmailField() message = serializers.CharField() def save(self): email = self.validated_data['email'] message = self.validated_data['message'] send_email(from=email, message=message) \u8bf7\u6ce8\u610f\u5728\u4e0a\u8ff0\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u73b0\u5728\u4e0d\u5f97\u4e0d\u76f4\u63a5\u8bbf\u95eeserializer\u7684 .validated_data \u5c5e\u6027\u3002","title":"\u76f4\u63a5\u91cd\u5199.save()"},{"location":"api-guide/serializers_zh/#_6","text":"\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u65f6\u5019\uff0c\u4f60\u59cb\u7ec8\u9700\u8981\u5148\u8c03\u7528 is_valid() \u65b9\u6cd5\uff0c\u7136\u540e\u518d\u5c1d\u8bd5\u53bb\u8bbf\u95ee\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u6570\u636e\u6216\u4fdd\u5b58\u5bf9\u8c61\u5b9e\u4f8b\u3002\u5982\u679c\u53d1\u751f\u4efb\u4f55\u9a8c\u8bc1\u9519\u8bef\uff0c .errors \u5c5e\u6027\u5c06\u5305\u542b\u8868\u793a\u751f\u6210\u7684\u9519\u8bef\u6d88\u606f\u7684\u5b57\u5178\u3002\u4f8b\u5982\uff1a serializer = CommentSerializer(data={'email': 'foobar', 'content': 'baz'}) serializer.is_valid() # False serializer.errors # {'email': [u'Enter a valid e-mail address.'], 'created': [u'This field is required.']} \u5b57\u5178\u91cc\u7684\u6bcf\u4e00\u4e2a\u952e\u90fd\u662f\u5b57\u6bb5\u540d\u79f0\uff0c\u503c\u662f\u4e0e\u8be5\u5b57\u6bb5\u5bf9\u5e94\u7684\u4efb\u4f55\u9519\u8bef\u6d88\u606f\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002 non_field_errors \u952e\u53ef\u80fd\u5b58\u5728\uff0c\u5b83\u5c06\u5217\u51fa\u4efb\u4f55\u4e00\u822c\u9a8c\u8bc1\u9519\u8bef\u4fe1\u606f\u3002 non_field_errors \u7684\u540d\u79f0\u53ef\u4ee5\u901a\u8fc7REST framework\u8bbe\u7f6e\u4e2d\u7684 NON_FIELD_ERRORS_KEY \u6765\u81ea\u5b9a\u4e49\u3002 \u5f53\u5bf9\u5bf9\u8c61\u5217\u8868\u8fdb\u884c\u5e8f\u5217\u5316\u65f6\uff0c\u8fd4\u56de\u7684\u9519\u8bef\u662f\u6bcf\u4e2a\u53cd\u5e8f\u5217\u5316\u9879\u7684\u5b57\u5178\u5217\u8868\u3002","title":"\u9a8c\u8bc1"},{"location":"api-guide/serializers_zh/#_7","text":".is_valid() \u65b9\u6cd5\u4f7f\u7528\u53ef\u9009\u7684 raise_exception \u6807\u5fd7\uff0c\u5982\u679c\u5b58\u5728\u9a8c\u8bc1\u9519\u8bef\u5c06\u4f1a\u629b\u51fa\u4e00\u4e2a serializers.ValidationError \u5f02\u5e38\u3002 \u8fd9\u4e9b\u5f02\u5e38\u7531REST framework\u63d0\u4f9b\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u81ea\u52a8\u5904\u7406\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u8fd4\u56de HTTP 400 Bad Request \u54cd\u5e94\u3002 # \u5982\u679c\u6570\u636e\u65e0\u6548\u5c31\u8fd4\u56de400\u54cd\u5e94 serializer.is_valid(raise_exception=True)","title":"\u629b\u51fa\u65e0\u6548\u6570\u636e\u7684\u5f02\u5e38"},{"location":"api-guide/serializers_zh/#_8","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u5411\u4f60\u7684 Serializer \u5b50\u7c7b\u4e2d\u6dfb\u52a0 .validate_<field_name> \u65b9\u6cd5\u6765\u6307\u5b9a\u81ea\u5b9a\u4e49\u5b57\u6bb5\u7ea7\u522b\u7684\u9a8c\u8bc1\u3002\u8fd9\u4e9b\u7c7b\u4f3c\u4e8eDjango\u8868\u5355\u4e2d\u7684 .clean_<field_name> \u65b9\u6cd5\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u91c7\u7528\u5355\u4e2a\u53c2\u6570\uff0c\u5373\u9700\u8981\u9a8c\u8bc1\u7684\u5b57\u6bb5\u503c\u3002 \u4f60\u7684 validate_<field_name> \u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u6216\u8005\u629b\u51fa\u4e00\u4e2a serializers.ValidationError \u5f02\u5e38\u3002\u4f8b\u5982\uff1a from rest_framework import serializers class BlogPostSerializer(serializers.Serializer): title = serializers.CharField(max_length=100) content = serializers.CharField() def validate_title(self, value): \"\"\" Check that the blog post is about Django. \"\"\" if 'django' not in value.lower(): raise serializers.ValidationError(\"Blog post is not about Django\") return value \u6ce8\u610f\uff1a \u5982\u679c\u4f60\u5728\u5e8f\u5217\u5316\u5668\u4e2d\u58f0\u660e <field_name> \u7684\u65f6\u5019\u5e26\u6709 required=False \u53c2\u6570\uff0c\u5b57\u6bb5\u4e0d\u88ab\u5305\u542b\u7684\u65f6\u5019\u8fd9\u4e2a\u9a8c\u8bc1\u6b65\u9aa4\u5c31\u4e0d\u4f1a\u6267\u884c\u3002","title":"\u5b57\u6bb5\u7ea7\u522b\u7684\u9a8c\u8bc1"},{"location":"api-guide/serializers_zh/#_9","text":"\u8981\u6267\u884c\u9700\u8981\u8bbf\u95ee\u591a\u4e2a\u5b57\u6bb5\u7684\u4efb\u4f55\u5176\u4ed6\u9a8c\u8bc1\uff0c\u8bf7\u6dfb\u52a0\u4e00\u4e2a .validate() \u65b9\u6cd5\u5230\u4f60\u7684 Serializer \u5b50\u7c7b\u4e2d\u3002\u8fd9\u4e2a\u65b9\u6cd5\u91c7\u7528\u5b57\u6bb5\u503c\u5b57\u5178\u7684\u5355\u4e2a\u53c2\u6570\uff0c\u5982\u679c\u9700\u8981\u5e94\u8be5\u629b\u51fa\u4e00\u4e2a ValidationError \u5f02\u5e38\uff0c\u6216\u8005\u53ea\u662f\u8fd4\u56de\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u503c\u3002\u4f8b\u5982\uff1a from rest_framework import serializers class EventSerializer(serializers.Serializer): description = serializers.CharField(max_length=100) start = serializers.DateTimeField() finish = serializers.DateTimeField() def validate(self, data): \"\"\" Check that the start is before the stop. \"\"\" if data['start'] > data['finish']: raise serializers.ValidationError(\"finish must occur after start\") return data","title":"\u5bf9\u8c61\u7ea7\u522b\u7684\u9a8c\u8bc1"},{"location":"api-guide/serializers_zh/#_10","text":"\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5404\u4e2a\u5b57\u6bb5\u90fd\u53ef\u4ee5\u5305\u542b\u9a8c\u8bc1\u5668\uff0c\u901a\u8fc7\u5728\u5b57\u6bb5\u5b9e\u4f8b\u4e0a\u58f0\u660e\uff0c\u4f8b\u5982\uff1a def multiple_of_ten(value): if value % 10 != 0: raise serializers.ValidationError('Not a multiple of ten') class GameRecord(serializers.Serializer): score = IntegerField(validators=[multiple_of_ten]) ... \u5e8f\u5217\u5316\u5668\u7c7b\u8fd8\u53ef\u4ee5\u5305\u62ec\u5e94\u7528\u4e8e\u4e00\u7ec4\u5b57\u6bb5\u6570\u636e\u7684\u53ef\u91cd\u7528\u7684\u9a8c\u8bc1\u5668\u3002\u8fd9\u4e9b\u9a8c\u8bc1\u5668\u8981\u5728\u5185\u90e8\u7684 Meta \u7c7b\u4e2d\u58f0\u660e\uff0c\u5982\u4e0b\u6240\u793a\uff1a class EventSerializer(serializers.Serializer): name = serializers.CharField() room_number = serializers.IntegerField(choices=[101, 102, 103, 201]) date = serializers.DateField() class Meta: # \u6bcf\u95f4\u5c4b\u5b50\u6bcf\u5929\u53ea\u80fd\u67091\u4e2a\u6d3b\u52a8\u3002 validators = UniqueTogetherValidator( queryset=Event.objects.all(), fields=['room_number', 'date'] ) \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605 validators\u6587\u6863 \u3002","title":"\u9a8c\u8bc1\u5668"},{"location":"api-guide/serializers_zh/#_11","text":"\u5c06\u521d\u59cb\u5316\u5bf9\u8c61\u6216\u8005\u67e5\u8be2\u96c6\u4f20\u9012\u7ed9\u5e8f\u5217\u5316\u5b9e\u4f8b\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 .instance \u8bbf\u95ee\u3002\u5982\u679c\u6ca1\u6709\u4f20\u9012\u521d\u59cb\u5316\u5bf9\u8c61\uff0c\u90a3\u4e48 .instance \u5c5e\u6027\u5c06\u662f None \u3002 \u5c06\u6570\u636e\u4f20\u9012\u7ed9\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\u65f6\uff0c\u672a\u4fee\u6539\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7 .initial_data \u83b7\u53d6\u3002\u5982\u679c\u6ca1\u6709\u4f20\u9012data\u5173\u952e\u5b57\u53c2\u6570\uff0c\u90a3\u4e48 .initial_data \u5c5e\u6027\u5c31\u4e0d\u5b58\u5728\u3002","title":"\u8bbf\u95ee\u521d\u59cb\u6570\u636e\u548c\u5b9e\u4f8b"},{"location":"api-guide/serializers_zh/#_12","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5e8f\u5217\u5316\u5668\u5fc5\u987b\u4f20\u9012\u6240\u6709\u5fc5\u586b\u5b57\u6bb5\u7684\u503c\uff0c\u5426\u5219\u5c31\u4f1a\u5f15\u53d1\u9a8c\u8bc1\u9519\u8bef\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 partial \u53c2\u6570\u6765\u5141\u8bb8\u90e8\u5206\u66f4\u65b0\u3002 # \u4f7f\u7528\u90e8\u5206\u6570\u636e\u66f4\u65b0`comment` serializer = CommentSerializer(comment, data={'content': u'foo bar'}, partial=True)","title":"\u90e8\u5206\u66f4\u65b0"},{"location":"api-guide/serializers_zh/#_13","text":"\u524d\u9762\u7684\u5b9e\u4f8b\u9002\u7528\u4e8e\u5904\u7406\u53ea\u6709\u7b80\u5355\u6570\u636e\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u9700\u8981\u8868\u793a\u66f4\u590d\u6742\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u5bf9\u8c61\u7684\u67d0\u4e9b\u5c5e\u6027\u53ef\u80fd\u4e0d\u662f\u5b57\u7b26\u4e32\u3001\u65e5\u671f\u3001\u6574\u6570\u8fd9\u6837\u7b80\u5355\u7684\u6570\u636e\u7c7b\u578b\u3002 Serializer \u7c7b\u672c\u8eab\u4e5f\u662f\u4e00\u79cd Field \uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5bf9\u8c61\u7c7b\u578b\u5d4c\u5957\u5728\u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u7684\u5173\u7cfb\u3002 class UserSerializer(serializers.Serializer): email = serializers.EmailField() username = serializers.CharField(max_length=100) class CommentSerializer(serializers.Serializer): user = UserSerializer() content = serializers.CharField(max_length=200) created = serializers.DateTimeField() \u5982\u679c\u5d4c\u5957\u8868\u793a\u53ef\u4ee5\u63a5\u6536 None \u503c\uff0c\u5219\u5e94\u8be5\u5c06 required=False \u6807\u5fd7\u4f20\u9012\u7ed9\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u3002 class CommentSerializer(serializers.Serializer): user = UserSerializer(required=False) # \u53ef\u80fd\u662f\u533f\u540d\u7528\u6237\u3002 content = serializers.CharField(max_length=200) created = serializers.DateTimeField() \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u5d4c\u5957\u7684\u5173\u8054\u5b57\u6bb5\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u5217\u8868\uff0c\u90a3\u4e48\u5e94\u8be5\u5c06 many=True \u6807\u5fd7\u4f20\u9012\u7ed9\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u3002 class CommentSerializer(serializers.Serializer): user = UserSerializer(required=False) edits = EditItemSerializer(many=True) # edit'\u9879\u7684\u5d4c\u5957\u5217\u8868 content = serializers.CharField(max_length=200) created = serializers.DateTimeField()","title":"\u5904\u7406\u5d4c\u5957\u5bf9\u8c61"},{"location":"api-guide/serializers_zh/#_14","text":"\u5f53\u5904\u7406\u652f\u6301\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u5d4c\u5957\u8868\u793a\u65f6\uff0c\u5d4c\u5957\u5bf9\u8c61\u7684\u4efb\u4f55\u9519\u8bef\u90fd\u5d4c\u5957\u5728\u5d4c\u5957\u5bf9\u8c61\u7684\u5b57\u6bb5\u540d\u4e0b\u3002 serializer = CommentSerializer(data={'user': {'email': 'foobar', 'username': 'doe'}, 'content': 'baz'}) serializer.is_valid() # False serializer.errors # {'user': {'email': [u'Enter a valid e-mail address.']}, 'created': [u'This field is required.']} \u7c7b\u4f3c\u7684\uff0c .validated_data \u5c5e\u6027\u5c06\u5305\u62ec\u5d4c\u5957\u6570\u636e\u7ed3\u6784\u3002","title":"\u53ef\u5199\u7684\u5d4c\u5957\u8868\u793a"},{"location":"api-guide/serializers_zh/#create","text":"\u5982\u679c\u4f60\u652f\u6301\u53ef\u5199\u7684\u5d4c\u5957\u8868\u793a\uff0c\u5219\u9700\u8981\u7f16\u5199 .create() \u6216 .update() \u5904\u7406\u4fdd\u5b58\u591a\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u5904\u7406\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u5d4c\u5957\u7684\u6982\u8981\u4fe1\u606f\u5bf9\u8c61\u7684\u7528\u6237\u3002 class UserSerializer(serializers.ModelSerializer): profile = ProfileSerializer() class Meta: model = User fields = ('username', 'email', 'profile') def create(self, validated_data): profile_data = validated_data.pop('profile') user = User.objects.create(**validated_data) Profile.objects.create(user=user, **profile_data) return user","title":"\u4e3a\u5d4c\u5957\u5173\u7cfb\u5b9a\u4e49.create()\u65b9\u6cd5"},{"location":"api-guide/serializers_zh/#update","text":"\u5bf9\u4e8e\u66f4\u65b0\uff0c\u4f60\u9700\u8981\u4ed4\u7ec6\u8003\u8651\u5982\u4f55\u5904\u7406\u5173\u8054\u5b57\u6bb5\u7684\u66f4\u65b0\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5173\u8054\u5b57\u6bb5\u7684\u503c\u662f None \uff0c\u6216\u8005\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u4e0b\u9762\u54ea\u4e00\u9879\uff1f \u5728\u6570\u636e\u5e93\u4e2d\u5c06\u5173\u8054\u5b57\u6bb5\u8bbe\u7f6e\u6210 NULL \u3002 \u5220\u9664\u5173\u8054\u7684\u5b9e\u4f8b\u3002 \u5ffd\u7565\u6570\u636e\u5e76\u4fdd\u7559\u8fd9\u4e2a\u5b9e\u4f8b\u3002 \u629b\u51fa\u9a8c\u8bc1\u9519\u8bef\u3002 \u4e0b\u9762\u662f\u6211\u4eec\u4e4b\u524d UserSerializer \u7c7b\u4e2d update() \u65b9\u6cd5\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 def update(self, instance, validated_data): profile_data = validated_data.pop('profile') # \u9664\u975e\u5e94\u7528\u7a0b\u5e8f\u6b63\u786e\u6267\u884c\uff0c # \u4fdd\u8bc1\u8fd9\u4e2a\u5b57\u6bb5\u4e00\u76f4\u88ab\u8bbe\u7f6e\uff0c # \u5426\u5219\u5c31\u5e94\u8be5\u629b\u51fa\u4e00\u4e2a\u9700\u8981\u5904\u7406\u7684`DoesNotExist`\u3002 profile = instance.profile instance.username = validated_data.get('username', instance.username) instance.email = validated_data.get('email', instance.email) instance.save() profile.is_premium_member = profile_data.get( 'is_premium_member', profile.is_premium_member ) profile.has_support_contract = profile_data.get( 'has_support_contract', profile.has_support_contract ) profile.save() return instance \u56e0\u4e3a\u5d4c\u5957\u5173\u7cfb\u7684\u521b\u5efa\u548c\u66f4\u65b0\u884c\u4e3a\u53ef\u80fd\u4e0d\u660e\u786e\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u5173\u8054\u6a21\u578b\u95f4\u7684\u590d\u6742\u4f9d\u8d56\u5173\u7cfb\uff0cREST framework 3 \u8981\u6c42\u4f60\u59cb\u7ec8\u660e\u786e\u7684\u5b9a\u4e49\u8fd9\u4e9b\u65b9\u6cd5\u3002\u9ed8\u8ba4\u7684 ModelSerializer .create() \u548c .update() \u65b9\u6cd5\u4e0d\u5305\u62ec\u5bf9\u53ef\u5199\u5d4c\u5957\u5173\u8054\u7684\u652f\u6301\u3002 \u63d0\u4f9b\u81ea\u52a8\u652f\u6301\u67d0\u79cd\u7c7b\u578b\u7684\u81ea\u52a8\u5199\u5165\u5d4c\u5957\u5173\u8054\u7684\u7b2c\u4e09\u65b9\u5305\u53ef\u80fd\u4e0e3.1\u7248\u672c\u4e00\u540c\u653e\u51fa\u3002","title":"\u4e3a\u5d4c\u5957\u5173\u7cfb\u5b9a\u4e49.update()\u65b9\u6cd5"},{"location":"api-guide/serializers_zh/#_15","text":"\u5728\u5e8f\u5217\u5316\u5668\u4e2d\u4fdd\u5b58\u591a\u4e2a\u76f8\u5173\u5b9e\u4f8b\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u7f16\u5199\u5904\u7406\u521b\u5efa\u6b63\u786e\u5b9e\u4f8b\u7684\u81ea\u5b9a\u4e49\u6a21\u578b\u7ba1\u7406\u5668\u7c7b\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u786e\u4fdd User \u5b9e\u4f8b\u548c Profile \u5b9e\u4f8b\u603b\u662f\u4f5c\u4e3a\u4e00\u5bf9\u4e00\u8d77\u521b\u5efa\u3002\u6211\u4eec\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u7c7b\u4f3c\u8fd9\u6837\u7684\u81ea\u5b9a\u4e49\u7ba1\u7406\u5668\u7c7b\uff1a class UserManager(models.Manager): ... def create(self, username, email, is_premium_member=False, has_support_contract=False): user = User(username=username, email=email) user.save() profile = Profile( user=user, is_premium_member=is_premium_member, has_support_contract=has_support_contract ) profile.save() return user \u8fd9\u4e2a\u7ba1\u7406\u5668\u7c7b\u73b0\u5728\u66f4\u597d\u7684\u5c01\u88c5\u4e86\u7528\u6237\u5b9e\u4f8b\u548c\u7528\u6237\u4fe1\u606f\u5b9e\u4f8b\u603b\u662f\u5728\u540c\u4e00\u65f6\u95f4\u521b\u5efa\u3002\u6211\u4eec\u5728\u5e8f\u5217\u5316\u5668\u7c7b\u4e0a\u7684 .create() \u65b9\u6cd5\u73b0\u5728\u80fd\u591f\u7528\u65b0\u7684\u7ba1\u7406\u5668\u65b9\u6cd5\u91cd\u5199\u3002 def create(self, validated_data): return User.objects.create( username=validated_data['username'], email=validated_data['email'] is_premium_member=validated_data['profile']['is_premium_member'] has_support_contract=validated_data['profile']['has_support_contract'] ) \u6709\u5173\u6b64\u65b9\u6cd5\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605Django\u6587\u6863\u4e2d\u7684 \u6a21\u578b\u7ba1\u7406\u5668 \u548c \u4f7f\u7528\u6a21\u578b\u548c\u7ba1\u7406\u5668\u7c7b\u7684\u76f8\u5173\u535a\u5ba2 \u3002","title":"\u5904\u7406\u5728\u6a21\u578b\u7ba1\u7406\u7c7b\u4e2d\u4fdd\u5b58\u5173\u8054\u5b9e\u4f8b"},{"location":"api-guide/serializers_zh/#_16","text":"Serializer \u7c7b\u8fd8\u53ef\u4ee5\u5e8f\u5217\u5316\u6216\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u7684\u5217\u8868\u3002","title":"\u5904\u7406\u591a\u4e2a\u5bf9\u8c61"},{"location":"api-guide/serializers_zh/#_17","text":"\u4e3a\u4e86\u80fd\u591f\u5e8f\u5217\u5316\u4e00\u4e2a\u67e5\u8be2\u96c6\u6216\u8005\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u800c\u4e0d\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5bf9\u8c61\uff0c\u5e94\u8be5\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u65f6\u5019\u4f20\u4e00\u4e2a many=True \u53c2\u6570\u3002\u8fd9\u6837\u5c31\u80fd\u5e8f\u5217\u5316\u4e00\u4e2a\u67e5\u8be2\u96c6\u6216\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u3002 queryset = Book.objects.all() serializer = BookSerializer(queryset, many=True) serializer.data # [ # {'id': 0, 'title': 'The electric kool-aid acid test', 'author': 'Tom Wolfe'}, # {'id': 1, 'title': 'If this is a man', 'author': 'Primo Levi'}, # {'id': 2, 'title': 'The wind-up bird chronicle', 'author': 'Haruki Murakami'} # ]","title":"\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61"},{"location":"api-guide/serializers_zh/#_18","text":"\u53cd\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61\u9ed8\u8ba4\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\uff0c\u4f46\u662f\u4e0d\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u7684\u66f4\u65b0\u3002\u6709\u5173\u5982\u4f55\u652f\u6301\u6216\u81ea\u5b9a\u4e49\u8fd9\u4e9b\u60c5\u51b5\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605\u8fd9\u4e2a\u6587\u6863 ListSerializer \u3002","title":"\u53cd\u5e8f\u5217\u5316\u591a\u4e2a\u5bf9\u8c61"},{"location":"api-guide/serializers_zh/#_19","text":"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9664\u4e86\u8981\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u4e3a\u5e8f\u5217\u5316\u7a0b\u5e8f\u63d0\u4f9b\u989d\u5916\u7684\u4e0a\u4e0b\u6587\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u5305\u542b\u8d85\u94fe\u63a5\u5173\u7cfb\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u8fd9\u9700\u8981\u5e8f\u5217\u5316\u5668\u80fd\u591f\u8bbf\u95ee\u5f53\u524d\u7684\u8bf7\u6c42\u4ee5\u4fbf\u6b63\u786e\u751f\u6210\u5b8c\u5168\u9650\u5b9a\u7684URL\u3002 \u4f60\u53ef\u4ee5\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u7684\u65f6\u5019\u4f20\u9012\u4e00\u4e2a context \u53c2\u6570\u6765\u4f20\u9012\u4efb\u610f\u7684\u9644\u52a0\u4e0a\u4e0b\u6587\u3002\u4f8b\u5982\uff1a serializer = AccountSerializer(account, context={'request': request}) serializer.data # {'id': 6, 'owner': u'denvercoder9', 'created': datetime.datetime(2013, 2, 12, 09, 44, 56, 678870), 'details': 'http://example.com/accounts/6/details'} \u8fd9\u4e2a\u4e0a\u4e0b\u6587\u7684\u5b57\u5178\u53ef\u4ee5\u5728\u4efb\u4f55\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7684\u903b\u8f91\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982 .to_representation() \u65b9\u6cd5\u4e2d\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee self.context \u5c5e\u6027\u83b7\u53d6\u4e0a\u4e0b\u6587\u5b57\u5178\u3002","title":"\u5305\u62ec\u989d\u5916\u7684\u4e0a\u4e0b\u6587"},{"location":"api-guide/serializers_zh/#modelserializer","text":"\u901a\u5e38\u4f60\u4f1a\u60f3\u8981\u4e0eDjango\u6a21\u578b\u76f8\u5bf9\u5e94\u7684\u5e8f\u5217\u5316\u7c7b\u3002 ModelSerializer \u7c7b\u80fd\u591f\u8ba9\u4f60\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u6a21\u578b\u4e2d\u76f8\u5e94\u5b57\u6bb5\u7684 Serializer \u7c7b\u3002 \u8fd9\u4e2a ModelSerializer \u7c7b\u548c\u5e38\u89c4\u7684 Serializer \u7c7b\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f \uff1a \u5b83\u6839\u636e\u6a21\u578b\u81ea\u52a8\u751f\u6210\u4e00\u7ec4\u5b57\u6bb5\u3002 \u5b83\u81ea\u52a8\u751f\u6210\u5e8f\u5217\u5316\u5668\u7684\u9a8c\u8bc1\u5668\uff0c\u6bd4\u5982unique_together\u9a8c\u8bc1\u5668\u3002 \u5b83\u9ed8\u8ba4\u7b80\u5355\u5b9e\u73b0\u4e86 .create() \u65b9\u6cd5\u548c .update() \u65b9\u6cd5\u3002 \u58f0\u660e\u4e00\u4e2a ModelSerializer \u5982\u4e0b\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ('id', 'account_name', 'users', 'created') \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u6a21\u578b\u7684\u5b57\u6bb5\u90fd\u5c06\u6620\u5c04\u5230\u5e8f\u5217\u5316\u5668\u4e0a\u76f8\u5e94\u7684\u5b57\u6bb5\u3002 \u6a21\u578b\u4e2d\u4efb\u4f55\u5173\u8054\u5b57\u6bb5\u6bd4\u5982\u5916\u952e\u90fd\u5c06\u6620\u5c04\u5230 PrimaryKeyRelatedField \u5b57\u6bb5\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u5305\u62ec\u53cd\u5411\u5173\u8054\uff0c\u9664\u975e\u50cf serializer relations \u6587\u6863\u4e2d\u89c4\u5b9a\u7684\u90a3\u6837\u663e\u5f0f\u5305\u542b\u3002","title":"ModelSerializer"},{"location":"api-guide/serializers_zh/#modelserializer_1","text":"\u5e8f\u5217\u5316\u7c7b\u751f\u6210\u6709\u7528\u7684\u8be6\u7ec6\u8868\u793a\u5b57\u7b26\u4e32\uff0c\u5141\u8bb8\u4f60\u5168\u9762\u68c0\u67e5\u5176\u5b57\u6bb5\u7684\u72b6\u6001\u3002 \u8fd9\u5728\u4f7f\u7528 ModelSerializers \u65f6\u7279\u522b\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u60f3\u786e\u5b9a\u81ea\u52a8\u521b\u5efa\u4e86\u54ea\u4e9b\u5b57\u6bb5\u548c\u9a8c\u8bc1\u5668\u3002 \u8981\u68c0\u67e5\u7684\u8bdd\uff0c\u6253\u5f00Django shell,\u6267\u884c python manage.py shell \uff0c\u7136\u540e\u5bfc\u5165\u5e8f\u5217\u5316\u5668\u7c7b\uff0c\u5b9e\u4f8b\u5316\u5b83\uff0c\u5e76\u6253\u5370\u5bf9\u8c61\u7684\u8868\u793a\uff1a >>> from myapp.serializers import AccountSerializer >>> serializer = AccountSerializer() >>> print(repr(serializer)) AccountSerializer(): id = IntegerField(label='ID', read_only=True) name = CharField(allow_blank=True, max_length=100, required=False) owner = PrimaryKeyRelatedField(queryset=User.objects.all())","title":"\u68c0\u67e5ModelSerializer"},{"location":"api-guide/serializers_zh/#_20","text":"\u5982\u679c\u4f60\u5e0c\u671b\u5728\u6a21\u578b\u5e8f\u5217\u5316\u5668\u4e2d\u4f7f\u7528\u9ed8\u8ba4\u5b57\u6bb5\u7684\u4e00\u90e8\u5206\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 fields \u6216 exclude \u9009\u9879\u6765\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5c31\u50cf\u4f7f\u7528 ModelForm \u4e00\u6837\u3002\u5f3a\u70c8\u5efa\u8bae\u4f60\u4f7f\u7528 fields \u5c5e\u6027\u663e\u5f0f\u7684\u8bbe\u7f6e\u8981\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002\u8fd9\u6837\u5c31\u4e0d\u592a\u53ef\u80fd\u56e0\u4e3a\u4f60\u4fee\u6539\u4e86\u6a21\u578b\u800c\u65e0\u610f\u4e2d\u66b4\u9732\u4e86\u6570\u636e\u3002 \u4f8b\u5982\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ('id', 'account_name', 'users', 'created') \u4f60\u8fd8\u53ef\u4ee5\u5c06 fields \u5c5e\u6027\u8bbe\u7f6e\u6210 '__all__' \u6765\u8868\u660e\u4f7f\u7528\u6a21\u578b\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u3002 \u4f8b\u5982\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = '__all__' \u4f60\u53ef\u4ee5\u5c06 exclude \u5c5e\u6027\u8bbe\u7f6e\u6210\u4e00\u4e2a\u4ece\u5e8f\u5217\u5316\u5668\u4e2d\u6392\u9664\u7684\u5b57\u6bb5\u5217\u8868\u3002 \u4f8b\u5982\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account exclude = ('users',) \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c Account \u6a21\u578b\u6709\u4e09\u4e2a\u5b57\u6bb5 account_name \uff0c users \u548c created \uff0c\u90a3\u4e48\u53ea\u6709 account_name \u548c created \u4f1a\u88ab\u5e8f\u5217\u5316\u3002 \u5728 fields \u548c exclude \u5c5e\u6027\u4e2d\u7684\u540d\u79f0\uff0c\u901a\u5e38\u4f1a\u6620\u5c04\u5230\u6a21\u578b\u7c7b\u4e2d\u7684\u6a21\u578b\u5b57\u6bb5\u3002 \u6216\u8005 fields \u9009\u9879\u4e2d\u7684\u540d\u79f0\u53ef\u4ee5\u6620\u5c04\u5230\u6a21\u578b\u7c7b\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u53c2\u6570\u7684\u5c5e\u6027\u6216\u65b9\u6cd5\u3002","title":"\u6307\u5b9a\u8981\u5305\u62ec\u7684\u5b57\u6bb5"},{"location":"api-guide/serializers_zh/#_21","text":"\u9ed8\u8ba4 ModelSerializer \u4f7f\u7528\u4e3b\u952e\u8fdb\u884c\u5173\u8054\uff0c\u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 depth \u9009\u9879\u8f7b\u677e\u751f\u6210\u5d4c\u5957\u5173\u8054\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ('id', 'account_name', 'users', 'created') depth = 1 depth \u9009\u9879\u5e94\u8be5\u8bbe\u7f6e\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u8868\u660e\u5e94\u8be5\u904d\u5386\u7684\u5173\u8054\u6df1\u5ea6\u3002 \u5982\u679c\u8981\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u7684\u65b9\u5f0f\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u8be5\u5b50\u6bb5\u3002","title":"\u6307\u5b9a\u5d4c\u5957\u5e8f\u5217\u5316"},{"location":"api-guide/serializers_zh/#_22","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 ModelSerializer \u7c7b\u4e0a\u58f0\u660e\u5b57\u6bb5\u6765\u589e\u52a0\u989d\u5916\u7684\u5b57\u6bb5\u6216\u8005\u91cd\u5199\u9ed8\u8ba4\u7684\u5b57\u6bb5\uff0c\u5c31\u548c\u5728 Serializer \u7c7b\u4e00\u6837\u7684\u3002 class AccountSerializer(serializers.ModelSerializer): url = serializers.CharField(source='get_absolute_url', read_only=True) groups = serializers.PrimaryKeyRelatedField(many=True) class Meta: model = Account \u989d\u5916\u7684\u5b57\u6bb5\u53ef\u4ee5\u5bf9\u5e94\u6a21\u578b\u4e0a\u4efb\u4f55\u5c5e\u6027\u6216\u53ef\u8c03\u7528\u7684\u65b9\u6cd5\u3002","title":"\u660e\u786e\u6307\u5b9a\u5b57\u6bb5"},{"location":"api-guide/serializers_zh/#_23","text":"\u4f60\u53ef\u80fd\u5e0c\u671b\u5c06\u591a\u4e2a\u5b57\u6bb5\u6307\u5b9a\u4e3a\u53ea\u8bfb\uff0c\u800c\u4e0d\u662f\u663e\u5f0f\u7684\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u6dfb\u52a0 read_only=True \u5c5e\u6027\uff0c\u8fd9\u79cd\u60c5\u51b5\u4f60\u53ef\u4ee5\u4f7f\u7528Meta\u7684 read_only_fields \u9009\u9879\u3002 \u8be5\u9009\u9879\u5e94\u8be5\u662f\u5b57\u6bb5\u540d\u79f0\u7684\u5217\u8868\u6216\u5143\u7956\uff0c\u5e76\u50cf\u4e0b\u9762\u8fd9\u6837\u58f0\u660e\uff1a class AccountSerializer(serializers.ModelSerializer): class Meta: model = Account fields = ('id', 'account_name', 'users', 'created') read_only_fields = ('account_name',) \u6a21\u578b\u4e2d\u5df2\u7ecf\u8bbe\u7f6e editable=False \u7684\u5b57\u6bb5\u548c\u9ed8\u8ba4\u5c31\u88ab\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\u7684 AutoField \u5b57\u6bb5\u90fd\u4e0d\u9700\u8981\u6dfb\u52a0\u5230 read_only_fields \u9009\u9879\u4e2d\u3002 \u6ce8\u610f : \u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5176\u4e2d\u4e00\u4e2a\u53ea\u8bfb\u5b57\u6bb5\u662f\u6a21\u578b\u7ea7\u522b unique_together \u7ea6\u675f\u7684\u4e00\u90e8\u5206\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e8f\u5217\u5316\u5668\u7c7b\u9700\u8981\u8be5\u5b57\u6bb5\u624d\u80fd\u9a8c\u8bc1\u7ea6\u675f\uff0c\u4f46\u4e5f\u4e0d\u80fd\u7531\u7528\u6237\u7f16\u8f91\u3002 \u5904\u7406\u6b64\u95ee\u9898\u7684\u6b63\u786e\u65b9\u6cd5\u662f\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u663e\u5f0f\u6307\u5b9a\u8be5\u5b57\u6bb5\uff0c\u540c\u65f6\u63d0\u4f9b read_only=True \u548c default=\u2026 \u5173\u952e\u5b57\u53c2\u6570\u3002 \u8fd9\u79cd\u60c5\u51b5\u7684\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u548c\u5176\u4ed6\u6807\u8bc6\u7b26 unique_together \u7684\u5f53\u524d\u8ba4\u8bc1\u7684 User \u662f\u53ea\u8bfb\u7684\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u58f0\u660euser\u5b57\u6bb5\uff1a user = serializers.PrimaryKeyRelatedField(read_only=True, default=serializers.CurrentUserDefault()) \u6709\u5173 UniqueTogetherValidator \u548c CurrentUserDefault \u7c7b\u7684\u8be6\u7ec6\u6587\u6863\uff0c\u8bf7\u67e5\u9605 \u9a8c\u8bc1\u5668\u7684\u6587\u6863 \u3002","title":"\u6307\u5b9a\u53ea\u8bfb\u5b57\u6bb5"},{"location":"api-guide/serializers_zh/#_24","text":"\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 extra_kwargs \u9009\u9879\u5feb\u6377\u5730\u5728\u5b57\u6bb5\u4e0a\u6307\u5b9a\u4efb\u610f\u9644\u52a0\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002\u5728 read_only_fields \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e0d\u9700\u8981\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u5f0f\u7684\u58f0\u660e\u8be5\u5b57\u6bb5\u3002 \u8fd9\u4e2a\u9009\u9879\u662f\u4e00\u4e2a\u5c06\u5177\u4f53\u5b57\u6bb5\u540d\u79f0\u5f53\u4f5c\u952e\u503c\u7684\u5b57\u5178\u3002\u4f8b\u5982\uff1a class CreateUserSerializer(serializers.ModelSerializer): class Meta: model = User fields = ('email', 'username', 'password') extra_kwargs = {'password': {'write_only': True}} def create(self, validated_data): user = User( email=validated_data['email'], username=validated_data['username'] ) user.set_password(validated_data['password']) user.save() return user","title":"\u9644\u52a0\u5173\u952e\u5b57\u53c2\u6570"},{"location":"api-guide/serializers_zh/#_25","text":"\u5728\u5e8f\u5217\u5316\u6a21\u578b\u5b9e\u4f8b\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u8868\u793a\u5173\u8054\u5173\u7cfb\u3002\u5bf9\u4e8e ModelSerializer \u9ed8\u8ba4\u662f\u4f7f\u7528\u76f8\u5173\u5b9e\u4f8b\u7684\u4e3b\u952e\u3002 \u66ff\u4ee3\u7684\u5176\u4ed6\u65b9\u6cd5\u5305\u62ec\u4f7f\u7528\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\uff0c\u5e8f\u5217\u5316\u5b8c\u6574\u7684\u5d4c\u5957\u8868\u793a\u6216\u8005\u4f7f\u7528\u81ea\u5b9a\u4e49\u8868\u793a\u7684\u5e8f\u5217\u5316\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u67e5\u9605 serializer relations \u6587\u6863\u3002","title":"\u5173\u8054\u5b57\u6bb5"},{"location":"api-guide/serializers_zh/#_26","text":"ModelSerializer\u7c7b\u8fd8\u516c\u5f00\u4e86\u4e00\u4e2a\u53ef\u4ee5\u8986\u76d6\u7684API\uff0c\u4ee5\u4fbf\u5728\u5b9e\u4f8b\u5316\u5e8f\u5217\u5316\u5668\u65f6\u6539\u53d8\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7684\u81ea\u52a8\u786e\u5b9a\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c ModelSerializer \u6ca1\u6709\u751f\u6210\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f60\u9700\u8981\u7684\u5b57\u6bb5\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u5c06\u5b83\u4eec\u663e\u5f0f\u5730\u6dfb\u52a0\u5230\u7c7b\u4e2d\uff0c\u6216\u8005\u76f4\u63a5\u4f7f\u7528\u5e38\u89c4\u7684 Serializer \u7c7b\u3002\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u57fa\u7c7b\uff0c\u6765\u5b9a\u4e49\u7ed9\u4efb\u610f\u6a21\u578b\u521b\u5efa\u5e8f\u5217\u5316\u5b57\u6bb5\u7684\u65b9\u5f0f\u3002","title":"\u81ea\u5b9a\u4e49\u5b57\u6bb5\u6620\u5c04"},{"location":"api-guide/serializers_zh/#serializer_field_mapping","text":"\u5c06Django model\u7c7b\u6620\u5c04\u5230REST framework serializer\u7c7b\u3002\u4f60\u53ef\u4ee5\u8986\u5199\u8fd9\u4e2a\u6620\u5c04\u6765\u66f4\u6539\u6bcf\u4e2a\u6a21\u578b\u5e94\u8be5\u4f7f\u7528\u7684\u9ed8\u8ba4\u5e8f\u5217\u5316\u5668\u7c7b\u3002","title":".serializer_field_mapping"},{"location":"api-guide/serializers_zh/#serializer_related_field","text":"\u8fd9\u4e2a\u5c5e\u6027\u5e94\u662f\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7528\u4e8e\u5173\u8054\u5b57\u6bb5\u3002 \u5bf9\u4e8e ModelSerializer \u6b64\u5c5e\u6027\u9ed8\u8ba4\u662f PrimaryKeyRelatedField \u3002 \u5bf9\u4e8e HyperlinkedModelSerializer \u6b64\u5c5e\u6027\u9ed8\u8ba4\u662f serializers.HyperlinkedRelatedField \u3002","title":".serializer_related_field"},{"location":"api-guide/serializers_zh/#serializer_url_field","text":"\u5e94\u8be5\u7528\u4e8e\u5e8f\u5217\u5316\u5668\u4e0a\u4efb\u4f55 url \u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\u3002 \u9ed8\u8ba4\u662f serializers.HyperlinkedIdentityField","title":"serializer_url_field"},{"location":"api-guide/serializers_zh/#serializer_choice_field","text":"\u5e94\u7528\u4e8e\u5e8f\u5217\u5316\u5668\u4e0a\u4efb\u4f55\u9009\u62e9\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u7c7b\u3002 \u9ed8\u8ba4\u662f serializers.ChoiceField","title":"serializer_choice_field"},{"location":"api-guide/serializers_zh/#the-field_classfield_kwargs-api","text":"\u8c03\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u6765\u786e\u5b9a\u5e94\u8be5\u81ea\u52a8\u5305\u542b\u5728\u5e8f\u5217\u5316\u5668\u7c7b\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u548c\u5173\u952e\u5b57\u53c2\u6570\u3002\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u5e94\u8be5\u8fd4\u56de\u4e24\u4e2a (field_class, field_kwargs) \u5143\u7956\u3002","title":"The field_class\u548cfield_kwargs API"},{"location":"api-guide/serializers_zh/#build_standard_fieldself-field_name-model_field","text":"\u8c03\u7528\u540e\u751f\u6210\u5bf9\u5e94\u6807\u51c6\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u6839\u636e serializer_field_mapping \u5c5e\u6027\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u3002","title":".build_standard_field(self, field_name, model_field)"},{"location":"api-guide/serializers_zh/#build_relational_fieldself-field_name-relation_info","text":"\u8c03\u7528\u540e\u751f\u6210\u5bf9\u5e94\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u6839\u636e serializer_relational_field \u5c5e\u6027\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u7c7b\u3002 \u8fd9\u91cc\u7684 relation_info \u53c2\u6570\u662f\u4e00\u4e2a\u547d\u540d\u5143\u7956\uff0c\u5305\u542b model_field \uff0c related_model \uff0c to_many \u548c has_through_model \u5c5e\u6027\u3002","title":".build_relational_field(self, field_name, relation_info)"},{"location":"api-guide/serializers_zh/#build_nested_fieldself-field_name-relation_info-nested_depth","text":"\u5f53 depth \u9009\u9879\u88ab\u8bbe\u7f6e\u65f6\uff0c\u88ab\u8c03\u7528\u540e\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u5230\u5173\u8054\u6a21\u578b\u5b57\u6bb5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u52a8\u6001\u7684\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e ModelSerializer \u6216 HyperlinkedModelSerializer \u7684\u5d4c\u5957\u7684\u5e8f\u5217\u5316\u5668\u7c7b\u3002 nested_depth \u7684\u503c\u662f depth \u7684\u503c\u51cf1\u3002 relation_info \u53c2\u6570\u662f\u4e00\u4e2a\u547d\u540d\u5143\u7956\uff0c\u5305\u542b model_field \uff0c related_model \uff0c to_many \u548c has_through_model \u5c5e\u6027\u3002","title":".build_nested_field(self, field_name, relation_info, nested_depth)"},{"location":"api-guide/serializers_zh/#build_property_fieldself-field_name-model_class","text":"\u88ab\u8c03\u7528\u540e\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u5230\u6a21\u578b\u7c7b\u4e2d\u5c5e\u6027\u6216\u65e0\u53c2\u6570\u65b9\u6cd5\u7684\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u8fd4\u56de\u4e00\u4e2a ReadOnlyField \u7c7b\u3002","title":".build_property_field(self, field_name, model_class)"},{"location":"api-guide/serializers_zh/#build_url_fieldself-field_name-model_class","text":"\u88ab\u8c03\u7528\u540e\u4e3a\u5e8f\u5217\u5316\u5668\u81ea\u5df1\u7684 url \u5b57\u6bb5\u751f\u6210\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u5b57\u6bb5\u3002\u9ed8\u8ba4\u5b9e\u73b0\u662f\u8fd4\u56de\u4e00\u4e2a HyperlinkedIdentityField \u7c7b\u3002","title":".build_url_field(self, field_name, model_class)"},{"location":"api-guide/serializers_zh/#build_unknown_fieldself-field_name-model_class","text":"\u5f53\u5b57\u6bb5\u540d\u79f0\u6ca1\u6709\u5bf9\u5e94\u5230\u4efb\u4f55\u6a21\u578b\u5b57\u6bb5\u6216\u8005\u6a21\u578b\u5c5e\u6027\u65f6\u8c03\u7528\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u5c3d\u7ba1\u5b50\u7c7b\u53ef\u80fd\u4f1a\u81ea\u5b9a\u4e49\u8be5\u884c\u4e3a\u3002","title":".build_unknown_field(self, field_name, model_class)"},{"location":"api-guide/serializers_zh/#hyperlinkedmodelserializer","text":"HyperlinkedModelSerializer \u7c7b\u7c7b\u4f3c\u4e8e ModelSerializer \u7c7b\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4f7f\u7528\u8d85\u94fe\u63a5\u6765\u8868\u793a\u5173\u8054\u5173\u7cfb\u800c\u4e0d\u662f\u4e3b\u952e\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e8f\u5217\u5316\u5668\u5c06\u5305\u542b\u4e00\u4e2a url \u5b57\u6bb5\u800c\u4e0d\u662f\u4e3b\u952e\u5b57\u6bb5\u3002 url\u5b57\u6bb5\u5c06\u4f7f\u7528 HyperlinkedIdentityField \u5b57\u6bb5\u6765\u8868\u793a\uff0c\u6a21\u578b\u7684\u4efb\u4f55\u5173\u8054\u90fd\u5c06\u4f7f\u7528 HyperlinkedRelatedField \u5b57\u6bb5\u6765\u8868\u793a\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e3b\u952e\u6dfb\u52a0\u5230 fields \u9009\u9879\u4e2d\u6765\u663e\u5f0f\u7684\u5305\u542b\uff0c\u4f8b\u5982\uff1a class AccountSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Account fields = ('url', 'id', 'account_name', 'users', 'created')","title":"HyperlinkedModelSerializer"},{"location":"api-guide/serializers_zh/#url","text":"\u5f53\u5b9e\u4f8b\u5316\u4e00\u4e2a HyperlinkedModelSerializer \u65f6\uff0c\u4f60\u5fc5\u987b\u5728\u5e8f\u5217\u5316\u5668\u7684\u4e0a\u4e0b\u6587\u4e2d\u5305\u542b\u5f53\u524d\u7684 request \u503c\uff0c\u4f8b\u5982\uff1a serializer = AccountSerializer(queryset, context={'request': request}) \u8fd9\u6837\u505a\u5c06\u786e\u4fdd\u8d85\u94fe\u63a5\u53ef\u4ee5\u5305\u542b\u6070\u5f53\u7684\u4e3b\u673a\u540d\uff0c\u4e00\u8fb9\u751f\u6210\u5b8c\u5168\u9650\u5b9a\u7684URL\uff0c\u4f8b\u5982\uff1a http://api.example.com/accounts/1/ \u800c\u4e0d\u662f\u76f8\u5bf9\u7684URL\uff0c\u4f8b\u5982\uff1a /accounts/1/ \u5982\u679c\u4f60 \u771f\u7684 \u8981\u4f7f\u7528\u76f8\u5bf9URL\uff0c\u4f60\u5e94\u8be5\u660e\u786e\u7684\u5728\u5e8f\u5217\u5316\u5668\u4e0a\u4e0b\u6587\u4e2d\u4f20\u9012\u4e00\u4e2a {'request': None} \u3002","title":"\u7edd\u5bf9\u548c\u76f8\u5bf9URL"},{"location":"api-guide/serializers_zh/#_27","text":"\u9700\u8981\u4e00\u79cd\u786e\u5b9a\u54ea\u4e9b\u89c6\u56fe\u80fd\u5e94\u7528\u8d85\u94fe\u63a5\u5230\u6a21\u578b\u5b9e\u4f8b\u7684\u65b9\u6cd5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8d85\u94fe\u63a5\u671f\u671b\u5bf9\u5e94\u5230\u4e00\u4e2a\u6837\u5f0f\u80fd\u5339\u914d '{model_name}-detail' \u7684\u89c6\u56fe\uff0c\u5e76\u901a\u8fc7 pk \u5173\u952e\u5b57\u53c2\u6570\u67e5\u627e\u5b9e\u4f8b\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 extra_kwargs \u4e2d\u8bbe\u7f6e view_name \u548c lookup_field \u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u6765\u91cd\u5199URL\u5b57\u6bb5\u89c6\u56fe\u540d\u79f0\u548c\u67e5\u8be2\u5b57\u6bb5\u3002\u5982\u4e0b\u6240\u793a\uff1a class AccountSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Account fields = ('account_url', 'account_name', 'users', 'created') extra_kwargs = { 'url': {'view_name': 'accounts', 'lookup_field': 'account_name'}, 'users': {'lookup_field': 'username'} } \u6216\u8005\u4f60\u53ef\u4ee5\u663e\u5f0f\u7684\u8bbe\u7f6e\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5b57\u6bb5\u3002\u4f8b\u5982\uff1a class AccountSerializer(serializers.HyperlinkedModelSerializer): url = serializers.HyperlinkedIdentityField( view_name='accounts', lookup_field='slug' ) users = serializers.HyperlinkedRelatedField( view_name='user-detail', lookup_field='username', many=True, read_only=True ) class Meta: model = Account fields = ('url', 'account_name', 'users', 'created') \u63d0\u793a \uff1a\u6b63\u786e\u5339\u914d\u8d85\u94fe\u63a5\u8868\u793a\u548c\u4f60\u7684URL\u914d\u7f6e\u6709\u65f6\u53ef\u80fd\u4f1a\u6709\u70b9\u56f0\u96be\u3002\u6253\u5370\u4e00\u4e2a HyperlinkedModelSerializer \u5b9e\u4f8b\u7684 repr \u662f\u4e00\u4e2a\u7279\u522b\u6709\u7528\u7684\u65b9\u5f0f\u6765\u68c0\u67e5\u5173\u8054\u5173\u7cfb\u6620\u5c04\u7684\u90a3\u4e9b\u89c6\u56fe\u540d\u79f0\u548c\u67e5\u8be2\u5b57\u6bb5\u3002","title":"\u5982\u4f55\u786e\u5b9a\u8d85\u94fe\u63a5\u89c6\u56fe"},{"location":"api-guide/serializers_zh/#url_1","text":"URL\u5b57\u6bb5\u7684\u540d\u79f0\u9ed8\u8ba4\u4e3a'url'\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 URL_FIELD_NAME \u8bbe\u7f6e\u8fdb\u884c\u5168\u5c40\u6027\u4fee\u6539\u3002","title":"\u66f4\u6539URL\u5b57\u6bb5\u540d\u79f0"},{"location":"api-guide/serializers_zh/#listserializer","text":"ListSerializer \u7c7b\u80fd\u591f\u5e8f\u5217\u5316\u548c\u4e00\u6b21\u9a8c\u8bc1\u591a\u4e2a\u5bf9\u8c61\u3002\u4f60 \u901a\u5e38 \u4e0d\u9700\u8981\u76f4\u63a5\u4f7f\u7528 ListSerializer \uff0c\u800c\u662f\u5e94\u8be5\u5728\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u65f6\u7b80\u5355\u5730\u4f20\u9012\u4e00\u4e2a many=True \u53c2\u6570\u3002 \u5f53\u4e00\u4e2a\u5e8f\u5217\u5316\u5668\u5728\u5e26\u6709 many=True \u9009\u9879\u88ab\u5e8f\u5217\u5316\u65f6\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a ListSerializer \u5b9e\u4f8b\u3002\u8be5\u5e8f\u5217\u5316\u5668\u7c7b\u5c06\u6210\u4e3a ListSerializer \u7c7b\u7684\u5b50\u7c7b\u3002 \u4e0b\u9762\u7684\u53c2\u6570\u4e5f\u53ef\u4ee5\u4f20\u9012\u7ed9 ListSerializer \u5b57\u6bb5\u6216\u8005\u4e00\u4e2a\u5e26\u6709 many=True \u53c2\u6570\u7684\u5e8f\u5217\u5316\u5668\u3002","title":"ListSerializer"},{"location":"api-guide/serializers_zh/#allow_empty","text":"\u9ed8\u8ba4\u662f True \uff0c\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u60f3\u628a\u7a7a\u5217\u8868\u5f53\u4f5c\u6709\u6548\u8f93\u5165\u7684\u8bdd\u53ef\u4ee5\u628a\u5b83\u8bbe\u7f6e\u6210 False \u3002","title":"allow_empty"},{"location":"api-guide/serializers_zh/#listserializer_1","text":"\u4e0b\u9762\u662f\u4f60\u53ef\u80fd\u5e0c\u671b\u8981\u5b9a\u5236 ListSerializer \u884c\u4e3a\u7684 \u4e00\u4e9b \u60c5\u51b5\u3002\u4f8b\u5982\uff1a \u4f60\u5e0c\u671b\u63d0\u4f9b\u5217\u8868\u7684\u7279\u5b9a\u9a8c\u8bc1\uff0c\u4f8b\u5982\u68c0\u67e5\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u4e0e\u5217\u8868\u4e2d\u7684\u53e6\u5916\u4e00\u4e2a\u5143\u7d20\u51b2\u7a81\u3002 \u4f60\u8981\u81ea\u5b9a\u4e49\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\u6216\u66f4\u65b0\u884c\u4e3a\u3002 \u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u5f53\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5e8f\u5217\u5316\u5668\u7c7b\u7684 Meta \u7c7b\u4e0b\u9762\u7684 list_serializer_class \u9009\u9879\u6765\u4fee\u6539\u5f53 many=True \u65f6\u6b63\u5728\u4f7f\u7528\u7684\u7c7b\u3002 \u4f8b\u5982\uff1a class CustomListSerializer(serializers.ListSerializer): ... class CustomSerializer(serializers.Serializer): ... class Meta: list_serializer_class = CustomListSerializer","title":"\u81ea\u5b9a\u4e49ListSerializer\u884c\u4e3a"},{"location":"api-guide/serializers_zh/#_28","text":"\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa\u9ed8\u8ba4\u5b9e\u73b0\u662f\u7b80\u5355\u5730\u8c03\u7528\u5217\u8868\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u7684 .create() \u65b9\u6cd5\u3002\u5982\u679c\u8981\u81ea\u5b9a\u4e49\u5b9e\u73b0\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u81ea\u5b9a\u4e49\u5f53\u88ab\u4f20\u9012 many=True \u53c2\u6570\u65f6\u4f7f\u7528\u7684 ListSerializer \u7c7b\u4e2d\u7684 .create() \u65b9\u6cd5\u3002 \u4f8b\u5982\uff1a class BookListSerializer(serializers.ListSerializer): def create(self, validated_data): books = [Book(**item) for item in validated_data] return Book.objects.bulk_create(books) class BookSerializer(serializers.Serializer): ... class Meta: list_serializer_class = BookListSerializer","title":"\u81ea\u5b9a\u4e49\u591a\u4e2a\u5bf9\u8c61\u7684\u521b\u5efa"},{"location":"api-guide/serializers_zh/#_29","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c ListSerializer \u7c7b\u4e0d\u652f\u6301\u591a\u5bf9\u8c61\u7684\u66f4\u65b0\u3002\u8fd9\u662f\u56e0\u4e3a\u63d2\u5165\u548c\u5220\u9664\u7684\u9884\u671f\u884c\u4e3a\u662f\u4e0d\u660e\u786e\u7684\u3002 \u8981\u652f\u6301\u591a\u5bf9\u8c61\u66f4\u65b0\u7684\u8bdd\u4f60\u9700\u8981\u81ea\u5df1\u660e\u786e\u5730\u5b9e\u73b0\u3002\u7f16\u5199\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u7684\u4ee3\u7801\u65f6\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a \u5982\u4f55\u786e\u5b9a\u6570\u636e\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u5bf9\u5e94\u66f4\u65b0\u54ea\u4e2a\u5b9e\u4f8b\uff1f \u5982\u4f55\u5904\u7406\u63d2\u5165\uff1f\u5b83\u4eec\u662f\u65e0\u6548\u7684\uff1f\u8fd8\u662f\u521b\u5efa\u65b0\u5bf9\u8c61\uff1f \u79fb\u9664\u5e94\u8be5\u5982\u4f55\u5904\u7406\uff1f\u5b83\u4eec\u662f\u8981\u5220\u9664\u5bf9\u8c61\u8fd8\u662f\u5220\u9664\u5173\u8054\u5173\u7cfb\uff1f\u5b83\u4eec\u5e94\u8be5\u88ab\u5ffd\u7565\u8fd8\u662f\u63d0\u793a\u65e0\u6548\u64cd\u4f5c\uff1f \u6392\u5e8f\u5982\u4f55\u5904\u7406\uff1f\u6539\u53d8\u4e24\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u662f\u5426\u610f\u5473\u7740\u4efb\u4f55\u72b6\u6001\u6539\u53d8\u6216\u8005\u5e94\u8be5\u88ab\u5ffd\u89c6\uff1f \u4f60\u9700\u8981\u5411\u5b9e\u4f8b\u5e8f\u5217\u5316\u5668\u4e2d\u663e\u5f0f\u6dfb\u52a0\u4e00\u4e2a id \u5b57\u6bb5\u3002\u9ed8\u8ba4\u9690\u5f0f\u751f\u6210\u7684 id \u5b57\u6bb5\u662f read_only \u3002\u8fd9\u5c31\u5bfc\u81f4\u5b83\u5728\u66f4\u65b0\u65f6\u88ab\u5220\u9664\u3002\u4e00\u65e6\u4f60\u660e\u786e\u5730\u58f0\u660e\u5b83\uff0c\u5b83\u5c06\u5728\u5217\u8868\u5e8f\u5217\u5316\u5668\u7684 update \u65b9\u6cd5\u4e2d\u53ef\u7528\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f60\u53ef\u4ee5\u9009\u62e9\u7528\u6765\u505a\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u7684\u793a\u4f8b\uff1a class BookListSerializer(serializers.ListSerializer): def update(self, instance, validated_data): # Maps for id->instance and id->data item. book_mapping = {book.id: book for book in instance} data_mapping = {item['id']: item for item in validated_data} # Perform creations and updates. ret = [] for book_id, data in data_mapping.items(): book = book_mapping.get(book_id, None) if book is None: ret.append(self.child.create(data)) else: ret.append(self.child.update(book, data)) # Perform deletions. for book_id, book in book_mapping.items(): if book_id not in data_mapping: book.delete() return ret class BookSerializer(serializers.Serializer): # \u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e3b\u952e\u6765\u8bc6\u522b\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c # \u6240\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528\u53ef\u5199\u7684\u5b57\u6bb5\uff0c\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684\u53ea\u8bfb\u5b57\u6bb5\u3002 id = serializers.IntegerField() ... id = serializers.IntegerField(required=False) class Meta: list_serializer_class = BookListSerializer \u7c7b\u4f3c\u4e8eREST framework 2\u4e2d allow_add_remove \u7684\u81ea\u52a8\u652f\u6301\u591a\u4e2a\u5bf9\u8c61\u66f4\u65b0\u64cd\u4f5c\u53ef\u80fd\u4f1a\u57283.1\u7248\u672c\u7684\u7b2c\u4e09\u65b9\u5305\u4e2d\u63d0\u4f9b\u3002","title":"\u81ea\u5b9a\u4e49\u591a\u5bf9\u8c61\u7684\u66f4\u65b0"},{"location":"api-guide/serializers_zh/#listserializer_2","text":"\u5f53\u5e26\u6709 many=True \u53c2\u6570\u7684\u5e8f\u5217\u5316\u5668\u88ab\u5b9e\u4f8b\u5316\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u54ea\u4e9b\u53c2\u6570\u548c\u5173\u952e\u5b57\u53c2\u6570\u5e94\u8be5\u88ab\u4f20\u9012\u7ed9\u5b50\u7c7b Serializer \u548c\u7236\u7c7b ListSerializer \u7684 .__init__() \u65b9\u6cd5\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u5c06\u6240\u6709\u53c2\u6570\u90fd\u4f20\u9012\u7ed9\u4e24\u4e2a\u7c7b\uff0c\u51fa\u4e86 validators \u548c\u4efb\u4f55\u5173\u952e\u5b57\u53c2\u6570\u3002\u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u5047\u5b9a\u7528\u4e8e\u5b50\u5e8f\u5217\u5316\u5668\u7c7b\u3002 \u5076\u5c14\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u660e\u786e\u6307\u5b9a\u5f53\u88ab\u4f20\u9012 many=True \u53c2\u6570\u65f6\uff0c\u5b50\u7c7b\u548c\u7236\u7c7b\u5e94\u8be5\u5982\u4f55\u5b9e\u4f8b\u5316\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 many_init \u7c7b\u65b9\u6cd5\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002 @classmethod def many_init(cls, *args, **kwargs): # \u5b9e\u4f8b\u5316\u5b50\u5e8f\u5217\u5316\u5668\u7c7b\u3002 kwargs['child'] = cls() # \u5b9e\u4f8b\u5316\u5217\u8868\u5e8f\u5217\u5316\u7236\u7c7b return CustomListSerializer(*args, **kwargs)","title":"\u81ea\u5b9a\u4e49ListSerializer\u521d\u59cb\u5316"},{"location":"api-guide/serializers_zh/#baseserializer","text":"BaseSerializer \u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u7528\u6765\u66ff\u4ee3\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684\u6837\u5f0f\u3002 \u8be5\u7c7b\u5b9e\u73b0\u4e0e Serializer \u7c7b\u76f8\u540c\u7684\u57fa\u672cAPI\uff1a .data - \u8fd4\u56de\u4f20\u51fa\u7684\u539f\u59cb\u6570\u636e\u3002 .is_valid() - \u53cd\u5e8f\u5217\u5316\u5e76\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u3002 .validated_data - \u8fd4\u56de\u7ecf\u8fc7\u9a8c\u8bc1\u540e\u7684\u4f20\u5165\u6570\u636e\u3002 .errors - \u8fd4\u56de\u9a8c\u8bc1\u671f\u95f4\u7684\u9519\u8bef\u3002 .save() - \u5c06\u9a8c\u8bc1\u7684\u6570\u636e\u4fdd\u7559\u5230\u5bf9\u8c61\u5b9e\u4f8b\u4e2d\u3002 \u5b83\u8fd8\u6709\u53ef\u4ee5\u8986\u5199\u7684\u56db\u79cd\u65b9\u6cd5\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u4f60\u60f3\u8981\u5e8f\u5217\u5316\u7c7b\u652f\u6301\u7684\u529f\u80fd\uff1a .to_representation() - \u91cd\u5199\u6b64\u65b9\u6cd5\u6765\u6539\u53d8\u8bfb\u53d6\u64cd\u4f5c\u7684\u5e8f\u5217\u5316\u7ed3\u679c\u3002 .to_internal_value() - \u91cd\u5199\u6b64\u65b9\u6cd5\u6765\u6539\u53d8\u5199\u5165\u64cd\u4f5c\u7684\u5e8f\u5217\u5316\u7ed3\u679c\u3002 .create() \u548c .update() - \u91cd\u5199\u5176\u4e2d\u4e00\u4e2a\u6216\u4e24\u4e2a\u6765\u6539\u53d8\u4fdd\u5b58\u5b9e\u4f8b\u65f6\u7684\u52a8\u4f5c\u3002 \u56e0\u4e3a\u6b64\u7c7b\u63d0\u4f9b\u4e0e Serializer \u7c7b\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5c06\u5b83\u4e0e\u73b0\u6709\u7684\u57fa\u4e8e\u7c7b\u7684\u901a\u7528\u89c6\u56fe\u4e00\u8d77\u4f7f\u7528\uff0c\u5c31\u50cf\u4f7f\u7528\u5e38\u89c4 Serializer \u6216 ModelSerializer \u4e00\u6837\u3002 \u8fd9\u6837\u505a\u65f6\u4f60\u9700\u8981\u6ce8\u610f\u5230\u7684\u552f\u4e00\u533a\u522b\u662f BaseSerializer \u7c7b\u5e76\u4e0d\u4f1a\u5728\u53ef\u6d4f\u89c8\u7684API\u9875\u9762\u4e2d\u751f\u6210HTML\u8868\u5355\u3002","title":"BaseSerializer"},{"location":"api-guide/serializers_zh/#baseserializer-classes","text":"\u8981\u4f7f\u7528 BaseSerializer \u7c7b\u5b9e\u73b0\u53ea\u8bfb\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8986\u5199 .to_representation() \u65b9\u6cd5\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u7b80\u5355\u7684Django\u6a21\u578b\u7684\u793a\u4f8b\uff1a class HighScore(models.Model): created = models.DateTimeField(auto_now_add=True) player_name = models.CharField(max_length=10) score = models.IntegerField() \u521b\u5efa\u4e00\u4e2a\u53ea\u8bfb\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u6765\u5c06 HighScore \u5b9e\u4f8b\u8f6c\u6362\u4e3a\u539f\u59cb\u6570\u636e\u7c7b\u578b\u975e\u5e38\u7b80\u5355\u3002 class HighScoreSerializer(serializers.BaseSerializer): def to_representation(self, obj): return { 'score': obj.score, 'player_name': obj.player_name } \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u6765\u5e8f\u5217\u5316\u5355\u4e2a HighScore \u5b9e\u4f8b\uff1a @api_view(['GET']) def high_score(request, pk): instance = HighScore.objects.get(pk=pk) serializer = HighScoreSerializer(instance) return Response(serializer.data) \u6216\u8005\u4f7f\u7528\u5b83\u6765\u5e8f\u5217\u5316\u591a\u4e2a\u5b9e\u4f8b\uff1a @api_view(['GET']) def all_high_scores(request): queryset = HighScore.objects.order_by('-score') serializer = HighScoreSerializer(queryset, many=True) return Response(serializer.data)","title":"\u53ea\u8bfb\u7684 BaseSerializer classes"},{"location":"api-guide/serializers_zh/#read-write-baseserializer-classes","text":"\u8981\u521b\u5efa\u4e00\u4e2a\u8bfb\u5199\u90fd\u652f\u6301\u7684\u5e8f\u5217\u5316\u5668\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5b9e\u73b0 .to_internal_value() \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u7528\u6765\u6784\u9020\u5bf9\u8c61\u5b9e\u4f8b\u7684\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u503c\uff0c\u5982\u679c\u63d0\u4f9b\u7684\u6570\u636e\u683c\u5f0f\u4e0d\u6b63\u786e\uff0c\u5219\u53ef\u80fd\u5f15\u53d1 ValidationError \u3002 \u4e00\u65e6\u4f60\u5b9e\u73b0\u4e86 .to_internal_value() \u65b9\u6cd5\uff0c\u90a3\u4e9b\u57fa\u7840\u7684\u9a8c\u8bc1API\u90fd\u4f1a\u5728\u5e8f\u5217\u5316\u5bf9\u8c61\u4e0a\u53ef\u7528\u4e86\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 .is_valid() , .validated_data \u548c .errors \u65b9\u6cd5\u3002 \u5982\u679c\u4f60\u8fd8\u60f3\u652f\u6301 .save() \uff0c\u4f60\u8fd8\u9700\u8981\u5b9e\u73b0 .create() \u548c .update() \u65b9\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u3002 \u4e0b\u9762\u5c31\u662f\u5b8c\u6574\u7248\u7684\uff0c\u652f\u6301\u8bfb\u3001\u5199\u64cd\u4f5c\u7684 HighScoreSerializer \u5b8c\u6574\u793a\u4f8b\u4e86\u3002 class HighScoreSerializer(serializers.BaseSerializer): def to_internal_value(self, data): score = data.get('score') player_name = data.get('player_name') # \u6267\u884c\u6570\u636e\u6709\u6548\u6027\u6821\u9a8c if not score: raise ValidationError({ 'score': 'This field is required.' }) if not player_name: raise ValidationError({ 'player_name': 'This field is required.' }) if len(player_name) > 10: raise ValidationError({ 'player_name': 'May not be more than 10 characters.' }) # \u8fd4\u56de\u901a\u8fc7\u9a8c\u8bc1\u7684\u6570\u636e \u8fd9\u7528\u6765\u4f5c\u4e3a `.validated_data` \u5c5e\u6027\u7684\u503c\u3002 return { 'score': int(score), 'player_name': player_name } def to_representation(self, obj): return { 'score': obj.score, 'player_name': obj.player_name } def create(self, validated_data): return HighScore.objects.create(**validated_data)","title":"Read-write BaseSerializer classes"},{"location":"api-guide/serializers_zh/#_30","text":"BaseSerializer \u7c7b\u8fd8\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u65b0\u7684\u901a\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u57fa\u7c7b\u6765\u5904\u7406\u7279\u5b9a\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u6216\u8005\u7528\u6765\u6574\u5408\u5907\u7528\u5b58\u50a8\u540e\u7aef\u3002 \u4e0b\u9762\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2a\u53ef\u4ee5\u5c06\u4efb\u610f\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u57fa\u672c\u8868\u793a\u7684\u901a\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u7684\u793a\u4f8b\u3002 class ObjectSerializer(serializers.BaseSerializer): \"\"\" \u4e00\u4e2a\u53ea\u8bfb\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u5b83\u5c06\u4efb\u610f\u590d\u6742\u7684\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u8868\u793a\u3002 \"\"\" def to_representation(self, obj): for attribute_name in dir(obj): attribute = getattr(obj, attribute_name) if attribute_name('_'): # \u5ffd\u7565\u79c1\u6709\u5c5e\u6027 pass elif hasattr(attribute, '__call__'): # \u5ffd\u7565\u65b9\u6cd5\u548c\u5176\u4ed6\u53ef\u8c03\u7528\u5bf9\u8c61 pass elif isinstance(attribute, (str, int, bool, float, type(None))): # \u5185\u7f6e\u7684\u539f\u59cb\u6570\u636e\u7c7b\u578b\u4e0d\u505a\u4fee\u6539 output[attribute_name] = attribute elif isinstance(attribute, list): # \u9012\u5f52\u5904\u7406\u5217\u8868\u4e2d\u7684\u5bf9\u8c61 output[attribute_name] = [ self.to_representation(item) for item in attribute ] elif isinstance(attribute, dict): # \u9012\u5f52\u5904\u7406\u5b57\u5178\u4e2d\u7684\u5bf9\u8c61 output[attribute_name] = { str(key): self.to_representation(value) for key, value in attribute.items() } else: # \u5c06\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a output[attribute_name] = str(attribute)","title":"\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u57fa\u7c7b"},{"location":"api-guide/serializers_zh/#serializer","text":"","title":"serializer\u8fdb\u9636\u7528\u6cd5"},{"location":"api-guide/serializers_zh/#_31","text":"\u5982\u679c\u4f60\u9700\u8981\u66f4\u6539\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u7684\u5e8f\u5217\u5316\uff0c\u53cd\u5e8f\u5217\u5316\u6216\u9a8c\u8bc1\u7684\u884c\u4e3a\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 .to_representation() \u6216 .to_internal_value() \u65b9\u6cd5\u6765\u5b8c\u6210\u3002 \u6211\u4eec\u53ef\u80fd\u8fd9\u4e48\u505a\u7684\u4e00\u4e9b\u539f\u56e0\u5305\u62ec...... \u4e3a\u65b0\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u57fa\u7c7b\u6dfb\u52a0\u65b0\u884c\u4e3a\u3002 \u5bf9\u73b0\u6709\u7684\u7c7b\u7a0d\u4f5c\u4fee\u6539\u3002 \u63d0\u9ad8\u9891\u7e41\u8bbf\u95ee\u8fd4\u56de\u5927\u91cf\u6570\u636e\u7684API\u7aef\u70b9\u7684\u5e8f\u5217\u5316\u6027\u80fd\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u7684\u7b7e\u540d\u5982\u4e0b\uff1a","title":"\u91cd\u5199\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u884c\u4e3a"},{"location":"api-guide/serializers_zh/#to_representationself-obj","text":"\u63a5\u6536\u4e00\u4e2a\u9700\u8981\u88ab\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\u5316\u4e4b\u540e\u7684\u8868\u793a\u3002\u901a\u5e38\uff0c\u8fd9\u610f\u5473\u7740\u8fd4\u56de\u5185\u7f6ePython\u6570\u636e\u7c7b\u578b\u7684\u7ed3\u6784\u3002\u53ef\u4ee5\u5904\u7406\u7684\u786e\u5207\u7c7b\u578b\u53d6\u51b3\u4e8e\u4f60\u4e3aAPI\u914d\u7f6e\u7684\u6e32\u67d3\u7c7b\u3002","title":".to_representation(self, obj)"},{"location":"api-guide/serializers_zh/#to_internal_valueself-data","text":"\u5c06\u672a\u7ecf\u9a8c\u8bc1\u7684\u4f20\u5165\u6570\u636e\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u53ef\u4ee5\u901a\u8fc7 serializer.validated_data \u6765\u8bbf\u95ee\u7684\u5df2\u9a8c\u8bc1\u7684\u6570\u636e\u3002\u5982\u679c\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u4e0a\u8c03\u7528 .save() \uff0c\u5219\u8be5\u8fd4\u56de\u503c\u4e5f\u5c06\u4f20\u9012\u7ed9 .create() \u6216 .update() \u65b9\u6cd5\u3002 \u5982\u679c\u4efb\u4f55\u9a8c\u8bc1\u6761\u4ef6\u5931\u8d25\uff0c\u90a3\u4e48\u8be5\u65b9\u6cd5\u4f1a\u5f15\u53d1\u4e00\u4e2a serializers.ValidationError(errors) \u3002\u901a\u5e38\uff0c\u6b64\u5904\u7684 errors \u53c2\u6570\u5c06\u662f\u9519\u8bef\u6d88\u606f\u5b57\u5178\u7684\u4e00\u4e2a\u6620\u5c04\u5b57\u6bb5\u3002 \u4f20\u9012\u7ed9\u6b64\u65b9\u6cd5\u7684 data \u53c2\u6570\u901a\u5e38\u662f request.data \u7684\u503c\uff0c\u56e0\u6b64\u5b83\u63d0\u4f9b\u7684\u6570\u636e\u7c7b\u578b\u5c06\u53d6\u51b3\u4e8e\u4f60\u4e3aAPI\u914d\u7f6e\u7684\u89e3\u6790\u5668\u7c7b\u3002","title":".to_internal_value(self, data)"},{"location":"api-guide/serializers_zh/#serializer_1","text":"\u4e0eDjango\u8868\u5355\u7c7b\u4f3c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u6269\u5c55\u548c\u91cd\u7528\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u8fd9\u5141\u8bb8\u4f60\u5728\u7236\u7c7b\u4e0a\u58f0\u660e\u4e00\u7ec4\u516c\u5171\u5b57\u6bb5\u6216\u65b9\u6cd5\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u8bb8\u591a\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c class MyBaseSerializer(Serializer): my_field = serializers.CharField() def validate_my_field(self): ... class MySerializer(MyBaseSerializer): ... \u50cfDjango\u7684 Model \u548c ModelForm \u7c7b\u4e00\u6837\uff0c\u5e8f\u5217\u5316\u5668\u4e0a\u7684\u5185\u90e8 Meta \u7c7b\u4e0d\u4f1a\u9690\u5f0f\u5730\u7ee7\u627f\u5b83\u7684\u7236\u5143\u7d20\u5185\u90e8\u7684 Meta \u7c7b\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4ece\u7236\u7c7b\u7ee7\u627f Meta \u7c7b\uff0c\u5219\u5fc5\u987b\u660e\u786e\u5730\u8fd9\u6837\u505a\u3002\u6bd4\u5982\uff1a class AccountSerializer(MyBaseSerializer): class Meta(MyBaseSerializer.Meta): model = Account \u901a\u5e38\u6211\u4eec\u5efa\u8bae \u4e0d\u8981 \u5728\u5185\u90e8Meta\u7c7b\u4e0a\u4f7f\u7528\u7ee7\u627f\uff0c\u800c\u662f\u660e\u786e\u58f0\u660e\u6240\u6709\u9009\u9879\u3002 \u6b64\u5916\uff0c\u4ee5\u4e0b\u8b66\u544a\u9002\u7528\u4e8e\u5e8f\u5217\u5316\u7a0b\u5e8f\u7ee7\u627f\uff1a \u6b63\u5e38\u7684Python\u540d\u79f0\u89e3\u6790\u89c4\u5219\u9002\u7528\u3002\u5982\u679c\u4f60\u6709\u591a\u4e2a\u58f0\u660e\u4e86 Meta \u7c7b\u7684\u57fa\u7c7b\uff0c\u5219\u53ea\u4f7f\u7528\u7b2c\u4e00\u4e2a\u7c7b\u3002\u8fd9\u610f\u5473\u8981\u4e48\u662f\u5b69\u5b50\u7684 Meta \uff08\u5982\u679c\u5b58\u5728\uff09\uff0c\u5426\u5219\u5c31\u662f\u7b2c\u4e00\u4e2a\u7236\u6bcd\u7684 Meta \u7b49\u3002 \u901a\u8fc7\u5728\u5b50\u7c7b\u4e0a\u5c06\u540d\u79f0\u8bbe\u7f6e\u4e3a None \uff0c\u53ef\u4ee5\u58f0\u660e\u6027\u5730\u5220\u9664\u4ece\u7236\u7c7b\u7ee7\u627f\u7684 Field \u3002 class MyBaseSerializer(ModelSerializer): my_field = serializers.CharField() class MySerializer(MyBaseSerializer): my_field = None \u4f46\u662f\uff0c\u4f60\u53ea\u80fd\u4f7f\u7528\u6b64\u6280\u672f\u53bb\u6389\u7236\u7c7b\u58f0\u660e\u6027\u5b9a\u4e49\u7684\u5b57\u6bb5\uff1b\u5b83\u4e0d\u4f1a\u963b\u6b62 ModelSerializer \u751f\u6210\u9ed8\u8ba4\u5b57\u6bb5\u3002\u60f3\u8981\u4ece\u9ed8\u8ba4\u5b57\u6bb5\u4e2d\u9009\u62e9\u53bb\u6389\u67d0\u4e2a\u5b57\u6bb5\uff0c\u8bf7\u53c2\u9605 \u6307\u5b9a\u8981\u5305\u62ec\u7684\u5b57\u6bb5 \u3002","title":"Serializer \u7ee7\u627f"},{"location":"api-guide/serializers_zh/#dynamically-modifying-fields","text":"Once a serializer has been initialized, the dictionary of fields that are set on the serializer may be accessed using the .fields attribute. Accessing and modifying this attribute allows you to dynamically modify the serializer. Modifying the fields argument directly allows you to do interesting things such as changing the arguments on serializer fields at runtime, rather than at the point of declaring the serializer.","title":"Dynamically modifying fields"},{"location":"api-guide/serializers_zh/#example","text":"For example, if you wanted to be able to set which fields should be used by a serializer at the point of initializing it, you could create a serializer class like so: class DynamicFieldsModelSerializer(serializers.ModelSerializer): \"\"\" A ModelSerializer that takes an additional `fields` argument that controls which fields should be displayed. \"\"\" def __init__(self, *args, **kwargs): # Don't pass the 'fields' arg up to the superclass fields = kwargs.pop('fields', None) # Instantiate the superclass normally super(DynamicFieldsModelSerializer, self).__init__(*args, **kwargs) if fields is not None: # Drop any fields that are not specified in the `fields` argument. allowed = set(fields) existing = set(self.fields.keys()) for field_name in existing - allowed: self.fields.pop(field_name) This would then allow you to do the following: >>> class UserSerializer(DynamicFieldsModelSerializer): >>> class Meta: >>> model = User >>> fields = ('id', 'username', 'email') >>> >>> print UserSerializer(user) {'id': 2, 'username': 'jonwatts', 'email': 'jon@example.com'} >>> >>> print UserSerializer(user, fields=('id', 'email')) {'id': 2, 'email': 'jon@example.com'}","title":"Example"},{"location":"api-guide/serializers_zh/#customizing-the-default-fields","text":"REST framework 2 provided an API to allow developers to override how a ModelSerializer class would automatically generate the default set of fields. This API included the .get_field() , .get_pk_field() and other methods. Because the serializers have been fundamentally redesigned with 3.0 this API no longer exists. You can still modify the fields that get created but you'll need to refer to the source code, and be aware that if the changes you make are against private bits of API then they may be subject to change.","title":"Customizing the default fields"},{"location":"api-guide/serializers_zh/#third-party-packages","text":"The following third party packages are also available.","title":"Third party packages"},{"location":"api-guide/serializers_zh/#django-rest-marshmallow","text":"The django-rest-marshmallow package provides an alternative implementation for serializers, using the python marshmallow library. It exposes the same API as the REST framework serializers, and can be used as a drop-in replacement in some use-cases.","title":"Django REST marshmallow"},{"location":"api-guide/serializers_zh/#serpy","text":"The serpy package is an alternative implementation for serializers that is built for speed. Serpy serializes complex datatypes to simple native types. The native types can be easily converted to JSON or any other format needed.","title":"Serpy"},{"location":"api-guide/serializers_zh/#mongoenginemodelserializer","text":"The django-rest-framework-mongoengine package provides a MongoEngineModelSerializer serializer class that supports using MongoDB as the storage layer for Django REST framework.","title":"MongoengineModelSerializer"},{"location":"api-guide/serializers_zh/#geofeaturemodelserializer","text":"The django-rest-framework-gis package provides a GeoFeatureModelSerializer serializer class that supports GeoJSON both for read and write operations.","title":"GeoFeatureModelSerializer"},{"location":"api-guide/serializers_zh/#hstoreserializer","text":"The django-rest-framework-hstore package provides an HStoreSerializer to support django-hstore DictionaryField model field and its schema-mode feature.","title":"HStoreSerializer"},{"location":"api-guide/serializers_zh/#dynamic-rest","text":"The dynamic-rest package extends the ModelSerializer and ModelViewSet interfaces, adding API query parameters for filtering, sorting, and including / excluding all fields and relationships defined by your serializers.","title":"Dynamic REST"},{"location":"api-guide/serializers_zh/#dynamic-fields-mixin","text":"The drf-dynamic-fields package provides a mixin to dynamically limit the fields per serializer to a subset specified by an URL parameter.","title":"Dynamic Fields Mixin"},{"location":"api-guide/serializers_zh/#drf-flexfields","text":"The drf-flex-fields package extends the ModelSerializer and ModelViewSet to provide commonly used functionality for dynamically setting fields and expanding primitive fields to nested models, both from URL parameters and your serializer class definitions.","title":"DRF FlexFields"},{"location":"api-guide/serializers_zh/#serializer-extensions","text":"The django-rest-framework-serializer-extensions package provides a collection of tools to DRY up your serializers, by allowing fields to be defined on a per-view/request basis. Fields can be whitelisted, blacklisted and child serializers can be optionally expanded.","title":"Serializer Extensions"},{"location":"api-guide/serializers_zh/#html-json-forms","text":"The html-json-forms package provides an algorithm and serializer for processing <form> submissions per the (inactive) HTML JSON Form specification . The serializer facilitates processing of arbitrarily nested JSON structures within HTML. For example, <input name=\"items[0][id]\" value=\"5\"> will be interpreted as {\"items\": [{\"id\": \"5\"}]} .","title":"HTML JSON Forms"},{"location":"api-guide/serializers_zh/#drf-base64","text":"DRF-Base64 provides a set of field and model serializers that handles the upload of base64-encoded files.","title":"DRF-Base64"},{"location":"api-guide/serializers_zh/#queryfields","text":"djangorestframework-queryfields allows API clients to specify which fields will be sent in the response via inclusion/exclusion query parameters.","title":"QueryFields"},{"location":"api-guide/serializers_zh/#drf-writable-nested","text":"The drf-writable-nested package provides writable nested model serializer which allows to create/update models with nested related data.","title":"DRF Writable Nested"},{"location":"api-guide/settings/","text":"Settings Namespaces are one honking great idea - let's do more of those! \u2014 The Zen of Python Configuration for REST framework is all namespaced inside a single Django setting, named REST_FRAMEWORK . For example your project's settings.py file might include something like this: REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', ], 'DEFAULT_PARSER_CLASSES': [ 'rest_framework.parsers.JSONParser', ] } Accessing settings If you need to access the values of REST framework's API settings in your project, you should use the api_settings object. For example. from rest_framework.settings import api_settings print(api_settings.DEFAULT_AUTHENTICATION_CLASSES) The api_settings object will check for any user-defined settings, and otherwise fall back to the default values. Any setting that uses string import paths to refer to a class will automatically import and return the referenced class, instead of the string literal. API Reference API policy settings The following settings control the basic API policies, and are applied to every APIView class-based view, or @api_view function based view. DEFAULT_RENDERER_CLASSES A list or tuple of renderer classes, that determines the default set of renderers that may be used when returning a Response object. Default: [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer', ] DEFAULT_PARSER_CLASSES A list or tuple of parser classes, that determines the default set of parsers used when accessing the request.data property. Default: [ 'rest_framework.parsers.JSONParser', 'rest_framework.parsers.FormParser', 'rest_framework.parsers.MultiPartParser' ] DEFAULT_AUTHENTICATION_CLASSES A list or tuple of authentication classes, that determines the default set of authenticators used when accessing the request.user or request.auth properties. Default: [ 'rest_framework.authentication.SessionAuthentication', 'rest_framework.authentication.BasicAuthentication' ] DEFAULT_PERMISSION_CLASSES A list or tuple of permission classes, that determines the default set of permissions checked at the start of a view. Permission must be granted by every class in the list. Default: [ 'rest_framework.permissions.AllowAny', ] DEFAULT_THROTTLE_CLASSES A list or tuple of throttle classes, that determines the default set of throttles checked at the start of a view. Default: [] DEFAULT_CONTENT_NEGOTIATION_CLASS A content negotiation class, that determines how a renderer is selected for the response, given an incoming request. Default: 'rest_framework.negotiation.DefaultContentNegotiation' DEFAULT_SCHEMA_CLASS A view inspector class that will be used for schema generation. Default: 'rest_framework.schemas.openapi.AutoSchema' Generic view settings The following settings control the behavior of the generic class-based views. DEFAULT_FILTER_BACKENDS A list of filter backend classes that should be used for generic filtering. If set to None then generic filtering is disabled. DEFAULT_PAGINATION_CLASS The default class to use for queryset pagination. If set to None , pagination is disabled by default. See the pagination documentation for further guidance on setting and modifying the pagination style. Default: None PAGE_SIZE The default page size to use for pagination. If set to None , pagination is disabled by default. Default: None SEARCH_PARAM The name of a query parameter, which can be used to specify the search term used by SearchFilter . Default: search ORDERING_PARAM The name of a query parameter, which can be used to specify the ordering of results returned by OrderingFilter . Default: ordering Versioning settings DEFAULT_VERSION The value that should be used for request.version when no versioning information is present. Default: None ALLOWED_VERSIONS If set, this value will restrict the set of versions that may be returned by the versioning scheme, and will raise an error if the provided version if not in this set. Default: None VERSION_PARAM The string that should used for any versioning parameters, such as in the media type or URL query parameters. Default: 'version' Authentication settings The following settings control the behavior of unauthenticated requests. UNAUTHENTICATED_USER The class that should be used to initialize request.user for unauthenticated requests. (If removing authentication entirely, e.g. by removing django.contrib.auth from INSTALLED_APPS , set UNAUTHENTICATED_USER to None .) Default: django.contrib.auth.models.AnonymousUser UNAUTHENTICATED_TOKEN The class that should be used to initialize request.auth for unauthenticated requests. Default: None Test settings The following settings control the behavior of APIRequestFactory and APIClient TEST_REQUEST_DEFAULT_FORMAT The default format that should be used when making test requests. This should match up with the format of one of the renderer classes in the TEST_REQUEST_RENDERER_CLASSES setting. Default: 'multipart' TEST_REQUEST_RENDERER_CLASSES The renderer classes that are supported when building test requests. The format of any of these renderer classes may be used when constructing a test request, for example: client.post('/users', {'username': 'jamie'}, format='json') Default: [ 'rest_framework.renderers.MultiPartRenderer', 'rest_framework.renderers.JSONRenderer' ] Schema generation controls SCHEMA_COERCE_PATH_PK If set, this maps the 'pk' identifier in the URL conf onto the actual field name when generating a schema path parameter. Typically this will be 'id' . This gives a more suitable representation as \"primary key\" is an implementation detail, whereas \"identifier\" is a more general concept. Default: True SCHEMA_COERCE_METHOD_NAMES If set, this is used to map internal viewset method names onto external action names used in the schema generation. This allows us to generate names that are more suitable for an external representation than those that are used internally in the codebase. Default: {'retrieve': 'read', 'destroy': 'delete'} Content type controls URL_FORMAT_OVERRIDE The name of a URL parameter that may be used to override the default content negotiation Accept header behavior, by using a format=\u2026 query parameter in the request URL. For example: http://example.com/organizations/?format=csv If the value of this setting is None then URL format overrides will be disabled. Default: 'format' FORMAT_SUFFIX_KWARG The name of a parameter in the URL conf that may be used to provide a format suffix. This setting is applied when using format_suffix_patterns to include suffixed URL patterns. For example: http://example.com/organizations.csv/ Default: 'format' Date and time formatting The following settings are used to control how date and time representations may be parsed and rendered. DATETIME_FORMAT A format string that should be used by default for rendering the output of DateTimeField serializer fields. If None , then DateTimeField serializer fields will return Python datetime objects, and the datetime encoding will be determined by the renderer. May be any of None , 'iso-8601' or a Python strftime format string. Default: 'iso-8601' DATETIME_INPUT_FORMATS A list of format strings that should be used by default for parsing inputs to DateTimeField serializer fields. May be a list including the string 'iso-8601' or Python strftime format strings. Default: ['iso-8601'] DATE_FORMAT A format string that should be used by default for rendering the output of DateField serializer fields. If None , then DateField serializer fields will return Python date objects, and the date encoding will be determined by the renderer. May be any of None , 'iso-8601' or a Python strftime format string. Default: 'iso-8601' DATE_INPUT_FORMATS A list of format strings that should be used by default for parsing inputs to DateField serializer fields. May be a list including the string 'iso-8601' or Python strftime format strings. Default: ['iso-8601'] TIME_FORMAT A format string that should be used by default for rendering the output of TimeField serializer fields. If None , then TimeField serializer fields will return Python time objects, and the time encoding will be determined by the renderer. May be any of None , 'iso-8601' or a Python strftime format string. Default: 'iso-8601' TIME_INPUT_FORMATS A list of format strings that should be used by default for parsing inputs to TimeField serializer fields. May be a list including the string 'iso-8601' or Python strftime format strings. Default: ['iso-8601'] Encodings UNICODE_JSON When set to True , JSON responses will allow unicode characters in responses. For example: {\"unicode black star\":\"\u2605\"} When set to False , JSON responses will escape non-ascii characters, like so: {\"unicode black star\":\"\\u2605\"} Both styles conform to RFC 4627 , and are syntactically valid JSON. The unicode style is preferred as being more user-friendly when inspecting API responses. Default: True COMPACT_JSON When set to True , JSON responses will return compact representations, with no spacing after ':' and ',' characters. For example: {\"is_admin\":false,\"email\":\"jane@example\"} When set to False , JSON responses will return slightly more verbose representations, like so: {\"is_admin\": false, \"email\": \"jane@example\"} The default style is to return minified responses, in line with Heroku's API design guidelines . Default: True STRICT_JSON When set to True , JSON rendering and parsing will only observe syntactically valid JSON, raising an exception for the extended float values ( nan , inf , -inf ) accepted by Python's json module. This is the recommended setting, as these values are not generally supported. e.g., neither Javascript's JSON.Parse nor PostgreSQL's JSON data type accept these values. When set to False , JSON rendering and parsing will be permissive. However, these values are still invalid and will need to be specially handled in your code. Default: True COERCE_DECIMAL_TO_STRING When returning decimal objects in API representations that do not support a native decimal type, it is normally best to return the value as a string. This avoids the loss of precision that occurs with binary floating point implementations. When set to True , the serializer DecimalField class will return strings instead of Decimal objects. When set to False , serializers will return Decimal objects, which the default JSON encoder will return as floats. Default: True View names and descriptions The following settings are used to generate the view names and descriptions, as used in responses to OPTIONS requests, and as used in the browsable API. VIEW_NAME_FUNCTION A string representing the function that should be used when generating view names. This should be a function with the following signature: view_name(self) self : The view instance. Typically the name function would inspect the name of the class when generating a descriptive name, by accessing self.__class__.__name__ . If the view instance inherits ViewSet , it may have been initialized with several optional arguments: name : A name explicitly provided to a view in the viewset. Typically, this value should be used as-is when provided. suffix : Text used when differentiating individual views in a viewset. This argument is mutually exclusive to name . detail : Boolean that differentiates an individual view in a viewset as either being a 'list' or 'detail' view. Default: 'rest_framework.views.get_view_name' VIEW_DESCRIPTION_FUNCTION A string representing the function that should be used when generating view descriptions. This setting can be changed to support markup styles other than the default markdown. For example, you can use it to support rst markup in your view docstrings being output in the browsable API. This should be a function with the following signature: view_description(self, html=False) self : The view instance. Typically the description function would inspect the docstring of the class when generating a description, by accessing self.__class__.__doc__ html : A boolean indicating if HTML output is required. True when used in the browsable API, and False when used in generating OPTIONS responses. If the view instance inherits ViewSet , it may have been initialized with several optional arguments: description : A description explicitly provided to the view in the viewset. Typically, this is set by extra viewset action s, and should be used as-is. Default: 'rest_framework.views.get_view_description' HTML Select Field cutoffs Global settings for select field cutoffs for rendering relational fields in the browsable API. HTML_SELECT_CUTOFF Global setting for the html_cutoff value. Must be an integer. Default: 1000 HTML_SELECT_CUTOFF_TEXT A string representing a global setting for html_cutoff_text . Default: \"More than {count} items...\" Miscellaneous settings EXCEPTION_HANDLER A string representing the function that should be used when returning a response for any given exception. If the function returns None , a 500 error will be raised. This setting can be changed to support error responses other than the default {\"detail\": \"Failure...\"} responses. For example, you can use it to provide API responses like {\"errors\": [{\"message\": \"Failure...\", \"code\": \"\"} ...]} . This should be a function with the following signature: exception_handler(exc, context) exc : The exception. Default: 'rest_framework.views.exception_handler' NON_FIELD_ERRORS_KEY A string representing the key that should be used for serializer errors that do not refer to a specific field, but are instead general errors. Default: 'non_field_errors' URL_FIELD_NAME A string representing the key that should be used for the URL fields generated by HyperlinkedModelSerializer . Default: 'url' NUM_PROXIES An integer of 0 or more, that may be used to specify the number of application proxies that the API runs behind. This allows throttling to more accurately identify client IP addresses. If set to None then less strict IP matching will be used by the throttle classes. Default: None","title":"Settings"},{"location":"api-guide/settings/#settings","text":"Namespaces are one honking great idea - let's do more of those! \u2014 The Zen of Python Configuration for REST framework is all namespaced inside a single Django setting, named REST_FRAMEWORK . For example your project's settings.py file might include something like this: REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', ], 'DEFAULT_PARSER_CLASSES': [ 'rest_framework.parsers.JSONParser', ] }","title":"Settings"},{"location":"api-guide/settings/#accessing-settings","text":"If you need to access the values of REST framework's API settings in your project, you should use the api_settings object. For example. from rest_framework.settings import api_settings print(api_settings.DEFAULT_AUTHENTICATION_CLASSES) The api_settings object will check for any user-defined settings, and otherwise fall back to the default values. Any setting that uses string import paths to refer to a class will automatically import and return the referenced class, instead of the string literal.","title":"Accessing settings"},{"location":"api-guide/settings/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/settings/#api-policy-settings","text":"The following settings control the basic API policies, and are applied to every APIView class-based view, or @api_view function based view.","title":"API policy settings"},{"location":"api-guide/settings/#default_renderer_classes","text":"A list or tuple of renderer classes, that determines the default set of renderers that may be used when returning a Response object. Default: [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer', ]","title":"DEFAULT_RENDERER_CLASSES"},{"location":"api-guide/settings/#default_parser_classes","text":"A list or tuple of parser classes, that determines the default set of parsers used when accessing the request.data property. Default: [ 'rest_framework.parsers.JSONParser', 'rest_framework.parsers.FormParser', 'rest_framework.parsers.MultiPartParser' ]","title":"DEFAULT_PARSER_CLASSES"},{"location":"api-guide/settings/#default_authentication_classes","text":"A list or tuple of authentication classes, that determines the default set of authenticators used when accessing the request.user or request.auth properties. Default: [ 'rest_framework.authentication.SessionAuthentication', 'rest_framework.authentication.BasicAuthentication' ]","title":"DEFAULT_AUTHENTICATION_CLASSES"},{"location":"api-guide/settings/#default_permission_classes","text":"A list or tuple of permission classes, that determines the default set of permissions checked at the start of a view. Permission must be granted by every class in the list. Default: [ 'rest_framework.permissions.AllowAny', ]","title":"DEFAULT_PERMISSION_CLASSES"},{"location":"api-guide/settings/#default_throttle_classes","text":"A list or tuple of throttle classes, that determines the default set of throttles checked at the start of a view. Default: []","title":"DEFAULT_THROTTLE_CLASSES"},{"location":"api-guide/settings/#default_content_negotiation_class","text":"A content negotiation class, that determines how a renderer is selected for the response, given an incoming request. Default: 'rest_framework.negotiation.DefaultContentNegotiation'","title":"DEFAULT_CONTENT_NEGOTIATION_CLASS"},{"location":"api-guide/settings/#default_schema_class","text":"A view inspector class that will be used for schema generation. Default: 'rest_framework.schemas.openapi.AutoSchema'","title":"DEFAULT_SCHEMA_CLASS"},{"location":"api-guide/settings/#generic-view-settings","text":"The following settings control the behavior of the generic class-based views.","title":"Generic view settings"},{"location":"api-guide/settings/#default_filter_backends","text":"A list of filter backend classes that should be used for generic filtering. If set to None then generic filtering is disabled.","title":"DEFAULT_FILTER_BACKENDS"},{"location":"api-guide/settings/#default_pagination_class","text":"The default class to use for queryset pagination. If set to None , pagination is disabled by default. See the pagination documentation for further guidance on setting and modifying the pagination style. Default: None","title":"DEFAULT_PAGINATION_CLASS"},{"location":"api-guide/settings/#page_size","text":"The default page size to use for pagination. If set to None , pagination is disabled by default. Default: None","title":"PAGE_SIZE"},{"location":"api-guide/settings/#search_param","text":"The name of a query parameter, which can be used to specify the search term used by SearchFilter . Default: search","title":"SEARCH_PARAM"},{"location":"api-guide/settings/#ordering_param","text":"The name of a query parameter, which can be used to specify the ordering of results returned by OrderingFilter . Default: ordering","title":"ORDERING_PARAM"},{"location":"api-guide/settings/#versioning-settings","text":"","title":"Versioning settings"},{"location":"api-guide/settings/#default_version","text":"The value that should be used for request.version when no versioning information is present. Default: None","title":"DEFAULT_VERSION"},{"location":"api-guide/settings/#allowed_versions","text":"If set, this value will restrict the set of versions that may be returned by the versioning scheme, and will raise an error if the provided version if not in this set. Default: None","title":"ALLOWED_VERSIONS"},{"location":"api-guide/settings/#version_param","text":"The string that should used for any versioning parameters, such as in the media type or URL query parameters. Default: 'version'","title":"VERSION_PARAM"},{"location":"api-guide/settings/#authentication-settings","text":"The following settings control the behavior of unauthenticated requests.","title":"Authentication settings"},{"location":"api-guide/settings/#unauthenticated_user","text":"The class that should be used to initialize request.user for unauthenticated requests. (If removing authentication entirely, e.g. by removing django.contrib.auth from INSTALLED_APPS , set UNAUTHENTICATED_USER to None .) Default: django.contrib.auth.models.AnonymousUser","title":"UNAUTHENTICATED_USER"},{"location":"api-guide/settings/#unauthenticated_token","text":"The class that should be used to initialize request.auth for unauthenticated requests. Default: None","title":"UNAUTHENTICATED_TOKEN"},{"location":"api-guide/settings/#test-settings","text":"The following settings control the behavior of APIRequestFactory and APIClient","title":"Test settings"},{"location":"api-guide/settings/#test_request_default_format","text":"The default format that should be used when making test requests. This should match up with the format of one of the renderer classes in the TEST_REQUEST_RENDERER_CLASSES setting. Default: 'multipart'","title":"TEST_REQUEST_DEFAULT_FORMAT"},{"location":"api-guide/settings/#test_request_renderer_classes","text":"The renderer classes that are supported when building test requests. The format of any of these renderer classes may be used when constructing a test request, for example: client.post('/users', {'username': 'jamie'}, format='json') Default: [ 'rest_framework.renderers.MultiPartRenderer', 'rest_framework.renderers.JSONRenderer' ]","title":"TEST_REQUEST_RENDERER_CLASSES"},{"location":"api-guide/settings/#schema-generation-controls","text":"","title":"Schema generation controls"},{"location":"api-guide/settings/#schema_coerce_path_pk","text":"If set, this maps the 'pk' identifier in the URL conf onto the actual field name when generating a schema path parameter. Typically this will be 'id' . This gives a more suitable representation as \"primary key\" is an implementation detail, whereas \"identifier\" is a more general concept. Default: True","title":"SCHEMA_COERCE_PATH_PK"},{"location":"api-guide/settings/#schema_coerce_method_names","text":"If set, this is used to map internal viewset method names onto external action names used in the schema generation. This allows us to generate names that are more suitable for an external representation than those that are used internally in the codebase. Default: {'retrieve': 'read', 'destroy': 'delete'}","title":"SCHEMA_COERCE_METHOD_NAMES"},{"location":"api-guide/settings/#content-type-controls","text":"","title":"Content type controls"},{"location":"api-guide/settings/#url_format_override","text":"The name of a URL parameter that may be used to override the default content negotiation Accept header behavior, by using a format=\u2026 query parameter in the request URL. For example: http://example.com/organizations/?format=csv If the value of this setting is None then URL format overrides will be disabled. Default: 'format'","title":"URL_FORMAT_OVERRIDE"},{"location":"api-guide/settings/#format_suffix_kwarg","text":"The name of a parameter in the URL conf that may be used to provide a format suffix. This setting is applied when using format_suffix_patterns to include suffixed URL patterns. For example: http://example.com/organizations.csv/ Default: 'format'","title":"FORMAT_SUFFIX_KWARG"},{"location":"api-guide/settings/#date-and-time-formatting","text":"The following settings are used to control how date and time representations may be parsed and rendered.","title":"Date and time formatting"},{"location":"api-guide/settings/#datetime_format","text":"A format string that should be used by default for rendering the output of DateTimeField serializer fields. If None , then DateTimeField serializer fields will return Python datetime objects, and the datetime encoding will be determined by the renderer. May be any of None , 'iso-8601' or a Python strftime format string. Default: 'iso-8601'","title":"DATETIME_FORMAT"},{"location":"api-guide/settings/#datetime_input_formats","text":"A list of format strings that should be used by default for parsing inputs to DateTimeField serializer fields. May be a list including the string 'iso-8601' or Python strftime format strings. Default: ['iso-8601']","title":"DATETIME_INPUT_FORMATS"},{"location":"api-guide/settings/#date_format","text":"A format string that should be used by default for rendering the output of DateField serializer fields. If None , then DateField serializer fields will return Python date objects, and the date encoding will be determined by the renderer. May be any of None , 'iso-8601' or a Python strftime format string. Default: 'iso-8601'","title":"DATE_FORMAT"},{"location":"api-guide/settings/#date_input_formats","text":"A list of format strings that should be used by default for parsing inputs to DateField serializer fields. May be a list including the string 'iso-8601' or Python strftime format strings. Default: ['iso-8601']","title":"DATE_INPUT_FORMATS"},{"location":"api-guide/settings/#time_format","text":"A format string that should be used by default for rendering the output of TimeField serializer fields. If None , then TimeField serializer fields will return Python time objects, and the time encoding will be determined by the renderer. May be any of None , 'iso-8601' or a Python strftime format string. Default: 'iso-8601'","title":"TIME_FORMAT"},{"location":"api-guide/settings/#time_input_formats","text":"A list of format strings that should be used by default for parsing inputs to TimeField serializer fields. May be a list including the string 'iso-8601' or Python strftime format strings. Default: ['iso-8601']","title":"TIME_INPUT_FORMATS"},{"location":"api-guide/settings/#encodings","text":"","title":"Encodings"},{"location":"api-guide/settings/#unicode_json","text":"When set to True , JSON responses will allow unicode characters in responses. For example: {\"unicode black star\":\"\u2605\"} When set to False , JSON responses will escape non-ascii characters, like so: {\"unicode black star\":\"\\u2605\"} Both styles conform to RFC 4627 , and are syntactically valid JSON. The unicode style is preferred as being more user-friendly when inspecting API responses. Default: True","title":"UNICODE_JSON"},{"location":"api-guide/settings/#compact_json","text":"When set to True , JSON responses will return compact representations, with no spacing after ':' and ',' characters. For example: {\"is_admin\":false,\"email\":\"jane@example\"} When set to False , JSON responses will return slightly more verbose representations, like so: {\"is_admin\": false, \"email\": \"jane@example\"} The default style is to return minified responses, in line with Heroku's API design guidelines . Default: True","title":"COMPACT_JSON"},{"location":"api-guide/settings/#strict_json","text":"When set to True , JSON rendering and parsing will only observe syntactically valid JSON, raising an exception for the extended float values ( nan , inf , -inf ) accepted by Python's json module. This is the recommended setting, as these values are not generally supported. e.g., neither Javascript's JSON.Parse nor PostgreSQL's JSON data type accept these values. When set to False , JSON rendering and parsing will be permissive. However, these values are still invalid and will need to be specially handled in your code. Default: True","title":"STRICT_JSON"},{"location":"api-guide/settings/#coerce_decimal_to_string","text":"When returning decimal objects in API representations that do not support a native decimal type, it is normally best to return the value as a string. This avoids the loss of precision that occurs with binary floating point implementations. When set to True , the serializer DecimalField class will return strings instead of Decimal objects. When set to False , serializers will return Decimal objects, which the default JSON encoder will return as floats. Default: True","title":"COERCE_DECIMAL_TO_STRING"},{"location":"api-guide/settings/#view-names-and-descriptions","text":"The following settings are used to generate the view names and descriptions, as used in responses to OPTIONS requests, and as used in the browsable API.","title":"View names and descriptions"},{"location":"api-guide/settings/#view_name_function","text":"A string representing the function that should be used when generating view names. This should be a function with the following signature: view_name(self) self : The view instance. Typically the name function would inspect the name of the class when generating a descriptive name, by accessing self.__class__.__name__ . If the view instance inherits ViewSet , it may have been initialized with several optional arguments: name : A name explicitly provided to a view in the viewset. Typically, this value should be used as-is when provided. suffix : Text used when differentiating individual views in a viewset. This argument is mutually exclusive to name . detail : Boolean that differentiates an individual view in a viewset as either being a 'list' or 'detail' view. Default: 'rest_framework.views.get_view_name'","title":"VIEW_NAME_FUNCTION"},{"location":"api-guide/settings/#view_description_function","text":"A string representing the function that should be used when generating view descriptions. This setting can be changed to support markup styles other than the default markdown. For example, you can use it to support rst markup in your view docstrings being output in the browsable API. This should be a function with the following signature: view_description(self, html=False) self : The view instance. Typically the description function would inspect the docstring of the class when generating a description, by accessing self.__class__.__doc__ html : A boolean indicating if HTML output is required. True when used in the browsable API, and False when used in generating OPTIONS responses. If the view instance inherits ViewSet , it may have been initialized with several optional arguments: description : A description explicitly provided to the view in the viewset. Typically, this is set by extra viewset action s, and should be used as-is. Default: 'rest_framework.views.get_view_description'","title":"VIEW_DESCRIPTION_FUNCTION"},{"location":"api-guide/settings/#html-select-field-cutoffs","text":"Global settings for select field cutoffs for rendering relational fields in the browsable API.","title":"HTML Select Field cutoffs"},{"location":"api-guide/settings/#html_select_cutoff","text":"Global setting for the html_cutoff value. Must be an integer. Default: 1000","title":"HTML_SELECT_CUTOFF"},{"location":"api-guide/settings/#html_select_cutoff_text","text":"A string representing a global setting for html_cutoff_text . Default: \"More than {count} items...\"","title":"HTML_SELECT_CUTOFF_TEXT"},{"location":"api-guide/settings/#miscellaneous-settings","text":"","title":"Miscellaneous settings"},{"location":"api-guide/settings/#exception_handler","text":"A string representing the function that should be used when returning a response for any given exception. If the function returns None , a 500 error will be raised. This setting can be changed to support error responses other than the default {\"detail\": \"Failure...\"} responses. For example, you can use it to provide API responses like {\"errors\": [{\"message\": \"Failure...\", \"code\": \"\"} ...]} . This should be a function with the following signature: exception_handler(exc, context) exc : The exception. Default: 'rest_framework.views.exception_handler'","title":"EXCEPTION_HANDLER"},{"location":"api-guide/settings/#non_field_errors_key","text":"A string representing the key that should be used for serializer errors that do not refer to a specific field, but are instead general errors. Default: 'non_field_errors'","title":"NON_FIELD_ERRORS_KEY"},{"location":"api-guide/settings/#url_field_name","text":"A string representing the key that should be used for the URL fields generated by HyperlinkedModelSerializer . Default: 'url'","title":"URL_FIELD_NAME"},{"location":"api-guide/settings/#num_proxies","text":"An integer of 0 or more, that may be used to specify the number of application proxies that the API runs behind. This allows throttling to more accurately identify client IP addresses. If set to None then less strict IP matching will be used by the throttle classes. Default: None","title":"NUM_PROXIES"},{"location":"api-guide/status-codes/","text":"Status Codes 418 I'm a teapot - Any attempt to brew coffee with a teapot should result in the error code \"418 I'm a teapot\". The resulting entity body MAY be short and stout. \u2014 RFC 2324 , Hyper Text Coffee Pot Control Protocol Using bare status codes in your responses isn't recommended. REST framework includes a set of named constants that you can use to make your code more obvious and readable. from rest_framework import status from rest_framework.response import Response def empty_view(self): content = {'please move along': 'nothing to see here'} return Response(content, status=status.HTTP_404_NOT_FOUND) The full set of HTTP status codes included in the status module is listed below. The module also includes a set of helper functions for testing if a status code is in a given range. from rest_framework import status from rest_framework.test import APITestCase class ExampleTestCase(APITestCase): def test_url_root(self): url = reverse('index') response = self.client.get(url) self.assertTrue(status.is_success(response.status_code)) For more information on proper usage of HTTP status codes see RFC 2616 and RFC 6585 . Informational - 1xx This class of status code indicates a provisional response. There are no 1xx status codes used in REST framework by default. HTTP_100_CONTINUE HTTP_101_SWITCHING_PROTOCOLS Successful - 2xx This class of status code indicates that the client's request was successfully received, understood, and accepted. HTTP_200_OK HTTP_201_CREATED HTTP_202_ACCEPTED HTTP_203_NON_AUTHORITATIVE_INFORMATION HTTP_204_NO_CONTENT HTTP_205_RESET_CONTENT HTTP_206_PARTIAL_CONTENT HTTP_207_MULTI_STATUS HTTP_208_ALREADY_REPORTED HTTP_226_IM_USED Redirection - 3xx This class of status code indicates that further action needs to be taken by the user agent in order to fulfill the request. HTTP_300_MULTIPLE_CHOICES HTTP_301_MOVED_PERMANENTLY HTTP_302_FOUND HTTP_303_SEE_OTHER HTTP_304_NOT_MODIFIED HTTP_305_USE_PROXY HTTP_306_RESERVED HTTP_307_TEMPORARY_REDIRECT HTTP_308_PERMANENT_REDIRECT Client Error - 4xx The 4xx class of status code is intended for cases in which the client seems to have erred. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_402_PAYMENT_REQUIRED HTTP_403_FORBIDDEN HTTP_404_NOT_FOUND HTTP_405_METHOD_NOT_ALLOWED HTTP_406_NOT_ACCEPTABLE HTTP_407_PROXY_AUTHENTICATION_REQUIRED HTTP_408_REQUEST_TIMEOUT HTTP_409_CONFLICT HTTP_410_GONE HTTP_411_LENGTH_REQUIRED HTTP_412_PRECONDITION_FAILED HTTP_413_REQUEST_ENTITY_TOO_LARGE HTTP_414_REQUEST_URI_TOO_LONG HTTP_415_UNSUPPORTED_MEDIA_TYPE HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_417_EXPECTATION_FAILED HTTP_422_UNPROCESSABLE_ENTITY HTTP_423_LOCKED HTTP_424_FAILED_DEPENDENCY HTTP_426_UPGRADE_REQUIRED HTTP_428_PRECONDITION_REQUIRED HTTP_429_TOO_MANY_REQUESTS HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS Server Error - 5xx Response status codes beginning with the digit \"5\" indicate cases in which the server is aware that it has erred or is incapable of performing the request. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. HTTP_500_INTERNAL_SERVER_ERROR HTTP_501_NOT_IMPLEMENTED HTTP_502_BAD_GATEWAY HTTP_503_SERVICE_UNAVAILABLE HTTP_504_GATEWAY_TIMEOUT HTTP_505_HTTP_VERSION_NOT_SUPPORTED HTTP_506_VARIANT_ALSO_NEGOTIATES HTTP_507_INSUFFICIENT_STORAGE HTTP_508_LOOP_DETECTED HTTP_509_BANDWIDTH_LIMIT_EXCEEDED HTTP_510_NOT_EXTENDED HTTP_511_NETWORK_AUTHENTICATION_REQUIRED Helper functions The following helper functions are available for identifying the category of the response code. is_informational() # 1xx is_success() # 2xx is_redirect() # 3xx is_client_error() # 4xx is_server_error() # 5xx","title":"Status Codes"},{"location":"api-guide/status-codes/#status-codes","text":"418 I'm a teapot - Any attempt to brew coffee with a teapot should result in the error code \"418 I'm a teapot\". The resulting entity body MAY be short and stout. \u2014 RFC 2324 , Hyper Text Coffee Pot Control Protocol Using bare status codes in your responses isn't recommended. REST framework includes a set of named constants that you can use to make your code more obvious and readable. from rest_framework import status from rest_framework.response import Response def empty_view(self): content = {'please move along': 'nothing to see here'} return Response(content, status=status.HTTP_404_NOT_FOUND) The full set of HTTP status codes included in the status module is listed below. The module also includes a set of helper functions for testing if a status code is in a given range. from rest_framework import status from rest_framework.test import APITestCase class ExampleTestCase(APITestCase): def test_url_root(self): url = reverse('index') response = self.client.get(url) self.assertTrue(status.is_success(response.status_code)) For more information on proper usage of HTTP status codes see RFC 2616 and RFC 6585 .","title":"Status Codes"},{"location":"api-guide/status-codes/#informational-1xx","text":"This class of status code indicates a provisional response. There are no 1xx status codes used in REST framework by default. HTTP_100_CONTINUE HTTP_101_SWITCHING_PROTOCOLS","title":"Informational - 1xx"},{"location":"api-guide/status-codes/#successful-2xx","text":"This class of status code indicates that the client's request was successfully received, understood, and accepted. HTTP_200_OK HTTP_201_CREATED HTTP_202_ACCEPTED HTTP_203_NON_AUTHORITATIVE_INFORMATION HTTP_204_NO_CONTENT HTTP_205_RESET_CONTENT HTTP_206_PARTIAL_CONTENT HTTP_207_MULTI_STATUS HTTP_208_ALREADY_REPORTED HTTP_226_IM_USED","title":"Successful - 2xx"},{"location":"api-guide/status-codes/#redirection-3xx","text":"This class of status code indicates that further action needs to be taken by the user agent in order to fulfill the request. HTTP_300_MULTIPLE_CHOICES HTTP_301_MOVED_PERMANENTLY HTTP_302_FOUND HTTP_303_SEE_OTHER HTTP_304_NOT_MODIFIED HTTP_305_USE_PROXY HTTP_306_RESERVED HTTP_307_TEMPORARY_REDIRECT HTTP_308_PERMANENT_REDIRECT","title":"Redirection - 3xx"},{"location":"api-guide/status-codes/#client-error-4xx","text":"The 4xx class of status code is intended for cases in which the client seems to have erred. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_402_PAYMENT_REQUIRED HTTP_403_FORBIDDEN HTTP_404_NOT_FOUND HTTP_405_METHOD_NOT_ALLOWED HTTP_406_NOT_ACCEPTABLE HTTP_407_PROXY_AUTHENTICATION_REQUIRED HTTP_408_REQUEST_TIMEOUT HTTP_409_CONFLICT HTTP_410_GONE HTTP_411_LENGTH_REQUIRED HTTP_412_PRECONDITION_FAILED HTTP_413_REQUEST_ENTITY_TOO_LARGE HTTP_414_REQUEST_URI_TOO_LONG HTTP_415_UNSUPPORTED_MEDIA_TYPE HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_417_EXPECTATION_FAILED HTTP_422_UNPROCESSABLE_ENTITY HTTP_423_LOCKED HTTP_424_FAILED_DEPENDENCY HTTP_426_UPGRADE_REQUIRED HTTP_428_PRECONDITION_REQUIRED HTTP_429_TOO_MANY_REQUESTS HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS","title":"Client Error - 4xx"},{"location":"api-guide/status-codes/#server-error-5xx","text":"Response status codes beginning with the digit \"5\" indicate cases in which the server is aware that it has erred or is incapable of performing the request. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. HTTP_500_INTERNAL_SERVER_ERROR HTTP_501_NOT_IMPLEMENTED HTTP_502_BAD_GATEWAY HTTP_503_SERVICE_UNAVAILABLE HTTP_504_GATEWAY_TIMEOUT HTTP_505_HTTP_VERSION_NOT_SUPPORTED HTTP_506_VARIANT_ALSO_NEGOTIATES HTTP_507_INSUFFICIENT_STORAGE HTTP_508_LOOP_DETECTED HTTP_509_BANDWIDTH_LIMIT_EXCEEDED HTTP_510_NOT_EXTENDED HTTP_511_NETWORK_AUTHENTICATION_REQUIRED","title":"Server Error - 5xx"},{"location":"api-guide/status-codes/#helper-functions","text":"The following helper functions are available for identifying the category of the response code. is_informational() # 1xx is_success() # 2xx is_redirect() # 3xx is_client_error() # 4xx is_server_error() # 5xx","title":"Helper functions"},{"location":"api-guide/status-codes_zh/","text":"Status Codes (\u72b6\u6001\u7801) 418 I'm a teapot - Any attempt to brew coffee with a teapot should result in the error code \"418 I'm a teapot\". The resulting entity body MAY be short and stout. \u2014 RFC 2324 , Hyper Text Coffee Pot Control Protocol \u4e0d\u5efa\u8bae\u5728\u54cd\u5e94\u4e2d\u4f7f\u7528\u88f8\u9732\u7684\u72b6\u6001\u7801\u3002REST\u6846\u67b6\u5305\u542b\u4e00\u7ec4\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4f7f\u4ee3\u7801\u66f4\u52a0\u660e\u663e\u548c\u53ef\u8bfb\u7684\u547d\u540d\u5e38\u91cf\u3002 from rest_framework import status from rest_framework.response import Response def empty_view(self): content = {'please move along': 'nothing to see here'} return Response(content, status=status.HTTP_404_NOT_FOUND) \u4e0b\u9762\u5217\u51fa\u4e86 state \u6a21\u5757\u4e2d\u5305\u542b\u7684\u5168\u5957HTTP\u72b6\u6001\u7801\u3002 \u8be5\u6a21\u5757\u8fd8\u5305\u62ec\u4e00\u7ec4\u8f85\u52a9\u51fd\u6570\uff0c\u7528\u4e8e\u6d4b\u8bd5\u72b6\u6001\u7801\u662f\u5426\u5728\u7ed9\u5b9a\u8303\u56f4\u5185\u3002 from rest_framework import status from rest_framework.test import APITestCase class ExampleTestCase(APITestCase): def test_url_root(self): url = reverse('index') response = self.client.get(url) self.assertTrue(status.is_success(response.status_code)) \u6709\u5173\u6b63\u786e\u4f7f\u7528HTTP\u72b6\u6001\u4ee3\u7801\u7684\u66f4\u591a\u4fe1\u606f RFC 2616 \u548c RFC 6585 . Informational - 1xx \u6b64\u7c7b\u72b6\u6001\u4ee3\u7801\u8868\u793a\u4e34\u65f6\u54cd\u5e94\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cREST\u6846\u67b6\u4e2d\u6ca1\u6709\u4f7f\u75281xx\u72b6\u6001\u4ee3\u7801\u3002 HTTP_100_CONTINUE HTTP_101_SWITCHING_PROTOCOLS Successful - 2xx \u6b64\u7c7b\u72b6\u6001\u7801\u8868\u793a\u5df2\u6210\u529f\u63a5\u6536\u3001\u7406\u89e3\u548c\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002 HTTP_200_OK HTTP_201_CREATED HTTP_202_ACCEPTED HTTP_203_NON_AUTHORITATIVE_INFORMATION HTTP_204_NO_CONTENT HTTP_205_RESET_CONTENT HTTP_206_PARTIAL_CONTENT HTTP_207_MULTI_STATUS Redirection - 3xx \u6b64\u7c7b\u72b6\u6001\u7801\u8868\u793a\u7528\u6237\u4ee3\u7406\u9700\u8981\u91c7\u53d6\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u624d\u80fd\u5b8c\u6210\u8bf7\u6c42\u3002 HTTP_300_MULTIPLE_CHOICES HTTP_301_MOVED_PERMANENTLY HTTP_302_FOUND HTTP_303_SEE_OTHER HTTP_304_NOT_MODIFIED HTTP_305_USE_PROXY HTTP_306_RESERVED HTTP_307_TEMPORARY_REDIRECT Client Error - 4xx \u6b64\u7c7b\u72b6\u6001\u7801\u7528\u4e8e\u5ba2\u6237\u7aef\u4f3c\u4e4e\u51fa\u9519\u7684\u60c5\u51b5\u3002\u9664\u4e86\u54cd\u5e94HEAD\u8bf7\u6c42\u65f6\uff0c\u670d\u52a1\u5668\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u5bf9\u9519\u8bef\u60c5\u51b5\u7684\u89e3\u91ca\uff0c\u4ee5\u53ca\u5b83\u662f\u4e34\u65f6\u7684\u8fd8\u662f\u6301\u7eed\u7684\u3002 HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_402_PAYMENT_REQUIRED HTTP_403_FORBIDDEN HTTP_404_NOT_FOUND HTTP_405_METHOD_NOT_ALLOWED HTTP_406_NOT_ACCEPTABLE HTTP_407_PROXY_AUTHENTICATION_REQUIRED HTTP_408_REQUEST_TIMEOUT HTTP_409_CONFLICT HTTP_410_GONE HTTP_411_LENGTH_REQUIRED HTTP_412_PRECONDITION_FAILED HTTP_413_REQUEST_ENTITY_TOO_LARGE HTTP_414_REQUEST_URI_TOO_LONG HTTP_415_UNSUPPORTED_MEDIA_TYPE HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_417_EXPECTATION_FAILED HTTP_422_UNPROCESSABLE_ENTITY HTTP_423_LOCKED HTTP_424_FAILED_DEPENDENCY HTTP_428_PRECONDITION_REQUIRED HTTP_429_TOO_MANY_REQUESTS HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS Server Error - 5xx \u6b64\u7c7b\u54cd\u5e94\u72b6\u6001\u7801\u8868\u793a\u670d\u52a1\u5668\u610f\u8bc6\u5230\u81ea\u8eab\u51fa\u9519\u6216\u65e0\u6cd5\u6267\u884c\u8bf7\u6c42\u7684\u60c5\u51b5\u3002\u9664\u4e86\u54cd\u5e94HEAD\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u5b9e\u4f53\uff0c\u5176\u4e2d\u5305\u542b\u5bf9\u9519\u8bef\u60c5\u51b5\u7684\u89e3\u91ca\uff0c\u4ee5\u53ca\u5b83\u662f\u4e34\u65f6\u7684\u8fd8\u662f\u6301\u7eed\u7684\u3002 HTTP_500_INTERNAL_SERVER_ERROR HTTP_501_NOT_IMPLEMENTED HTTP_502_BAD_GATEWAY HTTP_503_SERVICE_UNAVAILABLE HTTP_504_GATEWAY_TIMEOUT HTTP_505_HTTP_VERSION_NOT_SUPPORTED HTTP_507_INSUFFICIENT_STORAGE HTTP_511_NETWORK_AUTHENTICATION_REQUIRED Helper functions \uff08\u8f85\u52a9\u51fd\u6570\uff09 \u4e0b\u5217helper\u51fd\u6570\u53ef\u7528\u4e8e\u6807\u8bc6\u54cd\u5e94\u4ee3\u7801\u7684\u7c7b\u522b\u3002 is_informational() # 1xx is_success() # 2xx is_redirect() # 3xx is_client_error() # 4xx is_server_error() # 5xx","title":"Status codes"},{"location":"api-guide/status-codes_zh/#status-codes","text":"418 I'm a teapot - Any attempt to brew coffee with a teapot should result in the error code \"418 I'm a teapot\". The resulting entity body MAY be short and stout. \u2014 RFC 2324 , Hyper Text Coffee Pot Control Protocol \u4e0d\u5efa\u8bae\u5728\u54cd\u5e94\u4e2d\u4f7f\u7528\u88f8\u9732\u7684\u72b6\u6001\u7801\u3002REST\u6846\u67b6\u5305\u542b\u4e00\u7ec4\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4f7f\u4ee3\u7801\u66f4\u52a0\u660e\u663e\u548c\u53ef\u8bfb\u7684\u547d\u540d\u5e38\u91cf\u3002 from rest_framework import status from rest_framework.response import Response def empty_view(self): content = {'please move along': 'nothing to see here'} return Response(content, status=status.HTTP_404_NOT_FOUND) \u4e0b\u9762\u5217\u51fa\u4e86 state \u6a21\u5757\u4e2d\u5305\u542b\u7684\u5168\u5957HTTP\u72b6\u6001\u7801\u3002 \u8be5\u6a21\u5757\u8fd8\u5305\u62ec\u4e00\u7ec4\u8f85\u52a9\u51fd\u6570\uff0c\u7528\u4e8e\u6d4b\u8bd5\u72b6\u6001\u7801\u662f\u5426\u5728\u7ed9\u5b9a\u8303\u56f4\u5185\u3002 from rest_framework import status from rest_framework.test import APITestCase class ExampleTestCase(APITestCase): def test_url_root(self): url = reverse('index') response = self.client.get(url) self.assertTrue(status.is_success(response.status_code)) \u6709\u5173\u6b63\u786e\u4f7f\u7528HTTP\u72b6\u6001\u4ee3\u7801\u7684\u66f4\u591a\u4fe1\u606f RFC 2616 \u548c RFC 6585 .","title":"Status Codes (\u72b6\u6001\u7801)"},{"location":"api-guide/status-codes_zh/#informational-1xx","text":"\u6b64\u7c7b\u72b6\u6001\u4ee3\u7801\u8868\u793a\u4e34\u65f6\u54cd\u5e94\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cREST\u6846\u67b6\u4e2d\u6ca1\u6709\u4f7f\u75281xx\u72b6\u6001\u4ee3\u7801\u3002 HTTP_100_CONTINUE HTTP_101_SWITCHING_PROTOCOLS","title":"Informational - 1xx"},{"location":"api-guide/status-codes_zh/#successful-2xx","text":"\u6b64\u7c7b\u72b6\u6001\u7801\u8868\u793a\u5df2\u6210\u529f\u63a5\u6536\u3001\u7406\u89e3\u548c\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002 HTTP_200_OK HTTP_201_CREATED HTTP_202_ACCEPTED HTTP_203_NON_AUTHORITATIVE_INFORMATION HTTP_204_NO_CONTENT HTTP_205_RESET_CONTENT HTTP_206_PARTIAL_CONTENT HTTP_207_MULTI_STATUS","title":"Successful - 2xx"},{"location":"api-guide/status-codes_zh/#redirection-3xx","text":"\u6b64\u7c7b\u72b6\u6001\u7801\u8868\u793a\u7528\u6237\u4ee3\u7406\u9700\u8981\u91c7\u53d6\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u624d\u80fd\u5b8c\u6210\u8bf7\u6c42\u3002 HTTP_300_MULTIPLE_CHOICES HTTP_301_MOVED_PERMANENTLY HTTP_302_FOUND HTTP_303_SEE_OTHER HTTP_304_NOT_MODIFIED HTTP_305_USE_PROXY HTTP_306_RESERVED HTTP_307_TEMPORARY_REDIRECT","title":"Redirection - 3xx"},{"location":"api-guide/status-codes_zh/#client-error-4xx","text":"\u6b64\u7c7b\u72b6\u6001\u7801\u7528\u4e8e\u5ba2\u6237\u7aef\u4f3c\u4e4e\u51fa\u9519\u7684\u60c5\u51b5\u3002\u9664\u4e86\u54cd\u5e94HEAD\u8bf7\u6c42\u65f6\uff0c\u670d\u52a1\u5668\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u5b9e\u4f53\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u5bf9\u9519\u8bef\u60c5\u51b5\u7684\u89e3\u91ca\uff0c\u4ee5\u53ca\u5b83\u662f\u4e34\u65f6\u7684\u8fd8\u662f\u6301\u7eed\u7684\u3002 HTTP_400_BAD_REQUEST HTTP_401_UNAUTHORIZED HTTP_402_PAYMENT_REQUIRED HTTP_403_FORBIDDEN HTTP_404_NOT_FOUND HTTP_405_METHOD_NOT_ALLOWED HTTP_406_NOT_ACCEPTABLE HTTP_407_PROXY_AUTHENTICATION_REQUIRED HTTP_408_REQUEST_TIMEOUT HTTP_409_CONFLICT HTTP_410_GONE HTTP_411_LENGTH_REQUIRED HTTP_412_PRECONDITION_FAILED HTTP_413_REQUEST_ENTITY_TOO_LARGE HTTP_414_REQUEST_URI_TOO_LONG HTTP_415_UNSUPPORTED_MEDIA_TYPE HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_417_EXPECTATION_FAILED HTTP_422_UNPROCESSABLE_ENTITY HTTP_423_LOCKED HTTP_424_FAILED_DEPENDENCY HTTP_428_PRECONDITION_REQUIRED HTTP_429_TOO_MANY_REQUESTS HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS","title":"Client Error - 4xx"},{"location":"api-guide/status-codes_zh/#server-error-5xx","text":"\u6b64\u7c7b\u54cd\u5e94\u72b6\u6001\u7801\u8868\u793a\u670d\u52a1\u5668\u610f\u8bc6\u5230\u81ea\u8eab\u51fa\u9519\u6216\u65e0\u6cd5\u6267\u884c\u8bf7\u6c42\u7684\u60c5\u51b5\u3002\u9664\u4e86\u54cd\u5e94HEAD\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u5b9e\u4f53\uff0c\u5176\u4e2d\u5305\u542b\u5bf9\u9519\u8bef\u60c5\u51b5\u7684\u89e3\u91ca\uff0c\u4ee5\u53ca\u5b83\u662f\u4e34\u65f6\u7684\u8fd8\u662f\u6301\u7eed\u7684\u3002 HTTP_500_INTERNAL_SERVER_ERROR HTTP_501_NOT_IMPLEMENTED HTTP_502_BAD_GATEWAY HTTP_503_SERVICE_UNAVAILABLE HTTP_504_GATEWAY_TIMEOUT HTTP_505_HTTP_VERSION_NOT_SUPPORTED HTTP_507_INSUFFICIENT_STORAGE HTTP_511_NETWORK_AUTHENTICATION_REQUIRED","title":"Server Error - 5xx"},{"location":"api-guide/status-codes_zh/#helper-functions","text":"\u4e0b\u5217helper\u51fd\u6570\u53ef\u7528\u4e8e\u6807\u8bc6\u54cd\u5e94\u4ee3\u7801\u7684\u7c7b\u522b\u3002 is_informational() # 1xx is_success() # 2xx is_redirect() # 3xx is_client_error() # 4xx is_server_error() # 5xx","title":"Helper functions \uff08\u8f85\u52a9\u51fd\u6570\uff09"},{"location":"api-guide/testing/","text":"Testing Code without tests is broken as designed. \u2014 Jacob Kaplan-Moss REST framework includes a few helper classes that extend Django's existing test framework, and improve support for making API requests. APIRequestFactory Extends Django's existing RequestFactory class . Creating test requests The APIRequestFactory class supports an almost identical API to Django's standard RequestFactory class. This means that the standard .get() , .post() , .put() , .patch() , .delete() , .head() and .options() methods are all available. from rest_framework.test import APIRequestFactory # Using the standard RequestFactory API to create a form POST request factory = APIRequestFactory() request = factory.post('/notes/', {'title': 'new idea'}) Using the format argument Methods which create a request body, such as post , put and patch , include a format argument, which make it easy to generate requests using a content type other than multipart form data. For example: # Create a JSON POST request factory = APIRequestFactory() request = factory.post('/notes/', {'title': 'new idea'}, format='json') By default the available formats are 'multipart' and 'json' . For compatibility with Django's existing RequestFactory the default format is 'multipart' . To support a wider set of request formats, or change the default format, see the configuration section . Explicitly encoding the request body If you need to explicitly encode the request body, you can do so by setting the content_type flag. For example: request = factory.post('/notes/', json.dumps({'title': 'new idea'}), content_type='application/json') PUT and PATCH with form data One difference worth noting between Django's RequestFactory and REST framework's APIRequestFactory is that multipart form data will be encoded for methods other than just .post() . For example, using APIRequestFactory , you can make a form PUT request like so: factory = APIRequestFactory() request = factory.put('/notes/547/', {'title': 'remember to email dave'}) Using Django's RequestFactory , you'd need to explicitly encode the data yourself: from django.test.client import encode_multipart, RequestFactory factory = RequestFactory() data = {'title': 'remember to email dave'} content = encode_multipart('BoUnDaRyStRiNg', data) content_type = 'multipart/form-data; boundary=BoUnDaRyStRiNg' request = factory.put('/notes/547/', content, content_type=content_type) Forcing authentication When testing views directly using a request factory, it's often convenient to be able to directly authenticate the request, rather than having to construct the correct authentication credentials. To forcibly authenticate a request, use the force_authenticate() method. from rest_framework.test import force_authenticate factory = APIRequestFactory() user = User.objects.get(username='olivia') view = AccountDetail.as_view() # Make an authenticated request to the view... request = factory.get('/accounts/django-superstars/') force_authenticate(request, user=user) response = view(request) The signature for the method is force_authenticate(request, user=None, token=None) . When making the call, either or both of the user and token may be set. For example, when forcibly authenticating using a token, you might do something like the following: user = User.objects.get(username='olivia') request = factory.get('/accounts/django-superstars/') force_authenticate(request, user=user, token=user.auth_token) Note : force_authenticate directly sets request.user to the in-memory user instance. If you are re-using the same user instance across multiple tests that update the saved user state, you may need to call refresh_from_db() between tests. Note : When using APIRequestFactory , the object that is returned is Django's standard HttpRequest , and not REST framework's Request object, which is only generated once the view is called. This means that setting attributes directly on the request object may not always have the effect you expect. For example, setting .token directly will have no effect, and setting .user directly will only work if session authentication is being used. # Request will only authenticate if `SessionAuthentication` is in use. request = factory.get('/accounts/django-superstars/') request.user = user response = view(request) Forcing CSRF validation By default, requests created with APIRequestFactory will not have CSRF validation applied when passed to a REST framework view. If you need to explicitly turn CSRF validation on, you can do so by setting the enforce_csrf_checks flag when instantiating the factory. factory = APIRequestFactory(enforce_csrf_checks=True) Note : It's worth noting that Django's standard RequestFactory doesn't need to include this option, because when using regular Django the CSRF validation takes place in middleware, which is not run when testing views directly. When using REST framework, CSRF validation takes place inside the view, so the request factory needs to disable view-level CSRF checks. APIClient Extends Django's existing Client class . Making requests The APIClient class supports the same request interface as Django's standard Client class. This means that the standard .get() , .post() , .put() , .patch() , .delete() , .head() and .options() methods are all available. For example: from rest_framework.test import APIClient client = APIClient() client.post('/notes/', {'title': 'new idea'}, format='json') To support a wider set of request formats, or change the default format, see the configuration section . Authenticating .login(**kwargs) The login method functions exactly as it does with Django's regular Client class. This allows you to authenticate requests against any views which include SessionAuthentication . # Make all requests in the context of a logged in session. client = APIClient() client.login(username='lauren', password='secret') To logout, call the logout method as usual. # Log out client.logout() The login method is appropriate for testing APIs that use session authentication, for example web sites which include AJAX interaction with the API. .credentials(**kwargs) The credentials method can be used to set headers that will then be included on all subsequent requests by the test client. from rest_framework.authtoken.models import Token from rest_framework.test import APIClient # Include an appropriate `Authorization:` header on all requests. token = Token.objects.get(user__username='lauren') client = APIClient() client.credentials(HTTP_AUTHORIZATION='Token ' + token.key) Note that calling credentials a second time overwrites any existing credentials. You can unset any existing credentials by calling the method with no arguments. # Stop including any credentials client.credentials() The credentials method is appropriate for testing APIs that require authentication headers, such as basic authentication, OAuth1a and OAuth2 authentication, and simple token authentication schemes. .force_authenticate(user=None, token=None) Sometimes you may want to bypass authentication entirely and force all requests by the test client to be automatically treated as authenticated. This can be a useful shortcut if you're testing the API but don't want to have to construct valid authentication credentials in order to make test requests. user = User.objects.get(username='lauren') client = APIClient() client.force_authenticate(user=user) To unauthenticate subsequent requests, call force_authenticate setting the user and/or token to None . client.force_authenticate(user=None) CSRF validation By default CSRF validation is not applied when using APIClient . If you need to explicitly enable CSRF validation, you can do so by setting the enforce_csrf_checks flag when instantiating the client. client = APIClient(enforce_csrf_checks=True) As usual CSRF validation will only apply to any session authenticated views. This means CSRF validation will only occur if the client has been logged in by calling login() . RequestsClient REST framework also includes a client for interacting with your application using the popular Python library, requests . This may be useful if: You are expecting to interface with the API primarily from another Python service, and want to test the service at the same level as the client will see. You want to write tests in such a way that they can also be run against a staging or live environment. (See \"Live tests\" below.) This exposes exactly the same interface as if you were using a requests session directly. from rest_framework.test import RequestsClient client = RequestsClient() response = client.get('http://testserver/users/') assert response.status_code == 200 Note that the requests client requires you to pass fully qualified URLs. RequestsClient and working with the database The RequestsClient class is useful if you want to write tests that solely interact with the service interface. This is a little stricter than using the standard Django test client, as it means that all interactions should be via the API. If you're using RequestsClient you'll want to ensure that test setup, and results assertions are performed as regular API calls, rather than interacting with the database models directly. For example, rather than checking that Customer.objects.count() == 3 you would list the customers endpoint, and ensure that it contains three records. Headers & Authentication Custom headers and authentication credentials can be provided in the same way as when using a standard requests.Session instance . from requests.auth import HTTPBasicAuth client.auth = HTTPBasicAuth('user', 'pass') client.headers.update({'x-test': 'true'}) CSRF If you're using SessionAuthentication then you'll need to include a CSRF token for any POST , PUT , PATCH or DELETE requests. You can do so by following the same flow that a JavaScript based client would use. First make a GET request in order to obtain a CRSF token, then present that token in the following request. For example... client = RequestsClient() # Obtain a CSRF token. response = client.get('http://testserver/homepage/') assert response.status_code == 200 csrftoken = response.cookies['csrftoken'] # Interact with the API. response = client.post('http://testserver/organisations/', json={ 'name': 'MegaCorp', 'status': 'active' }, headers={'X-CSRFToken': csrftoken}) assert response.status_code == 200 Live tests With careful usage both the RequestsClient and the CoreAPIClient provide the ability to write test cases that can run either in development, or be run directly against your staging server or production environment. Using this style to create basic tests of a few core piece of functionality is a powerful way to validate your live service. Doing so may require some careful attention to setup and teardown to ensure that the tests run in a way that they do not directly affect customer data. CoreAPIClient The CoreAPIClient allows you to interact with your API using the Python coreapi client library. # Fetch the API schema client = CoreAPIClient() schema = client.get('http://testserver/schema/') # Create a new organisation params = {'name': 'MegaCorp', 'status': 'active'} client.action(schema, ['organisations', 'create'], params) # Ensure that the organisation exists in the listing data = client.action(schema, ['organisations', 'list']) assert(len(data) == 1) assert(data == [{'name': 'MegaCorp', 'status': 'active'}]) Headers & Authentication Custom headers and authentication may be used with CoreAPIClient in a similar way as with RequestsClient . from requests.auth import HTTPBasicAuth client = CoreAPIClient() client.session.auth = HTTPBasicAuth('user', 'pass') client.session.headers.update({'x-test': 'true'}) API Test cases REST framework includes the following test case classes, that mirror the existing Django test case classes, but use APIClient instead of Django's default Client . APISimpleTestCase APITransactionTestCase APITestCase APILiveServerTestCase Example You can use any of REST framework's test case classes as you would for the regular Django test case classes. The self.client attribute will be an APIClient instance. from django.urls import reverse from rest_framework import status from rest_framework.test import APITestCase from myproject.apps.core.models import Account class AccountTests(APITestCase): def test_create_account(self): \"\"\" Ensure we can create a new account object. \"\"\" url = reverse('account-list') data = {'name': 'DabApps'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(Account.objects.count(), 1) self.assertEqual(Account.objects.get().name, 'DabApps') URLPatternsTestCase REST framework also provides a test case class for isolating urlpatterns on a per-class basis. Note that this inherits from Django's SimpleTestCase , and will most likely need to be mixed with another test case class. Example from django.urls import include, path, reverse from rest_framework.test import APITestCase, URLPatternsTestCase class AccountTests(APITestCase, URLPatternsTestCase): urlpatterns = [ path('api/', include('api.urls')), ] def test_create_account(self): \"\"\" Ensure we can create a new account object. \"\"\" url = reverse('account-list') response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(len(response.data), 1) Testing responses Checking the response data When checking the validity of test responses it's often more convenient to inspect the data that the response was created with, rather than inspecting the fully rendered response. For example, it's easier to inspect response.data : response = self.client.get('/users/4/') self.assertEqual(response.data, {'id': 4, 'username': 'lauren'}) Instead of inspecting the result of parsing response.content : response = self.client.get('/users/4/') self.assertEqual(json.loads(response.content), {'id': 4, 'username': 'lauren'}) Rendering responses If you're testing views directly using APIRequestFactory , the responses that are returned will not yet be rendered, as rendering of template responses is performed by Django's internal request-response cycle. In order to access response.content , you'll first need to render the response. view = UserDetail.as_view() request = factory.get('/users/4') response = view(request, pk='4') response.render() # Cannot access `response.content` without this. self.assertEqual(response.content, '{\"username\": \"lauren\", \"id\": 4}') Configuration Setting the default format The default format used to make test requests may be set using the TEST_REQUEST_DEFAULT_FORMAT setting key. For example, to always use JSON for test requests by default instead of standard multipart form requests, set the following in your settings.py file: REST_FRAMEWORK = { ... 'TEST_REQUEST_DEFAULT_FORMAT': 'json' } Setting the available formats If you need to test requests using something other than multipart or json requests, you can do so by setting the TEST_REQUEST_RENDERER_CLASSES setting. For example, to add support for using format='html' in test requests, you might have something like this in your settings.py file. REST_FRAMEWORK = { ... 'TEST_REQUEST_RENDERER_CLASSES': [ 'rest_framework.renderers.MultiPartRenderer', 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.TemplateHTMLRenderer' ] }","title":"Testing"},{"location":"api-guide/testing/#testing","text":"Code without tests is broken as designed. \u2014 Jacob Kaplan-Moss REST framework includes a few helper classes that extend Django's existing test framework, and improve support for making API requests.","title":"Testing"},{"location":"api-guide/testing/#apirequestfactory","text":"Extends Django's existing RequestFactory class .","title":"APIRequestFactory"},{"location":"api-guide/testing/#creating-test-requests","text":"The APIRequestFactory class supports an almost identical API to Django's standard RequestFactory class. This means that the standard .get() , .post() , .put() , .patch() , .delete() , .head() and .options() methods are all available. from rest_framework.test import APIRequestFactory # Using the standard RequestFactory API to create a form POST request factory = APIRequestFactory() request = factory.post('/notes/', {'title': 'new idea'})","title":"Creating test requests"},{"location":"api-guide/testing/#using-the-format-argument","text":"Methods which create a request body, such as post , put and patch , include a format argument, which make it easy to generate requests using a content type other than multipart form data. For example: # Create a JSON POST request factory = APIRequestFactory() request = factory.post('/notes/', {'title': 'new idea'}, format='json') By default the available formats are 'multipart' and 'json' . For compatibility with Django's existing RequestFactory the default format is 'multipart' . To support a wider set of request formats, or change the default format, see the configuration section .","title":"Using the format argument"},{"location":"api-guide/testing/#explicitly-encoding-the-request-body","text":"If you need to explicitly encode the request body, you can do so by setting the content_type flag. For example: request = factory.post('/notes/', json.dumps({'title': 'new idea'}), content_type='application/json')","title":"Explicitly encoding the request body"},{"location":"api-guide/testing/#put-and-patch-with-form-data","text":"One difference worth noting between Django's RequestFactory and REST framework's APIRequestFactory is that multipart form data will be encoded for methods other than just .post() . For example, using APIRequestFactory , you can make a form PUT request like so: factory = APIRequestFactory() request = factory.put('/notes/547/', {'title': 'remember to email dave'}) Using Django's RequestFactory , you'd need to explicitly encode the data yourself: from django.test.client import encode_multipart, RequestFactory factory = RequestFactory() data = {'title': 'remember to email dave'} content = encode_multipart('BoUnDaRyStRiNg', data) content_type = 'multipart/form-data; boundary=BoUnDaRyStRiNg' request = factory.put('/notes/547/', content, content_type=content_type)","title":"PUT and PATCH with form data"},{"location":"api-guide/testing/#forcing-authentication","text":"When testing views directly using a request factory, it's often convenient to be able to directly authenticate the request, rather than having to construct the correct authentication credentials. To forcibly authenticate a request, use the force_authenticate() method. from rest_framework.test import force_authenticate factory = APIRequestFactory() user = User.objects.get(username='olivia') view = AccountDetail.as_view() # Make an authenticated request to the view... request = factory.get('/accounts/django-superstars/') force_authenticate(request, user=user) response = view(request) The signature for the method is force_authenticate(request, user=None, token=None) . When making the call, either or both of the user and token may be set. For example, when forcibly authenticating using a token, you might do something like the following: user = User.objects.get(username='olivia') request = factory.get('/accounts/django-superstars/') force_authenticate(request, user=user, token=user.auth_token) Note : force_authenticate directly sets request.user to the in-memory user instance. If you are re-using the same user instance across multiple tests that update the saved user state, you may need to call refresh_from_db() between tests. Note : When using APIRequestFactory , the object that is returned is Django's standard HttpRequest , and not REST framework's Request object, which is only generated once the view is called. This means that setting attributes directly on the request object may not always have the effect you expect. For example, setting .token directly will have no effect, and setting .user directly will only work if session authentication is being used. # Request will only authenticate if `SessionAuthentication` is in use. request = factory.get('/accounts/django-superstars/') request.user = user response = view(request)","title":"Forcing authentication"},{"location":"api-guide/testing/#forcing-csrf-validation","text":"By default, requests created with APIRequestFactory will not have CSRF validation applied when passed to a REST framework view. If you need to explicitly turn CSRF validation on, you can do so by setting the enforce_csrf_checks flag when instantiating the factory. factory = APIRequestFactory(enforce_csrf_checks=True) Note : It's worth noting that Django's standard RequestFactory doesn't need to include this option, because when using regular Django the CSRF validation takes place in middleware, which is not run when testing views directly. When using REST framework, CSRF validation takes place inside the view, so the request factory needs to disable view-level CSRF checks.","title":"Forcing CSRF validation"},{"location":"api-guide/testing/#apiclient","text":"Extends Django's existing Client class .","title":"APIClient"},{"location":"api-guide/testing/#making-requests","text":"The APIClient class supports the same request interface as Django's standard Client class. This means that the standard .get() , .post() , .put() , .patch() , .delete() , .head() and .options() methods are all available. For example: from rest_framework.test import APIClient client = APIClient() client.post('/notes/', {'title': 'new idea'}, format='json') To support a wider set of request formats, or change the default format, see the configuration section .","title":"Making requests"},{"location":"api-guide/testing/#authenticating","text":"","title":"Authenticating"},{"location":"api-guide/testing/#loginkwargs","text":"The login method functions exactly as it does with Django's regular Client class. This allows you to authenticate requests against any views which include SessionAuthentication . # Make all requests in the context of a logged in session. client = APIClient() client.login(username='lauren', password='secret') To logout, call the logout method as usual. # Log out client.logout() The login method is appropriate for testing APIs that use session authentication, for example web sites which include AJAX interaction with the API.","title":".login(**kwargs)"},{"location":"api-guide/testing/#credentialskwargs","text":"The credentials method can be used to set headers that will then be included on all subsequent requests by the test client. from rest_framework.authtoken.models import Token from rest_framework.test import APIClient # Include an appropriate `Authorization:` header on all requests. token = Token.objects.get(user__username='lauren') client = APIClient() client.credentials(HTTP_AUTHORIZATION='Token ' + token.key) Note that calling credentials a second time overwrites any existing credentials. You can unset any existing credentials by calling the method with no arguments. # Stop including any credentials client.credentials() The credentials method is appropriate for testing APIs that require authentication headers, such as basic authentication, OAuth1a and OAuth2 authentication, and simple token authentication schemes.","title":".credentials(**kwargs)"},{"location":"api-guide/testing/#force_authenticateusernone-tokennone","text":"Sometimes you may want to bypass authentication entirely and force all requests by the test client to be automatically treated as authenticated. This can be a useful shortcut if you're testing the API but don't want to have to construct valid authentication credentials in order to make test requests. user = User.objects.get(username='lauren') client = APIClient() client.force_authenticate(user=user) To unauthenticate subsequent requests, call force_authenticate setting the user and/or token to None . client.force_authenticate(user=None)","title":".force_authenticate(user=None, token=None)"},{"location":"api-guide/testing/#csrf-validation","text":"By default CSRF validation is not applied when using APIClient . If you need to explicitly enable CSRF validation, you can do so by setting the enforce_csrf_checks flag when instantiating the client. client = APIClient(enforce_csrf_checks=True) As usual CSRF validation will only apply to any session authenticated views. This means CSRF validation will only occur if the client has been logged in by calling login() .","title":"CSRF validation"},{"location":"api-guide/testing/#requestsclient","text":"REST framework also includes a client for interacting with your application using the popular Python library, requests . This may be useful if: You are expecting to interface with the API primarily from another Python service, and want to test the service at the same level as the client will see. You want to write tests in such a way that they can also be run against a staging or live environment. (See \"Live tests\" below.) This exposes exactly the same interface as if you were using a requests session directly. from rest_framework.test import RequestsClient client = RequestsClient() response = client.get('http://testserver/users/') assert response.status_code == 200 Note that the requests client requires you to pass fully qualified URLs.","title":"RequestsClient"},{"location":"api-guide/testing/#requestsclient-and-working-with-the-database","text":"The RequestsClient class is useful if you want to write tests that solely interact with the service interface. This is a little stricter than using the standard Django test client, as it means that all interactions should be via the API. If you're using RequestsClient you'll want to ensure that test setup, and results assertions are performed as regular API calls, rather than interacting with the database models directly. For example, rather than checking that Customer.objects.count() == 3 you would list the customers endpoint, and ensure that it contains three records.","title":"RequestsClient and working with the database"},{"location":"api-guide/testing/#headers-authentication","text":"Custom headers and authentication credentials can be provided in the same way as when using a standard requests.Session instance . from requests.auth import HTTPBasicAuth client.auth = HTTPBasicAuth('user', 'pass') client.headers.update({'x-test': 'true'})","title":"Headers &amp; Authentication"},{"location":"api-guide/testing/#csrf","text":"If you're using SessionAuthentication then you'll need to include a CSRF token for any POST , PUT , PATCH or DELETE requests. You can do so by following the same flow that a JavaScript based client would use. First make a GET request in order to obtain a CRSF token, then present that token in the following request. For example... client = RequestsClient() # Obtain a CSRF token. response = client.get('http://testserver/homepage/') assert response.status_code == 200 csrftoken = response.cookies['csrftoken'] # Interact with the API. response = client.post('http://testserver/organisations/', json={ 'name': 'MegaCorp', 'status': 'active' }, headers={'X-CSRFToken': csrftoken}) assert response.status_code == 200","title":"CSRF"},{"location":"api-guide/testing/#live-tests","text":"With careful usage both the RequestsClient and the CoreAPIClient provide the ability to write test cases that can run either in development, or be run directly against your staging server or production environment. Using this style to create basic tests of a few core piece of functionality is a powerful way to validate your live service. Doing so may require some careful attention to setup and teardown to ensure that the tests run in a way that they do not directly affect customer data.","title":"Live tests"},{"location":"api-guide/testing/#coreapiclient","text":"The CoreAPIClient allows you to interact with your API using the Python coreapi client library. # Fetch the API schema client = CoreAPIClient() schema = client.get('http://testserver/schema/') # Create a new organisation params = {'name': 'MegaCorp', 'status': 'active'} client.action(schema, ['organisations', 'create'], params) # Ensure that the organisation exists in the listing data = client.action(schema, ['organisations', 'list']) assert(len(data) == 1) assert(data == [{'name': 'MegaCorp', 'status': 'active'}])","title":"CoreAPIClient"},{"location":"api-guide/testing/#headers-authentication_1","text":"Custom headers and authentication may be used with CoreAPIClient in a similar way as with RequestsClient . from requests.auth import HTTPBasicAuth client = CoreAPIClient() client.session.auth = HTTPBasicAuth('user', 'pass') client.session.headers.update({'x-test': 'true'})","title":"Headers &amp; Authentication"},{"location":"api-guide/testing/#api-test-cases","text":"REST framework includes the following test case classes, that mirror the existing Django test case classes, but use APIClient instead of Django's default Client . APISimpleTestCase APITransactionTestCase APITestCase APILiveServerTestCase","title":"API Test cases"},{"location":"api-guide/testing/#example","text":"You can use any of REST framework's test case classes as you would for the regular Django test case classes. The self.client attribute will be an APIClient instance. from django.urls import reverse from rest_framework import status from rest_framework.test import APITestCase from myproject.apps.core.models import Account class AccountTests(APITestCase): def test_create_account(self): \"\"\" Ensure we can create a new account object. \"\"\" url = reverse('account-list') data = {'name': 'DabApps'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(Account.objects.count(), 1) self.assertEqual(Account.objects.get().name, 'DabApps')","title":"Example"},{"location":"api-guide/testing/#urlpatternstestcase","text":"REST framework also provides a test case class for isolating urlpatterns on a per-class basis. Note that this inherits from Django's SimpleTestCase , and will most likely need to be mixed with another test case class.","title":"URLPatternsTestCase"},{"location":"api-guide/testing/#example_1","text":"from django.urls import include, path, reverse from rest_framework.test import APITestCase, URLPatternsTestCase class AccountTests(APITestCase, URLPatternsTestCase): urlpatterns = [ path('api/', include('api.urls')), ] def test_create_account(self): \"\"\" Ensure we can create a new account object. \"\"\" url = reverse('account-list') response = self.client.get(url, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(len(response.data), 1)","title":"Example"},{"location":"api-guide/testing/#testing-responses","text":"","title":"Testing responses"},{"location":"api-guide/testing/#checking-the-response-data","text":"When checking the validity of test responses it's often more convenient to inspect the data that the response was created with, rather than inspecting the fully rendered response. For example, it's easier to inspect response.data : response = self.client.get('/users/4/') self.assertEqual(response.data, {'id': 4, 'username': 'lauren'}) Instead of inspecting the result of parsing response.content : response = self.client.get('/users/4/') self.assertEqual(json.loads(response.content), {'id': 4, 'username': 'lauren'})","title":"Checking the response data"},{"location":"api-guide/testing/#rendering-responses","text":"If you're testing views directly using APIRequestFactory , the responses that are returned will not yet be rendered, as rendering of template responses is performed by Django's internal request-response cycle. In order to access response.content , you'll first need to render the response. view = UserDetail.as_view() request = factory.get('/users/4') response = view(request, pk='4') response.render() # Cannot access `response.content` without this. self.assertEqual(response.content, '{\"username\": \"lauren\", \"id\": 4}')","title":"Rendering responses"},{"location":"api-guide/testing/#configuration","text":"","title":"Configuration"},{"location":"api-guide/testing/#setting-the-default-format","text":"The default format used to make test requests may be set using the TEST_REQUEST_DEFAULT_FORMAT setting key. For example, to always use JSON for test requests by default instead of standard multipart form requests, set the following in your settings.py file: REST_FRAMEWORK = { ... 'TEST_REQUEST_DEFAULT_FORMAT': 'json' }","title":"Setting the default format"},{"location":"api-guide/testing/#setting-the-available-formats","text":"If you need to test requests using something other than multipart or json requests, you can do so by setting the TEST_REQUEST_RENDERER_CLASSES setting. For example, to add support for using format='html' in test requests, you might have something like this in your settings.py file. REST_FRAMEWORK = { ... 'TEST_REQUEST_RENDERER_CLASSES': [ 'rest_framework.renderers.MultiPartRenderer', 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.TemplateHTMLRenderer' ] }","title":"Setting the available formats"},{"location":"api-guide/testing_zh/","text":"\u6d4b\u8bd5 APIRequesFactory \u5ef6\u7533django\u672c\u8eab\u5b58\u5728\u7684 RequestFactory \u7c7b \u521b\u5efa\u6d4b\u8bd5\u8bf7\u6c42 \u8fd9\u4e2a APIRequestFactory \u7c7b\u652f\u6301\u4e0eDjango\u6807\u51c6 RequestFactory \u7c7b\u51e0\u4e4e\u76f8\u540c\u7684API\u3002\u8fd9\u610f\u5473\u7740\u7c7b\u4f3c .get() \uff0c .post() \uff0c .put() \uff0c .patch() \uff0c delete() \uff0c .head() \u548c .options() \u7b49\u6807\u51c6\u65b9\u6cd5\u5168\u90e8\u652f\u6301\u3002 from rest_framework.test import APIRequestFactory # \u4f7f\u7528\u6807\u51c6\u7684RequestFactory API\u53bb\u521b\u5efa\u4ecePOST\u6765\u7684\u8bf7\u6c42 factory = APIRequestFactory() request = factory.post('/notes/', {'title': 'new idea'}) \u4f7f\u7528 format \u53c2\u6570 \u521b\u5efa\u8bf7\u6c42\u4e3b\u4f53\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 post \uff0c put \u548c patch \uff0c\u5305\u542b format \uff0c\u8fd9\u4f7f\u5f97\u4f7f\u7528\u591a\u90e8\u5206\u8868\u5355\u6570\u636e\u4ee5\u5916\u7684\u5185\u5bb9\u7c7b\u578b\u8f7b\u677e\u751f\u6210\u8bf7\u6c42\u3002\u4f8b\u5982\uff1a # \u521b\u5efa\u4e00\u4e2aJSON POST\u8bf7\u6c42 factory = APIRequestFactory() request = factory.post('/notes/', {'title': 'new idea'}, format='json') \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ef\u7528\u683c\u5f0f\u4e3a multipart \u548c json \u3002\u4e3a\u4e86\u4e0eDjango\u73b0\u6709\u7684 RequestFactory \uff0c\u9ed8\u8ba4\u683c\u5f0f\u4e3a multipart \u3002 \u8981\u652f\u6301\u66f4\u591a\u7684\u8bf7\u6c42\u683c\u5f0f\u96c6\uff0c\u6216\u66f4\u6539\u9ed8\u8ba4\u683c\u5f0f\uff0c\u8bf7\u53c2\u89c1\u914d\u7f6e\u90e8\u5206\u3002 \u660e\u786e\u7f16\u7801\u8bf7\u6c42\u4e3b\u4f53 \u5982\u679c\u9700\u8981\u660e\u786e\u7f16\u7801\u8bf7\u6c42\u4e3b\u4f53\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e content_type \u6807\u5fd7\uff0c\u4f8b\u5982\uff1a request = factory.post('/notes/'\uff0c json.dumps({'title': 'new idea'}), content_type='application/json') \u4f7f\u7528\u8868\u683c\u6570\u636e\u8fdb\u884cPUT\u548cPATCH \u503c\u5f97\u6ce8\u610f\u7684\u662fDjango\u7684 RequestFactory \u548cREST framework\u7684 APIRequestFactory \u4e4b\u95f4\u7684\u533a\u522b\u662f\uff0c\u5c06\u4e3a\u9664 .post() \u4e4b\u5916\u7684\u65b9\u6cd5\u7f16\u7801\u591a\u90e8\u4efd\u8868\u5355\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 APIRequestFactory \uff0c\u53ef\u4ee5\u50cf\u8fd9\u6837\u53d1\u9001\u8868\u5355PUT\u8bf7\u6c42\uff1a factory = APIRequestFactory() request = factory.put('/notes/547/', {'title': 'remember to email dave'}) \u4f7f\u7528Django\u7684 RequestFactory \uff0c\u9700\u8981\u81ea\u5df1\u5bf9\u6570\u636e\u8fdb\u884c\u663e\u5f0f\u7f16\u7801\uff1a from django.test.client import encode_multipart, RequestFactory factory = RequestFactory() data = {'title': 'remember to email dave'} content = encode_multipart('BoUnDaRyStRiNg', data) content_type = 'multipart/form-data; boundary=BoUnDaRyStRiNg' request = factory.put('/notes/547/', content, content_type=content_type) \u5f3a\u5236\u9a8c\u8bc1 \u5f53\u6d4b\u8bd5\u89c6\u56fe\u76f4\u63a5\u4f7f\u7528\u8bf7\u6c42\u5de5\u5382\u65f6\uff0c\u901a\u5e38\u80fd\u591f\u65b9\u4fbf\u7684\u76f4\u63a5\u5bf9\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u800c\u4e0d\u5fc5\u6784\u9020\u6b63\u786e\u7684\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u3002 \u8981\u5f3a\u5236\u9a8c\u8bc1\u8bf7\u6c42\uff0c\u8bf7\u4f7f\u7528 force_authenticate() \u65b9\u6cd5\u3002 from rest_framework.test import force_authenticate factory = APIRequestFactory() user = User.objects.get(username='olivia') view = AccountDetail.as_view() # \u8ba9\u4e00\u4e2a\u9a8c\u8bc1\u8bf7\u6c42\u5230view\u4e2d\u3002\u3002\u3002 request = factory.get('/accounts/django-superstars/') force_authenticate(request, user=user) response = view(request) \u8fd9\u4e2a\u65b9\u6cd5\u4e3a force_authenticate(request, user=None, token=None) \u3002\u5f53\u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u8bbe\u7f6euser\u548ctoken\u5176\u4e2d\u4e00\u4e2a\u3002 \u4f8b\u5982\uff0c\u5f53\u4f7f\u7528token\u5f3a\u5236\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u65f6\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a user = User.objects.get(username='olivia') request = factory.get('/accounts/django-superstars/') force_authenticate(request, user=user, token=user.token) Note \uff1a\u4f7f\u7528 APIRequestFactory \u65f6\uff0c\u8fd4\u56de\u7684\u5bf9\u8c61\u662fDjango\u6807\u51c6\u7684 HttpRequest \uff0c\u800c\u4e0d\u662fREST framework\u7684 Request \u5bf9\u8c61\uff0c\u540e\u8005\u4ec5\u5728\u8c03\u7528view\u540e\u624d\u751f\u6210\u3002 \u8fd9\u610f\u5473\u7740\u76f4\u63a5\u5728\u8bf7\u6c42\u5bf9\u8c61\u4e0a\u8bbe\u7f6e\u5c5e\u6027\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u5177\u6709\u9884\u671f\u7684\u6548\u679c\u3002 \u4f8b\u5982\uff0c\u76f4\u63a5\u8bbe\u7f6e .token \u5c06\u65e0\u6548\uff0c\u800c\u76f4\u63a5\u8bbe\u7f6e .user \u4ec5\u5728\u4f7f\u7528\u4f1a\u8bdd\u8eab\u4efd\u9a8c\u8bc1\u65f6\u624d\u6709\u6548\u3002 # \u53ea\u6709\u5728\u4f7f\u7528SessionAuthentication\u65f6\uff0c\u8bf7\u6c42\u624d\u4f1a\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 request = factory.get('/accounts/django-superstars/') request.user = user response = view(request) \u5f3a\u5236CSRF\u9a8c\u8bc1 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 APIRequestFactory \u521b\u5efa\u7684\u8bf7\u6c42\u5728\u4f20\u9012\u5230REST framework\u89c6\u56fe\u65f6\u4e0d\u4f1a\u5e94\u7528CSRF\u9a8c\u8bc1\u3002\u5982\u679c\u9700\u8981\u663e\u5f0f\u6253\u5f00CSRF\u9a8c\u8bc1\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5728\u5b9e\u4f8b\u5316\u5de5\u5382\u65f6\u8bbe\u7f6eforce_csrf_checks\u6807\u5fd7\u6765\u5b9e\u73b0\u3002 factory = APIRequestFactory(enforce_csrf_checks=True) Note \uff1a\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cDjango\u7684\u6807\u51c6 RequestFactory \u4e0d\u9700\u8981\u5305\u542b\u6b64\u9009\u9879\uff0c\u56e0\u4e3a\u5728\u4f7f\u7528\u5e38\u89c4Django\u65f6\uff0cCSRF\u9a8c\u8bc1\u5728\u4e2d\u95f4\u4ef6\u4e2d\u8fdb\u884c\uff0c\u800c\u4e2d\u95f4\u4ef6\u5728\u76f4\u63a5\u6d4b\u8bd5\u89c6\u56fe\u65f6\u4e0d\u4f1a\u8fd0\u884c\u3002 \u4f7f\u7528REST framework\u65f6\uff0cCSRF\u9a8c\u8bc1\u5728\u89c6\u56fe\u5185\u90e8\u8fdb\u884c\uff0c\u56e0\u6b64\u8bf7\u6c42\u5de5\u5382\u9700\u8981\u7981\u7528\u89c6\u56fe\u7ea7CSRF\u68c0\u67e5\u3002 APIClient \u6269\u5c55Django\u73b0\u6709\u7684Client\u7c7b\u3002 \u521b\u5efa\u8bf7\u6c42 APIClient \u7c7b\u652f\u6301\u4e0eDjango\u7684\u6807\u51c6 Client \u7c7b\u76f8\u540c\u7684\u8bf7\u6c42\u63a5\u53e3\u3002 \u8fd9\u610f\u5473\u7740\u6807\u51c6\u7684 .get() \u3001 .post() \u3001 .put() \u3001 .patch() \u3001 .delete() \u3001 .head() \u548c .options() \u65b9\u6cd5\u90fd\u53ef\u7528\u3002 \u4f8b\u5982\uff1a from rest_framework.test import APIClient client = APIClient() client.post('/notes/', {'title': 'new idea'}, format='json') \u8981\u652f\u6301\u66f4\u591a\u7684\u8bf7\u6c42\u683c\u5f0f\u96c6\uff0c\u6216\u66f4\u6539\u9ed8\u8ba4\u683c\u5f0f\uff0c\u8bf7\u53c2\u89c1\u914d\u7f6e\u90e8\u5206\u3002 \u9a8c\u8bc1 .login(**kwargs) login \u65b9\u6cd5\u7684\u529f\u80fd\u4e0eDjango\u5e38\u89c4 Client \u7c7b\u7684\u529f\u80fd\u5b8c\u5168\u76f8\u540c\u3002 \u8fd9\u4f7f\u60a8\u53ef\u4ee5\u9488\u5bf9\u4efb\u4f55\u5305\u542b SessionAuthentication \u7684\u89c6\u56fe\u5bf9\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 # \u5728\u5df2\u767b\u5f55\u4f1a\u8bdd\u7684\u4e0a\u4e0b\u6587\u4e2d\u53d1\u51fa\u6240\u6709\u8bf7\u6c42\u3002 client = APIClient() client.login(username='lauren', password='secret') \u9700\u8981\u6ce8\u9500\uff0c\u8bf7\u7167\u5e38\u8c03\u7528\u6ce8\u9500\u65b9\u6cd5\u3002 # \u6ce8\u9500 client.logout() login \u65b9\u6cd5\u9002\u7528\u4e8e\u6d4b\u8bd5\u4f7f\u7528\u4f1a\u8bdd\u8eab\u4efd\u9a8c\u8bc1\u7684API\uff0c\u4f8b\u5982\u5305\u542b\u4e0eAPI\u8fdb\u884cAJAX\u4ea4\u4e92\u7684\u7f51\u7ad9\u3002 .credentials(**kwargs) credentials \u65b9\u6cd5\u53ef\u7528\u4e8e\u8bbe\u7f6e\u8bf7\u6c42\u5934\uff0c\u7136\u540e\u6d4b\u8bd5\u5ba2\u6237\u7aef\u4f1a\u5c06\u5176\u5305\u542b\u5728\u6240\u6709\u540e\u7eed\u8bf7\u6c42\u4e2d\u3002 from rest_framework.authtoken.models import Token from rest_framework.test import APIClient # \u5728\u6240\u6709\u8bf7\u6c42\u4e0a\u90fd\u5305\u542b\u9002\u5f53\u7684Authorization\u5934\u3002 token = Token.objects.get(user__username='lauren') client = APIClient() client.credentials(HTTP_AUTHORIZATION='Token ' + token.key) \u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e8c\u6b21\u8c03\u7528 credentials \u5c06\u8986\u76d6\u6240\u6709\u73b0\u6709credentials\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4e0d\u5e26\u4efb\u4f55\u53c2\u6570\u7684\u65b9\u6cd5\u6765\u53d6\u6d88\u8bbe\u7f6e\u4efb\u4f55\u73b0\u6709\u7684credentials\u3002 .force_authenticate(user=None, token=None) \u6709\u65f6\u60a8\u53ef\u80fd\u60f3\u7ed5\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u7b80\u5355\u5730\u5f3a\u5236\u5c06\u6d4b\u8bd5\u5ba2\u6237\u7aef\u7684\u6240\u6709\u8bf7\u6c42\u81ea\u52a8\u89c6\u4e3a\u5df2\u8eab\u4efd\u9a8c\u8bc1\u3002 \u5982\u679c\u60a8\u6b63\u5728\u6d4b\u8bd5API\u4f46\u53c8\u4e0d\u60f3\u6784\u9020\u6709\u6548\u7684\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u6765\u53d1\u51fa\u6d4b\u8bd5\u8bf7\u6c42\uff0c\u5219\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u6709\u7528\u7684\u5feb\u6377\u65b9\u5f0f\u3002 user = User.objects.get(username='lauren') client = APIClient() client.force_authenticate(user=user) \u8981\u53d6\u6d88\u5bf9\u540e\u7eed\u8bf7\u6c42\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u8bf7\u8c03\u7528 force_authenticate \u5c06\u7528\u6237\u548c/\u6216\u4ee4\u724c\u8bbe\u7f6e\u4e3a None \u3002 client.force_authenticate(user=None) CSRF\u9a8c\u8bc1 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 APIClient \u65f6\u4e0d\u5e94\u7528CSRF\u9a8c\u8bc1\u3002 \u5982\u679c\u9700\u8981\u663e\u5f0f\u542f\u7528CSRF\u9a8c\u8bc1\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5728\u5b9e\u4f8b\u5316\u5ba2\u6237\u7aef\u65f6\u8bbe\u7f6e force_csrf_checks \u6765\u5b9e\u73b0\u3002 client = APIClient(enforce_csrf_checks=True) \u4e0e\u5f80\u5e38\u4e00\u6837\uff0cCSRF\u9a8c\u8bc1\u4ec5\u9002\u7528\u4e8e\u4efb\u4f55\u7ecf\u8fc7\u4f1a\u8bdd\u8eab\u4efd\u9a8c\u8bc1\u7684\u89c6\u56fe\u3002 \u8fd9\u610f\u5473\u7740\u4ec5\u5f53\u901a\u8fc7\u8c03\u7528 login() \u767b\u5f55\u5ba2\u6237\u7aef\u540e\uff0cCSRF\u9a8c\u8bc1\u624d\u4f1a\u53d1\u751f\u3002 RequestsClient REST framework\u8fd8\u5305\u62ec\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u4f7f\u7528\u6d41\u884c\u7684Python\u5e93 requests \u4e0e\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u8fd9\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u53ef\u80fd\u6709\u7528\uff1a - \u60a8\u671f\u671b\u4e3b\u8981\u901a\u8fc7\u53e6\u4e00\u4e2aPython\u670d\u52a1\u4e0eAPI\u4ea4\u4e92\uff0c\u5e76\u5e0c\u671b\u5728\u4e0e\u5ba2\u6237\u7aef\u770b\u5230\u7684\u76f8\u540c\u7684\u7ea7\u522b\u4e0a\u6d4b\u8bd5\u8be5\u670d\u52a1\u3002 - \u60a8\u5e0c\u671b\u4ee5\u8fd9\u6837\u7684\u65b9\u5f0f\u7f16\u5199\u6d4b\u8bd5\uff0c\u4f7f\u5176\u4e5f\u53ef\u4ee5\u5728\u4e34\u65f6\u73af\u5883\u6216\u5b9e\u65f6\u73af\u5883\u4e2d\u8fd0\u884c\u3002 \uff08\u8bf7\u53c2\u89c1\u4e0b\u9762\u7684\u201c\u5b9e\u65f6\u6d4b\u8bd5\u201d\u3002\uff09 \u8fd9\u5c06\u663e\u793a\u4e0e\u60a8\u76f4\u63a5\u4f7f\u7528\u8bf7\u6c42\u4f1a\u8bdd\u5b8c\u5168\u76f8\u540c\u7684\u754c\u9762\u3002 client = RequestsClient() response = client.get('http://testserver/users/') assert response.status_code == 200 \u8bf7\u6ce8\u610f\uff0c\u8bf7\u6c42\u5ba2\u6237\u7aef\u8981\u6c42\u60a8\u4f20\u9012\u5b8c\u5168\u9650\u5b9a\u7684URL\u3002 RequestsClient \u548c\u4f7f\u7528\u6570\u636e\u5e93 \u5982\u679c\u60a8\u8981\u7f16\u5199\u4ec5\u4e0e\u670d\u52a1\u63a5\u53e3\u4ea4\u4e92\u7684\u6d4b\u8bd5\uff0c\u5219 RequestsClient \u7c7b\u5f88\u6709\u7528\u3002 \u8fd9\u6bd4\u4f7f\u7528\u6807\u51c6Django\u6d4b\u8bd5\u5ba2\u6237\u7aef\u8981\u4e25\u683c\u4e00\u4e9b\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u6240\u6709\u4ea4\u4e92\u90fd\u5e94\u901a\u8fc7API\u8fdb\u884c\u3002 \u5982\u679c\u4f7f\u7528\u7684\u662f RequestsClient \uff0c\u5219\u9700\u8981\u786e\u4fdd\u6d4b\u8bd5\u8bbe\u7f6e\u548c\u7ed3\u679c\u65ad\u8a00\u662f\u4f5c\u4e3a\u5e38\u89c4API\u8c03\u7528\u6267\u884c\u7684\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4e0e\u6570\u636e\u5e93\u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\u3002 \u4f8b\u5982\uff0c\u60a8\u4e0d\u5fc5\u5217\u51fa Customer.objects.count\uff08\uff09== 3 \uff0c\u800c\u662f\u5217\u51fa\u5ba2\u6237\u7aef\u70b9\uff0c\u5e76\u786e\u4fdd\u5b83\u5305\u542b\u4e09\u4e2a\u8bb0\u5f55\u3002 \u8bf7\u6c42\u5934&\u8ba4\u8bc1 \u53ef\u4ee5\u4f7f\u7528\u4e0e\u4f7f\u7528\u6807\u51c6 request.Session \u5b9e\u4f8b\u76f8\u540c\u7684\u65b9\u5f0f\u6765\u63d0\u4f9b\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934\u548c\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u3002 from requests.auth import HTTPBasicAuth client.auth = HTTPBasicAuth('user', 'pass') client.headers.update({'x-test': 'true'}) CSRF \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f SessionAuthentication \uff0c\u5219\u9700\u8981\u4e3a\u6240\u6709 POST \uff0c PUT \uff0c PATCH \u6216 DELETE \u8bf7\u6c42\u5305\u62ec\u4e00\u4e2aCSRF\u4ee4\u724c\u3002 \u60a8\u53ef\u4ee5\u6309\u7167\u57fa\u4e8eJavaScript\u7684\u5ba2\u6237\u7aef\u5c06\u4f7f\u7528\u7684\u76f8\u540c\u6d41\u7a0b\u8fdb\u884c\u64cd\u4f5c\u3002 \u9996\u5148\u53d1\u51fa GET \u8bf7\u6c42\u4ee5\u83b7\u5f97CRSF\u4ee4\u724c\uff0c\u7136\u540e\u5728\u968f\u540e\u7684\u8bf7\u6c42\u4e2d\u663e\u793a\u8be5\u4ee4\u724c\u3002 \u4f8b\u5982... client = RequestsClient() # \u83b7\u53d6CSRF token. response = client.get('/homepage/') assert response.status_code == 200 csrftoken = response.cookies['csrftoken'] # \u4e0eAPI\u4ea4\u4e92 response = client.post('/organisations/', json={ 'name': 'MegaCorp', 'status': 'active' }, headers={'X-CSRFToken': csrftoken}) assert response.status_code == 200 \u73b0\u573a\u6d4b\u8bd5 \u901a\u8fc7\u8c28\u614e\u4f7f\u7528 RequestsClient \u548c CoreAPIClient \u90fd\u53ef\u4ee5\u7f16\u5199\u53ef\u4ee5\u5728\u5f00\u53d1\u4e2d\u8fd0\u884c\u6216\u76f4\u63a5\u5728\u767b\u53f0\u670d\u52a1\u5668\u6216\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u4f7f\u7528\u8fd9\u79cd\u6837\u5f0f\u521b\u5efa\u4e00\u4e9b\u6838\u5fc3\u529f\u80fd\u7684\u57fa\u672c\u6d4b\u8bd5\u662f\u9a8c\u8bc1\u5b9e\u65f6\u670d\u52a1\u7684\u6709\u6548\u65b9\u6cd5\u3002 \u8fd9\u6837\u505a\u53ef\u80fd\u9700\u8981\u4ed4\u7ec6\u6ce8\u610f\u8bbe\u7f6e\u548c\u5378\u8f7d\uff0c\u4ee5\u786e\u4fdd\u6d4b\u8bd5\u4ee5\u4e0d\u76f4\u63a5\u5f71\u54cd\u5ba2\u6237\u6570\u636e\u7684\u65b9\u5f0f\u8fd0\u884c\u3002 CoreAPIClient CoreAPIClient\u5141\u8bb8\u60a8\u4f7f\u7528Python coreapi \u5ba2\u6237\u7aef\u5e93\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u3002 # \u63d0\u53d6API\u6a21\u5f0f client = CoreAPIClient() schema = client.get('http://testserver/schema/') # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684organisation params = {'name': 'MegaCorp', 'status': 'active'} client.action(schema, ['organisations', 'create'], params) # \u786e\u4fdd\u5217\u8868\u4e2d\u5b58\u5728\u8be5\u7ec4\u7ec7 data = client.action(schema, ['organisations', 'list']) assert(len(data) == 1) assert(data == [{'name': 'MegaCorp', 'status': 'active'}]) \u8bf7\u6c42\u5934&\u8ba4\u8bc1 \u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934\u548c\u8eab\u4efd\u9a8c\u8bc1\u53ef\u7528\u4e8e\u8ddf RequestsClient \u76f8\u4f3c\u7684 CoreAPIClient \u4e00\u8d77\u4f7f\u7528\u3002 from requests.auth import HTTPBasicAuth client = CoreAPIClient() client.session.auth = HTTPBasicAuth('user', 'pass') client.session.headers.update({'x-test': 'true'}) \u6d4b\u8bd5\u6837\u4f8b REST framework\u5305\u62ec\u4ee5\u4e0b\u6d4b\u8bd5\u7528\u4f8b\u7c7b\uff0c\u5b83\u4eec\u53cd\u6620\u4e86\u73b0\u6709\u7684Django\u6d4b\u8bd5\u7528\u4f8b\u7c7b\uff0c\u4f46\u662f\u4f7f\u7528 APIClient \u800c\u4e0d\u662fDjango\u7684\u9ed8\u8ba4 Client \u3002 - APISimpleTestCase - APITransactionTestCase - APITestCase - APILiveServerTestCase \u5b9e\u4f8b \u60a8\u53ef\u4ee5\u50cf\u4f7f\u7528\u5e38\u89c4Django\u6d4b\u8bd5\u7528\u4f8b\u7c7b\u90a3\u6837\u4f7f\u7528\u4efb\u4f55REST framework\u7684\u7528\u4f8b\u7c7b\u3002 self.client \u5c5e\u6027\u5c06\u662f\u4e00\u4e2a APIClient \u5b9e\u4f8b\u3002 from django.urls import reverse from rest_framework import status from rest_framework.test import APITestCase from myproject.apps.core.models import Account class AccountTests(APITestCase): def test_create_account(self): \"\"\" \u786e\u4fdd\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e10\u6237\u5bf9\u8c61\u3002 \"\"\" url = reverse('account-list') data = {'name': 'DabApps'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(Account.objects.count(), 1) self.assertEqual(Account.objects.get().name, 'DabApps') \u6d4b\u8bd5\u54cd\u5e94 \u68c0\u67e5\u54cd\u5e94\u6570\u636e \u5728\u68c0\u67e5\u6d4b\u8bd5\u54cd\u5e94\u7684\u6709\u6548\u6027\u65f6\uff0c\u901a\u5e38\u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\u662f\u68c0\u67e5\u521b\u5efa\u54cd\u5e94\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u68c0\u67e5\u5b8c\u5168\u5448\u73b0\u7684\u54cd\u5e94\u3002 \u4f8b\u5982\uff0c\u68c0\u67e5 response.data \u66f4\u5bb9\u6613\uff1a response = self.client.get('/users/4/') self.assertEqual(response.data, {'id': 4, 'username': 'lauren'}) \u800c\u4e0d\u662f\u68c0\u67e5 response.content \u7684\u89e3\u6790\u7ed3\u679c\uff1a response = self.client.get('/users/4/') self.assertEqual(json.loads(response.content), {'id': 4, 'username': 'lauren'}) \u6e32\u67d3\u54cd\u5e94 \u5982\u679c\u60a8\u76f4\u63a5\u4f7f\u7528 APIRequestFactory \u6d4b\u8bd5\u89c6\u56fe\uff0c\u5219\u8fd4\u56de\u7684\u54cd\u5e94\u5c06\u4e0d\u4f1a\u6e32\u67d3\uff0c\u56e0\u4e3a\u6a21\u677f\u54cd\u5e94\u7684\u6e32\u67d3\u662f\u7531Django\u7684\u5185\u90e8\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f\u6267\u884c\u7684\u3002 \u4e3a\u4e86\u8bbf\u95ee response.content \uff0c\u60a8\u9996\u5148\u9700\u8981\u6e32\u67d3\u54cd\u5e94\u3002 view = UserDetail.as_view() request = factory.get('/users/4') response = view(request, pk='4') response.render() # Cannot access `response.content` without this. self.assertEqual(response.content, '{\"username\": \"lauren\", \"id\": 4}') \u914d\u7f6e \u8bbe\u7f6e\u9ed8\u8ba4\u683c\u5f0f \u53ef\u4ee5\u4f7f\u7528 TEST_REQUEST_DEFAULT_FORMAT \u8bbe\u7f6e\u9879\u6765\u8bbe\u7f6e\u7528\u4e8e\u53d1\u51fa\u6d4b\u8bd5\u8bf7\u6c42\u7684\u9ed8\u8ba4\u683c\u5f0f\u3002 \u4f8b\u5982\uff0c\u8981\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u59cb\u7ec8\u5c06JSON\u7528\u4e8e\u6d4b\u8bd5\u8bf7\u6c42\u800c\u4e0d\u662f\u6807\u51c6\u7684\u591a\u90e8\u5206\u8868\u5355\u8bf7\u6c42\uff0c\u8bf7\u5728 settings.py \u6587\u4ef6\u4e2d\u8bbe\u7f6e\u4ee5\u4e0b\u5185\u5bb9\uff1a REST_FRAMEWORK = { ... 'TEST_REQUEST_DEFAULT_FORMAT': 'json' } \u8bbe\u7f6e\u53ef\u7528\u683c\u5f0f \u5982\u679c\u60a8\u9700\u8981\u4f7f\u7528multipart\u6216json\u8bf7\u6c42\u4e4b\u5916\u7684\u5176\u4ed6\u6d4b\u8bd5\u8bf7\u6c42\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e TEST_REQUEST_RENDERER_CLASSES \u8bbe\u7f6e\u6765\u8fdb\u884c\u3002 \u4f8b\u5982\uff0c\u8981\u589e\u52a0\u5bf9\u5728\u6d4b\u8bd5\u8bf7\u6c42\u4e2d\u4f7f\u7528 format ='html' \u7684\u652f\u6301\uff0c\u60a8\u7684 settings.py \u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u6709\u7c7b\u4f3c\u7684\u5185\u5bb9\u3002 REST_FRAMEWORK = { ... 'TEST_REQUEST_RENDERER_CLASSES': ( 'rest_framework.renderers.MultiPartRenderer', 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.TemplateHTMLRenderer' ) }","title":"Testing"},{"location":"api-guide/testing_zh/#_1","text":"","title":"\u6d4b\u8bd5"},{"location":"api-guide/testing_zh/#apirequesfactory","text":"\u5ef6\u7533django\u672c\u8eab\u5b58\u5728\u7684 RequestFactory \u7c7b","title":"APIRequesFactory"},{"location":"api-guide/testing_zh/#_2","text":"\u8fd9\u4e2a APIRequestFactory \u7c7b\u652f\u6301\u4e0eDjango\u6807\u51c6 RequestFactory \u7c7b\u51e0\u4e4e\u76f8\u540c\u7684API\u3002\u8fd9\u610f\u5473\u7740\u7c7b\u4f3c .get() \uff0c .post() \uff0c .put() \uff0c .patch() \uff0c delete() \uff0c .head() \u548c .options() \u7b49\u6807\u51c6\u65b9\u6cd5\u5168\u90e8\u652f\u6301\u3002 from rest_framework.test import APIRequestFactory # \u4f7f\u7528\u6807\u51c6\u7684RequestFactory API\u53bb\u521b\u5efa\u4ecePOST\u6765\u7684\u8bf7\u6c42 factory = APIRequestFactory() request = factory.post('/notes/', {'title': 'new idea'})","title":"\u521b\u5efa\u6d4b\u8bd5\u8bf7\u6c42"},{"location":"api-guide/testing_zh/#format","text":"\u521b\u5efa\u8bf7\u6c42\u4e3b\u4f53\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 post \uff0c put \u548c patch \uff0c\u5305\u542b format \uff0c\u8fd9\u4f7f\u5f97\u4f7f\u7528\u591a\u90e8\u5206\u8868\u5355\u6570\u636e\u4ee5\u5916\u7684\u5185\u5bb9\u7c7b\u578b\u8f7b\u677e\u751f\u6210\u8bf7\u6c42\u3002\u4f8b\u5982\uff1a # \u521b\u5efa\u4e00\u4e2aJSON POST\u8bf7\u6c42 factory = APIRequestFactory() request = factory.post('/notes/', {'title': 'new idea'}, format='json') \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ef\u7528\u683c\u5f0f\u4e3a multipart \u548c json \u3002\u4e3a\u4e86\u4e0eDjango\u73b0\u6709\u7684 RequestFactory \uff0c\u9ed8\u8ba4\u683c\u5f0f\u4e3a multipart \u3002 \u8981\u652f\u6301\u66f4\u591a\u7684\u8bf7\u6c42\u683c\u5f0f\u96c6\uff0c\u6216\u66f4\u6539\u9ed8\u8ba4\u683c\u5f0f\uff0c\u8bf7\u53c2\u89c1\u914d\u7f6e\u90e8\u5206\u3002","title":"\u4f7f\u7528format\u53c2\u6570"},{"location":"api-guide/testing_zh/#_3","text":"\u5982\u679c\u9700\u8981\u660e\u786e\u7f16\u7801\u8bf7\u6c42\u4e3b\u4f53\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e content_type \u6807\u5fd7\uff0c\u4f8b\u5982\uff1a request = factory.post('/notes/'\uff0c json.dumps({'title': 'new idea'}), content_type='application/json')","title":"\u660e\u786e\u7f16\u7801\u8bf7\u6c42\u4e3b\u4f53"},{"location":"api-guide/testing_zh/#putpatch","text":"\u503c\u5f97\u6ce8\u610f\u7684\u662fDjango\u7684 RequestFactory \u548cREST framework\u7684 APIRequestFactory \u4e4b\u95f4\u7684\u533a\u522b\u662f\uff0c\u5c06\u4e3a\u9664 .post() \u4e4b\u5916\u7684\u65b9\u6cd5\u7f16\u7801\u591a\u90e8\u4efd\u8868\u5355\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 APIRequestFactory \uff0c\u53ef\u4ee5\u50cf\u8fd9\u6837\u53d1\u9001\u8868\u5355PUT\u8bf7\u6c42\uff1a factory = APIRequestFactory() request = factory.put('/notes/547/', {'title': 'remember to email dave'}) \u4f7f\u7528Django\u7684 RequestFactory \uff0c\u9700\u8981\u81ea\u5df1\u5bf9\u6570\u636e\u8fdb\u884c\u663e\u5f0f\u7f16\u7801\uff1a from django.test.client import encode_multipart, RequestFactory factory = RequestFactory() data = {'title': 'remember to email dave'} content = encode_multipart('BoUnDaRyStRiNg', data) content_type = 'multipart/form-data; boundary=BoUnDaRyStRiNg' request = factory.put('/notes/547/', content, content_type=content_type)","title":"\u4f7f\u7528\u8868\u683c\u6570\u636e\u8fdb\u884cPUT\u548cPATCH"},{"location":"api-guide/testing_zh/#_4","text":"\u5f53\u6d4b\u8bd5\u89c6\u56fe\u76f4\u63a5\u4f7f\u7528\u8bf7\u6c42\u5de5\u5382\u65f6\uff0c\u901a\u5e38\u80fd\u591f\u65b9\u4fbf\u7684\u76f4\u63a5\u5bf9\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u800c\u4e0d\u5fc5\u6784\u9020\u6b63\u786e\u7684\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u3002 \u8981\u5f3a\u5236\u9a8c\u8bc1\u8bf7\u6c42\uff0c\u8bf7\u4f7f\u7528 force_authenticate() \u65b9\u6cd5\u3002 from rest_framework.test import force_authenticate factory = APIRequestFactory() user = User.objects.get(username='olivia') view = AccountDetail.as_view() # \u8ba9\u4e00\u4e2a\u9a8c\u8bc1\u8bf7\u6c42\u5230view\u4e2d\u3002\u3002\u3002 request = factory.get('/accounts/django-superstars/') force_authenticate(request, user=user) response = view(request) \u8fd9\u4e2a\u65b9\u6cd5\u4e3a force_authenticate(request, user=None, token=None) \u3002\u5f53\u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u8bbe\u7f6euser\u548ctoken\u5176\u4e2d\u4e00\u4e2a\u3002 \u4f8b\u5982\uff0c\u5f53\u4f7f\u7528token\u5f3a\u5236\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u65f6\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a user = User.objects.get(username='olivia') request = factory.get('/accounts/django-superstars/') force_authenticate(request, user=user, token=user.token) Note \uff1a\u4f7f\u7528 APIRequestFactory \u65f6\uff0c\u8fd4\u56de\u7684\u5bf9\u8c61\u662fDjango\u6807\u51c6\u7684 HttpRequest \uff0c\u800c\u4e0d\u662fREST framework\u7684 Request \u5bf9\u8c61\uff0c\u540e\u8005\u4ec5\u5728\u8c03\u7528view\u540e\u624d\u751f\u6210\u3002 \u8fd9\u610f\u5473\u7740\u76f4\u63a5\u5728\u8bf7\u6c42\u5bf9\u8c61\u4e0a\u8bbe\u7f6e\u5c5e\u6027\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u5177\u6709\u9884\u671f\u7684\u6548\u679c\u3002 \u4f8b\u5982\uff0c\u76f4\u63a5\u8bbe\u7f6e .token \u5c06\u65e0\u6548\uff0c\u800c\u76f4\u63a5\u8bbe\u7f6e .user \u4ec5\u5728\u4f7f\u7528\u4f1a\u8bdd\u8eab\u4efd\u9a8c\u8bc1\u65f6\u624d\u6709\u6548\u3002 # \u53ea\u6709\u5728\u4f7f\u7528SessionAuthentication\u65f6\uff0c\u8bf7\u6c42\u624d\u4f1a\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 request = factory.get('/accounts/django-superstars/') request.user = user response = view(request)","title":"\u5f3a\u5236\u9a8c\u8bc1"},{"location":"api-guide/testing_zh/#csrf","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 APIRequestFactory \u521b\u5efa\u7684\u8bf7\u6c42\u5728\u4f20\u9012\u5230REST framework\u89c6\u56fe\u65f6\u4e0d\u4f1a\u5e94\u7528CSRF\u9a8c\u8bc1\u3002\u5982\u679c\u9700\u8981\u663e\u5f0f\u6253\u5f00CSRF\u9a8c\u8bc1\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5728\u5b9e\u4f8b\u5316\u5de5\u5382\u65f6\u8bbe\u7f6eforce_csrf_checks\u6807\u5fd7\u6765\u5b9e\u73b0\u3002 factory = APIRequestFactory(enforce_csrf_checks=True) Note \uff1a\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cDjango\u7684\u6807\u51c6 RequestFactory \u4e0d\u9700\u8981\u5305\u542b\u6b64\u9009\u9879\uff0c\u56e0\u4e3a\u5728\u4f7f\u7528\u5e38\u89c4Django\u65f6\uff0cCSRF\u9a8c\u8bc1\u5728\u4e2d\u95f4\u4ef6\u4e2d\u8fdb\u884c\uff0c\u800c\u4e2d\u95f4\u4ef6\u5728\u76f4\u63a5\u6d4b\u8bd5\u89c6\u56fe\u65f6\u4e0d\u4f1a\u8fd0\u884c\u3002 \u4f7f\u7528REST framework\u65f6\uff0cCSRF\u9a8c\u8bc1\u5728\u89c6\u56fe\u5185\u90e8\u8fdb\u884c\uff0c\u56e0\u6b64\u8bf7\u6c42\u5de5\u5382\u9700\u8981\u7981\u7528\u89c6\u56fe\u7ea7CSRF\u68c0\u67e5\u3002","title":"\u5f3a\u5236CSRF\u9a8c\u8bc1"},{"location":"api-guide/testing_zh/#apiclient","text":"\u6269\u5c55Django\u73b0\u6709\u7684Client\u7c7b\u3002","title":"APIClient"},{"location":"api-guide/testing_zh/#_5","text":"APIClient \u7c7b\u652f\u6301\u4e0eDjango\u7684\u6807\u51c6 Client \u7c7b\u76f8\u540c\u7684\u8bf7\u6c42\u63a5\u53e3\u3002 \u8fd9\u610f\u5473\u7740\u6807\u51c6\u7684 .get() \u3001 .post() \u3001 .put() \u3001 .patch() \u3001 .delete() \u3001 .head() \u548c .options() \u65b9\u6cd5\u90fd\u53ef\u7528\u3002 \u4f8b\u5982\uff1a from rest_framework.test import APIClient client = APIClient() client.post('/notes/', {'title': 'new idea'}, format='json') \u8981\u652f\u6301\u66f4\u591a\u7684\u8bf7\u6c42\u683c\u5f0f\u96c6\uff0c\u6216\u66f4\u6539\u9ed8\u8ba4\u683c\u5f0f\uff0c\u8bf7\u53c2\u89c1\u914d\u7f6e\u90e8\u5206\u3002","title":"\u521b\u5efa\u8bf7\u6c42"},{"location":"api-guide/testing_zh/#_6","text":"","title":"\u9a8c\u8bc1"},{"location":"api-guide/testing_zh/#loginkwargs","text":"login \u65b9\u6cd5\u7684\u529f\u80fd\u4e0eDjango\u5e38\u89c4 Client \u7c7b\u7684\u529f\u80fd\u5b8c\u5168\u76f8\u540c\u3002 \u8fd9\u4f7f\u60a8\u53ef\u4ee5\u9488\u5bf9\u4efb\u4f55\u5305\u542b SessionAuthentication \u7684\u89c6\u56fe\u5bf9\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 # \u5728\u5df2\u767b\u5f55\u4f1a\u8bdd\u7684\u4e0a\u4e0b\u6587\u4e2d\u53d1\u51fa\u6240\u6709\u8bf7\u6c42\u3002 client = APIClient() client.login(username='lauren', password='secret') \u9700\u8981\u6ce8\u9500\uff0c\u8bf7\u7167\u5e38\u8c03\u7528\u6ce8\u9500\u65b9\u6cd5\u3002 # \u6ce8\u9500 client.logout() login \u65b9\u6cd5\u9002\u7528\u4e8e\u6d4b\u8bd5\u4f7f\u7528\u4f1a\u8bdd\u8eab\u4efd\u9a8c\u8bc1\u7684API\uff0c\u4f8b\u5982\u5305\u542b\u4e0eAPI\u8fdb\u884cAJAX\u4ea4\u4e92\u7684\u7f51\u7ad9\u3002","title":".login(**kwargs)"},{"location":"api-guide/testing_zh/#credentialskwargs","text":"credentials \u65b9\u6cd5\u53ef\u7528\u4e8e\u8bbe\u7f6e\u8bf7\u6c42\u5934\uff0c\u7136\u540e\u6d4b\u8bd5\u5ba2\u6237\u7aef\u4f1a\u5c06\u5176\u5305\u542b\u5728\u6240\u6709\u540e\u7eed\u8bf7\u6c42\u4e2d\u3002 from rest_framework.authtoken.models import Token from rest_framework.test import APIClient # \u5728\u6240\u6709\u8bf7\u6c42\u4e0a\u90fd\u5305\u542b\u9002\u5f53\u7684Authorization\u5934\u3002 token = Token.objects.get(user__username='lauren') client = APIClient() client.credentials(HTTP_AUTHORIZATION='Token ' + token.key) \u8bf7\u6ce8\u610f\uff0c\u7b2c\u4e8c\u6b21\u8c03\u7528 credentials \u5c06\u8986\u76d6\u6240\u6709\u73b0\u6709credentials\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4e0d\u5e26\u4efb\u4f55\u53c2\u6570\u7684\u65b9\u6cd5\u6765\u53d6\u6d88\u8bbe\u7f6e\u4efb\u4f55\u73b0\u6709\u7684credentials\u3002","title":".credentials(**kwargs)"},{"location":"api-guide/testing_zh/#force_authenticateusernone-tokennone","text":"\u6709\u65f6\u60a8\u53ef\u80fd\u60f3\u7ed5\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u7b80\u5355\u5730\u5f3a\u5236\u5c06\u6d4b\u8bd5\u5ba2\u6237\u7aef\u7684\u6240\u6709\u8bf7\u6c42\u81ea\u52a8\u89c6\u4e3a\u5df2\u8eab\u4efd\u9a8c\u8bc1\u3002 \u5982\u679c\u60a8\u6b63\u5728\u6d4b\u8bd5API\u4f46\u53c8\u4e0d\u60f3\u6784\u9020\u6709\u6548\u7684\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u6765\u53d1\u51fa\u6d4b\u8bd5\u8bf7\u6c42\uff0c\u5219\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u6709\u7528\u7684\u5feb\u6377\u65b9\u5f0f\u3002 user = User.objects.get(username='lauren') client = APIClient() client.force_authenticate(user=user) \u8981\u53d6\u6d88\u5bf9\u540e\u7eed\u8bf7\u6c42\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u8bf7\u8c03\u7528 force_authenticate \u5c06\u7528\u6237\u548c/\u6216\u4ee4\u724c\u8bbe\u7f6e\u4e3a None \u3002 client.force_authenticate(user=None)","title":".force_authenticate(user=None, token=None)"},{"location":"api-guide/testing_zh/#csrf_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 APIClient \u65f6\u4e0d\u5e94\u7528CSRF\u9a8c\u8bc1\u3002 \u5982\u679c\u9700\u8981\u663e\u5f0f\u542f\u7528CSRF\u9a8c\u8bc1\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5728\u5b9e\u4f8b\u5316\u5ba2\u6237\u7aef\u65f6\u8bbe\u7f6e force_csrf_checks \u6765\u5b9e\u73b0\u3002 client = APIClient(enforce_csrf_checks=True) \u4e0e\u5f80\u5e38\u4e00\u6837\uff0cCSRF\u9a8c\u8bc1\u4ec5\u9002\u7528\u4e8e\u4efb\u4f55\u7ecf\u8fc7\u4f1a\u8bdd\u8eab\u4efd\u9a8c\u8bc1\u7684\u89c6\u56fe\u3002 \u8fd9\u610f\u5473\u7740\u4ec5\u5f53\u901a\u8fc7\u8c03\u7528 login() \u767b\u5f55\u5ba2\u6237\u7aef\u540e\uff0cCSRF\u9a8c\u8bc1\u624d\u4f1a\u53d1\u751f\u3002","title":"CSRF\u9a8c\u8bc1"},{"location":"api-guide/testing_zh/#requestsclient","text":"REST framework\u8fd8\u5305\u62ec\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u4f7f\u7528\u6d41\u884c\u7684Python\u5e93 requests \u4e0e\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u8fd9\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u53ef\u80fd\u6709\u7528\uff1a - \u60a8\u671f\u671b\u4e3b\u8981\u901a\u8fc7\u53e6\u4e00\u4e2aPython\u670d\u52a1\u4e0eAPI\u4ea4\u4e92\uff0c\u5e76\u5e0c\u671b\u5728\u4e0e\u5ba2\u6237\u7aef\u770b\u5230\u7684\u76f8\u540c\u7684\u7ea7\u522b\u4e0a\u6d4b\u8bd5\u8be5\u670d\u52a1\u3002 - \u60a8\u5e0c\u671b\u4ee5\u8fd9\u6837\u7684\u65b9\u5f0f\u7f16\u5199\u6d4b\u8bd5\uff0c\u4f7f\u5176\u4e5f\u53ef\u4ee5\u5728\u4e34\u65f6\u73af\u5883\u6216\u5b9e\u65f6\u73af\u5883\u4e2d\u8fd0\u884c\u3002 \uff08\u8bf7\u53c2\u89c1\u4e0b\u9762\u7684\u201c\u5b9e\u65f6\u6d4b\u8bd5\u201d\u3002\uff09 \u8fd9\u5c06\u663e\u793a\u4e0e\u60a8\u76f4\u63a5\u4f7f\u7528\u8bf7\u6c42\u4f1a\u8bdd\u5b8c\u5168\u76f8\u540c\u7684\u754c\u9762\u3002 client = RequestsClient() response = client.get('http://testserver/users/') assert response.status_code == 200 \u8bf7\u6ce8\u610f\uff0c\u8bf7\u6c42\u5ba2\u6237\u7aef\u8981\u6c42\u60a8\u4f20\u9012\u5b8c\u5168\u9650\u5b9a\u7684URL\u3002","title":"RequestsClient"},{"location":"api-guide/testing_zh/#requestsclient_1","text":"\u5982\u679c\u60a8\u8981\u7f16\u5199\u4ec5\u4e0e\u670d\u52a1\u63a5\u53e3\u4ea4\u4e92\u7684\u6d4b\u8bd5\uff0c\u5219 RequestsClient \u7c7b\u5f88\u6709\u7528\u3002 \u8fd9\u6bd4\u4f7f\u7528\u6807\u51c6Django\u6d4b\u8bd5\u5ba2\u6237\u7aef\u8981\u4e25\u683c\u4e00\u4e9b\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u6240\u6709\u4ea4\u4e92\u90fd\u5e94\u901a\u8fc7API\u8fdb\u884c\u3002 \u5982\u679c\u4f7f\u7528\u7684\u662f RequestsClient \uff0c\u5219\u9700\u8981\u786e\u4fdd\u6d4b\u8bd5\u8bbe\u7f6e\u548c\u7ed3\u679c\u65ad\u8a00\u662f\u4f5c\u4e3a\u5e38\u89c4API\u8c03\u7528\u6267\u884c\u7684\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4e0e\u6570\u636e\u5e93\u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\u3002 \u4f8b\u5982\uff0c\u60a8\u4e0d\u5fc5\u5217\u51fa Customer.objects.count\uff08\uff09== 3 \uff0c\u800c\u662f\u5217\u51fa\u5ba2\u6237\u7aef\u70b9\uff0c\u5e76\u786e\u4fdd\u5b83\u5305\u542b\u4e09\u4e2a\u8bb0\u5f55\u3002","title":"RequestsClient\u548c\u4f7f\u7528\u6570\u636e\u5e93"},{"location":"api-guide/testing_zh/#_7","text":"\u53ef\u4ee5\u4f7f\u7528\u4e0e\u4f7f\u7528\u6807\u51c6 request.Session \u5b9e\u4f8b\u76f8\u540c\u7684\u65b9\u5f0f\u6765\u63d0\u4f9b\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934\u548c\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u3002 from requests.auth import HTTPBasicAuth client.auth = HTTPBasicAuth('user', 'pass') client.headers.update({'x-test': 'true'})","title":"\u8bf7\u6c42\u5934&amp;\u8ba4\u8bc1"},{"location":"api-guide/testing_zh/#csrf_2","text":"\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f SessionAuthentication \uff0c\u5219\u9700\u8981\u4e3a\u6240\u6709 POST \uff0c PUT \uff0c PATCH \u6216 DELETE \u8bf7\u6c42\u5305\u62ec\u4e00\u4e2aCSRF\u4ee4\u724c\u3002 \u60a8\u53ef\u4ee5\u6309\u7167\u57fa\u4e8eJavaScript\u7684\u5ba2\u6237\u7aef\u5c06\u4f7f\u7528\u7684\u76f8\u540c\u6d41\u7a0b\u8fdb\u884c\u64cd\u4f5c\u3002 \u9996\u5148\u53d1\u51fa GET \u8bf7\u6c42\u4ee5\u83b7\u5f97CRSF\u4ee4\u724c\uff0c\u7136\u540e\u5728\u968f\u540e\u7684\u8bf7\u6c42\u4e2d\u663e\u793a\u8be5\u4ee4\u724c\u3002 \u4f8b\u5982... client = RequestsClient() # \u83b7\u53d6CSRF token. response = client.get('/homepage/') assert response.status_code == 200 csrftoken = response.cookies['csrftoken'] # \u4e0eAPI\u4ea4\u4e92 response = client.post('/organisations/', json={ 'name': 'MegaCorp', 'status': 'active' }, headers={'X-CSRFToken': csrftoken}) assert response.status_code == 200","title":"CSRF"},{"location":"api-guide/testing_zh/#_8","text":"\u901a\u8fc7\u8c28\u614e\u4f7f\u7528 RequestsClient \u548c CoreAPIClient \u90fd\u53ef\u4ee5\u7f16\u5199\u53ef\u4ee5\u5728\u5f00\u53d1\u4e2d\u8fd0\u884c\u6216\u76f4\u63a5\u5728\u767b\u53f0\u670d\u52a1\u5668\u6216\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u4f7f\u7528\u8fd9\u79cd\u6837\u5f0f\u521b\u5efa\u4e00\u4e9b\u6838\u5fc3\u529f\u80fd\u7684\u57fa\u672c\u6d4b\u8bd5\u662f\u9a8c\u8bc1\u5b9e\u65f6\u670d\u52a1\u7684\u6709\u6548\u65b9\u6cd5\u3002 \u8fd9\u6837\u505a\u53ef\u80fd\u9700\u8981\u4ed4\u7ec6\u6ce8\u610f\u8bbe\u7f6e\u548c\u5378\u8f7d\uff0c\u4ee5\u786e\u4fdd\u6d4b\u8bd5\u4ee5\u4e0d\u76f4\u63a5\u5f71\u54cd\u5ba2\u6237\u6570\u636e\u7684\u65b9\u5f0f\u8fd0\u884c\u3002","title":"\u73b0\u573a\u6d4b\u8bd5"},{"location":"api-guide/testing_zh/#coreapiclient","text":"CoreAPIClient\u5141\u8bb8\u60a8\u4f7f\u7528Python coreapi \u5ba2\u6237\u7aef\u5e93\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u3002 # \u63d0\u53d6API\u6a21\u5f0f client = CoreAPIClient() schema = client.get('http://testserver/schema/') # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684organisation params = {'name': 'MegaCorp', 'status': 'active'} client.action(schema, ['organisations', 'create'], params) # \u786e\u4fdd\u5217\u8868\u4e2d\u5b58\u5728\u8be5\u7ec4\u7ec7 data = client.action(schema, ['organisations', 'list']) assert(len(data) == 1) assert(data == [{'name': 'MegaCorp', 'status': 'active'}])","title":"CoreAPIClient"},{"location":"api-guide/testing_zh/#_9","text":"\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934\u548c\u8eab\u4efd\u9a8c\u8bc1\u53ef\u7528\u4e8e\u8ddf RequestsClient \u76f8\u4f3c\u7684 CoreAPIClient \u4e00\u8d77\u4f7f\u7528\u3002 from requests.auth import HTTPBasicAuth client = CoreAPIClient() client.session.auth = HTTPBasicAuth('user', 'pass') client.session.headers.update({'x-test': 'true'})","title":"\u8bf7\u6c42\u5934&amp;\u8ba4\u8bc1"},{"location":"api-guide/testing_zh/#_10","text":"REST framework\u5305\u62ec\u4ee5\u4e0b\u6d4b\u8bd5\u7528\u4f8b\u7c7b\uff0c\u5b83\u4eec\u53cd\u6620\u4e86\u73b0\u6709\u7684Django\u6d4b\u8bd5\u7528\u4f8b\u7c7b\uff0c\u4f46\u662f\u4f7f\u7528 APIClient \u800c\u4e0d\u662fDjango\u7684\u9ed8\u8ba4 Client \u3002 - APISimpleTestCase - APITransactionTestCase - APITestCase - APILiveServerTestCase","title":"\u6d4b\u8bd5\u6837\u4f8b"},{"location":"api-guide/testing_zh/#_11","text":"\u60a8\u53ef\u4ee5\u50cf\u4f7f\u7528\u5e38\u89c4Django\u6d4b\u8bd5\u7528\u4f8b\u7c7b\u90a3\u6837\u4f7f\u7528\u4efb\u4f55REST framework\u7684\u7528\u4f8b\u7c7b\u3002 self.client \u5c5e\u6027\u5c06\u662f\u4e00\u4e2a APIClient \u5b9e\u4f8b\u3002 from django.urls import reverse from rest_framework import status from rest_framework.test import APITestCase from myproject.apps.core.models import Account class AccountTests(APITestCase): def test_create_account(self): \"\"\" \u786e\u4fdd\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e10\u6237\u5bf9\u8c61\u3002 \"\"\" url = reverse('account-list') data = {'name': 'DabApps'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(Account.objects.count(), 1) self.assertEqual(Account.objects.get().name, 'DabApps')","title":"\u5b9e\u4f8b"},{"location":"api-guide/testing_zh/#_12","text":"","title":"\u6d4b\u8bd5\u54cd\u5e94"},{"location":"api-guide/testing_zh/#_13","text":"\u5728\u68c0\u67e5\u6d4b\u8bd5\u54cd\u5e94\u7684\u6709\u6548\u6027\u65f6\uff0c\u901a\u5e38\u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\u662f\u68c0\u67e5\u521b\u5efa\u54cd\u5e94\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u68c0\u67e5\u5b8c\u5168\u5448\u73b0\u7684\u54cd\u5e94\u3002 \u4f8b\u5982\uff0c\u68c0\u67e5 response.data \u66f4\u5bb9\u6613\uff1a response = self.client.get('/users/4/') self.assertEqual(response.data, {'id': 4, 'username': 'lauren'}) \u800c\u4e0d\u662f\u68c0\u67e5 response.content \u7684\u89e3\u6790\u7ed3\u679c\uff1a response = self.client.get('/users/4/') self.assertEqual(json.loads(response.content), {'id': 4, 'username': 'lauren'})","title":"\u68c0\u67e5\u54cd\u5e94\u6570\u636e"},{"location":"api-guide/testing_zh/#_14","text":"\u5982\u679c\u60a8\u76f4\u63a5\u4f7f\u7528 APIRequestFactory \u6d4b\u8bd5\u89c6\u56fe\uff0c\u5219\u8fd4\u56de\u7684\u54cd\u5e94\u5c06\u4e0d\u4f1a\u6e32\u67d3\uff0c\u56e0\u4e3a\u6a21\u677f\u54cd\u5e94\u7684\u6e32\u67d3\u662f\u7531Django\u7684\u5185\u90e8\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f\u6267\u884c\u7684\u3002 \u4e3a\u4e86\u8bbf\u95ee response.content \uff0c\u60a8\u9996\u5148\u9700\u8981\u6e32\u67d3\u54cd\u5e94\u3002 view = UserDetail.as_view() request = factory.get('/users/4') response = view(request, pk='4') response.render() # Cannot access `response.content` without this. self.assertEqual(response.content, '{\"username\": \"lauren\", \"id\": 4}')","title":"\u6e32\u67d3\u54cd\u5e94"},{"location":"api-guide/testing_zh/#_15","text":"","title":"\u914d\u7f6e"},{"location":"api-guide/testing_zh/#_16","text":"\u53ef\u4ee5\u4f7f\u7528 TEST_REQUEST_DEFAULT_FORMAT \u8bbe\u7f6e\u9879\u6765\u8bbe\u7f6e\u7528\u4e8e\u53d1\u51fa\u6d4b\u8bd5\u8bf7\u6c42\u7684\u9ed8\u8ba4\u683c\u5f0f\u3002 \u4f8b\u5982\uff0c\u8981\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u59cb\u7ec8\u5c06JSON\u7528\u4e8e\u6d4b\u8bd5\u8bf7\u6c42\u800c\u4e0d\u662f\u6807\u51c6\u7684\u591a\u90e8\u5206\u8868\u5355\u8bf7\u6c42\uff0c\u8bf7\u5728 settings.py \u6587\u4ef6\u4e2d\u8bbe\u7f6e\u4ee5\u4e0b\u5185\u5bb9\uff1a REST_FRAMEWORK = { ... 'TEST_REQUEST_DEFAULT_FORMAT': 'json' }","title":"\u8bbe\u7f6e\u9ed8\u8ba4\u683c\u5f0f"},{"location":"api-guide/testing_zh/#_17","text":"\u5982\u679c\u60a8\u9700\u8981\u4f7f\u7528multipart\u6216json\u8bf7\u6c42\u4e4b\u5916\u7684\u5176\u4ed6\u6d4b\u8bd5\u8bf7\u6c42\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e TEST_REQUEST_RENDERER_CLASSES \u8bbe\u7f6e\u6765\u8fdb\u884c\u3002 \u4f8b\u5982\uff0c\u8981\u589e\u52a0\u5bf9\u5728\u6d4b\u8bd5\u8bf7\u6c42\u4e2d\u4f7f\u7528 format ='html' \u7684\u652f\u6301\uff0c\u60a8\u7684 settings.py \u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u6709\u7c7b\u4f3c\u7684\u5185\u5bb9\u3002 REST_FRAMEWORK = { ... 'TEST_REQUEST_RENDERER_CLASSES': ( 'rest_framework.renderers.MultiPartRenderer', 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.TemplateHTMLRenderer' ) }","title":"\u8bbe\u7f6e\u53ef\u7528\u683c\u5f0f"},{"location":"api-guide/throttling/","text":"Throttling HTTP/1.1 420 Enhance Your Calm Twitter API rate limiting response Throttling is similar to permissions , in that it determines if a request should be authorized. Throttles indicate a temporary state, and are used to control the rate of requests that clients can make to an API. As with permissions, multiple throttles may be used. Your API might have a restrictive throttle for unauthenticated requests, and a less restrictive throttle for authenticated requests. Another scenario where you might want to use multiple throttles would be if you need to impose different constraints on different parts of the API, due to some services being particularly resource-intensive. Multiple throttles can also be used if you want to impose both burst throttling rates, and sustained throttling rates. For example, you might want to limit a user to a maximum of 60 requests per minute, and 1000 requests per day. Throttles do not necessarily only refer to rate-limiting requests. For example a storage service might also need to throttle against bandwidth, and a paid data service might want to throttle against a certain number of a records being accessed. How throttling is determined As with permissions and authentication, throttling in REST framework is always defined as a list of classes. Before running the main body of the view each throttle in the list is checked. If any throttle check fails an exceptions.Throttled exception will be raised, and the main body of the view will not run. Setting the throttling policy The default throttling policy may be set globally, using the DEFAULT_THROTTLE_CLASSES and DEFAULT_THROTTLE_RATES settings. For example. REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': [ 'rest_framework.throttling.AnonRateThrottle', 'rest_framework.throttling.UserRateThrottle' ], 'DEFAULT_THROTTLE_RATES': { 'anon': '100/day', 'user': '1000/day' } } The rate descriptions used in DEFAULT_THROTTLE_RATES may include second , minute , hour or day as the throttle period. You can also set the throttling policy on a per-view or per-viewset basis, using the APIView class-based views. from rest_framework.response import Response from rest_framework.throttling import UserRateThrottle from rest_framework.views import APIView class ExampleView(APIView): throttle_classes = [UserRateThrottle] def get(self, request, format=None): content = { 'status': 'request was permitted' } return Response(content) Or, if you're using the @api_view decorator with function based views. @api_view(['GET']) @throttle_classes([UserRateThrottle]) def example_view(request, format=None): content = { 'status': 'request was permitted' } return Response(content) How clients are identified The X-Forwarded-For HTTP header and REMOTE_ADDR WSGI variable are used to uniquely identify client IP addresses for throttling. If the X-Forwarded-For header is present then it will be used, otherwise the value of the REMOTE_ADDR variable from the WSGI environment will be used. If you need to strictly identify unique client IP addresses, you'll need to first configure the number of application proxies that the API runs behind by setting the NUM_PROXIES setting. This setting should be an integer of zero or more. If set to non-zero then the client IP will be identified as being the last IP address in the X-Forwarded-For header, once any application proxy IP addresses have first been excluded. If set to zero, then the REMOTE_ADDR value will always be used as the identifying IP address. It is important to understand that if you configure the NUM_PROXIES setting, then all clients behind a unique NAT'd gateway will be treated as a single client. Further context on how the X-Forwarded-For header works, and identifying a remote client IP can be found here . Setting up the cache The throttle classes provided by REST framework use Django's cache backend. You should make sure that you've set appropriate cache settings . The default value of LocMemCache backend should be okay for simple setups. See Django's cache documentation for more details. If you need to use a cache other than 'default' , you can do so by creating a custom throttle class and setting the cache attribute. For example: from django.core.cache import caches class CustomAnonRateThrottle(AnonRateThrottle): cache = caches['alternate'] You'll need to remember to also set your custom throttle class in the 'DEFAULT_THROTTLE_CLASSES' settings key, or using the throttle_classes view attribute. API Reference AnonRateThrottle The AnonRateThrottle will only ever throttle unauthenticated users. The IP address of the incoming request is used to generate a unique key to throttle against. The allowed request rate is determined from one of the following (in order of preference). The rate property on the class, which may be provided by overriding AnonRateThrottle and setting the property. The DEFAULT_THROTTLE_RATES['anon'] setting. AnonRateThrottle is suitable if you want to restrict the rate of requests from unknown sources. UserRateThrottle The UserRateThrottle will throttle users to a given rate of requests across the API. The user id is used to generate a unique key to throttle against. Unauthenticated requests will fall back to using the IP address of the incoming request to generate a unique key to throttle against. The allowed request rate is determined from one of the following (in order of preference). The rate property on the class, which may be provided by overriding UserRateThrottle and setting the property. The DEFAULT_THROTTLE_RATES['user'] setting. An API may have multiple UserRateThrottles in place at the same time. To do so, override UserRateThrottle and set a unique \"scope\" for each class. For example, multiple user throttle rates could be implemented by using the following classes... class BurstRateThrottle(UserRateThrottle): scope = 'burst' class SustainedRateThrottle(UserRateThrottle): scope = 'sustained' ...and the following settings. REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': [ 'example.throttles.BurstRateThrottle', 'example.throttles.SustainedRateThrottle' ], 'DEFAULT_THROTTLE_RATES': { 'burst': '60/min', 'sustained': '1000/day' } } UserRateThrottle is suitable if you want simple global rate restrictions per-user. ScopedRateThrottle The ScopedRateThrottle class can be used to restrict access to specific parts of the API. This throttle will only be applied if the view that is being accessed includes a .throttle_scope property. The unique throttle key will then be formed by concatenating the \"scope\" of the request with the unique user id or IP address. The allowed request rate is determined by the DEFAULT_THROTTLE_RATES setting using a key from the request \"scope\". For example, given the following views... class ContactListView(APIView): throttle_scope = 'contacts' ... class ContactDetailView(APIView): throttle_scope = 'contacts' ... class UploadView(APIView): throttle_scope = 'uploads' ... ...and the following settings. REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': [ 'rest_framework.throttling.ScopedRateThrottle', ], 'DEFAULT_THROTTLE_RATES': { 'contacts': '1000/day', 'uploads': '20/day' } } User requests to either ContactListView or ContactDetailView would be restricted to a total of 1000 requests per-day. User requests to UploadView would be restricted to 20 requests per day. Custom throttles To create a custom throttle, override BaseThrottle and implement .allow_request(self, request, view) . The method should return True if the request should be allowed, and False otherwise. Optionally you may also override the .wait() method. If implemented, .wait() should return a recommended number of seconds to wait before attempting the next request, or None . The .wait() method will only be called if .allow_request() has previously returned False . If the .wait() method is implemented and the request is throttled, then a Retry-After header will be included in the response. Example The following is an example of a rate throttle, that will randomly throttle 1 in every 10 requests. import random class RandomRateThrottle(throttling.BaseThrottle): def allow_request(self, request, view): return random.randint(1, 10) != 1","title":"Throttling"},{"location":"api-guide/throttling/#throttling","text":"HTTP/1.1 420 Enhance Your Calm Twitter API rate limiting response Throttling is similar to permissions , in that it determines if a request should be authorized. Throttles indicate a temporary state, and are used to control the rate of requests that clients can make to an API. As with permissions, multiple throttles may be used. Your API might have a restrictive throttle for unauthenticated requests, and a less restrictive throttle for authenticated requests. Another scenario where you might want to use multiple throttles would be if you need to impose different constraints on different parts of the API, due to some services being particularly resource-intensive. Multiple throttles can also be used if you want to impose both burst throttling rates, and sustained throttling rates. For example, you might want to limit a user to a maximum of 60 requests per minute, and 1000 requests per day. Throttles do not necessarily only refer to rate-limiting requests. For example a storage service might also need to throttle against bandwidth, and a paid data service might want to throttle against a certain number of a records being accessed.","title":"Throttling"},{"location":"api-guide/throttling/#how-throttling-is-determined","text":"As with permissions and authentication, throttling in REST framework is always defined as a list of classes. Before running the main body of the view each throttle in the list is checked. If any throttle check fails an exceptions.Throttled exception will be raised, and the main body of the view will not run.","title":"How throttling is determined"},{"location":"api-guide/throttling/#setting-the-throttling-policy","text":"The default throttling policy may be set globally, using the DEFAULT_THROTTLE_CLASSES and DEFAULT_THROTTLE_RATES settings. For example. REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': [ 'rest_framework.throttling.AnonRateThrottle', 'rest_framework.throttling.UserRateThrottle' ], 'DEFAULT_THROTTLE_RATES': { 'anon': '100/day', 'user': '1000/day' } } The rate descriptions used in DEFAULT_THROTTLE_RATES may include second , minute , hour or day as the throttle period. You can also set the throttling policy on a per-view or per-viewset basis, using the APIView class-based views. from rest_framework.response import Response from rest_framework.throttling import UserRateThrottle from rest_framework.views import APIView class ExampleView(APIView): throttle_classes = [UserRateThrottle] def get(self, request, format=None): content = { 'status': 'request was permitted' } return Response(content) Or, if you're using the @api_view decorator with function based views. @api_view(['GET']) @throttle_classes([UserRateThrottle]) def example_view(request, format=None): content = { 'status': 'request was permitted' } return Response(content)","title":"Setting the throttling policy"},{"location":"api-guide/throttling/#how-clients-are-identified","text":"The X-Forwarded-For HTTP header and REMOTE_ADDR WSGI variable are used to uniquely identify client IP addresses for throttling. If the X-Forwarded-For header is present then it will be used, otherwise the value of the REMOTE_ADDR variable from the WSGI environment will be used. If you need to strictly identify unique client IP addresses, you'll need to first configure the number of application proxies that the API runs behind by setting the NUM_PROXIES setting. This setting should be an integer of zero or more. If set to non-zero then the client IP will be identified as being the last IP address in the X-Forwarded-For header, once any application proxy IP addresses have first been excluded. If set to zero, then the REMOTE_ADDR value will always be used as the identifying IP address. It is important to understand that if you configure the NUM_PROXIES setting, then all clients behind a unique NAT'd gateway will be treated as a single client. Further context on how the X-Forwarded-For header works, and identifying a remote client IP can be found here .","title":"How clients are identified"},{"location":"api-guide/throttling/#setting-up-the-cache","text":"The throttle classes provided by REST framework use Django's cache backend. You should make sure that you've set appropriate cache settings . The default value of LocMemCache backend should be okay for simple setups. See Django's cache documentation for more details. If you need to use a cache other than 'default' , you can do so by creating a custom throttle class and setting the cache attribute. For example: from django.core.cache import caches class CustomAnonRateThrottle(AnonRateThrottle): cache = caches['alternate'] You'll need to remember to also set your custom throttle class in the 'DEFAULT_THROTTLE_CLASSES' settings key, or using the throttle_classes view attribute.","title":"Setting up the cache"},{"location":"api-guide/throttling/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/throttling/#anonratethrottle","text":"The AnonRateThrottle will only ever throttle unauthenticated users. The IP address of the incoming request is used to generate a unique key to throttle against. The allowed request rate is determined from one of the following (in order of preference). The rate property on the class, which may be provided by overriding AnonRateThrottle and setting the property. The DEFAULT_THROTTLE_RATES['anon'] setting. AnonRateThrottle is suitable if you want to restrict the rate of requests from unknown sources.","title":"AnonRateThrottle"},{"location":"api-guide/throttling/#userratethrottle","text":"The UserRateThrottle will throttle users to a given rate of requests across the API. The user id is used to generate a unique key to throttle against. Unauthenticated requests will fall back to using the IP address of the incoming request to generate a unique key to throttle against. The allowed request rate is determined from one of the following (in order of preference). The rate property on the class, which may be provided by overriding UserRateThrottle and setting the property. The DEFAULT_THROTTLE_RATES['user'] setting. An API may have multiple UserRateThrottles in place at the same time. To do so, override UserRateThrottle and set a unique \"scope\" for each class. For example, multiple user throttle rates could be implemented by using the following classes... class BurstRateThrottle(UserRateThrottle): scope = 'burst' class SustainedRateThrottle(UserRateThrottle): scope = 'sustained' ...and the following settings. REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': [ 'example.throttles.BurstRateThrottle', 'example.throttles.SustainedRateThrottle' ], 'DEFAULT_THROTTLE_RATES': { 'burst': '60/min', 'sustained': '1000/day' } } UserRateThrottle is suitable if you want simple global rate restrictions per-user.","title":"UserRateThrottle"},{"location":"api-guide/throttling/#scopedratethrottle","text":"The ScopedRateThrottle class can be used to restrict access to specific parts of the API. This throttle will only be applied if the view that is being accessed includes a .throttle_scope property. The unique throttle key will then be formed by concatenating the \"scope\" of the request with the unique user id or IP address. The allowed request rate is determined by the DEFAULT_THROTTLE_RATES setting using a key from the request \"scope\". For example, given the following views... class ContactListView(APIView): throttle_scope = 'contacts' ... class ContactDetailView(APIView): throttle_scope = 'contacts' ... class UploadView(APIView): throttle_scope = 'uploads' ... ...and the following settings. REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': [ 'rest_framework.throttling.ScopedRateThrottle', ], 'DEFAULT_THROTTLE_RATES': { 'contacts': '1000/day', 'uploads': '20/day' } } User requests to either ContactListView or ContactDetailView would be restricted to a total of 1000 requests per-day. User requests to UploadView would be restricted to 20 requests per day.","title":"ScopedRateThrottle"},{"location":"api-guide/throttling/#custom-throttles","text":"To create a custom throttle, override BaseThrottle and implement .allow_request(self, request, view) . The method should return True if the request should be allowed, and False otherwise. Optionally you may also override the .wait() method. If implemented, .wait() should return a recommended number of seconds to wait before attempting the next request, or None . The .wait() method will only be called if .allow_request() has previously returned False . If the .wait() method is implemented and the request is throttled, then a Retry-After header will be included in the response.","title":"Custom throttles"},{"location":"api-guide/throttling/#example","text":"The following is an example of a rate throttle, that will randomly throttle 1 in every 10 requests. import random class RandomRateThrottle(throttling.BaseThrottle): def allow_request(self, request, view): return random.randint(1, 10) != 1","title":"Example"},{"location":"api-guide/throttling_zh/","text":"Throttling \uff08\u9650\u6d41\uff09 HTTP/1.1 420 Enhance Your Calm Twitter API rate limiting response \u7c7b\u4f3c\u4e8e[\u6743\u9650]\uff0c\u9650\u6d41\u5668\u51b3\u5b9a\u662f\u5426\u5e94\u5f53\u6388\u6743\u8bf7\u6c42\u3002\u9650\u6d41\u5668\u6307\u793a\u4e34\u65f6\u72b6\u6001\uff0c\u5e76\u88ab\u7528\u4e8e\u63a7\u5236\u5ba2\u6237\u7aef\u80fd\u591f\u5411API\u53d1\u51fa\u8bf7\u6c42\u7684\u9891\u7387\u3002 \u4e0e\u6743\u9650\u4e00\u6837\uff0c\u591a\u4e2a\u9650\u6d41\u5668\u53ef\u80fd\u4f1a\u88ab\u5e94\u7528\u3002\u60a8\u7684API\u6216\u8bb8\u4f1a\u5bf9\u672a\u7ecf\u8ba4\u8bc1\u7684\u8bf7\u6c42\u8fdb\u884c\u9650\u5236\uff0c\u800c\u5bf9\u4e8e\u5df2\u7ecf\u8ba4\u8bc1\u7684\u8bf7\u6c42\u8fdb\u884c\u76f8\u5bf9\u66f4\u5c11\u7684\u9650\u5236\u3002 \u53e6\u4e00\u4e2a\u60a8\u53ef\u80fd\u4f1a\u60f3\u8981\u4f7f\u7528\u591a\u4e2a\u9650\u6d41\u5668\u7684\u60c5\u51b5\u662f\u7531\u4e8e\u67d0\u4e9b\u670d\u52a1\u7279\u522b\u8017\u8d39\u8d44\u6e90\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u5bf9API\u7684\u4e0d\u540c\u90e8\u5206\u65bd\u52a0\u4e0d\u540c\u7684\u9650\u5236\u3002 \u5982\u679c\u9700\u8981\u540c\u65f6\u5e94\u7528\u7a81\u53d1\u9650\u5236\u6d41\u91cf\u548c\u6301\u7eed\u9650\u5236\u6d41\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u9650\u6d41\u5668\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5c06\u7528\u6237\u9650\u5236\u4e3a\u6bcf\u5206\u949f\u6700\u591a60\u4e2a\u8bf7\u6c42\uff0c\u6bcf\u5929\u6700\u591a1000\u4e2a\u8bf7\u6c42\u3002 \u9650\u6d41\u5668\u4e0d\u4e00\u5b9a\u4ec5\u6307\u9650\u5236\u8bf7\u6c42\u7684\u9891\u6b21\u3002\u4f8b\u5982\uff0c\u5b58\u50a8\u670d\u52a1\u53ef\u80fd\u8fd8\u9700\u8981\u9650\u5236\u5e26\u5bbd\uff0c\u800c\u4ed8\u8d39\u6570\u636e\u670d\u52a1\u5219\u53ef\u80fd\u9700\u8981\u9650\u5236\u88ab\u8bbf\u95ee\u7684\u8bb0\u5f55\u7684\u7279\u5b9a\u6570\u91cf\u3002 How throttling is determined \uff08\u5982\u4f55\u51b3\u5b9a\u9650\u6d41\uff09 \u4e0e\u6743\u9650\u548c\u8eab\u4efd\u9a8c\u8bc1\u4e00\u6837\uff0cREST\u6846\u67b6\u4e2d\u7684\u9650\u5236\u603b\u662f\u88ab\u5b9a\u4e49\u4e3a\u4e00\u7cfb\u5217\u7684\u7c7b\u3002 \u5728\u8fd0\u884c\u89c6\u56fe\u4e3b\u4f53\u4e4b\u524d\uff0c\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u9650\u6d41\u5668\u4f1a\u88ab\u68c0\u67e5\u3002\u5982\u679c\u4efb\u4f55\u9650\u6d41\u5668\u68c0\u67e5\u5f02\u5e38\uff0c\u5219\u5c06\u629b\u51fa exceptions.Throttled \uff0c\u5e76\u4e14\u89c6\u56fe\u4e3b\u4f53\u5c06\u4e0d\u4f1a\u8fd0\u884c\u3002 Setting the throttling policy \uff08\u8bbe\u5b9a\u9650\u6d41\u7b56\u7565\uff09 \u901a\u8fc7\u4f7f\u7528 DEFAULT_THROTTLE_CLASSES \u548c DEFAULT_THROTTLE_RATES \u9ed8\u8ba4\u9650\u6d41\u7b56\u7565\u5c06\u88ab\u5168\u5c40\u8bbe\u5b9a,\u4f8b\u5982\uff1a REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': ( 'rest_framework.throttling.AnonRateThrottle', 'rest_framework.throttling.UserRateThrottle' ), 'DEFAULT_THROTTLE_RATES': { 'anon': '100/day', 'user': '1000/day' } } \u88ab\u7528\u4e8e DEFAULT_THROTTLE_RATES \u4e2d\u7684\u6d41\u91cf\u63cf\u8ff0\u53ef\u80fd\u5305\u62ec second , minute , hour or day \u4f5c\u4e3a\u9650\u6d41\u5468\u671f \u5bf9\u4e8e\u57fa\u4e8e APIView \u7c7b\u7684\u89c6\u56fe\uff0c\u60a8\u53ef\u4ee5\u4ee5\u6bcf\u4e2a\u89c6\u56fe\u6216\u6bcf\u4e2a\u89c6\u56fe\u96c6\u4e3a\u57fa\u7840\u8bbe\u7f6e\u9650\u6d41\u7b56\u7565 from rest_framework.response import Response from rest_framework.throttling import UserRateThrottle from rest_framework.views import APIView class ExampleView(APIView): throttle_classes = (UserRateThrottle,) def get(self, request, format=None): content = { 'status': 'request was permitted' } return Response(content) \u6216\u8005\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u5e26\u6709 @api_view \u88c5\u9970\u5668\u7684\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe @api_view(['GET']) @throttle_classes([UserRateThrottle]) def example_view(request, format=None): content = { 'status': 'request was permitted' } return Response(content) How clients are identified \uff08\u5982\u4f55\u8bc6\u522b\u5ba2\u6237\u7aef) X-Forwarded-For HTTP \u8bf7\u6c42\u5934\u548c REMOTE_ADDR WSGI \u53d8\u91cf\u7528\u4e8e\u552f\u4e00\u5730\u6807\u8bc6\u7528\u6237\u7684IP\u5730\u5740\u3002\u5982\u679c\u5b58\u5728 X-Forwarded-For \u8bf7\u6c42\u5934\uff0c\u5219\u5c06\u4f7f\u7528\u5b83\uff0c\u5426\u5219\u5c06\u4f7f\u7528WSGI\u73af\u5883\u4e2d REMOTE_ADDR \u53d8\u91cf\u7684\u503c\u3002 \u5982\u679c\u9700\u8981\u4e25\u683c\u6807\u8bc6\u552f\u4e00\u7684\u5ba2\u6237\u7aefIP\u5730\u5740\uff0c\u5219\u9700\u8981\u9996\u5148\u901a\u8fc7\u8bbe\u7f6e NUM_proxies \u8bbe\u7f6e\u6765\u914d\u7f6eAPI\u540e\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7406\u7684\u6570\u91cf\u3002\u6b64\u8bbe\u7f6e\u5e94\u4e3a\u96f6\u6216\u66f4\u5927\u7684\u6574\u6570\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a\u975e\u96f6\uff0c\u90a3\u4e48\u4e00\u65e6\u7b2c\u4e00\u6b21\u6392\u9664\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7406IP\u5730\u5740\uff0c\u5ba2\u6237\u7aefIP\u5c06\u88ab\u6807\u8bc6\u4e3a \u00b7X-Forwarded-For\u00b7 \u6807\u5934\u4e2d\u7684\u6700\u540e\u4e00\u4e2aIP\u5730\u5740\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a\u96f6\uff0c\u5219 Remote-Addr \u5934\u5c06\u59cb\u7ec8\u7528\u4e8e\u6807\u8bc6IP\u5730\u5740\u3002 \u91cd\u8981\u7684\u662f\u8981\u4e86\u89e3\uff0c\u5982\u679c\u914d\u7f6e NUM_PROXIES \u8bbe\u7f6e\uff0c\u90a3\u4e48\u4e00\u4e2a\u552f\u4e00\u7684 NAT'd \u7f51\u5173\u540e\u9762\u7684\u6240\u6709\u5ba2\u6237\u7aef\u90fd\u5c06\u88ab\u89c6\u4e3a\u5355\u4e2a\u5ba2\u6237\u7aef\u3002 \u5173\u4e8e X-Forwarded-For \u8bf7\u6c42\u5934\u5982\u4f55\u5de5\u4f5c\u4ee5\u53ca\u6807\u8bc6\u8fdc\u7a0b\u5ba2\u6237\u7aefIP\u7684\u66f4\u591a\u4e0a\u4e0b\u6587\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 Setting up the cache (\u8bbe\u7f6e\u7f13\u5b58) REST\u6846\u67b6\u63d0\u4f9b\u7684\u8282\u6d41\u7c7b\u4f7f\u7528Django\u7684\u7f13\u5b58\u540e\u7aef\u3002\u60a8\u5e94\u8be5\u786e\u4fdd\u5df2\u8bbe\u7f6e\u9002\u5f53\u7684 \u7f13\u5b58\u8bbe\u7f6e \u3002\u5bf9\u4e8e\u7b80\u5355\u8bbe\u7f6e\uff0c\u540e\u7aef\u7684\u9ed8\u8ba4\u503c LocMemCache \u5373\u53ef\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1Django\u7684 \u7f13\u5b58\u6587\u6863 \u3002 \u5982\u679c\u60a8\u9700\u8981\u4f7f\u7528 'default' \u4ee5\u5916\u7684\u7f13\u5b58\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u81ea\u5b9a\u4e49\u7684\u8282\u6d41\u7c7b\u5e76\u8bbe\u7f6e\u7f13\u5b58\u5c5e\u6027\u6765\u5b9e\u73b0\u3002 \u4f8b\u5982\uff1a class CustomAnonRateThrottle(AnonRateThrottle): cache = get_cache('alternate') \u60a8\u9700\u8981\u8bb0\u4f4f\uff0c\u8fd8\u9700\u8981\u5728 'DEFAULT_THROTTLE_CLASSES' \u8bbe\u7f6e\u952e\u4e2d\u8bbe\u7f6e\u60a8\u7684\u81ea\u5b9a\u4e49\u9650\u6d41\u5668\uff0c\u6216\u4f7f\u7528 throttle_classes \u89c6\u56fe\u5c5e\u6027\u3002 API Reference AnonRateThrottle AnonRateThrottle \u4f1a\u9650\u5236\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u3002\u4f20\u5165\u8bf7\u6c42\u7684IP\u5730\u5740\u7528\u4e8e\u751f\u6210\u552f\u4e00\u7684\u5bc6\u94a5\u4ee5\u8fdb\u884c\u9650\u5236\u3002 \u5141\u8bb8\u7684\u8bf7\u6c42\u9891\u6b21\u7531\u4ee5\u4e0b\u4e4b\u4e00\u786e\u5b9a\uff08\u6309\u4f18\u5148\u987a\u5e8f\uff09\u3002 \u7c7b\u7684 rate \u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 AnonRateThrottle \u5e76\u8bbe\u7f6e\u8be5\u5c5e\u6027\u6765\u63d0\u4f9b\u3002 DEFAULT_THROTTLE_RATES['anon'] \u8bbe\u7f6e\u3002 \u5982\u679c\u8981\u9650\u5236\u6765\u81ea\u672a\u77e5\u6e90\u7684\u8bf7\u6c42\u901f\u7387\uff0c\u5219 AnonRateThrottle \u662f\u5408\u9002\u7684\u3002 UserRateThrottle UserRateThrottle \u5c06\u901a\u8fc7API\u5c06\u7528\u6237\u9650\u5236\u4e3a\u7ed9\u5b9a\u7684\u8bf7\u6c42\u901f\u7387\u3002\u7528\u6237ID\u7528\u4e8e\u751f\u6210\u552f\u4e00\u7684\u5bc6\u94a5\u4ee5\u8fdb\u884c\u9650\u5236\u3002\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u5c06\u9000\u56de\u5230\u4f7f\u7528\u4f20\u5165\u8bf7\u6c42\u7684IP\u5730\u5740\u6765\u751f\u6210\u552f\u4e00\u5bc6\u94a5\u4ee5\u8fdb\u884c\u9650\u5236\u3002 \u5141\u8bb8\u7684\u8bf7\u6c42\u901f\u7387\u7531\u4ee5\u4e0b\u4e4b\u4e00\u786e\u5b9a\uff08\u6309\u4f18\u5148\u987a\u5e8f\uff09\u3002 \u7c7b\u7684 rate \u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 UserRateThrottle \u5e76\u8bbe\u7f6e\u8be5\u5c5e\u6027\u6765\u63d0\u4f9b\u3002 DEFAULT_THROTTLE_RATES['user'] \u8bbe\u7f6e\u3002 \u4e00\u4e2aAPI\u53ef\u80fd\u540c\u65f6\u5177\u6709\u591a\u4e2a UserRateThrottles \u3002\u4e3a\u6b64\uff0c\u8bf7\u91cd\u5199 UserRateThrottle \u5e76\u4e3a\u6bcf\u4e2a\u7c7b\u8bbe\u7f6e\u4e00\u4e2a\u552f\u4e00\u7684\u201c\u4f5c\u7528\u57df\u201d\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4ee5\u4e0b\u7c7b\u6765\u5b9e\u73b0\u591a\u4e2a\u7528\u6237\u8282\u6d41\u7387... class BurstRateThrottle(UserRateThrottle): scope = 'burst' class SustainedRateThrottle(UserRateThrottle): scope = 'sustained' ...\u548c\u4ee5\u4e0b\u8bbe\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': ( 'example.throttles.BurstRateThrottle', 'example.throttles.SustainedRateThrottle' ), 'DEFAULT_THROTTLE_RATES': { 'burst': '60/min', 'sustained': '1000/day' } } UserRateThrottle is suitable if you want simple global rate restrictions per-user. ScopedRateThrottle ScopedRateThrottle \u7c7b\u53ef\u7528\u4e8e\u9650\u5236\u5bf9API\u7279\u5b9a\u90e8\u5206\u7684\u8bbf\u95ee\u3002\u4ec5\u5f53\u6240\u8bbf\u95ee\u7684\u89c6\u56fe\u5305\u542b. throttle_scope \u5c5e\u6027\u65f6\uff0c\u624d\u4f1a\u5e94\u7528\u6b64\u9650\u6d41\u5668\u3002\u7136\u540e\uff0c\u901a\u8fc7\u5c06\u8bf7\u6c42\u7684\u201c\u8303\u56f4\u201d\u4e0e\u552f\u4e00\u7684\u7528\u6237ID\u6216IP\u5730\u5740\u4e32\u8054\u8d77\u6765\uff0c\u5373\u53ef\u5f62\u6210\u552f\u4e00\u7684\u9650\u5236\u952e\u3002 \u5141\u8bb8\u7684\u8bf7\u6c42\u901f\u7387\u7531 DEFAULT_THROTTLE_RATES \u8bbe\u7f6e\u4f7f\u7528\u8bf7\u6c42\u201cscope\u201d\u4e2d\u7684\u952e\u786e\u5b9a\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4ee5\u4e0b\u89c6\u56fe... class ContactListView(APIView): throttle_scope = 'contacts' ... class ContactDetailView(APIView): throttle_scope = 'contacts' ... class UploadView(APIView): throttle_scope = 'uploads' ... ...\u548c\u4ee5\u4e0b\u8bbe\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': ( 'rest_framework.throttling.ScopedRateThrottle', ), 'DEFAULT_THROTTLE_RATES': { 'contacts': '1000/day', 'uploads': '20/day' } } \u7528\u6237\u5bf9 ContactListView \u6216 ContactDetailView \u7684\u8bf7\u6c42\u5c06\u88ab\u9650\u5236\u4e3a\u6bcf\u5929\u5171\u8ba11000\u4e2a\u8bf7\u6c42\u3002\u7528\u6237\u5bf9 UploadView \u7684\u8bf7\u6c42\u5c06\u88ab\u9650\u5236\u4e3a\u6bcf\u5929\u5171\u8ba120\u4e2a\u8bf7\u6c42\u3002 Custom throttles \uff08\u81ea\u5b9a\u4e49\u9650\u6d41\uff09 \u82e5\u8981\u521b\u5efa\u81ea\u5b9a\u4e49\u9650\u6d41\u5668\uff0c\u8bf7\u91cd\u5199 BaseThrottle \u5e76\u4f7f\u7528 .allow_request(self, request, view) \u3002\u5982\u679c\u5141\u8bb8\u8bf7\u6c42\uff0c\u5219\u8be5\u65b9\u6cd5\u5e94\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002 \u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u91cd\u5199 .wait() \u65b9\u6cd5\u3002\u5982\u679c\u88ab\u4f7f\u7528\uff0c .wait() \u5e94\u8fd4\u56de\u5c1d\u8bd5\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u524d\u5efa\u8bae\u7684\u7b49\u5f85\u79d2\u6570\uff0c\u6216\u8005 None \u3002\u53ea\u6709\u5728 .allow_request() \u5148\u524d\u5df2\u8fd4\u56de False \u65f6\u624d\u4f1a\u8c03\u7528 .wait() \u65b9\u6cd5\u3002 \u5982\u679c\u4f7f\u7528\u4e86 .wait() \u65b9\u6cd5\u5e76\u9650\u5236\u4e86\u8bf7\u6c42\uff0c\u5219\u54cd\u5e94\u4e2d\u5c06\u5305\u542b Retry-After \u5934\u3002 Example \u4e0b\u9762\u662f\u4e00\u4e2a\u9650\u6d41\u7684\u4f8b\u5b50\uff0c\u5b83\u5c06\u5728\u6bcf10\u4e2a\u8bf7\u6c42\u4e2d\u968f\u673a\u5730\u9650\u52361\u4e2a\u3002 import random class RandomRateThrottle(throttling.BaseThrottle): def allow_request(self, request, view): return random.randint(1, 10) != 1","title":"Throttling"},{"location":"api-guide/throttling_zh/#throttling","text":"HTTP/1.1 420 Enhance Your Calm Twitter API rate limiting response \u7c7b\u4f3c\u4e8e[\u6743\u9650]\uff0c\u9650\u6d41\u5668\u51b3\u5b9a\u662f\u5426\u5e94\u5f53\u6388\u6743\u8bf7\u6c42\u3002\u9650\u6d41\u5668\u6307\u793a\u4e34\u65f6\u72b6\u6001\uff0c\u5e76\u88ab\u7528\u4e8e\u63a7\u5236\u5ba2\u6237\u7aef\u80fd\u591f\u5411API\u53d1\u51fa\u8bf7\u6c42\u7684\u9891\u7387\u3002 \u4e0e\u6743\u9650\u4e00\u6837\uff0c\u591a\u4e2a\u9650\u6d41\u5668\u53ef\u80fd\u4f1a\u88ab\u5e94\u7528\u3002\u60a8\u7684API\u6216\u8bb8\u4f1a\u5bf9\u672a\u7ecf\u8ba4\u8bc1\u7684\u8bf7\u6c42\u8fdb\u884c\u9650\u5236\uff0c\u800c\u5bf9\u4e8e\u5df2\u7ecf\u8ba4\u8bc1\u7684\u8bf7\u6c42\u8fdb\u884c\u76f8\u5bf9\u66f4\u5c11\u7684\u9650\u5236\u3002 \u53e6\u4e00\u4e2a\u60a8\u53ef\u80fd\u4f1a\u60f3\u8981\u4f7f\u7528\u591a\u4e2a\u9650\u6d41\u5668\u7684\u60c5\u51b5\u662f\u7531\u4e8e\u67d0\u4e9b\u670d\u52a1\u7279\u522b\u8017\u8d39\u8d44\u6e90\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u5bf9API\u7684\u4e0d\u540c\u90e8\u5206\u65bd\u52a0\u4e0d\u540c\u7684\u9650\u5236\u3002 \u5982\u679c\u9700\u8981\u540c\u65f6\u5e94\u7528\u7a81\u53d1\u9650\u5236\u6d41\u91cf\u548c\u6301\u7eed\u9650\u5236\u6d41\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u9650\u6d41\u5668\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5c06\u7528\u6237\u9650\u5236\u4e3a\u6bcf\u5206\u949f\u6700\u591a60\u4e2a\u8bf7\u6c42\uff0c\u6bcf\u5929\u6700\u591a1000\u4e2a\u8bf7\u6c42\u3002 \u9650\u6d41\u5668\u4e0d\u4e00\u5b9a\u4ec5\u6307\u9650\u5236\u8bf7\u6c42\u7684\u9891\u6b21\u3002\u4f8b\u5982\uff0c\u5b58\u50a8\u670d\u52a1\u53ef\u80fd\u8fd8\u9700\u8981\u9650\u5236\u5e26\u5bbd\uff0c\u800c\u4ed8\u8d39\u6570\u636e\u670d\u52a1\u5219\u53ef\u80fd\u9700\u8981\u9650\u5236\u88ab\u8bbf\u95ee\u7684\u8bb0\u5f55\u7684\u7279\u5b9a\u6570\u91cf\u3002","title":"Throttling \uff08\u9650\u6d41\uff09"},{"location":"api-guide/throttling_zh/#how-throttling-is-determined","text":"\u4e0e\u6743\u9650\u548c\u8eab\u4efd\u9a8c\u8bc1\u4e00\u6837\uff0cREST\u6846\u67b6\u4e2d\u7684\u9650\u5236\u603b\u662f\u88ab\u5b9a\u4e49\u4e3a\u4e00\u7cfb\u5217\u7684\u7c7b\u3002 \u5728\u8fd0\u884c\u89c6\u56fe\u4e3b\u4f53\u4e4b\u524d\uff0c\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u9650\u6d41\u5668\u4f1a\u88ab\u68c0\u67e5\u3002\u5982\u679c\u4efb\u4f55\u9650\u6d41\u5668\u68c0\u67e5\u5f02\u5e38\uff0c\u5219\u5c06\u629b\u51fa exceptions.Throttled \uff0c\u5e76\u4e14\u89c6\u56fe\u4e3b\u4f53\u5c06\u4e0d\u4f1a\u8fd0\u884c\u3002","title":"How throttling is determined \uff08\u5982\u4f55\u51b3\u5b9a\u9650\u6d41\uff09"},{"location":"api-guide/throttling_zh/#setting-the-throttling-policy","text":"\u901a\u8fc7\u4f7f\u7528 DEFAULT_THROTTLE_CLASSES \u548c DEFAULT_THROTTLE_RATES \u9ed8\u8ba4\u9650\u6d41\u7b56\u7565\u5c06\u88ab\u5168\u5c40\u8bbe\u5b9a,\u4f8b\u5982\uff1a REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': ( 'rest_framework.throttling.AnonRateThrottle', 'rest_framework.throttling.UserRateThrottle' ), 'DEFAULT_THROTTLE_RATES': { 'anon': '100/day', 'user': '1000/day' } } \u88ab\u7528\u4e8e DEFAULT_THROTTLE_RATES \u4e2d\u7684\u6d41\u91cf\u63cf\u8ff0\u53ef\u80fd\u5305\u62ec second , minute , hour or day \u4f5c\u4e3a\u9650\u6d41\u5468\u671f \u5bf9\u4e8e\u57fa\u4e8e APIView \u7c7b\u7684\u89c6\u56fe\uff0c\u60a8\u53ef\u4ee5\u4ee5\u6bcf\u4e2a\u89c6\u56fe\u6216\u6bcf\u4e2a\u89c6\u56fe\u96c6\u4e3a\u57fa\u7840\u8bbe\u7f6e\u9650\u6d41\u7b56\u7565 from rest_framework.response import Response from rest_framework.throttling import UserRateThrottle from rest_framework.views import APIView class ExampleView(APIView): throttle_classes = (UserRateThrottle,) def get(self, request, format=None): content = { 'status': 'request was permitted' } return Response(content) \u6216\u8005\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u5e26\u6709 @api_view \u88c5\u9970\u5668\u7684\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe @api_view(['GET']) @throttle_classes([UserRateThrottle]) def example_view(request, format=None): content = { 'status': 'request was permitted' } return Response(content)","title":"Setting the throttling policy \uff08\u8bbe\u5b9a\u9650\u6d41\u7b56\u7565\uff09"},{"location":"api-guide/throttling_zh/#how-clients-are-identified","text":"X-Forwarded-For HTTP \u8bf7\u6c42\u5934\u548c REMOTE_ADDR WSGI \u53d8\u91cf\u7528\u4e8e\u552f\u4e00\u5730\u6807\u8bc6\u7528\u6237\u7684IP\u5730\u5740\u3002\u5982\u679c\u5b58\u5728 X-Forwarded-For \u8bf7\u6c42\u5934\uff0c\u5219\u5c06\u4f7f\u7528\u5b83\uff0c\u5426\u5219\u5c06\u4f7f\u7528WSGI\u73af\u5883\u4e2d REMOTE_ADDR \u53d8\u91cf\u7684\u503c\u3002 \u5982\u679c\u9700\u8981\u4e25\u683c\u6807\u8bc6\u552f\u4e00\u7684\u5ba2\u6237\u7aefIP\u5730\u5740\uff0c\u5219\u9700\u8981\u9996\u5148\u901a\u8fc7\u8bbe\u7f6e NUM_proxies \u8bbe\u7f6e\u6765\u914d\u7f6eAPI\u540e\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7406\u7684\u6570\u91cf\u3002\u6b64\u8bbe\u7f6e\u5e94\u4e3a\u96f6\u6216\u66f4\u5927\u7684\u6574\u6570\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a\u975e\u96f6\uff0c\u90a3\u4e48\u4e00\u65e6\u7b2c\u4e00\u6b21\u6392\u9664\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7406IP\u5730\u5740\uff0c\u5ba2\u6237\u7aefIP\u5c06\u88ab\u6807\u8bc6\u4e3a \u00b7X-Forwarded-For\u00b7 \u6807\u5934\u4e2d\u7684\u6700\u540e\u4e00\u4e2aIP\u5730\u5740\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a\u96f6\uff0c\u5219 Remote-Addr \u5934\u5c06\u59cb\u7ec8\u7528\u4e8e\u6807\u8bc6IP\u5730\u5740\u3002 \u91cd\u8981\u7684\u662f\u8981\u4e86\u89e3\uff0c\u5982\u679c\u914d\u7f6e NUM_PROXIES \u8bbe\u7f6e\uff0c\u90a3\u4e48\u4e00\u4e2a\u552f\u4e00\u7684 NAT'd \u7f51\u5173\u540e\u9762\u7684\u6240\u6709\u5ba2\u6237\u7aef\u90fd\u5c06\u88ab\u89c6\u4e3a\u5355\u4e2a\u5ba2\u6237\u7aef\u3002 \u5173\u4e8e X-Forwarded-For \u8bf7\u6c42\u5934\u5982\u4f55\u5de5\u4f5c\u4ee5\u53ca\u6807\u8bc6\u8fdc\u7a0b\u5ba2\u6237\u7aefIP\u7684\u66f4\u591a\u4e0a\u4e0b\u6587\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002","title":"How clients are identified \uff08\u5982\u4f55\u8bc6\u522b\u5ba2\u6237\u7aef)"},{"location":"api-guide/throttling_zh/#setting-up-the-cache","text":"REST\u6846\u67b6\u63d0\u4f9b\u7684\u8282\u6d41\u7c7b\u4f7f\u7528Django\u7684\u7f13\u5b58\u540e\u7aef\u3002\u60a8\u5e94\u8be5\u786e\u4fdd\u5df2\u8bbe\u7f6e\u9002\u5f53\u7684 \u7f13\u5b58\u8bbe\u7f6e \u3002\u5bf9\u4e8e\u7b80\u5355\u8bbe\u7f6e\uff0c\u540e\u7aef\u7684\u9ed8\u8ba4\u503c LocMemCache \u5373\u53ef\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1Django\u7684 \u7f13\u5b58\u6587\u6863 \u3002 \u5982\u679c\u60a8\u9700\u8981\u4f7f\u7528 'default' \u4ee5\u5916\u7684\u7f13\u5b58\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u81ea\u5b9a\u4e49\u7684\u8282\u6d41\u7c7b\u5e76\u8bbe\u7f6e\u7f13\u5b58\u5c5e\u6027\u6765\u5b9e\u73b0\u3002 \u4f8b\u5982\uff1a class CustomAnonRateThrottle(AnonRateThrottle): cache = get_cache('alternate') \u60a8\u9700\u8981\u8bb0\u4f4f\uff0c\u8fd8\u9700\u8981\u5728 'DEFAULT_THROTTLE_CLASSES' \u8bbe\u7f6e\u952e\u4e2d\u8bbe\u7f6e\u60a8\u7684\u81ea\u5b9a\u4e49\u9650\u6d41\u5668\uff0c\u6216\u4f7f\u7528 throttle_classes \u89c6\u56fe\u5c5e\u6027\u3002","title":"Setting up the cache (\u8bbe\u7f6e\u7f13\u5b58)"},{"location":"api-guide/throttling_zh/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/throttling_zh/#anonratethrottle","text":"AnonRateThrottle \u4f1a\u9650\u5236\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u3002\u4f20\u5165\u8bf7\u6c42\u7684IP\u5730\u5740\u7528\u4e8e\u751f\u6210\u552f\u4e00\u7684\u5bc6\u94a5\u4ee5\u8fdb\u884c\u9650\u5236\u3002 \u5141\u8bb8\u7684\u8bf7\u6c42\u9891\u6b21\u7531\u4ee5\u4e0b\u4e4b\u4e00\u786e\u5b9a\uff08\u6309\u4f18\u5148\u987a\u5e8f\uff09\u3002 \u7c7b\u7684 rate \u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 AnonRateThrottle \u5e76\u8bbe\u7f6e\u8be5\u5c5e\u6027\u6765\u63d0\u4f9b\u3002 DEFAULT_THROTTLE_RATES['anon'] \u8bbe\u7f6e\u3002 \u5982\u679c\u8981\u9650\u5236\u6765\u81ea\u672a\u77e5\u6e90\u7684\u8bf7\u6c42\u901f\u7387\uff0c\u5219 AnonRateThrottle \u662f\u5408\u9002\u7684\u3002","title":"AnonRateThrottle"},{"location":"api-guide/throttling_zh/#userratethrottle","text":"UserRateThrottle \u5c06\u901a\u8fc7API\u5c06\u7528\u6237\u9650\u5236\u4e3a\u7ed9\u5b9a\u7684\u8bf7\u6c42\u901f\u7387\u3002\u7528\u6237ID\u7528\u4e8e\u751f\u6210\u552f\u4e00\u7684\u5bc6\u94a5\u4ee5\u8fdb\u884c\u9650\u5236\u3002\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u5c06\u9000\u56de\u5230\u4f7f\u7528\u4f20\u5165\u8bf7\u6c42\u7684IP\u5730\u5740\u6765\u751f\u6210\u552f\u4e00\u5bc6\u94a5\u4ee5\u8fdb\u884c\u9650\u5236\u3002 \u5141\u8bb8\u7684\u8bf7\u6c42\u901f\u7387\u7531\u4ee5\u4e0b\u4e4b\u4e00\u786e\u5b9a\uff08\u6309\u4f18\u5148\u987a\u5e8f\uff09\u3002 \u7c7b\u7684 rate \u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 UserRateThrottle \u5e76\u8bbe\u7f6e\u8be5\u5c5e\u6027\u6765\u63d0\u4f9b\u3002 DEFAULT_THROTTLE_RATES['user'] \u8bbe\u7f6e\u3002 \u4e00\u4e2aAPI\u53ef\u80fd\u540c\u65f6\u5177\u6709\u591a\u4e2a UserRateThrottles \u3002\u4e3a\u6b64\uff0c\u8bf7\u91cd\u5199 UserRateThrottle \u5e76\u4e3a\u6bcf\u4e2a\u7c7b\u8bbe\u7f6e\u4e00\u4e2a\u552f\u4e00\u7684\u201c\u4f5c\u7528\u57df\u201d\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4ee5\u4e0b\u7c7b\u6765\u5b9e\u73b0\u591a\u4e2a\u7528\u6237\u8282\u6d41\u7387... class BurstRateThrottle(UserRateThrottle): scope = 'burst' class SustainedRateThrottle(UserRateThrottle): scope = 'sustained' ...\u548c\u4ee5\u4e0b\u8bbe\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': ( 'example.throttles.BurstRateThrottle', 'example.throttles.SustainedRateThrottle' ), 'DEFAULT_THROTTLE_RATES': { 'burst': '60/min', 'sustained': '1000/day' } } UserRateThrottle is suitable if you want simple global rate restrictions per-user.","title":"UserRateThrottle"},{"location":"api-guide/throttling_zh/#scopedratethrottle","text":"ScopedRateThrottle \u7c7b\u53ef\u7528\u4e8e\u9650\u5236\u5bf9API\u7279\u5b9a\u90e8\u5206\u7684\u8bbf\u95ee\u3002\u4ec5\u5f53\u6240\u8bbf\u95ee\u7684\u89c6\u56fe\u5305\u542b. throttle_scope \u5c5e\u6027\u65f6\uff0c\u624d\u4f1a\u5e94\u7528\u6b64\u9650\u6d41\u5668\u3002\u7136\u540e\uff0c\u901a\u8fc7\u5c06\u8bf7\u6c42\u7684\u201c\u8303\u56f4\u201d\u4e0e\u552f\u4e00\u7684\u7528\u6237ID\u6216IP\u5730\u5740\u4e32\u8054\u8d77\u6765\uff0c\u5373\u53ef\u5f62\u6210\u552f\u4e00\u7684\u9650\u5236\u952e\u3002 \u5141\u8bb8\u7684\u8bf7\u6c42\u901f\u7387\u7531 DEFAULT_THROTTLE_RATES \u8bbe\u7f6e\u4f7f\u7528\u8bf7\u6c42\u201cscope\u201d\u4e2d\u7684\u952e\u786e\u5b9a\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4ee5\u4e0b\u89c6\u56fe... class ContactListView(APIView): throttle_scope = 'contacts' ... class ContactDetailView(APIView): throttle_scope = 'contacts' ... class UploadView(APIView): throttle_scope = 'uploads' ... ...\u548c\u4ee5\u4e0b\u8bbe\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_THROTTLE_CLASSES': ( 'rest_framework.throttling.ScopedRateThrottle', ), 'DEFAULT_THROTTLE_RATES': { 'contacts': '1000/day', 'uploads': '20/day' } } \u7528\u6237\u5bf9 ContactListView \u6216 ContactDetailView \u7684\u8bf7\u6c42\u5c06\u88ab\u9650\u5236\u4e3a\u6bcf\u5929\u5171\u8ba11000\u4e2a\u8bf7\u6c42\u3002\u7528\u6237\u5bf9 UploadView \u7684\u8bf7\u6c42\u5c06\u88ab\u9650\u5236\u4e3a\u6bcf\u5929\u5171\u8ba120\u4e2a\u8bf7\u6c42\u3002","title":"ScopedRateThrottle"},{"location":"api-guide/throttling_zh/#custom-throttles","text":"\u82e5\u8981\u521b\u5efa\u81ea\u5b9a\u4e49\u9650\u6d41\u5668\uff0c\u8bf7\u91cd\u5199 BaseThrottle \u5e76\u4f7f\u7528 .allow_request(self, request, view) \u3002\u5982\u679c\u5141\u8bb8\u8bf7\u6c42\uff0c\u5219\u8be5\u65b9\u6cd5\u5e94\u8fd4\u56de True \uff0c\u5426\u5219\u8fd4\u56de False \u3002 \u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u91cd\u5199 .wait() \u65b9\u6cd5\u3002\u5982\u679c\u88ab\u4f7f\u7528\uff0c .wait() \u5e94\u8fd4\u56de\u5c1d\u8bd5\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u524d\u5efa\u8bae\u7684\u7b49\u5f85\u79d2\u6570\uff0c\u6216\u8005 None \u3002\u53ea\u6709\u5728 .allow_request() \u5148\u524d\u5df2\u8fd4\u56de False \u65f6\u624d\u4f1a\u8c03\u7528 .wait() \u65b9\u6cd5\u3002 \u5982\u679c\u4f7f\u7528\u4e86 .wait() \u65b9\u6cd5\u5e76\u9650\u5236\u4e86\u8bf7\u6c42\uff0c\u5219\u54cd\u5e94\u4e2d\u5c06\u5305\u542b Retry-After \u5934\u3002","title":"Custom throttles \uff08\u81ea\u5b9a\u4e49\u9650\u6d41\uff09"},{"location":"api-guide/throttling_zh/#example","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u9650\u6d41\u7684\u4f8b\u5b50\uff0c\u5b83\u5c06\u5728\u6bcf10\u4e2a\u8bf7\u6c42\u4e2d\u968f\u673a\u5730\u9650\u52361\u4e2a\u3002 import random class RandomRateThrottle(throttling.BaseThrottle): def allow_request(self, request, view): return random.randint(1, 10) != 1","title":"Example"},{"location":"api-guide/validators/","text":"Validators Validators can be useful for re-using validation logic between different types of fields. \u2014 Django documentation Most of the time you're dealing with validation in REST framework you'll simply be relying on the default field validation, or writing explicit validation methods on serializer or field classes. However, sometimes you'll want to place your validation logic into reusable components, so that it can easily be reused throughout your codebase. This can be achieved by using validator functions and validator classes. Validation in REST framework Validation in Django REST framework serializers is handled a little differently to how validation works in Django's ModelForm class. With ModelForm the validation is performed partially on the form, and partially on the model instance. With REST framework the validation is performed entirely on the serializer class. This is advantageous for the following reasons: It introduces a proper separation of concerns, making your code behavior more obvious. It is easy to switch between using shortcut ModelSerializer classes and using explicit Serializer classes. Any validation behavior being used for ModelSerializer is simple to replicate. Printing the repr of a serializer instance will show you exactly what validation rules it applies. There's no extra hidden validation behavior being called on the model instance. When you're using ModelSerializer all of this is handled automatically for you. If you want to drop down to using Serializer classes instead, then you need to define the validation rules explicitly. Example As an example of how REST framework uses explicit validation, we'll take a simple model class that has a field with a uniqueness constraint. class CustomerReportRecord(models.Model): time_raised = models.DateTimeField(default=timezone.now, editable=False) reference = models.CharField(unique=True, max_length=20) description = models.TextField() Here's a basic ModelSerializer that we can use for creating or updating instances of CustomerReportRecord : class CustomerReportSerializer(serializers.ModelSerializer): class Meta: model = CustomerReportRecord If we open up the Django shell using manage.py shell we can now >>> from project.example.serializers import CustomerReportSerializer >>> serializer = CustomerReportSerializer() >>> print(repr(serializer)) CustomerReportSerializer(): id = IntegerField(label='ID', read_only=True) time_raised = DateTimeField(read_only=True) reference = CharField(max_length=20, validators=[<UniqueValidator(queryset=CustomerReportRecord.objects.all())>]) description = CharField(style={'type': 'textarea'}) The interesting bit here is the reference field. We can see that the uniqueness constraint is being explicitly enforced by a validator on the serializer field. Because of this more explicit style REST framework includes a few validator classes that are not available in core Django. These classes are detailed below. UniqueValidator This validator can be used to enforce the unique=True constraint on model fields. It takes a single required argument, and an optional messages argument: queryset required - This is the queryset against which uniqueness should be enforced. message - The error message that should be used when validation fails. lookup - The lookup used to find an existing instance with the value being validated. Defaults to 'exact' . This validator should be applied to serializer fields , like so: from rest_framework.validators import UniqueValidator slug = SlugField( max_length=100, validators=[UniqueValidator(queryset=BlogPost.objects.all())] ) UniqueTogetherValidator This validator can be used to enforce unique_together constraints on model instances. It has two required arguments, and a single optional messages argument: queryset required - This is the queryset against which uniqueness should be enforced. fields required - A list or tuple of field names which should make a unique set. These must exist as fields on the serializer class. message - The error message that should be used when validation fails. The validator should be applied to serializer classes , like so: from rest_framework.validators import UniqueTogetherValidator class ExampleSerializer(serializers.Serializer): # ... class Meta: # ToDo items belong to a parent list, and have an ordering defined # by the 'position' field. No two items in a given list may share # the same position. validators = [ UniqueTogetherValidator( queryset=ToDoItem.objects.all(), fields=['list', 'position'] ) ] Note : The UniqueTogetherValidator class always imposes an implicit constraint that all the fields it applies to are always treated as required. Fields with default values are an exception to this as they always supply a value even when omitted from user input. UniqueForDateValidator UniqueForMonthValidator UniqueForYearValidator These validators can be used to enforce the unique_for_date , unique_for_month and unique_for_year constraints on model instances. They take the following arguments: queryset required - This is the queryset against which uniqueness should be enforced. field required - A field name against which uniqueness in the given date range will be validated. This must exist as a field on the serializer class. date_field required - A field name which will be used to determine date range for the uniqueness constrain. This must exist as a field on the serializer class. message - The error message that should be used when validation fails. The validator should be applied to serializer classes , like so: from rest_framework.validators import UniqueForYearValidator class ExampleSerializer(serializers.Serializer): # ... class Meta: # Blog posts should have a slug that is unique for the current year. validators = [ UniqueForYearValidator( queryset=BlogPostItem.objects.all(), field='slug', date_field='published' ) ] The date field that is used for the validation is always required to be present on the serializer class. You can't simply rely on a model class default=... , because the value being used for the default wouldn't be generated until after the validation has run. There are a couple of styles you may want to use for this depending on how you want your API to behave. If you're using ModelSerializer you'll probably simply rely on the defaults that REST framework generates for you, but if you are using Serializer or simply want more explicit control, use on of the styles demonstrated below. Using with a writable date field. If you want the date field to be writable the only thing worth noting is that you should ensure that it is always available in the input data, either by setting a default argument, or by setting required=True . published = serializers.DateTimeField(required=True) Using with a read-only date field. If you want the date field to be visible, but not editable by the user, then set read_only=True and additionally set a default=... argument. published = serializers.DateTimeField(read_only=True, default=timezone.now) Using with a hidden date field. If you want the date field to be entirely hidden from the user, then use HiddenField . This field type does not accept user input, but instead always returns its default value to the validated_data in the serializer. published = serializers.HiddenField(default=timezone.now) Note : The UniqueFor<Range>Validator classes impose an implicit constraint that the fields they are applied to are always treated as required. Fields with default values are an exception to this as they always supply a value even when omitted from user input. Advanced field defaults Validators that are applied across multiple fields in the serializer can sometimes require a field input that should not be provided by the API client, but that is available as input to the validator. Two patterns that you may want to use for this sort of validation include: Using HiddenField . This field will be present in validated_data but will not be used in the serializer output representation. Using a standard field with read_only=True , but that also includes a default=\u2026 argument. This field will be used in the serializer output representation, but cannot be set directly by the user. REST framework includes a couple of defaults that may be useful in this context. CurrentUserDefault A default class that can be used to represent the current user. In order to use this, the 'request' must have been provided as part of the context dictionary when instantiating the serializer. owner = serializers.HiddenField( default=serializers.CurrentUserDefault() ) CreateOnlyDefault A default class that can be used to only set a default argument during create operations . During updates the field is omitted. It takes a single argument, which is the default value or callable that should be used during create operations. created_at = serializers.DateTimeField( default=serializers.CreateOnlyDefault(timezone.now) ) Limitations of validators There are some ambiguous cases where you'll need to instead handle validation explicitly, rather than relying on the default serializer classes that ModelSerializer generates. In these cases you may want to disable the automatically generated validators, by specifying an empty list for the serializer Meta.validators attribute. Optional fields By default \"unique together\" validation enforces that all fields be required=True . In some cases, you might want to explicit apply required=False to one of the fields, in which case the desired behaviour of the validation is ambiguous. In this case you will typically need to exclude the validator from the serializer class, and instead write any validation logic explicitly, either in the .validate() method, or else in the view. For example: class BillingRecordSerializer(serializers.ModelSerializer): def validate(self, attrs): # Apply custom validation either here, or in the view. class Meta: fields = ['client', 'date', 'amount'] extra_kwargs = {'client': {'required': False}} validators = [] # Remove a default \"unique together\" constraint. Updating nested serializers When applying an update to an existing instance, uniqueness validators will exclude the current instance from the uniqueness check. The current instance is available in the context of the uniqueness check, because it exists as an attribute on the serializer, having initially been passed using instance=... when instantiating the serializer. In the case of update operations on nested serializers there's no way of applying this exclusion, because the instance is not available. Again, you'll probably want to explicitly remove the validator from the serializer class, and write the code the for the validation constraint explicitly, in a .validate() method, or in the view. Debugging complex cases If you're not sure exactly what behavior a ModelSerializer class will generate it is usually a good idea to run manage.py shell , and print an instance of the serializer, so that you can inspect the fields and validators that it automatically generates for you. >>> serializer = MyComplexModelSerializer() >>> print(serializer) class MyComplexModelSerializer: my_fields = ... Also keep in mind that with complex cases it can often be better to explicitly define your serializer classes, rather than relying on the default ModelSerializer behavior. This involves a little more code, but ensures that the resulting behavior is more transparent. Writing custom validators You can use any of Django's existing validators, or write your own custom validators. Function based A validator may be any callable that raises a serializers.ValidationError on failure. def even_number(value): if value % 2 != 0: raise serializers.ValidationError('This field must be an even number.') Field-level validation You can specify custom field-level validation by adding .validate_<field_name> methods to your Serializer subclass. This is documented in the Serializer docs Class-based To write a class-based validator, use the __call__ method. Class-based validators are useful as they allow you to parameterize and reuse behavior. class MultipleOf: def __init__(self, base): self.base = base def __call__(self, value): if value % self.base != 0: message = 'This field must be a multiple of %d.' % self.base raise serializers.ValidationError(message) Accessing the context In some advanced cases you might want a validator to be passed the serializer field it is being used with as additional context. You can do so by setting a requires_context = True attribute on the validator. The __call__ method will then be called with the serializer_field or serializer as an additional argument. requires_context = True def __call__(self, value, serializer_field): ...","title":"Validators"},{"location":"api-guide/validators/#validators","text":"Validators can be useful for re-using validation logic between different types of fields. \u2014 Django documentation Most of the time you're dealing with validation in REST framework you'll simply be relying on the default field validation, or writing explicit validation methods on serializer or field classes. However, sometimes you'll want to place your validation logic into reusable components, so that it can easily be reused throughout your codebase. This can be achieved by using validator functions and validator classes.","title":"Validators"},{"location":"api-guide/validators/#validation-in-rest-framework","text":"Validation in Django REST framework serializers is handled a little differently to how validation works in Django's ModelForm class. With ModelForm the validation is performed partially on the form, and partially on the model instance. With REST framework the validation is performed entirely on the serializer class. This is advantageous for the following reasons: It introduces a proper separation of concerns, making your code behavior more obvious. It is easy to switch between using shortcut ModelSerializer classes and using explicit Serializer classes. Any validation behavior being used for ModelSerializer is simple to replicate. Printing the repr of a serializer instance will show you exactly what validation rules it applies. There's no extra hidden validation behavior being called on the model instance. When you're using ModelSerializer all of this is handled automatically for you. If you want to drop down to using Serializer classes instead, then you need to define the validation rules explicitly.","title":"Validation in REST framework"},{"location":"api-guide/validators/#example","text":"As an example of how REST framework uses explicit validation, we'll take a simple model class that has a field with a uniqueness constraint. class CustomerReportRecord(models.Model): time_raised = models.DateTimeField(default=timezone.now, editable=False) reference = models.CharField(unique=True, max_length=20) description = models.TextField() Here's a basic ModelSerializer that we can use for creating or updating instances of CustomerReportRecord : class CustomerReportSerializer(serializers.ModelSerializer): class Meta: model = CustomerReportRecord If we open up the Django shell using manage.py shell we can now >>> from project.example.serializers import CustomerReportSerializer >>> serializer = CustomerReportSerializer() >>> print(repr(serializer)) CustomerReportSerializer(): id = IntegerField(label='ID', read_only=True) time_raised = DateTimeField(read_only=True) reference = CharField(max_length=20, validators=[<UniqueValidator(queryset=CustomerReportRecord.objects.all())>]) description = CharField(style={'type': 'textarea'}) The interesting bit here is the reference field. We can see that the uniqueness constraint is being explicitly enforced by a validator on the serializer field. Because of this more explicit style REST framework includes a few validator classes that are not available in core Django. These classes are detailed below.","title":"Example"},{"location":"api-guide/validators/#uniquevalidator","text":"This validator can be used to enforce the unique=True constraint on model fields. It takes a single required argument, and an optional messages argument: queryset required - This is the queryset against which uniqueness should be enforced. message - The error message that should be used when validation fails. lookup - The lookup used to find an existing instance with the value being validated. Defaults to 'exact' . This validator should be applied to serializer fields , like so: from rest_framework.validators import UniqueValidator slug = SlugField( max_length=100, validators=[UniqueValidator(queryset=BlogPost.objects.all())] )","title":"UniqueValidator"},{"location":"api-guide/validators/#uniquetogethervalidator","text":"This validator can be used to enforce unique_together constraints on model instances. It has two required arguments, and a single optional messages argument: queryset required - This is the queryset against which uniqueness should be enforced. fields required - A list or tuple of field names which should make a unique set. These must exist as fields on the serializer class. message - The error message that should be used when validation fails. The validator should be applied to serializer classes , like so: from rest_framework.validators import UniqueTogetherValidator class ExampleSerializer(serializers.Serializer): # ... class Meta: # ToDo items belong to a parent list, and have an ordering defined # by the 'position' field. No two items in a given list may share # the same position. validators = [ UniqueTogetherValidator( queryset=ToDoItem.objects.all(), fields=['list', 'position'] ) ] Note : The UniqueTogetherValidator class always imposes an implicit constraint that all the fields it applies to are always treated as required. Fields with default values are an exception to this as they always supply a value even when omitted from user input.","title":"UniqueTogetherValidator"},{"location":"api-guide/validators/#uniquefordatevalidator","text":"","title":"UniqueForDateValidator"},{"location":"api-guide/validators/#uniqueformonthvalidator","text":"","title":"UniqueForMonthValidator"},{"location":"api-guide/validators/#uniqueforyearvalidator","text":"These validators can be used to enforce the unique_for_date , unique_for_month and unique_for_year constraints on model instances. They take the following arguments: queryset required - This is the queryset against which uniqueness should be enforced. field required - A field name against which uniqueness in the given date range will be validated. This must exist as a field on the serializer class. date_field required - A field name which will be used to determine date range for the uniqueness constrain. This must exist as a field on the serializer class. message - The error message that should be used when validation fails. The validator should be applied to serializer classes , like so: from rest_framework.validators import UniqueForYearValidator class ExampleSerializer(serializers.Serializer): # ... class Meta: # Blog posts should have a slug that is unique for the current year. validators = [ UniqueForYearValidator( queryset=BlogPostItem.objects.all(), field='slug', date_field='published' ) ] The date field that is used for the validation is always required to be present on the serializer class. You can't simply rely on a model class default=... , because the value being used for the default wouldn't be generated until after the validation has run. There are a couple of styles you may want to use for this depending on how you want your API to behave. If you're using ModelSerializer you'll probably simply rely on the defaults that REST framework generates for you, but if you are using Serializer or simply want more explicit control, use on of the styles demonstrated below.","title":"UniqueForYearValidator"},{"location":"api-guide/validators/#using-with-a-writable-date-field","text":"If you want the date field to be writable the only thing worth noting is that you should ensure that it is always available in the input data, either by setting a default argument, or by setting required=True . published = serializers.DateTimeField(required=True)","title":"Using with a writable date field."},{"location":"api-guide/validators/#using-with-a-read-only-date-field","text":"If you want the date field to be visible, but not editable by the user, then set read_only=True and additionally set a default=... argument. published = serializers.DateTimeField(read_only=True, default=timezone.now)","title":"Using with a read-only date field."},{"location":"api-guide/validators/#using-with-a-hidden-date-field","text":"If you want the date field to be entirely hidden from the user, then use HiddenField . This field type does not accept user input, but instead always returns its default value to the validated_data in the serializer. published = serializers.HiddenField(default=timezone.now) Note : The UniqueFor<Range>Validator classes impose an implicit constraint that the fields they are applied to are always treated as required. Fields with default values are an exception to this as they always supply a value even when omitted from user input.","title":"Using with a hidden date field."},{"location":"api-guide/validators/#advanced-field-defaults","text":"Validators that are applied across multiple fields in the serializer can sometimes require a field input that should not be provided by the API client, but that is available as input to the validator. Two patterns that you may want to use for this sort of validation include: Using HiddenField . This field will be present in validated_data but will not be used in the serializer output representation. Using a standard field with read_only=True , but that also includes a default=\u2026 argument. This field will be used in the serializer output representation, but cannot be set directly by the user. REST framework includes a couple of defaults that may be useful in this context.","title":"Advanced field defaults"},{"location":"api-guide/validators/#currentuserdefault","text":"A default class that can be used to represent the current user. In order to use this, the 'request' must have been provided as part of the context dictionary when instantiating the serializer. owner = serializers.HiddenField( default=serializers.CurrentUserDefault() )","title":"CurrentUserDefault"},{"location":"api-guide/validators/#createonlydefault","text":"A default class that can be used to only set a default argument during create operations . During updates the field is omitted. It takes a single argument, which is the default value or callable that should be used during create operations. created_at = serializers.DateTimeField( default=serializers.CreateOnlyDefault(timezone.now) )","title":"CreateOnlyDefault"},{"location":"api-guide/validators/#limitations-of-validators","text":"There are some ambiguous cases where you'll need to instead handle validation explicitly, rather than relying on the default serializer classes that ModelSerializer generates. In these cases you may want to disable the automatically generated validators, by specifying an empty list for the serializer Meta.validators attribute.","title":"Limitations of validators"},{"location":"api-guide/validators/#optional-fields","text":"By default \"unique together\" validation enforces that all fields be required=True . In some cases, you might want to explicit apply required=False to one of the fields, in which case the desired behaviour of the validation is ambiguous. In this case you will typically need to exclude the validator from the serializer class, and instead write any validation logic explicitly, either in the .validate() method, or else in the view. For example: class BillingRecordSerializer(serializers.ModelSerializer): def validate(self, attrs): # Apply custom validation either here, or in the view. class Meta: fields = ['client', 'date', 'amount'] extra_kwargs = {'client': {'required': False}} validators = [] # Remove a default \"unique together\" constraint.","title":"Optional fields"},{"location":"api-guide/validators/#updating-nested-serializers","text":"When applying an update to an existing instance, uniqueness validators will exclude the current instance from the uniqueness check. The current instance is available in the context of the uniqueness check, because it exists as an attribute on the serializer, having initially been passed using instance=... when instantiating the serializer. In the case of update operations on nested serializers there's no way of applying this exclusion, because the instance is not available. Again, you'll probably want to explicitly remove the validator from the serializer class, and write the code the for the validation constraint explicitly, in a .validate() method, or in the view.","title":"Updating nested serializers"},{"location":"api-guide/validators/#debugging-complex-cases","text":"If you're not sure exactly what behavior a ModelSerializer class will generate it is usually a good idea to run manage.py shell , and print an instance of the serializer, so that you can inspect the fields and validators that it automatically generates for you. >>> serializer = MyComplexModelSerializer() >>> print(serializer) class MyComplexModelSerializer: my_fields = ... Also keep in mind that with complex cases it can often be better to explicitly define your serializer classes, rather than relying on the default ModelSerializer behavior. This involves a little more code, but ensures that the resulting behavior is more transparent.","title":"Debugging complex cases"},{"location":"api-guide/validators/#writing-custom-validators","text":"You can use any of Django's existing validators, or write your own custom validators.","title":"Writing custom validators"},{"location":"api-guide/validators/#function-based","text":"A validator may be any callable that raises a serializers.ValidationError on failure. def even_number(value): if value % 2 != 0: raise serializers.ValidationError('This field must be an even number.')","title":"Function based"},{"location":"api-guide/validators/#field-level-validation","text":"You can specify custom field-level validation by adding .validate_<field_name> methods to your Serializer subclass. This is documented in the Serializer docs","title":"Field-level validation"},{"location":"api-guide/validators/#class-based","text":"To write a class-based validator, use the __call__ method. Class-based validators are useful as they allow you to parameterize and reuse behavior. class MultipleOf: def __init__(self, base): self.base = base def __call__(self, value): if value % self.base != 0: message = 'This field must be a multiple of %d.' % self.base raise serializers.ValidationError(message)","title":"Class-based"},{"location":"api-guide/validators/#accessing-the-context","text":"In some advanced cases you might want a validator to be passed the serializer field it is being used with as additional context. You can do so by setting a requires_context = True attribute on the validator. The __call__ method will then be called with the serializer_field or serializer as an additional argument. requires_context = True def __call__(self, value, serializer_field): ...","title":"Accessing the context"},{"location":"api-guide/versioning/","text":"Versioning Versioning an interface is just a \"polite\" way to kill deployed clients. \u2014 Roy Fielding . API versioning allows you to alter behavior between different clients. REST framework provides for a number of different versioning schemes. Versioning is determined by the incoming client request, and may either be based on the request URL, or based on the request headers. There are a number of valid approaches to approaching versioning. Non-versioned systems can also be appropriate , particularly if you're engineering for very long-term systems with multiple clients outside of your control. Versioning with REST framework When API versioning is enabled, the request.version attribute will contain a string that corresponds to the version requested in the incoming client request. By default, versioning is not enabled, and request.version will always return None . Varying behavior based on the version How you vary the API behavior is up to you, but one example you might typically want is to switch to a different serialization style in a newer version. For example: def get_serializer_class(self): if self.request.version == 'v1': return AccountSerializerVersion1 return AccountSerializer Reversing URLs for versioned APIs The reverse function included by REST framework ties in with the versioning scheme. You need to make sure to include the current request as a keyword argument, like so. from rest_framework.reverse import reverse reverse('bookings-list', request=request) The above function will apply any URL transformations appropriate to the request version. For example: If NamespaceVersioning was being used, and the API version was 'v1', then the URL lookup used would be 'v1:bookings-list' , which might resolve to a URL like http://example.org/v1/bookings/ . If QueryParameterVersioning was being used, and the API version was 1.0 , then the returned URL might be something like http://example.org/bookings/?version=1.0 Versioned APIs and hyperlinked serializers When using hyperlinked serialization styles together with a URL based versioning scheme make sure to include the request as context to the serializer. def get(self, request): queryset = Booking.objects.all() serializer = BookingsSerializer(queryset, many=True, context={'request': request}) return Response({'all_bookings': serializer.data}) Doing so will allow any returned URLs to include the appropriate versioning. Configuring the versioning scheme The versioning scheme is defined by the DEFAULT_VERSIONING_CLASS settings key. REST_FRAMEWORK = { 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning' } Unless it is explicitly set, the value for DEFAULT_VERSIONING_CLASS will be None . In this case the request.version attribute will always return None . You can also set the versioning scheme on an individual view. Typically you won't need to do this, as it makes more sense to have a single versioning scheme used globally. If you do need to do so, use the versioning_class attribute. class ProfileList(APIView): versioning_class = versioning.QueryParameterVersioning Other versioning settings The following settings keys are also used to control versioning: DEFAULT_VERSION . The value that should be used for request.version when no versioning information is present. Defaults to None . ALLOWED_VERSIONS . If set, this value will restrict the set of versions that may be returned by the versioning scheme, and will raise an error if the provided version is not in this set. Note that the value used for the DEFAULT_VERSION setting is always considered to be part of the ALLOWED_VERSIONS set (unless it is None ). Defaults to None . VERSION_PARAM . The string that should be used for any versioning parameters, such as in the media type or URL query parameters. Defaults to 'version' . You can also set your versioning class plus those three values on a per-view or a per-viewset basis by defining your own versioning scheme and using the default_version , allowed_versions and version_param class variables. For example, if you want to use URLPathVersioning : from rest_framework.versioning import URLPathVersioning from rest_framework.views import APIView class ExampleVersioning(URLPathVersioning): default_version = ... allowed_versions = ... version_param = ... class ExampleView(APIVIew): versioning_class = ExampleVersioning API Reference AcceptHeaderVersioning This scheme requires the client to specify the version as part of the media type in the Accept header. The version is included as a media type parameter, that supplements the main media type. Here's an example HTTP request using the accept header versioning style. GET /bookings/ HTTP/1.1 Host: example.com Accept: application/json; version=1.0 In the example request above request.version attribute would return the string '1.0' . Versioning based on accept headers is generally considered as best practice , although other styles may be suitable depending on your client requirements. Using accept headers with vendor media types Strictly speaking the json media type is not specified as including additional parameters . If you are building a well-specified public API you might consider using a vendor media type . To do so, configure your renderers to use a JSON based renderer with a custom media type: class BookingsAPIRenderer(JSONRenderer): media_type = 'application/vnd.megacorp.bookings+json' Your client requests would now look like this: GET /bookings/ HTTP/1.1 Host: example.com Accept: application/vnd.megacorp.bookings+json; version=1.0 URLPathVersioning This scheme requires the client to specify the version as part of the URL path. GET /v1/bookings/ HTTP/1.1 Host: example.com Accept: application/json Your URL conf must include a pattern that matches the version with a 'version' keyword argument, so that this information is available to the versioning scheme. urlpatterns = [ re_path( r'^(?P<version>(v1|v2))/bookings/$', bookings_list, name='bookings-list' ), re_path( r'^(?P<version>(v1|v2))/bookings/(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail' ) ] NamespaceVersioning To the client, this scheme is the same as URLPathVersioning . The only difference is how it is configured in your Django application, as it uses URL namespacing, instead of URL keyword arguments. GET /v1/something/ HTTP/1.1 Host: example.com Accept: application/json With this scheme the request.version attribute is determined based on the namespace that matches the incoming request path. In the following example we're giving a set of views two different possible URL prefixes, each under a different namespace: # bookings/urls.py urlpatterns = [ re_path(r'^$', bookings_list, name='bookings-list'), re_path(r'^(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail') ] # urls.py urlpatterns = [ re_path(r'^v1/bookings/', include('bookings.urls', namespace='v1')), re_path(r'^v2/bookings/', include('bookings.urls', namespace='v2')) ] Both URLPathVersioning and NamespaceVersioning are reasonable if you just need a simple versioning scheme. The URLPathVersioning approach might be better suitable for small ad-hoc projects, and the NamespaceVersioning is probably easier to manage for larger projects. HostNameVersioning The hostname versioning scheme requires the client to specify the requested version as part of the hostname in the URL. For example the following is an HTTP request to the http://v1.example.com/bookings/ URL: GET /bookings/ HTTP/1.1 Host: v1.example.com Accept: application/json By default this implementation expects the hostname to match this simple regular expression: ^([a-zA-Z0-9]+)\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$ Note that the first group is enclosed in brackets, indicating that this is the matched portion of the hostname. The HostNameVersioning scheme can be awkward to use in debug mode as you will typically be accessing a raw IP address such as 127.0.0.1 . There are various online tutorials on how to access localhost with a custom subdomain which you may find helpful in this case. Hostname based versioning can be particularly useful if you have requirements to route incoming requests to different servers based on the version, as you can configure different DNS records for different API versions. QueryParameterVersioning This scheme is a simple style that includes the version as a query parameter in the URL. For example: GET /something/?version=0.1 HTTP/1.1 Host: example.com Accept: application/json Custom versioning schemes To implement a custom versioning scheme, subclass BaseVersioning and override the .determine_version method. Example The following example uses a custom X-API-Version header to determine the requested version. class XAPIVersionScheme(versioning.BaseVersioning): def determine_version(self, request, *args, **kwargs): return request.META.get('HTTP_X_API_VERSION', None) If your versioning scheme is based on the request URL, you will also want to alter how versioned URLs are determined. In order to do so you should override the .reverse() method on the class. See the source code for examples.","title":"Versioning"},{"location":"api-guide/versioning/#versioning","text":"Versioning an interface is just a \"polite\" way to kill deployed clients. \u2014 Roy Fielding . API versioning allows you to alter behavior between different clients. REST framework provides for a number of different versioning schemes. Versioning is determined by the incoming client request, and may either be based on the request URL, or based on the request headers. There are a number of valid approaches to approaching versioning. Non-versioned systems can also be appropriate , particularly if you're engineering for very long-term systems with multiple clients outside of your control.","title":"Versioning"},{"location":"api-guide/versioning/#versioning-with-rest-framework","text":"When API versioning is enabled, the request.version attribute will contain a string that corresponds to the version requested in the incoming client request. By default, versioning is not enabled, and request.version will always return None .","title":"Versioning with REST framework"},{"location":"api-guide/versioning/#varying-behavior-based-on-the-version","text":"How you vary the API behavior is up to you, but one example you might typically want is to switch to a different serialization style in a newer version. For example: def get_serializer_class(self): if self.request.version == 'v1': return AccountSerializerVersion1 return AccountSerializer","title":"Varying behavior based on the version"},{"location":"api-guide/versioning/#reversing-urls-for-versioned-apis","text":"The reverse function included by REST framework ties in with the versioning scheme. You need to make sure to include the current request as a keyword argument, like so. from rest_framework.reverse import reverse reverse('bookings-list', request=request) The above function will apply any URL transformations appropriate to the request version. For example: If NamespaceVersioning was being used, and the API version was 'v1', then the URL lookup used would be 'v1:bookings-list' , which might resolve to a URL like http://example.org/v1/bookings/ . If QueryParameterVersioning was being used, and the API version was 1.0 , then the returned URL might be something like http://example.org/bookings/?version=1.0","title":"Reversing URLs for versioned APIs"},{"location":"api-guide/versioning/#versioned-apis-and-hyperlinked-serializers","text":"When using hyperlinked serialization styles together with a URL based versioning scheme make sure to include the request as context to the serializer. def get(self, request): queryset = Booking.objects.all() serializer = BookingsSerializer(queryset, many=True, context={'request': request}) return Response({'all_bookings': serializer.data}) Doing so will allow any returned URLs to include the appropriate versioning.","title":"Versioned APIs and hyperlinked serializers"},{"location":"api-guide/versioning/#configuring-the-versioning-scheme","text":"The versioning scheme is defined by the DEFAULT_VERSIONING_CLASS settings key. REST_FRAMEWORK = { 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning' } Unless it is explicitly set, the value for DEFAULT_VERSIONING_CLASS will be None . In this case the request.version attribute will always return None . You can also set the versioning scheme on an individual view. Typically you won't need to do this, as it makes more sense to have a single versioning scheme used globally. If you do need to do so, use the versioning_class attribute. class ProfileList(APIView): versioning_class = versioning.QueryParameterVersioning","title":"Configuring the versioning scheme"},{"location":"api-guide/versioning/#other-versioning-settings","text":"The following settings keys are also used to control versioning: DEFAULT_VERSION . The value that should be used for request.version when no versioning information is present. Defaults to None . ALLOWED_VERSIONS . If set, this value will restrict the set of versions that may be returned by the versioning scheme, and will raise an error if the provided version is not in this set. Note that the value used for the DEFAULT_VERSION setting is always considered to be part of the ALLOWED_VERSIONS set (unless it is None ). Defaults to None . VERSION_PARAM . The string that should be used for any versioning parameters, such as in the media type or URL query parameters. Defaults to 'version' . You can also set your versioning class plus those three values on a per-view or a per-viewset basis by defining your own versioning scheme and using the default_version , allowed_versions and version_param class variables. For example, if you want to use URLPathVersioning : from rest_framework.versioning import URLPathVersioning from rest_framework.views import APIView class ExampleVersioning(URLPathVersioning): default_version = ... allowed_versions = ... version_param = ... class ExampleView(APIVIew): versioning_class = ExampleVersioning","title":"Other versioning settings"},{"location":"api-guide/versioning/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/versioning/#acceptheaderversioning","text":"This scheme requires the client to specify the version as part of the media type in the Accept header. The version is included as a media type parameter, that supplements the main media type. Here's an example HTTP request using the accept header versioning style. GET /bookings/ HTTP/1.1 Host: example.com Accept: application/json; version=1.0 In the example request above request.version attribute would return the string '1.0' . Versioning based on accept headers is generally considered as best practice , although other styles may be suitable depending on your client requirements.","title":"AcceptHeaderVersioning"},{"location":"api-guide/versioning/#using-accept-headers-with-vendor-media-types","text":"Strictly speaking the json media type is not specified as including additional parameters . If you are building a well-specified public API you might consider using a vendor media type . To do so, configure your renderers to use a JSON based renderer with a custom media type: class BookingsAPIRenderer(JSONRenderer): media_type = 'application/vnd.megacorp.bookings+json' Your client requests would now look like this: GET /bookings/ HTTP/1.1 Host: example.com Accept: application/vnd.megacorp.bookings+json; version=1.0","title":"Using accept headers with vendor media types"},{"location":"api-guide/versioning/#urlpathversioning","text":"This scheme requires the client to specify the version as part of the URL path. GET /v1/bookings/ HTTP/1.1 Host: example.com Accept: application/json Your URL conf must include a pattern that matches the version with a 'version' keyword argument, so that this information is available to the versioning scheme. urlpatterns = [ re_path( r'^(?P<version>(v1|v2))/bookings/$', bookings_list, name='bookings-list' ), re_path( r'^(?P<version>(v1|v2))/bookings/(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail' ) ]","title":"URLPathVersioning"},{"location":"api-guide/versioning/#namespaceversioning","text":"To the client, this scheme is the same as URLPathVersioning . The only difference is how it is configured in your Django application, as it uses URL namespacing, instead of URL keyword arguments. GET /v1/something/ HTTP/1.1 Host: example.com Accept: application/json With this scheme the request.version attribute is determined based on the namespace that matches the incoming request path. In the following example we're giving a set of views two different possible URL prefixes, each under a different namespace: # bookings/urls.py urlpatterns = [ re_path(r'^$', bookings_list, name='bookings-list'), re_path(r'^(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail') ] # urls.py urlpatterns = [ re_path(r'^v1/bookings/', include('bookings.urls', namespace='v1')), re_path(r'^v2/bookings/', include('bookings.urls', namespace='v2')) ] Both URLPathVersioning and NamespaceVersioning are reasonable if you just need a simple versioning scheme. The URLPathVersioning approach might be better suitable for small ad-hoc projects, and the NamespaceVersioning is probably easier to manage for larger projects.","title":"NamespaceVersioning"},{"location":"api-guide/versioning/#hostnameversioning","text":"The hostname versioning scheme requires the client to specify the requested version as part of the hostname in the URL. For example the following is an HTTP request to the http://v1.example.com/bookings/ URL: GET /bookings/ HTTP/1.1 Host: v1.example.com Accept: application/json By default this implementation expects the hostname to match this simple regular expression: ^([a-zA-Z0-9]+)\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$ Note that the first group is enclosed in brackets, indicating that this is the matched portion of the hostname. The HostNameVersioning scheme can be awkward to use in debug mode as you will typically be accessing a raw IP address such as 127.0.0.1 . There are various online tutorials on how to access localhost with a custom subdomain which you may find helpful in this case. Hostname based versioning can be particularly useful if you have requirements to route incoming requests to different servers based on the version, as you can configure different DNS records for different API versions.","title":"HostNameVersioning"},{"location":"api-guide/versioning/#queryparameterversioning","text":"This scheme is a simple style that includes the version as a query parameter in the URL. For example: GET /something/?version=0.1 HTTP/1.1 Host: example.com Accept: application/json","title":"QueryParameterVersioning"},{"location":"api-guide/versioning/#custom-versioning-schemes","text":"To implement a custom versioning scheme, subclass BaseVersioning and override the .determine_version method.","title":"Custom versioning schemes"},{"location":"api-guide/versioning/#example","text":"The following example uses a custom X-API-Version header to determine the requested version. class XAPIVersionScheme(versioning.BaseVersioning): def determine_version(self, request, *args, **kwargs): return request.META.get('HTTP_X_API_VERSION', None) If your versioning scheme is based on the request URL, you will also want to alter how versioned URLs are determined. In order to do so you should override the .reverse() method on the class. See the source code for examples.","title":"Example"},{"location":"api-guide/versioning_zh/","text":"Versioning \u5bf9\u63a5\u53e3\u8fdb\u884c\u7248\u672c\u63a7\u5236\u53ea\u662f\u4e00\u79cd\u6740\u6b7b\u5df2\u90e8\u7f72\u5ba2\u6237\u7aef\u7684\u201c\u793c\u8c8c\u201d\u65b9\u5f0f\u3002 \u2014 Roy Fielding . API \u7248\u672c\u63a7\u5236\u5141\u8bb8\u4f60\u5728\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u4e4b\u95f4\u66f4\u6539\u884c\u4e3a. REST framework \u63d0\u4f9b\u4e86\u8bb8\u591a\u4e0d\u540c\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848\u3002 \u7248\u672c\u63a7\u5236\u7531\u4f20\u5165\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\u51b3\u5b9a\uff0c\u53ef\u4ee5\u57fa\u4e8e\u8bf7\u6c42\u7684URL\uff0c\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u8bf7\u6c42\u5934\u3002 \u6709\u8bb8\u591a\u6709\u6548\u7684\u65b9\u6cd5\u53ef\u4ee5\u8fdb\u884c\u7248\u672c\u63a7\u5236\u3002 \u65e0\u7248\u672c\u63a7\u5236\u7684\u7cfb\u7edf\u4e5f\u53ef\u80fd\u662f\u5408\u9002\u7684 \uff0c\u7279\u522b\u662f\u5982\u679c\u4f60\u6b63\u5728\u4e3a\u4e00\u4e2a\u957f\u671f\u7cfb\u7edf\u8fdb\u884c\u5de5\u7a0b\u8bbe\u8ba1\uff0c\u800c\u8fd9\u4e2a\u7cfb\u7edf\u6709\u591a\u4e2a\u8d85\u51fa\u4f60\u63a7\u5236\u8303\u56f4\u7684\u5ba2\u6237\u7aef\u3002 \u4f7f\u7528REST\u6846\u67b6\u8fdb\u884c\u7248\u672c\u63a7\u5236 \u5f53\u542f\u7528API\u7248\u672c\u63a7\u5236\uff0c request.version \u5c5e\u6027\u5c06\u5305\u542b\u4e0e\u4f20\u5165\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e2d\u8bf7\u6c42\u7684\u7248\u672c\u76f8\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7248\u672c\u63a7\u5236\u6ca1\u6709\u542f\u7528\uff0c request.version \u5c06\u603b\u662f\u8fd4\u56de None \u3002 \u6839\u636e\u7248\u672c\u6539\u53d8\u884c\u4e3a \u5982\u4f55\u6539\u53d8API\u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u4f60\u81ea\u5df1\uff0c\u4f46\u662f\u4e00\u4e2a\u4f60\u901a\u5e38\u60f3\u8981\u7684\u4f8b\u5b50\u662f\u5728\u65b0\u7248\u672c\u4e2d\u5207\u6362\u5230\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u3002\u4f8b\u5982: def get_serializer_class(self): if self.request.version == 'v1': return AccountSerializerVersion1 return AccountSerializer \u53cd\u5411\u89e3\u6790\u7248\u672c\u5316API\u7684URL REST framework \u5305\u542b\u7684 reverse \u51fd\u6570\u4e0e\u7248\u672c\u63a7\u5236\u65b9\u6848\u76f8\u5173\u8054\u3002\u4f60\u9700\u8981\u786e\u4fdd\u5c06\u5f53\u524d request \u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\u8fdb\u53bb\uff0c\u5982\u4e0b\u6240\u793a\u3002 from rest_framework.reverse import reverse reverse('bookings-list', request=request) \u4e0a\u8ff0\u51fd\u6570\u5c06\u5e94\u7528\u4efb\u4f55\u9002\u7528\u4e8e\u8bf7\u6c42\u7248\u672c\u7684URL\u8f6c\u6362\u3002\u4f8b\u5982: \u5982\u679c\u4f7f\u7528 NamespacedVersioning \uff0c\u5e76\u4e14API\u7684\u7248\u672c\u662f'v1'\uff0c\u90a3\u4e48\u5c06\u4f1a\u67e5\u627e 'v1:bookings-list' \uff0c\u53ef\u80fd\u53cd\u5411\u89e3\u6790\u4e3a\u7c7b\u4f3c http://example.org/v1/bookings/ \u8fd9\u4e2aURL\u3002 \u5982\u679c\u4f7f\u7528 QueryParameterVersioning \u5e76\u4e14API\u7684\u7248\u672c\u662f 1.0 \uff0c\u90a3\u4e48\u8fd4\u56de\u7684URL\u53ef\u80fd\u5c31\u50cf\u8fd9\u6837 http://example.org/bookings/?version=1.0 \u3002 \u7248\u672c\u5316 API \u548c\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u5668 \u5f53\u5c06\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u6837\u5f0f\u4e0e\u57fa\u4e8eURL\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848\u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u8bf7\u786e\u4fdd\u5c06\u8bf7\u6c42\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u5305\u542b\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e2d\u3002 def get(self, request): queryset = Booking.objects.all() serializer = BookingsSerializer(queryset, many=True, context={'request': request}) return Response({'all_bookings': serializer.data}) \u8fd9\u6837\u505a\u5c06\u4f1a\u5728\u4efb\u4f55\u8fd4\u56de\u7684URL\u4e2d\u5305\u542b\u9002\u5f53\u7684\u7248\u672c\u63a7\u5236\u3002 \u914d\u7f6e\u7248\u672c\u63a7\u5236\u65b9\u6848 \u7248\u672c\u63a7\u5236\u65b9\u6848\u7531settings\u4e2d\u7684 DEFAULT_VERSIONING_CLASS \u4e3akey\u6765\u914d\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning' } \u9664\u975e\u663e\u5f0f\u8bbe\u7f6e\uff0c\u5426\u5219 DEFAULT_VERSIONING_CLASS \u5c06\u4f1a\u662f None \u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b request.version \u5c5e\u6027\u5c06\u603b\u662f\u8fd4\u56de None \u3002 \u8fd8\u53ef\u4ee5\u5728\u5355\u4e2a\u89c6\u56fe\u4e0a\u8bbe\u7f6e\u7248\u672c\u63a7\u5236\u65b9\u6848\u3002\u901a\u5e38\u4e0d\u9700\u8981\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5168\u5c40\u4f7f\u7528\u5355\u4e00\u7248\u672c\u63a7\u5236\u65b9\u6848\u66f4\u6709\u610f\u4e49\u3002\u5982\u679c\u786e\u5b9e\u9700\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5728\u89c6\u56fe\u7c7b\u4e2d\u4f7f\u7528 versioning_class \u5c5e\u6027\u3002 class ProfileList(APIView): versioning_class = versioning.QueryParameterVersioning \u5176\u4ed6\u7248\u672c\u63a7\u5236\u8bbe\u7f6e \u4ee5\u4e0b\u8bbe\u7f6e\u7684key\u4e5f\u7528\u4e8e\u63a7\u5236\u7248\u672c\u63a7\u5236: DEFAULT_VERSION . \u5f53\u7248\u672c\u63a7\u5236\u4fe1\u606f\u4e0d\u5b58\u5728\u65f6\u7528\u4e8e\u8bbe\u7f6e request.version \u7684\u9ed8\u8ba4\u503c\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a None \u3002 ALLOWED_VERSIONS . \u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u503c\u5c06\u9650\u5236\u7248\u672c\u63a7\u5236\u65b9\u6848\u53ef\u80fd\u8fd4\u56de\u7684\u7248\u672c\u96c6\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u8bf7\u6c42\u63d0\u4f9b\u7684\u7248\u672c\u4e0d\u5728\u6b64\u96c6\u4e2d\uff0c\u5219\u4f1a\u5f15\u53d1\u9519\u8bef\u3002\u8bf7\u6ce8\u610f\uff0c\u7528\u4e8e DEFAULT_VERSION \u7684\u503c\u5e94\u8be5\u603b\u662f\u5728 ALLOWED_VERSIONS \u8bbe\u7f6e\u7684\u96c6\u5408\u4e2d\uff08\u9664\u975e\u662f None \uff09\u3002\u8be5\u914d\u7f6e\u9ed8\u8ba4\u662f None \u3002 VERSION_PARAM . \u4e00\u4e2a\u5e94\u5f53\u7528\u4e8e\u4efb\u4f55\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u53c2\u6570\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\u5a92\u4f53\u7c7b\u578b\u6216URL\u67e5\u8be2\u53c2\u6570\u3002\u9ed8\u8ba4\u503c\u662f 'version' \u3002 \u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u7248\u672c\u63a7\u5236\u65b9\u6848\u5e76\u4f7f\u7528 default_version \uff0c allowed_versions \u548c version_param \u7c7b\u53d8\u91cf\uff0c\u5728\u6bcf\u4e2a\u89c6\u56fe\u6216\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684\u57fa\u7840\u4e0a\u8bbe\u7f6e\u7248\u672c\u7c7b\u52a0\u4e0a\u8fd9\u4e09\u4e2a\u503c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u4f7f\u7528 URLPathVersioning \uff1a from rest_framework.versioning import URLPathVersioning from rest_framework.views import APIView class ExampleVersioning(URLPathVersioning): default_version = ... allowed_versions = ... version_param = ... class ExampleView(APIVIew): versioning_class = ExampleVersioning API\u53c2\u8003 AcceptHeaderVersioning \u6b64\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5728 Accept header \u4e2d\u5c06\u7248\u672c\u6307\u5b9a\u4e3a\u5a92\u4f53\u7c7b\u578b\u7684\u4e00\u90e8\u5206\u3002\u8be5\u7248\u672c\u4f5c\u4e3a\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u5305\u542b\u5728\u5185\uff0c\u5b83\u8865\u5145\u4e86\u4e3b\u8981\u5a92\u4f53\u7c7b\u578b\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528accept header\u7248\u672c\u5316\u6837\u5f0f\u7684HTTP\u8bf7\u6c42\u793a\u4f8b\u3002 GET /bookings/ HTTP/1.1 Host: example.com Accept: application/json; version=1.0 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u8bf7\u6c42\u4e2d request.version \u5c5e\u6027\u5c06\u8fd4\u56de\u5b57\u7b26\u4e32 '1.0' \u3002 \u57fa\u4e8e accept headers \u7684\u7248\u672c\u63a7\u5236 \u901a\u5e38\u88ab\u8ba4\u4e3a \u662f \u6700\u4f73\u5b9e\u8df5 \uff0c\u5c3d\u7ba1\u5176\u4ed6\u7248\u672c\u63a7\u5236\u65b9\u5f0f\u53ef\u80fd\u9002\u5408\u4f60\u7684\u5ba2\u6237\u7aef\u9700\u6c42\u3002 Using accept headers with vendor media types \u4e25\u683c\u5730\u8bf4 json \u5a92\u4f53\u7c7b\u578b\u672a\u6307\u5b9a\u4e3a \u5305\u542b\u5176\u4ed6\u53c2\u6570 \u3002\u5982\u679c\u8981\u6784\u5efa\u660e\u786e\u6307\u5b9a\u7684\u516c\u5171API\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 vendor media type \u3002\u4e3a\u6b64\uff0c\u8bf7\u5c06\u6e32\u67d3\u5668\u914d\u7f6e\u4e3a\u4f7f\u7528\u81ea\u5b9a\u4e49\u5a92\u4f53\u7c7b\u578b\u7684\u57fa\u4e8eJSON\u7684\u6e32\u67d3\u5668\uff1a class BookingsAPIRenderer(JSONRenderer): media_type = 'application/vnd.megacorp.bookings+json' \u4f60\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\u73b0\u5728\u4f1a\u662f\u8fd9\u6837\u7684: GET /bookings/ HTTP/1.1 Host: example.com Accept: application/vnd.megacorp.bookings+json; version=1.0 URLPathVersioning \u6b64\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5c06\u7248\u672c\u6307\u5b9a\u4e3aURL\u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002 GET /v1/bookings/ HTTP/1.1 Host: example.com Accept: application/json \u4f60\u7684URL conf\u4e2d\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u4f7f\u7528 'version' \u5173\u952e\u5b57\u53c2\u6570\u7684\u5339\u914d\u6a21\u5f0f\uff0c\uff0c\u4ee5\u4fbf\u7248\u672c\u63a7\u5236\u65b9\u6848\u53ef\u4ee5\u4f7f\u7528\u6b64\u7248\u672c\u4fe1\u606f\u3002 urlpatterns = [ url( r'^(?P<version>(v1|v2))/bookings/$', bookings_list, name='bookings-list' ), url( r'^(?P<version>(v1|v2))/bookings/(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail' ) ] NamespaceVersioning \u5bf9\u4e8e\u5ba2\u6237\u7aef\uff0c\u6b64\u65b9\u6848\u4e0e URLPathVersioning \u76f8\u540c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u5b83\u662f\u5982\u4f55\u5728 Django \u5e94\u7528\u7a0b\u5e8f\u4e2d\u914d\u7f6e\u7684\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528URL conf\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\u800c\u4e0d\u662fURL conf\u4e2d\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 GET /v1/something/ HTTP/1.1 Host: example.com Accept: application/json \u4f7f\u7528\u6b64\u65b9\u6848\uff0c request.version \u5c5e\u6027\u662f\u6839\u636e\u4e0e\u4f20\u5165\u8bf7\u6c42\u7684\u8def\u5f84\u5339\u914d\u7684 namespace \u786e\u5b9a\u7684\u3002 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7ed9\u4e00\u7ec4\u89c6\u56fe\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u80fd\u51fa\u73b0\u7684\u4e0d\u540cURL\u524d\u7f00\uff0c\u6bcf\u4e2a\u524d\u7f00\u5728\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e0b: # bookings/urls.py urlpatterns = [ url(r'^$', bookings_list, name='bookings-list'), url(r'^(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail') ] # urls.py urlpatterns = [ url(r'^v1/bookings/', include('bookings.urls', namespace='v1')), url(r'^v2/bookings/', include('bookings.urls', namespace='v2')) ] \u5982\u679c\u4f60\u53ea\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848 URLPathVersioning \u548c NamespaceVersioning \u90fd\u662f\u5408\u9002\u7684\u3002 URLPathVersioning \u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u66f4\u9002\u5408\u5c0f\u578b\u9879\u76ee\uff0c\u5bf9\u4e8e\u66f4\u5927\u7684\u9879\u76ee\u6765\u8bf4 NamespaceVersioning \u53ef\u80fd\u66f4\u5bb9\u6613\u7ba1\u7406\u3002 HostNameVersioning \u4e3b\u673a\u540d\u7248\u672c\u63a7\u5236\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5c06\u8bf7\u6c42\u7684\u7248\u672c\u6307\u5b9a\u4e3aURL\u4e2d\u4e3b\u673a\u540d\u7684\u4e00\u90e8\u5206\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u662f\u5bf9 http://v1.example.com/bookings/ \u7684HTTP\u8bf7\u6c42\uff1a GET /bookings/ HTTP/1.1 Host: v1.example.com Accept: application/json \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6b64\u5b9e\u73b0\u671f\u671b\u4e3b\u673a\u540d\u4e0e\u4ee5\u4e0b\u7b80\u5355\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d: ^([a-zA-Z0-9]+)\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$ \u6ce8\u610f\uff0c\u7b2c\u4e00\u7ec4\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u8868\u793a\u8fd9\u662f\u4e3b\u673a\u540d\u7684\u5339\u914d\u90e8\u5206\u3002 HostNameVersioning \u8fd9\u79cd\u65b9\u6848\u5728\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u4f7f\u7528\u65b9\u6848\u53ef\u80fd\u4f1a\u5f88\u5c34\u5c2c\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u4f1a\u8bbf\u95ee\u539f\u59cbIP\u5730\u5740\uff0c\u4f8b\u5982 127.0.0.1 \u3002\u6709\u5404\u79cd\u5728\u7ebf\u6559\u7a0b\uff0c\u4ecb\u7ecd \u4f7f\u7528\u81ea\u5b9a\u4e49\u5b50\u57df\u540d\u8bbf\u95ee\u672c\u5730\u4e3b\u673a \uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u8fd9\u5f88\u6709\u5e2e\u52a9\u3002 \u5982\u679c\u4f60\u6709\u57fa\u4e8e\u7248\u672c\u5c06\u4f20\u5165\u8bf7\u6c42\u8def\u7531\u5230\u4e0d\u540c\u670d\u52a1\u5668\u7684\u9700\u6c42\uff0c\u90a3\u4e48\u57fa\u4e8e\u4e3b\u673a\u540d\u7684\u7248\u672c\u63a7\u5236\u4f1a\u7279\u522b\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684 API \u7248\u672c\u914d\u7f6e\u4e0d\u540c\u7684 DNS \u8bb0\u5f55\u3002 QueryParameterVersioning \u6b64\u65b9\u6848\u662f\u4e00\u79cd\u5728 URL \u4e2d\u5305\u542b\u7248\u672c\u4fe1\u606f\u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570\u7684\u7b80\u5355\u65b9\u6848\u3002\u4f8b\u5982\uff1a This scheme is a simple style that includes the version as a query parameter in the URL. For example: GET /something/?version=0.1 HTTP/1.1 Host: example.com Accept: application/json Custom versioning schemes \u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7248\u672c\u63a7\u5236\u65b9\u6848\uff0c\u8bf7\u7ee7\u627f BaseVersioning \u5e76\u91cd\u5199 .determine_version \u65b9\u6cd5\u3002 \u4e3e\u4e2a\u4f8b\u5b50 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 X-API-Version header\u6765\u786e\u5b9a\u6240\u8bf7\u6c42\u7684\u7248\u672c\u3002 class XAPIVersionScheme(versioning.BaseVersioning): def determine_version(self, request, *args, **kwargs): return request.META.get('HTTP_X_API_VERSION', None) \u5982\u679c\u4f60\u7684\u7248\u672c\u5316\u65b9\u6848\u57fa\u4e8e\u8bf7\u6c42URL\uff0c\u4f60\u8fd8\u9700\u8981\u6539\u53d8\u7248\u672c\u5316URL\u7684\u786e\u5b9a\u65b9\u5f0f\u3002\u4e3a\u6b64\uff0c\u4f60\u8fd8\u5e94\u8be5\u91cd\u5199\u7c7b\u4e2d\u7684 .reverse() \u65b9\u6cd5\u3002\u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1\u6e90\u4ee3\u7801\u3002","title":"Versioning"},{"location":"api-guide/versioning_zh/#versioning","text":"\u5bf9\u63a5\u53e3\u8fdb\u884c\u7248\u672c\u63a7\u5236\u53ea\u662f\u4e00\u79cd\u6740\u6b7b\u5df2\u90e8\u7f72\u5ba2\u6237\u7aef\u7684\u201c\u793c\u8c8c\u201d\u65b9\u5f0f\u3002 \u2014 Roy Fielding . API \u7248\u672c\u63a7\u5236\u5141\u8bb8\u4f60\u5728\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u4e4b\u95f4\u66f4\u6539\u884c\u4e3a. REST framework \u63d0\u4f9b\u4e86\u8bb8\u591a\u4e0d\u540c\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848\u3002 \u7248\u672c\u63a7\u5236\u7531\u4f20\u5165\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\u51b3\u5b9a\uff0c\u53ef\u4ee5\u57fa\u4e8e\u8bf7\u6c42\u7684URL\uff0c\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u8bf7\u6c42\u5934\u3002 \u6709\u8bb8\u591a\u6709\u6548\u7684\u65b9\u6cd5\u53ef\u4ee5\u8fdb\u884c\u7248\u672c\u63a7\u5236\u3002 \u65e0\u7248\u672c\u63a7\u5236\u7684\u7cfb\u7edf\u4e5f\u53ef\u80fd\u662f\u5408\u9002\u7684 \uff0c\u7279\u522b\u662f\u5982\u679c\u4f60\u6b63\u5728\u4e3a\u4e00\u4e2a\u957f\u671f\u7cfb\u7edf\u8fdb\u884c\u5de5\u7a0b\u8bbe\u8ba1\uff0c\u800c\u8fd9\u4e2a\u7cfb\u7edf\u6709\u591a\u4e2a\u8d85\u51fa\u4f60\u63a7\u5236\u8303\u56f4\u7684\u5ba2\u6237\u7aef\u3002","title":"Versioning"},{"location":"api-guide/versioning_zh/#rest","text":"\u5f53\u542f\u7528API\u7248\u672c\u63a7\u5236\uff0c request.version \u5c5e\u6027\u5c06\u5305\u542b\u4e0e\u4f20\u5165\u5ba2\u6237\u7aef\u8bf7\u6c42\u4e2d\u8bf7\u6c42\u7684\u7248\u672c\u76f8\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7248\u672c\u63a7\u5236\u6ca1\u6709\u542f\u7528\uff0c request.version \u5c06\u603b\u662f\u8fd4\u56de None \u3002","title":"\u4f7f\u7528REST\u6846\u67b6\u8fdb\u884c\u7248\u672c\u63a7\u5236"},{"location":"api-guide/versioning_zh/#_1","text":"\u5982\u4f55\u6539\u53d8API\u7684\u884c\u4e3a\u53d6\u51b3\u4e8e\u4f60\u81ea\u5df1\uff0c\u4f46\u662f\u4e00\u4e2a\u4f60\u901a\u5e38\u60f3\u8981\u7684\u4f8b\u5b50\u662f\u5728\u65b0\u7248\u672c\u4e2d\u5207\u6362\u5230\u4e0d\u540c\u7684\u5e8f\u5217\u5316\u6837\u5f0f\u3002\u4f8b\u5982: def get_serializer_class(self): if self.request.version == 'v1': return AccountSerializerVersion1 return AccountSerializer","title":"\u6839\u636e\u7248\u672c\u6539\u53d8\u884c\u4e3a"},{"location":"api-guide/versioning_zh/#apiurl","text":"REST framework \u5305\u542b\u7684 reverse \u51fd\u6570\u4e0e\u7248\u672c\u63a7\u5236\u65b9\u6848\u76f8\u5173\u8054\u3002\u4f60\u9700\u8981\u786e\u4fdd\u5c06\u5f53\u524d request \u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\u8fdb\u53bb\uff0c\u5982\u4e0b\u6240\u793a\u3002 from rest_framework.reverse import reverse reverse('bookings-list', request=request) \u4e0a\u8ff0\u51fd\u6570\u5c06\u5e94\u7528\u4efb\u4f55\u9002\u7528\u4e8e\u8bf7\u6c42\u7248\u672c\u7684URL\u8f6c\u6362\u3002\u4f8b\u5982: \u5982\u679c\u4f7f\u7528 NamespacedVersioning \uff0c\u5e76\u4e14API\u7684\u7248\u672c\u662f'v1'\uff0c\u90a3\u4e48\u5c06\u4f1a\u67e5\u627e 'v1:bookings-list' \uff0c\u53ef\u80fd\u53cd\u5411\u89e3\u6790\u4e3a\u7c7b\u4f3c http://example.org/v1/bookings/ \u8fd9\u4e2aURL\u3002 \u5982\u679c\u4f7f\u7528 QueryParameterVersioning \u5e76\u4e14API\u7684\u7248\u672c\u662f 1.0 \uff0c\u90a3\u4e48\u8fd4\u56de\u7684URL\u53ef\u80fd\u5c31\u50cf\u8fd9\u6837 http://example.org/bookings/?version=1.0 \u3002","title":"\u53cd\u5411\u89e3\u6790\u7248\u672c\u5316API\u7684URL"},{"location":"api-guide/versioning_zh/#api","text":"\u5f53\u5c06\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u6837\u5f0f\u4e0e\u57fa\u4e8eURL\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848\u4e00\u8d77\u4f7f\u7528\u65f6\uff0c\u8bf7\u786e\u4fdd\u5c06\u8bf7\u6c42\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u5305\u542b\u5728\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e2d\u3002 def get(self, request): queryset = Booking.objects.all() serializer = BookingsSerializer(queryset, many=True, context={'request': request}) return Response({'all_bookings': serializer.data}) \u8fd9\u6837\u505a\u5c06\u4f1a\u5728\u4efb\u4f55\u8fd4\u56de\u7684URL\u4e2d\u5305\u542b\u9002\u5f53\u7684\u7248\u672c\u63a7\u5236\u3002","title":"\u7248\u672c\u5316 API \u548c\u8d85\u94fe\u63a5\u5e8f\u5217\u5316\u5668"},{"location":"api-guide/versioning_zh/#_2","text":"\u7248\u672c\u63a7\u5236\u65b9\u6848\u7531settings\u4e2d\u7684 DEFAULT_VERSIONING_CLASS \u4e3akey\u6765\u914d\u7f6e\u3002 REST_FRAMEWORK = { 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning' } \u9664\u975e\u663e\u5f0f\u8bbe\u7f6e\uff0c\u5426\u5219 DEFAULT_VERSIONING_CLASS \u5c06\u4f1a\u662f None \u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b request.version \u5c5e\u6027\u5c06\u603b\u662f\u8fd4\u56de None \u3002 \u8fd8\u53ef\u4ee5\u5728\u5355\u4e2a\u89c6\u56fe\u4e0a\u8bbe\u7f6e\u7248\u672c\u63a7\u5236\u65b9\u6848\u3002\u901a\u5e38\u4e0d\u9700\u8981\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5168\u5c40\u4f7f\u7528\u5355\u4e00\u7248\u672c\u63a7\u5236\u65b9\u6848\u66f4\u6709\u610f\u4e49\u3002\u5982\u679c\u786e\u5b9e\u9700\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5728\u89c6\u56fe\u7c7b\u4e2d\u4f7f\u7528 versioning_class \u5c5e\u6027\u3002 class ProfileList(APIView): versioning_class = versioning.QueryParameterVersioning","title":"\u914d\u7f6e\u7248\u672c\u63a7\u5236\u65b9\u6848"},{"location":"api-guide/versioning_zh/#_3","text":"\u4ee5\u4e0b\u8bbe\u7f6e\u7684key\u4e5f\u7528\u4e8e\u63a7\u5236\u7248\u672c\u63a7\u5236: DEFAULT_VERSION . \u5f53\u7248\u672c\u63a7\u5236\u4fe1\u606f\u4e0d\u5b58\u5728\u65f6\u7528\u4e8e\u8bbe\u7f6e request.version \u7684\u9ed8\u8ba4\u503c\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a None \u3002 ALLOWED_VERSIONS . \u5982\u679c\u8bbe\u7f6e\u4e86\u6b64\u503c\u5c06\u9650\u5236\u7248\u672c\u63a7\u5236\u65b9\u6848\u53ef\u80fd\u8fd4\u56de\u7684\u7248\u672c\u96c6\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u8bf7\u6c42\u63d0\u4f9b\u7684\u7248\u672c\u4e0d\u5728\u6b64\u96c6\u4e2d\uff0c\u5219\u4f1a\u5f15\u53d1\u9519\u8bef\u3002\u8bf7\u6ce8\u610f\uff0c\u7528\u4e8e DEFAULT_VERSION \u7684\u503c\u5e94\u8be5\u603b\u662f\u5728 ALLOWED_VERSIONS \u8bbe\u7f6e\u7684\u96c6\u5408\u4e2d\uff08\u9664\u975e\u662f None \uff09\u3002\u8be5\u914d\u7f6e\u9ed8\u8ba4\u662f None \u3002 VERSION_PARAM . \u4e00\u4e2a\u5e94\u5f53\u7528\u4e8e\u4efb\u4f55\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u53c2\u6570\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\u5a92\u4f53\u7c7b\u578b\u6216URL\u67e5\u8be2\u53c2\u6570\u3002\u9ed8\u8ba4\u503c\u662f 'version' \u3002 \u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u7248\u672c\u63a7\u5236\u65b9\u6848\u5e76\u4f7f\u7528 default_version \uff0c allowed_versions \u548c version_param \u7c7b\u53d8\u91cf\uff0c\u5728\u6bcf\u4e2a\u89c6\u56fe\u6216\u6bcf\u4e2a\u89c6\u56fe\u96c6\u7684\u57fa\u7840\u4e0a\u8bbe\u7f6e\u7248\u672c\u7c7b\u52a0\u4e0a\u8fd9\u4e09\u4e2a\u503c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u4f7f\u7528 URLPathVersioning \uff1a from rest_framework.versioning import URLPathVersioning from rest_framework.views import APIView class ExampleVersioning(URLPathVersioning): default_version = ... allowed_versions = ... version_param = ... class ExampleView(APIVIew): versioning_class = ExampleVersioning","title":"\u5176\u4ed6\u7248\u672c\u63a7\u5236\u8bbe\u7f6e"},{"location":"api-guide/versioning_zh/#api_1","text":"","title":"API\u53c2\u8003"},{"location":"api-guide/versioning_zh/#acceptheaderversioning","text":"\u6b64\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5728 Accept header \u4e2d\u5c06\u7248\u672c\u6307\u5b9a\u4e3a\u5a92\u4f53\u7c7b\u578b\u7684\u4e00\u90e8\u5206\u3002\u8be5\u7248\u672c\u4f5c\u4e3a\u5a92\u4f53\u7c7b\u578b\u53c2\u6570\u5305\u542b\u5728\u5185\uff0c\u5b83\u8865\u5145\u4e86\u4e3b\u8981\u5a92\u4f53\u7c7b\u578b\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528accept header\u7248\u672c\u5316\u6837\u5f0f\u7684HTTP\u8bf7\u6c42\u793a\u4f8b\u3002 GET /bookings/ HTTP/1.1 Host: example.com Accept: application/json; version=1.0 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u8bf7\u6c42\u4e2d request.version \u5c5e\u6027\u5c06\u8fd4\u56de\u5b57\u7b26\u4e32 '1.0' \u3002 \u57fa\u4e8e accept headers \u7684\u7248\u672c\u63a7\u5236 \u901a\u5e38\u88ab\u8ba4\u4e3a \u662f \u6700\u4f73\u5b9e\u8df5 \uff0c\u5c3d\u7ba1\u5176\u4ed6\u7248\u672c\u63a7\u5236\u65b9\u5f0f\u53ef\u80fd\u9002\u5408\u4f60\u7684\u5ba2\u6237\u7aef\u9700\u6c42\u3002","title":"AcceptHeaderVersioning"},{"location":"api-guide/versioning_zh/#using-accept-headers-with-vendor-media-types","text":"\u4e25\u683c\u5730\u8bf4 json \u5a92\u4f53\u7c7b\u578b\u672a\u6307\u5b9a\u4e3a \u5305\u542b\u5176\u4ed6\u53c2\u6570 \u3002\u5982\u679c\u8981\u6784\u5efa\u660e\u786e\u6307\u5b9a\u7684\u516c\u5171API\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 vendor media type \u3002\u4e3a\u6b64\uff0c\u8bf7\u5c06\u6e32\u67d3\u5668\u914d\u7f6e\u4e3a\u4f7f\u7528\u81ea\u5b9a\u4e49\u5a92\u4f53\u7c7b\u578b\u7684\u57fa\u4e8eJSON\u7684\u6e32\u67d3\u5668\uff1a class BookingsAPIRenderer(JSONRenderer): media_type = 'application/vnd.megacorp.bookings+json' \u4f60\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\u73b0\u5728\u4f1a\u662f\u8fd9\u6837\u7684: GET /bookings/ HTTP/1.1 Host: example.com Accept: application/vnd.megacorp.bookings+json; version=1.0","title":"Using accept headers with vendor media types"},{"location":"api-guide/versioning_zh/#urlpathversioning","text":"\u6b64\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5c06\u7248\u672c\u6307\u5b9a\u4e3aURL\u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002 GET /v1/bookings/ HTTP/1.1 Host: example.com Accept: application/json \u4f60\u7684URL conf\u4e2d\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u4f7f\u7528 'version' \u5173\u952e\u5b57\u53c2\u6570\u7684\u5339\u914d\u6a21\u5f0f\uff0c\uff0c\u4ee5\u4fbf\u7248\u672c\u63a7\u5236\u65b9\u6848\u53ef\u4ee5\u4f7f\u7528\u6b64\u7248\u672c\u4fe1\u606f\u3002 urlpatterns = [ url( r'^(?P<version>(v1|v2))/bookings/$', bookings_list, name='bookings-list' ), url( r'^(?P<version>(v1|v2))/bookings/(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail' ) ]","title":"URLPathVersioning"},{"location":"api-guide/versioning_zh/#namespaceversioning","text":"\u5bf9\u4e8e\u5ba2\u6237\u7aef\uff0c\u6b64\u65b9\u6848\u4e0e URLPathVersioning \u76f8\u540c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u5b83\u662f\u5982\u4f55\u5728 Django \u5e94\u7528\u7a0b\u5e8f\u4e2d\u914d\u7f6e\u7684\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528URL conf\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\u800c\u4e0d\u662fURL conf\u4e2d\u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 GET /v1/something/ HTTP/1.1 Host: example.com Accept: application/json \u4f7f\u7528\u6b64\u65b9\u6848\uff0c request.version \u5c5e\u6027\u662f\u6839\u636e\u4e0e\u4f20\u5165\u8bf7\u6c42\u7684\u8def\u5f84\u5339\u914d\u7684 namespace \u786e\u5b9a\u7684\u3002 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7ed9\u4e00\u7ec4\u89c6\u56fe\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u80fd\u51fa\u73b0\u7684\u4e0d\u540cURL\u524d\u7f00\uff0c\u6bcf\u4e2a\u524d\u7f00\u5728\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e0b: # bookings/urls.py urlpatterns = [ url(r'^$', bookings_list, name='bookings-list'), url(r'^(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail') ] # urls.py urlpatterns = [ url(r'^v1/bookings/', include('bookings.urls', namespace='v1')), url(r'^v2/bookings/', include('bookings.urls', namespace='v2')) ] \u5982\u679c\u4f60\u53ea\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u7248\u672c\u63a7\u5236\u65b9\u6848 URLPathVersioning \u548c NamespaceVersioning \u90fd\u662f\u5408\u9002\u7684\u3002 URLPathVersioning \u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u66f4\u9002\u5408\u5c0f\u578b\u9879\u76ee\uff0c\u5bf9\u4e8e\u66f4\u5927\u7684\u9879\u76ee\u6765\u8bf4 NamespaceVersioning \u53ef\u80fd\u66f4\u5bb9\u6613\u7ba1\u7406\u3002","title":"NamespaceVersioning"},{"location":"api-guide/versioning_zh/#hostnameversioning","text":"\u4e3b\u673a\u540d\u7248\u672c\u63a7\u5236\u65b9\u6848\u8981\u6c42\u5ba2\u6237\u7aef\u5c06\u8bf7\u6c42\u7684\u7248\u672c\u6307\u5b9a\u4e3aURL\u4e2d\u4e3b\u673a\u540d\u7684\u4e00\u90e8\u5206\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u662f\u5bf9 http://v1.example.com/bookings/ \u7684HTTP\u8bf7\u6c42\uff1a GET /bookings/ HTTP/1.1 Host: v1.example.com Accept: application/json \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6b64\u5b9e\u73b0\u671f\u671b\u4e3b\u673a\u540d\u4e0e\u4ee5\u4e0b\u7b80\u5355\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d: ^([a-zA-Z0-9]+)\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$ \u6ce8\u610f\uff0c\u7b2c\u4e00\u7ec4\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u8868\u793a\u8fd9\u662f\u4e3b\u673a\u540d\u7684\u5339\u914d\u90e8\u5206\u3002 HostNameVersioning \u8fd9\u79cd\u65b9\u6848\u5728\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u4f7f\u7528\u65b9\u6848\u53ef\u80fd\u4f1a\u5f88\u5c34\u5c2c\uff0c\u56e0\u4e3a\u4f60\u901a\u5e38\u4f1a\u8bbf\u95ee\u539f\u59cbIP\u5730\u5740\uff0c\u4f8b\u5982 127.0.0.1 \u3002\u6709\u5404\u79cd\u5728\u7ebf\u6559\u7a0b\uff0c\u4ecb\u7ecd \u4f7f\u7528\u81ea\u5b9a\u4e49\u5b50\u57df\u540d\u8bbf\u95ee\u672c\u5730\u4e3b\u673a \uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u8fd9\u5f88\u6709\u5e2e\u52a9\u3002 \u5982\u679c\u4f60\u6709\u57fa\u4e8e\u7248\u672c\u5c06\u4f20\u5165\u8bf7\u6c42\u8def\u7531\u5230\u4e0d\u540c\u670d\u52a1\u5668\u7684\u9700\u6c42\uff0c\u90a3\u4e48\u57fa\u4e8e\u4e3b\u673a\u540d\u7684\u7248\u672c\u63a7\u5236\u4f1a\u7279\u522b\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684 API \u7248\u672c\u914d\u7f6e\u4e0d\u540c\u7684 DNS \u8bb0\u5f55\u3002","title":"HostNameVersioning"},{"location":"api-guide/versioning_zh/#queryparameterversioning","text":"\u6b64\u65b9\u6848\u662f\u4e00\u79cd\u5728 URL \u4e2d\u5305\u542b\u7248\u672c\u4fe1\u606f\u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570\u7684\u7b80\u5355\u65b9\u6848\u3002\u4f8b\u5982\uff1a This scheme is a simple style that includes the version as a query parameter in the URL. For example: GET /something/?version=0.1 HTTP/1.1 Host: example.com Accept: application/json","title":"QueryParameterVersioning"},{"location":"api-guide/versioning_zh/#custom-versioning-schemes","text":"\u8981\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7248\u672c\u63a7\u5236\u65b9\u6848\uff0c\u8bf7\u7ee7\u627f BaseVersioning \u5e76\u91cd\u5199 .determine_version \u65b9\u6cd5\u3002","title":"Custom versioning schemes"},{"location":"api-guide/versioning_zh/#_4","text":"\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 X-API-Version header\u6765\u786e\u5b9a\u6240\u8bf7\u6c42\u7684\u7248\u672c\u3002 class XAPIVersionScheme(versioning.BaseVersioning): def determine_version(self, request, *args, **kwargs): return request.META.get('HTTP_X_API_VERSION', None) \u5982\u679c\u4f60\u7684\u7248\u672c\u5316\u65b9\u6848\u57fa\u4e8e\u8bf7\u6c42URL\uff0c\u4f60\u8fd8\u9700\u8981\u6539\u53d8\u7248\u672c\u5316URL\u7684\u786e\u5b9a\u65b9\u5f0f\u3002\u4e3a\u6b64\uff0c\u4f60\u8fd8\u5e94\u8be5\u91cd\u5199\u7c7b\u4e2d\u7684 .reverse() \u65b9\u6cd5\u3002\u6709\u5173\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1\u6e90\u4ee3\u7801\u3002","title":"\u4e3e\u4e2a\u4f8b\u5b50"},{"location":"api-guide/views/","text":"Class-based Views Django's class-based views are a welcome departure from the old-style views. \u2014 Reinout van Rees REST framework provides an APIView class, which subclasses Django's View class. APIView classes are different from regular View classes in the following ways: Requests passed to the handler methods will be REST framework's Request instances, not Django's HttpRequest instances. Handler methods may return REST framework's Response , instead of Django's HttpResponse . The view will manage content negotiation and setting the correct renderer on the response. Any APIException exceptions will be caught and mediated into appropriate responses. Incoming requests will be authenticated and appropriate permission and/or throttle checks will be run before dispatching the request to the handler method. Using the APIView class is pretty much the same as using a regular View class, as usual, the incoming request is dispatched to an appropriate handler method such as .get() or .post() . Additionally, a number of attributes may be set on the class that control various aspects of the API policy. For example: from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import authentication, permissions from django.contrib.auth.models import User class ListUsers(APIView): \"\"\" View to list all users in the system. * Requires token authentication. * Only admin users are able to access this view. \"\"\" authentication_classes = [authentication.TokenAuthentication] permission_classes = [permissions.IsAdminUser] def get(self, request, format=None): \"\"\" Return a list of all users. \"\"\" usernames = [user.username for user in User.objects.all()] return Response(usernames) Note : The full methods, attributes on, and relations between Django REST Framework's APIView , GenericAPIView , various Mixins , and Viewsets can be initially complex. In addition to the documentation here, the Classy Django REST Framework resource provides a browsable reference, with full methods and attributes, for each of Django REST Framework's class-based views. API policy attributes The following attributes control the pluggable aspects of API views. .renderer_classes .parser_classes .authentication_classes .throttle_classes .permission_classes .content_negotiation_class API policy instantiation methods The following methods are used by REST framework to instantiate the various pluggable API policies. You won't typically need to override these methods. .get_renderers(self) .get_parsers(self) .get_authenticators(self) .get_throttles(self) .get_permissions(self) .get_content_negotiator(self) .get_exception_handler(self) API policy implementation methods The following methods are called before dispatching to the handler method. .check_permissions(self, request) .check_throttles(self, request) .perform_content_negotiation(self, request, force=False) Dispatch methods The following methods are called directly by the view's .dispatch() method. These perform any actions that need to occur before or after calling the handler methods such as .get() , .post() , put() , patch() and .delete() . .initial(self, request, *args, **kwargs) Performs any actions that need to occur before the handler method gets called. This method is used to enforce permissions and throttling, and perform content negotiation. You won't typically need to override this method. .handle_exception(self, exc) Any exception thrown by the handler method will be passed to this method, which either returns a Response instance, or re-raises the exception. The default implementation handles any subclass of rest_framework.exceptions.APIException , as well as Django's Http404 and PermissionDenied exceptions, and returns an appropriate error response. If you need to customize the error responses your API returns you should subclass this method. .initialize_request(self, request, *args, **kwargs) Ensures that the request object that is passed to the handler method is an instance of Request , rather than the usual Django HttpRequest . You won't typically need to override this method. .finalize_response(self, request, response, *args, **kwargs) Ensures that any Response object returned from the handler method will be rendered into the correct content type, as determined by the content negotiation. You won't typically need to override this method. Function Based Views Saying [that class-based views] is always the superior solution is a mistake. \u2014 Nick Coghlan REST framework also allows you to work with regular function based views. It provides a set of simple decorators that wrap your function based views to ensure they receive an instance of Request (rather than the usual Django HttpRequest ) and allows them to return a Response (instead of a Django HttpResponse ), and allow you to configure how the request is processed. @api_view() Signature: @api_view(http_method_names=['GET']) The core of this functionality is the api_view decorator, which takes a list of HTTP methods that your view should respond to. For example, this is how you would write a very simple view that just manually returns some data: from rest_framework.decorators import api_view @api_view() def hello_world(request): return Response({\"message\": \"Hello, world!\"}) This view will use the default renderers, parsers, authentication classes etc specified in the settings . By default only GET methods will be accepted. Other methods will respond with \"405 Method Not Allowed\". To alter this behaviour, specify which methods the view allows, like so: @api_view(['GET', 'POST']) def hello_world(request): if request.method == 'POST': return Response({\"message\": \"Got some data!\", \"data\": request.data}) return Response({\"message\": \"Hello, world!\"}) API policy decorators To override the default settings, REST framework provides a set of additional decorators which can be added to your views. These must come after (below) the @api_view decorator. For example, to create a view that uses a throttle to ensure it can only be called once per day by a particular user, use the @throttle_classes decorator, passing a list of throttle classes: from rest_framework.decorators import api_view, throttle_classes from rest_framework.throttling import UserRateThrottle class OncePerDayUserThrottle(UserRateThrottle): rate = '1/day' @api_view(['GET']) @throttle_classes([OncePerDayUserThrottle]) def view(request): return Response({\"message\": \"Hello for today! See you tomorrow!\"}) These decorators correspond to the attributes set on APIView subclasses, described above. The available decorators are: @renderer_classes(...) @parser_classes(...) @authentication_classes(...) @throttle_classes(...) @permission_classes(...) Each of these decorators takes a single argument which must be a list or tuple of classes. View schema decorator To override the default schema generation for function based views you may use the @schema decorator. This must come after (below) the @api_view decorator. For example: from rest_framework.decorators import api_view, schema from rest_framework.schemas import AutoSchema class CustomAutoSchema(AutoSchema): def get_link(self, path, method, base_url): # override view introspection here... @api_view(['GET']) @schema(CustomAutoSchema()) def view(request): return Response({\"message\": \"Hello for today! See you tomorrow!\"}) This decorator takes a single AutoSchema instance, an AutoSchema subclass instance or ManualSchema instance as described in the Schemas documentation . You may pass None in order to exclude the view from schema generation. @api_view(['GET']) @schema(None) def view(request): return Response({\"message\": \"Will not appear in schema!\"})","title":"Class-based Views"},{"location":"api-guide/views/#class-based-views","text":"Django's class-based views are a welcome departure from the old-style views. \u2014 Reinout van Rees REST framework provides an APIView class, which subclasses Django's View class. APIView classes are different from regular View classes in the following ways: Requests passed to the handler methods will be REST framework's Request instances, not Django's HttpRequest instances. Handler methods may return REST framework's Response , instead of Django's HttpResponse . The view will manage content negotiation and setting the correct renderer on the response. Any APIException exceptions will be caught and mediated into appropriate responses. Incoming requests will be authenticated and appropriate permission and/or throttle checks will be run before dispatching the request to the handler method. Using the APIView class is pretty much the same as using a regular View class, as usual, the incoming request is dispatched to an appropriate handler method such as .get() or .post() . Additionally, a number of attributes may be set on the class that control various aspects of the API policy. For example: from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import authentication, permissions from django.contrib.auth.models import User class ListUsers(APIView): \"\"\" View to list all users in the system. * Requires token authentication. * Only admin users are able to access this view. \"\"\" authentication_classes = [authentication.TokenAuthentication] permission_classes = [permissions.IsAdminUser] def get(self, request, format=None): \"\"\" Return a list of all users. \"\"\" usernames = [user.username for user in User.objects.all()] return Response(usernames) Note : The full methods, attributes on, and relations between Django REST Framework's APIView , GenericAPIView , various Mixins , and Viewsets can be initially complex. In addition to the documentation here, the Classy Django REST Framework resource provides a browsable reference, with full methods and attributes, for each of Django REST Framework's class-based views.","title":"Class-based Views"},{"location":"api-guide/views/#api-policy-attributes","text":"The following attributes control the pluggable aspects of API views.","title":"API policy attributes"},{"location":"api-guide/views/#renderer_classes","text":"","title":".renderer_classes"},{"location":"api-guide/views/#parser_classes","text":"","title":".parser_classes"},{"location":"api-guide/views/#authentication_classes","text":"","title":".authentication_classes"},{"location":"api-guide/views/#throttle_classes","text":"","title":".throttle_classes"},{"location":"api-guide/views/#permission_classes","text":"","title":".permission_classes"},{"location":"api-guide/views/#content_negotiation_class","text":"","title":".content_negotiation_class"},{"location":"api-guide/views/#api-policy-instantiation-methods","text":"The following methods are used by REST framework to instantiate the various pluggable API policies. You won't typically need to override these methods.","title":"API policy instantiation methods"},{"location":"api-guide/views/#get_renderersself","text":"","title":".get_renderers(self)"},{"location":"api-guide/views/#get_parsersself","text":"","title":".get_parsers(self)"},{"location":"api-guide/views/#get_authenticatorsself","text":"","title":".get_authenticators(self)"},{"location":"api-guide/views/#get_throttlesself","text":"","title":".get_throttles(self)"},{"location":"api-guide/views/#get_permissionsself","text":"","title":".get_permissions(self)"},{"location":"api-guide/views/#get_content_negotiatorself","text":"","title":".get_content_negotiator(self)"},{"location":"api-guide/views/#get_exception_handlerself","text":"","title":".get_exception_handler(self)"},{"location":"api-guide/views/#api-policy-implementation-methods","text":"The following methods are called before dispatching to the handler method.","title":"API policy implementation methods"},{"location":"api-guide/views/#check_permissionsself-request","text":"","title":".check_permissions(self, request)"},{"location":"api-guide/views/#check_throttlesself-request","text":"","title":".check_throttles(self, request)"},{"location":"api-guide/views/#perform_content_negotiationself-request-forcefalse","text":"","title":".perform_content_negotiation(self, request, force=False)"},{"location":"api-guide/views/#dispatch-methods","text":"The following methods are called directly by the view's .dispatch() method. These perform any actions that need to occur before or after calling the handler methods such as .get() , .post() , put() , patch() and .delete() .","title":"Dispatch methods"},{"location":"api-guide/views/#initialself-request-args-kwargs","text":"Performs any actions that need to occur before the handler method gets called. This method is used to enforce permissions and throttling, and perform content negotiation. You won't typically need to override this method.","title":".initial(self, request, *args, **kwargs)"},{"location":"api-guide/views/#handle_exceptionself-exc","text":"Any exception thrown by the handler method will be passed to this method, which either returns a Response instance, or re-raises the exception. The default implementation handles any subclass of rest_framework.exceptions.APIException , as well as Django's Http404 and PermissionDenied exceptions, and returns an appropriate error response. If you need to customize the error responses your API returns you should subclass this method.","title":".handle_exception(self, exc)"},{"location":"api-guide/views/#initialize_requestself-request-args-kwargs","text":"Ensures that the request object that is passed to the handler method is an instance of Request , rather than the usual Django HttpRequest . You won't typically need to override this method.","title":".initialize_request(self, request, *args, **kwargs)"},{"location":"api-guide/views/#finalize_responseself-request-response-args-kwargs","text":"Ensures that any Response object returned from the handler method will be rendered into the correct content type, as determined by the content negotiation. You won't typically need to override this method.","title":".finalize_response(self, request, response, *args, **kwargs)"},{"location":"api-guide/views/#function-based-views","text":"Saying [that class-based views] is always the superior solution is a mistake. \u2014 Nick Coghlan REST framework also allows you to work with regular function based views. It provides a set of simple decorators that wrap your function based views to ensure they receive an instance of Request (rather than the usual Django HttpRequest ) and allows them to return a Response (instead of a Django HttpResponse ), and allow you to configure how the request is processed.","title":"Function Based Views"},{"location":"api-guide/views/#api_view","text":"Signature: @api_view(http_method_names=['GET']) The core of this functionality is the api_view decorator, which takes a list of HTTP methods that your view should respond to. For example, this is how you would write a very simple view that just manually returns some data: from rest_framework.decorators import api_view @api_view() def hello_world(request): return Response({\"message\": \"Hello, world!\"}) This view will use the default renderers, parsers, authentication classes etc specified in the settings . By default only GET methods will be accepted. Other methods will respond with \"405 Method Not Allowed\". To alter this behaviour, specify which methods the view allows, like so: @api_view(['GET', 'POST']) def hello_world(request): if request.method == 'POST': return Response({\"message\": \"Got some data!\", \"data\": request.data}) return Response({\"message\": \"Hello, world!\"})","title":"@api_view()"},{"location":"api-guide/views/#api-policy-decorators","text":"To override the default settings, REST framework provides a set of additional decorators which can be added to your views. These must come after (below) the @api_view decorator. For example, to create a view that uses a throttle to ensure it can only be called once per day by a particular user, use the @throttle_classes decorator, passing a list of throttle classes: from rest_framework.decorators import api_view, throttle_classes from rest_framework.throttling import UserRateThrottle class OncePerDayUserThrottle(UserRateThrottle): rate = '1/day' @api_view(['GET']) @throttle_classes([OncePerDayUserThrottle]) def view(request): return Response({\"message\": \"Hello for today! See you tomorrow!\"}) These decorators correspond to the attributes set on APIView subclasses, described above. The available decorators are: @renderer_classes(...) @parser_classes(...) @authentication_classes(...) @throttle_classes(...) @permission_classes(...) Each of these decorators takes a single argument which must be a list or tuple of classes.","title":"API policy decorators"},{"location":"api-guide/views/#view-schema-decorator","text":"To override the default schema generation for function based views you may use the @schema decorator. This must come after (below) the @api_view decorator. For example: from rest_framework.decorators import api_view, schema from rest_framework.schemas import AutoSchema class CustomAutoSchema(AutoSchema): def get_link(self, path, method, base_url): # override view introspection here... @api_view(['GET']) @schema(CustomAutoSchema()) def view(request): return Response({\"message\": \"Hello for today! See you tomorrow!\"}) This decorator takes a single AutoSchema instance, an AutoSchema subclass instance or ManualSchema instance as described in the Schemas documentation . You may pass None in order to exclude the view from schema generation. @api_view(['GET']) @schema(None) def view(request): return Response({\"message\": \"Will not appear in schema!\"})","title":"View schema decorator"},{"location":"api-guide/views_zh/","text":"\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe Django\u4e2d\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u5bf9\u4e8e\u65e7\u5f0f\u98ce\u683c\u7684\u89c6\u56fe\u6765\u8bf4\u662f\u826f\u597d\u7684\u66ff\u4ee3\u54c1\u3002 \u2014 reinout van rees REST framework\u63d0\u4f9b\u4e86\u4e00\u4e2a APIView \u7c7b\uff0c\u5b83\u662fDjango\u7684 View \u7c7b\u7684\u5b50\u7c7b\u3002 APIView \u7c7b\u548c\u4e00\u822c\u7684 View \u7c7b\u6709\u4ee5\u4e0b\u4e0d\u540c\uff1a \u88ab\u4f20\u5165\u5230\u5904\u7406\u65b9\u6cd5\u7684\u8bf7\u6c42\u4e0d\u4f1a\u662fDjango\u7684 HttpRequest \u7c7b\u7684\u5b9e\u4f8b\uff0c\u800c\u662fREST framework\u7684 Request \u7c7b\u7684\u5b9e\u4f8b\u3002 \u5904\u7406\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56deREST framework\u7684 Response \uff0c\u800c\u4e0d\u662fDjango\u7684 HttpRequest \u3002\u89c6\u56fe\u4f1a\u7ba1\u7406\u5185\u5bb9\u534f\u8bae\uff0c\u7ed9\u54cd\u5e94\u8bbe\u7f6e\u6b63\u786e\u7684\u6e32\u67d3\u5668\u3002 \u4efb\u4f55 APIException \u5f02\u5e38\u90fd\u4f1a\u88ab\u6355\u83b7\uff0c\u5e76\u4e14\u4f20\u9012\u7ed9\u5408\u9002\u7684\u54cd\u5e94\u3002 \u8fdb\u5165\u7684\u8bf7\u6c42\u5c06\u4f1a\u7ecf\u8fc7\u8ba4\u8bc1\uff0c\u5408\u9002\u7684\u6743\u9650\u548c\uff08\u6216\uff09\u8282\u6d41\u68c0\u67e5\u4f1a\u5728\u8bf7\u6c42\u88ab\u6d3e\u53d1\u5230\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u8fd0\u884c\u3002 \u4f7f\u7528 APIView \u7c7b\u548c\u4f7f\u7528\u4e00\u822c\u7684 View \u7c7b\u975e\u5e38\u76f8\u4f3c\uff0c\u901a\u5e38\uff0c\u8fdb\u5165\u7684\u8bf7\u6c42\u4f1a\u88ab\u5206\u53d1\u5230\u5408\u9002\u5904\u7406\u65b9\u6cd5\u6bd4\u5982 .get() \uff0c\u6216\u8005 .post \u3002\u53e6\u5916\uff0c\u5f88\u591a\u5c5e\u6027\u4f1a\u88ab\u8bbe\u5b9a\u5728\u63a7\u5236API\u7b56\u7565\u7684\u5404\u79cd\u5207\u9762\u7684\u7c7b\u4e0a\u3002 \u6bd4\u5982\uff1a from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import authentication, permissions class ListUsers(APIView): \"\"\" \u5217\u51fa\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7528\u6237\u7684\u89c6\u56fe\u3002 * \u9700\u8981token\u8ba4\u8bc1 * \u53ea\u6709\u7ba1\u7406\u5458\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u89c6\u56fe\u3002 \"\"\" authentication_classes = (authentication.TokenAuthentication,) permission_classes = (permissions.IsAdminUser,) def get(self, request, format=None): \"\"\" Return a list of all users. \"\"\" usernames = [user.username for user in User.objects.all()] return Response(usernames) API\u7b56\u7565\u5c5e\u6027 \u4e0b\u9762\u8fd9\u4e9b\u5c5e\u6027\u63a7\u5236\u4e86API\u89c6\u56fe\u53ef\u62d4\u63d2\u7684\u90a3\u4e9b\u65b9\u9762\u3002 .renderer_classes .parser_classes .authentication_classes .throttle_classes .permission_classes .content_negotiation_class API policy instantiation methods \u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u88abREST framework\u7528\u6765\u5b9e\u4f8b\u5316\u5404\u79cd\u53ef\u62d4\u63d2\u7684API\u7b56\u7565\u3002\u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e9b\u65b9\u6cd5\u3002 .get_renderers(self) .get_parsers(self) .get_authenticators(self) .get_throttles(self) .get_permissions(self) .get_content_negotiator(self) .get_exception_handler(self) API policy implementation methods \u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u5728\u8bf7\u6c42\u88ab\u5206\u53d1\u5230\u5177\u4f53\u7684\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u8c03\u7528\u3002 .check_permissions(self, request) .check_throttles(self, request) .perform_content_negotiation(self, request, force=False) Dispatch methods \u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u88ab\u89c6\u56fe\u7684 .dispatch() \u65b9\u6cd5\u76f4\u63a5\u8c03\u7528\u3002\u5b83\u4eec\u5728\u8c03\u7528 .get , .post() , put() , patch() \u548c delete() \u4e4b\u7c7b\u7684\u8bf7\u6c42\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u6216\u8005\u4e4b\u540e\u6267\u884c\u4efb\u4f55\u9700\u8981\u6267\u884c\u7684\u64cd\u4f5c\u3002 .initial(self, request, *args, **kwargs) \u5728\u5904\u7406\u65b9\u6cd5\u8c03\u7528\u4e4b\u524d\u8fdb\u884c\u4efb\u4f55\u9700\u8981\u7684\u52a8\u4f5c\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u6267\u884c\u6743\u9650\u8ba4\u8bc1\u548c\u9650\u5236\uff0c\u5e76\u4e14\u6267\u884c\u5185\u5bb9\u534f\u5546\u3002 \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u6b64\u65b9\u6cd5\u3002 .handle_exception(self, exc) \u4efb\u4f55\u88ab\u5904\u7406\u8bf7\u6c42\u7684\u65b9\u6cd5\u629b\u51fa\u7684\u5f02\u5e38\u90fd\u4f1a\u88ab\u4f20\u9012\u7ed9\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u65e2\u4e0d\u8fd4\u56de Response \u7684\u5b9e\u4f8b\uff0c\u4e5f\u4e0d\u91cd\u65b0\u629b\u51fa\u5f02\u5e38\u3002 \u9ed8\u8ba4\u7684\u5b9e\u73b0\u4f1a\u5904\u7406 rest_framework.expceptions.APIException \u7684\u4efb\u4f55\u5b50\u7c7b\u5f02\u5e38\uff0c\u4ee5\u53caDjango\u7684 Http404 \u548c PermissionDenied \u5f02\u5e38\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u9002\u5f53\u7684\u9519\u8bef\u54cd\u5e94\u3002 \u5982\u679c\u4f60\u9700\u8981\u5728\u81ea\u5df1\u7684API\u4e2d\u81ea\u5b9a\u4e49\u8fd4\u56de\u7684\u9519\u8bef\u54cd\u5e94\uff0c\u4f60\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002 .initialize_request(self, request, *args, **kwargs) \u786e\u4fdd\u4f20\u9012\u7ed9\u8bf7\u6c42\u5904\u7406\u65b9\u6cd5\u7684\u8bf7\u6c42\u5bf9\u8c61\u662f Request \u7684\u5b9e\u4f8b\uff0c\u800c\u4e0d\u662f\u901a\u5e38\u7684Django HttpResquest \u7684\u5b9e\u4f8b\u3002 \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002 .finalize_response(self, request, response, *args, **kwargs) \u786e\u4fdd\u4efb\u4f55\u4ece\u5904\u7406\u8bf7\u6c42\u7684\u65b9\u6cd5\u8fd4\u56de\u7684 Response \u5bf9\u8c61\u88ab\u6e32\u67d3\u5230\u7531\u5185\u5bb9\u534f\u5546\u51b3\u5b9a\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002 \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002 \u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe \u8bf4[\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe]\u4e0d\u7ba1\u4ec0\u4e48\u65f6\u5019\u90fd\u662f\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u90a3\u662f\u9519\u8bef\u7684\u3002 \u2014 Nick Coghlan \u5728REST framework\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u7684\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u7b80\u5355\u7684\u88c5\u9970\u5668\uff0c\u7528\u6765\u5305\u88c5\u4f60\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u4ee5\u786e\u4fdd\u89c6\u56fe\u51fd\u6570\u4f1a\u6536\u5230 Request \uff08\u800c\u4e0d\u662fDjango\u4e00\u822c\u7684 HttpRequest )\u5bf9\u8c61\uff0c\u5e76\u4e14\u8fd4\u56de Response \uff08\u800c\u4e0d\u662fDjango\u7684 HttpResponse \uff09\u5bf9\u8c61\uff0c\u540c\u65f6\u5141\u8bb8\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u8bf7\u6c42\u7684\u5904\u7406\u65b9\u5f0f\u3002 @api_view() \u51fd\u6570\u7b7e\u540d: @api_view(http_method_names=['GET'], exclude_from_schema=False) \u6b64\u529f\u80fd\u7684\u6838\u5fc3\u662f api_view \u88c5\u9970\u5668\uff0c\u5b83\u63a5\u53d7\u89c6\u56fe\u5e94\u8be5\u54cd\u5e94\u7684HTTP\u65b9\u6cd5\u5217\u8868\u7684\u53c2\u6570\u3002 \u6bd4\u5982\uff0c\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u5199\u4e00\u4e2a\u8fd4\u56de\u4e00\u4e9b\u6570\u636e\u7684\u975e\u5e38\u7b80\u5355\u7684\u89c6\u56fe\u3002 from rest_framework.decorators import api_view @api_view() def hello_world(request): return Response({\"message\": \"Hello, world!\"}) \u8fd9\u4e2a\u89c6\u56fe\u4f1a\u4f7f\u7528 settings \u4e2d\u6307\u5b9a\u7684\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\uff0c\u89e3\u6790\u5668\uff0c\u8ba4\u8bc1\u7c7b\u7b49\u7b49\u3002 \u9ed8\u8ba4\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709 GET \u8bf7\u6c42\u4f1a\u88ab\u63a5\u53d7\u3002\u5176\u4ed6\u7684\u8bf7\u6c42\u65b9\u6cd5\u4f1a\u5f97\u5230\u4e00\u4e2a\"405 Method Not Allowed\"\u54cd\u5e94\u3002\u53ef\u4ee5\u50cf\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4e00\u6837\u6539\u53d8\u9ed8\u8ba4\u884c\u4e3a\uff1a @api_view(['GET', 'POST']) def hello_world(request): if request.method == 'POST': return Response({\"message\": \"Got some data!\", \"data\": request.data}) return Response({\"message\": \"Hello, world!\"}) \u4f60\u4e5f\u53ef\u4ee5\u7528 exclude_from_schema \u53c2\u6570\u6807\u8bb0API\u89c6\u56fe\u6765\u5ffd\u7565\u4efb\u4f55 \u81ea\u52a8\u751f\u6210\u7684\u89c6\u56fe , @api_view(['GET'], exclude_from_schema=True) def api_docs(request): ... API \u7b56\u7565\u88c5\u9970\u5668 REST framework\u63d0\u4f9b\u4e86\u4e00\u7ec4\u53ef\u4ee5\u52a0\u5230\u89c6\u56fe\u4e0a\u7684\u88c5\u9970\u5668\u6765\u91cd\u5199\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u8fd9\u4e9b\u88c5\u9970\u5668\u5fc5\u987b\u653e\u5728 @api_view \u7684 \u540e (\u4e0b)\u9762\u3002\u6bd4\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528 \u9650\u5236\u5668 \u786e\u4fdd\u7279\u5b9a\u7528\u6237\u6bcf\u5929\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\u7684\u89c6\u56fe\uff0c\u53ef\u4ee5\u7528 @throttle_classes \u88c5\u9970\u5668\u5e76\u7ed9\u5b83\u4f20\u9012\u4e00\u4e2a\u9650\u5236\u5668\u7c7b\u7684\u5217\u8868\u3002 from rest_framework.decorators import api_view, throttle_classes from rest_framework.throttling import UserRateThrottle class OncePerDayUserThrottle(UserRateThrottle): rate = '1/day' @api_view(['GET']) @throttle_classes([OncePerDayUserThrottle]) def view(request): return Response({\"message\": \"Hello for today! See you tomorrow!\"}) \u8fd9\u4e9b\u88c5\u9970\u5668\u548c\u4e0a\u6587\u4e2d\u7684 APIView \u7684\u5b50\u7c7b\u4e2d\u8bbe\u7f6e\u7684\u5c5e\u6027\u76f8\u5bf9\u5e94\u3002 \u53ef\u7528\u7684\u88c5\u9970\u5668\u6709\uff1a @renderer_classes(...) @parser_classes(...) @authentication_classes(...) @throttle_classes(...) @permission_classes(...) \u8fd9\u4e9b\u88c5\u9970\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u7c7b\u7684\u5217\u8868\u6216\u5143\u7ec4\u3002","title":"Views"},{"location":"api-guide/views_zh/#_1","text":"Django\u4e2d\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u5bf9\u4e8e\u65e7\u5f0f\u98ce\u683c\u7684\u89c6\u56fe\u6765\u8bf4\u662f\u826f\u597d\u7684\u66ff\u4ee3\u54c1\u3002 \u2014 reinout van rees REST framework\u63d0\u4f9b\u4e86\u4e00\u4e2a APIView \u7c7b\uff0c\u5b83\u662fDjango\u7684 View \u7c7b\u7684\u5b50\u7c7b\u3002 APIView \u7c7b\u548c\u4e00\u822c\u7684 View \u7c7b\u6709\u4ee5\u4e0b\u4e0d\u540c\uff1a \u88ab\u4f20\u5165\u5230\u5904\u7406\u65b9\u6cd5\u7684\u8bf7\u6c42\u4e0d\u4f1a\u662fDjango\u7684 HttpRequest \u7c7b\u7684\u5b9e\u4f8b\uff0c\u800c\u662fREST framework\u7684 Request \u7c7b\u7684\u5b9e\u4f8b\u3002 \u5904\u7406\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56deREST framework\u7684 Response \uff0c\u800c\u4e0d\u662fDjango\u7684 HttpRequest \u3002\u89c6\u56fe\u4f1a\u7ba1\u7406\u5185\u5bb9\u534f\u8bae\uff0c\u7ed9\u54cd\u5e94\u8bbe\u7f6e\u6b63\u786e\u7684\u6e32\u67d3\u5668\u3002 \u4efb\u4f55 APIException \u5f02\u5e38\u90fd\u4f1a\u88ab\u6355\u83b7\uff0c\u5e76\u4e14\u4f20\u9012\u7ed9\u5408\u9002\u7684\u54cd\u5e94\u3002 \u8fdb\u5165\u7684\u8bf7\u6c42\u5c06\u4f1a\u7ecf\u8fc7\u8ba4\u8bc1\uff0c\u5408\u9002\u7684\u6743\u9650\u548c\uff08\u6216\uff09\u8282\u6d41\u68c0\u67e5\u4f1a\u5728\u8bf7\u6c42\u88ab\u6d3e\u53d1\u5230\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u8fd0\u884c\u3002 \u4f7f\u7528 APIView \u7c7b\u548c\u4f7f\u7528\u4e00\u822c\u7684 View \u7c7b\u975e\u5e38\u76f8\u4f3c\uff0c\u901a\u5e38\uff0c\u8fdb\u5165\u7684\u8bf7\u6c42\u4f1a\u88ab\u5206\u53d1\u5230\u5408\u9002\u5904\u7406\u65b9\u6cd5\u6bd4\u5982 .get() \uff0c\u6216\u8005 .post \u3002\u53e6\u5916\uff0c\u5f88\u591a\u5c5e\u6027\u4f1a\u88ab\u8bbe\u5b9a\u5728\u63a7\u5236API\u7b56\u7565\u7684\u5404\u79cd\u5207\u9762\u7684\u7c7b\u4e0a\u3002 \u6bd4\u5982\uff1a from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import authentication, permissions class ListUsers(APIView): \"\"\" \u5217\u51fa\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7528\u6237\u7684\u89c6\u56fe\u3002 * \u9700\u8981token\u8ba4\u8bc1 * \u53ea\u6709\u7ba1\u7406\u5458\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u89c6\u56fe\u3002 \"\"\" authentication_classes = (authentication.TokenAuthentication,) permission_classes = (permissions.IsAdminUser,) def get(self, request, format=None): \"\"\" Return a list of all users. \"\"\" usernames = [user.username for user in User.objects.all()] return Response(usernames)","title":"\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe"},{"location":"api-guide/views_zh/#api","text":"\u4e0b\u9762\u8fd9\u4e9b\u5c5e\u6027\u63a7\u5236\u4e86API\u89c6\u56fe\u53ef\u62d4\u63d2\u7684\u90a3\u4e9b\u65b9\u9762\u3002","title":"API\u7b56\u7565\u5c5e\u6027"},{"location":"api-guide/views_zh/#renderer_classes","text":"","title":".renderer_classes"},{"location":"api-guide/views_zh/#parser_classes","text":"","title":".parser_classes"},{"location":"api-guide/views_zh/#authentication_classes","text":"","title":".authentication_classes"},{"location":"api-guide/views_zh/#throttle_classes","text":"","title":".throttle_classes"},{"location":"api-guide/views_zh/#permission_classes","text":"","title":".permission_classes"},{"location":"api-guide/views_zh/#content_negotiation_class","text":"","title":".content_negotiation_class"},{"location":"api-guide/views_zh/#api-policy-instantiation-methods","text":"\u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u88abREST framework\u7528\u6765\u5b9e\u4f8b\u5316\u5404\u79cd\u53ef\u62d4\u63d2\u7684API\u7b56\u7565\u3002\u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e9b\u65b9\u6cd5\u3002","title":"API policy instantiation methods"},{"location":"api-guide/views_zh/#get_renderersself","text":"","title":".get_renderers(self)"},{"location":"api-guide/views_zh/#get_parsersself","text":"","title":".get_parsers(self)"},{"location":"api-guide/views_zh/#get_authenticatorsself","text":"","title":".get_authenticators(self)"},{"location":"api-guide/views_zh/#get_throttlesself","text":"","title":".get_throttles(self)"},{"location":"api-guide/views_zh/#get_permissionsself","text":"","title":".get_permissions(self)"},{"location":"api-guide/views_zh/#get_content_negotiatorself","text":"","title":".get_content_negotiator(self)"},{"location":"api-guide/views_zh/#get_exception_handlerself","text":"","title":".get_exception_handler(self)"},{"location":"api-guide/views_zh/#api-policy-implementation-methods","text":"\u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u5728\u8bf7\u6c42\u88ab\u5206\u53d1\u5230\u5177\u4f53\u7684\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u8c03\u7528\u3002","title":"API policy implementation methods"},{"location":"api-guide/views_zh/#check_permissionsself-request","text":"","title":".check_permissions(self, request)"},{"location":"api-guide/views_zh/#check_throttlesself-request","text":"","title":".check_throttles(self, request)"},{"location":"api-guide/views_zh/#perform_content_negotiationself-request-forcefalse","text":"","title":".perform_content_negotiation(self, request, force=False)"},{"location":"api-guide/views_zh/#dispatch-methods","text":"\u4e0b\u9762\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u88ab\u89c6\u56fe\u7684 .dispatch() \u65b9\u6cd5\u76f4\u63a5\u8c03\u7528\u3002\u5b83\u4eec\u5728\u8c03\u7528 .get , .post() , put() , patch() \u548c delete() \u4e4b\u7c7b\u7684\u8bf7\u6c42\u5904\u7406\u65b9\u6cd5\u4e4b\u524d\u6216\u8005\u4e4b\u540e\u6267\u884c\u4efb\u4f55\u9700\u8981\u6267\u884c\u7684\u64cd\u4f5c\u3002","title":"Dispatch methods"},{"location":"api-guide/views_zh/#initialself-request-args-kwargs","text":"\u5728\u5904\u7406\u65b9\u6cd5\u8c03\u7528\u4e4b\u524d\u8fdb\u884c\u4efb\u4f55\u9700\u8981\u7684\u52a8\u4f5c\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u6267\u884c\u6743\u9650\u8ba4\u8bc1\u548c\u9650\u5236\uff0c\u5e76\u4e14\u6267\u884c\u5185\u5bb9\u534f\u5546\u3002 \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u6b64\u65b9\u6cd5\u3002","title":".initial(self, request, *args, **kwargs)"},{"location":"api-guide/views_zh/#handle_exceptionself-exc","text":"\u4efb\u4f55\u88ab\u5904\u7406\u8bf7\u6c42\u7684\u65b9\u6cd5\u629b\u51fa\u7684\u5f02\u5e38\u90fd\u4f1a\u88ab\u4f20\u9012\u7ed9\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u65e2\u4e0d\u8fd4\u56de Response \u7684\u5b9e\u4f8b\uff0c\u4e5f\u4e0d\u91cd\u65b0\u629b\u51fa\u5f02\u5e38\u3002 \u9ed8\u8ba4\u7684\u5b9e\u73b0\u4f1a\u5904\u7406 rest_framework.expceptions.APIException \u7684\u4efb\u4f55\u5b50\u7c7b\u5f02\u5e38\uff0c\u4ee5\u53caDjango\u7684 Http404 \u548c PermissionDenied \u5f02\u5e38\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u9002\u5f53\u7684\u9519\u8bef\u54cd\u5e94\u3002 \u5982\u679c\u4f60\u9700\u8981\u5728\u81ea\u5df1\u7684API\u4e2d\u81ea\u5b9a\u4e49\u8fd4\u56de\u7684\u9519\u8bef\u54cd\u5e94\uff0c\u4f60\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002","title":".handle_exception(self, exc)"},{"location":"api-guide/views_zh/#initialize_requestself-request-args-kwargs","text":"\u786e\u4fdd\u4f20\u9012\u7ed9\u8bf7\u6c42\u5904\u7406\u65b9\u6cd5\u7684\u8bf7\u6c42\u5bf9\u8c61\u662f Request \u7684\u5b9e\u4f8b\uff0c\u800c\u4e0d\u662f\u901a\u5e38\u7684Django HttpResquest \u7684\u5b9e\u4f8b\u3002 \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002","title":".initialize_request(self, request, *args, **kwargs)"},{"location":"api-guide/views_zh/#finalize_responseself-request-response-args-kwargs","text":"\u786e\u4fdd\u4efb\u4f55\u4ece\u5904\u7406\u8bf7\u6c42\u7684\u65b9\u6cd5\u8fd4\u56de\u7684 Response \u5bf9\u8c61\u88ab\u6e32\u67d3\u5230\u7531\u5185\u5bb9\u534f\u5546\u51b3\u5b9a\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002 \u4f60\u901a\u5e38\u4e0d\u9700\u8981\u91cd\u5199\u8fd9\u4e2a\u65b9\u6cd5\u3002","title":".finalize_response(self, request, response, *args, **kwargs)"},{"location":"api-guide/views_zh/#_2","text":"\u8bf4[\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe]\u4e0d\u7ba1\u4ec0\u4e48\u65f6\u5019\u90fd\u662f\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u90a3\u662f\u9519\u8bef\u7684\u3002 \u2014 Nick Coghlan \u5728REST framework\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u7684\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u7b80\u5355\u7684\u88c5\u9970\u5668\uff0c\u7528\u6765\u5305\u88c5\u4f60\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u4ee5\u786e\u4fdd\u89c6\u56fe\u51fd\u6570\u4f1a\u6536\u5230 Request \uff08\u800c\u4e0d\u662fDjango\u4e00\u822c\u7684 HttpRequest )\u5bf9\u8c61\uff0c\u5e76\u4e14\u8fd4\u56de Response \uff08\u800c\u4e0d\u662fDjango\u7684 HttpResponse \uff09\u5bf9\u8c61\uff0c\u540c\u65f6\u5141\u8bb8\u4f60\u8bbe\u7f6e\u8fd9\u4e2a\u8bf7\u6c42\u7684\u5904\u7406\u65b9\u5f0f\u3002","title":"\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe"},{"location":"api-guide/views_zh/#api_view","text":"\u51fd\u6570\u7b7e\u540d: @api_view(http_method_names=['GET'], exclude_from_schema=False) \u6b64\u529f\u80fd\u7684\u6838\u5fc3\u662f api_view \u88c5\u9970\u5668\uff0c\u5b83\u63a5\u53d7\u89c6\u56fe\u5e94\u8be5\u54cd\u5e94\u7684HTTP\u65b9\u6cd5\u5217\u8868\u7684\u53c2\u6570\u3002 \u6bd4\u5982\uff0c\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u5199\u4e00\u4e2a\u8fd4\u56de\u4e00\u4e9b\u6570\u636e\u7684\u975e\u5e38\u7b80\u5355\u7684\u89c6\u56fe\u3002 from rest_framework.decorators import api_view @api_view() def hello_world(request): return Response({\"message\": \"Hello, world!\"}) \u8fd9\u4e2a\u89c6\u56fe\u4f1a\u4f7f\u7528 settings \u4e2d\u6307\u5b9a\u7684\u9ed8\u8ba4\u7684\u6e32\u67d3\u5668\uff0c\u89e3\u6790\u5668\uff0c\u8ba4\u8bc1\u7c7b\u7b49\u7b49\u3002 \u9ed8\u8ba4\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709 GET \u8bf7\u6c42\u4f1a\u88ab\u63a5\u53d7\u3002\u5176\u4ed6\u7684\u8bf7\u6c42\u65b9\u6cd5\u4f1a\u5f97\u5230\u4e00\u4e2a\"405 Method Not Allowed\"\u54cd\u5e94\u3002\u53ef\u4ee5\u50cf\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4e00\u6837\u6539\u53d8\u9ed8\u8ba4\u884c\u4e3a\uff1a @api_view(['GET', 'POST']) def hello_world(request): if request.method == 'POST': return Response({\"message\": \"Got some data!\", \"data\": request.data}) return Response({\"message\": \"Hello, world!\"}) \u4f60\u4e5f\u53ef\u4ee5\u7528 exclude_from_schema \u53c2\u6570\u6807\u8bb0API\u89c6\u56fe\u6765\u5ffd\u7565\u4efb\u4f55 \u81ea\u52a8\u751f\u6210\u7684\u89c6\u56fe , @api_view(['GET'], exclude_from_schema=True) def api_docs(request): ...","title":"@api_view()"},{"location":"api-guide/views_zh/#api_1","text":"REST framework\u63d0\u4f9b\u4e86\u4e00\u7ec4\u53ef\u4ee5\u52a0\u5230\u89c6\u56fe\u4e0a\u7684\u88c5\u9970\u5668\u6765\u91cd\u5199\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u8fd9\u4e9b\u88c5\u9970\u5668\u5fc5\u987b\u653e\u5728 @api_view \u7684 \u540e (\u4e0b)\u9762\u3002\u6bd4\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528 \u9650\u5236\u5668 \u786e\u4fdd\u7279\u5b9a\u7528\u6237\u6bcf\u5929\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\u7684\u89c6\u56fe\uff0c\u53ef\u4ee5\u7528 @throttle_classes \u88c5\u9970\u5668\u5e76\u7ed9\u5b83\u4f20\u9012\u4e00\u4e2a\u9650\u5236\u5668\u7c7b\u7684\u5217\u8868\u3002 from rest_framework.decorators import api_view, throttle_classes from rest_framework.throttling import UserRateThrottle class OncePerDayUserThrottle(UserRateThrottle): rate = '1/day' @api_view(['GET']) @throttle_classes([OncePerDayUserThrottle]) def view(request): return Response({\"message\": \"Hello for today! See you tomorrow!\"}) \u8fd9\u4e9b\u88c5\u9970\u5668\u548c\u4e0a\u6587\u4e2d\u7684 APIView \u7684\u5b50\u7c7b\u4e2d\u8bbe\u7f6e\u7684\u5c5e\u6027\u76f8\u5bf9\u5e94\u3002 \u53ef\u7528\u7684\u88c5\u9970\u5668\u6709\uff1a @renderer_classes(...) @parser_classes(...) @authentication_classes(...) @throttle_classes(...) @permission_classes(...) \u8fd9\u4e9b\u88c5\u9970\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u7c7b\u7684\u5217\u8868\u6216\u5143\u7ec4\u3002","title":"API \u7b56\u7565\u88c5\u9970\u5668"},{"location":"api-guide/viewsets/","text":"ViewSets After routing has determined which controller to use for a request, your controller is responsible for making sense of the request and producing the appropriate output. \u2014 Ruby on Rails Documentation Django REST framework allows you to combine the logic for a set of related views in a single class, called a ViewSet . In other frameworks you may also find conceptually similar implementations named something like 'Resources' or 'Controllers'. A ViewSet class is simply a type of class-based View, that does not provide any method handlers such as .get() or .post() , and instead provides actions such as .list() and .create() . The method handlers for a ViewSet are only bound to the corresponding actions at the point of finalizing the view, using the .as_view() method. Typically, rather than explicitly registering the views in a viewset in the urlconf, you'll register the viewset with a router class, that automatically determines the urlconf for you. Example Let's define a simple viewset that can be used to list or retrieve all the users in the system. from django.contrib.auth.models import User from django.shortcuts import get_object_or_404 from myapps.serializers import UserSerializer from rest_framework import viewsets from rest_framework.response import Response class UserViewSet(viewsets.ViewSet): \"\"\" A simple ViewSet for listing or retrieving users. \"\"\" def list(self, request): queryset = User.objects.all() serializer = UserSerializer(queryset, many=True) return Response(serializer.data) def retrieve(self, request, pk=None): queryset = User.objects.all() user = get_object_or_404(queryset, pk=pk) serializer = UserSerializer(user) return Response(serializer.data) If we need to, we can bind this viewset into two separate views, like so: user_list = UserViewSet.as_view({'get': 'list'}) user_detail = UserViewSet.as_view({'get': 'retrieve'}) Typically we wouldn't do this, but would instead register the viewset with a router, and allow the urlconf to be automatically generated. from myapp.views import UserViewSet from rest_framework.routers import DefaultRouter router = DefaultRouter() router.register(r'users', UserViewSet, basename='user') urlpatterns = router.urls Rather than writing your own viewsets, you'll often want to use the existing base classes that provide a default set of behavior. For example: class UserViewSet(viewsets.ModelViewSet): \"\"\" A viewset for viewing and editing user instances. \"\"\" serializer_class = UserSerializer queryset = User.objects.all() There are two main advantages of using a ViewSet class over using a View class. Repeated logic can be combined into a single class. In the above example, we only need to specify the queryset once, and it'll be used across multiple views. By using routers, we no longer need to deal with wiring up the URL conf ourselves. Both of these come with a trade-off. Using regular views and URL confs is more explicit and gives you more control. ViewSets are helpful if you want to get up and running quickly, or when you have a large API and you want to enforce a consistent URL configuration throughout. ViewSet actions The default routers included with REST framework will provide routes for a standard set of create/retrieve/update/destroy style actions, as shown below: class UserViewSet(viewsets.ViewSet): \"\"\" Example empty viewset demonstrating the standard actions that will be handled by a router class. If you're using format suffixes, make sure to also include the `format=None` keyword argument for each action. \"\"\" def list(self, request): pass def create(self, request): pass def retrieve(self, request, pk=None): pass def update(self, request, pk=None): pass def partial_update(self, request, pk=None): pass def destroy(self, request, pk=None): pass Introspecting ViewSet actions During dispatch, the following attributes are available on the ViewSet . basename - the base to use for the URL names that are created. action - the name of the current action (e.g., list , create ). detail - boolean indicating if the current action is configured for a list or detail view. suffix - the display suffix for the viewset type - mirrors the detail attribute. name - the display name for the viewset. This argument is mutually exclusive to suffix . description - the display description for the individual view of a viewset. You may inspect these attributes to adjust behaviour based on the current action. For example, you could restrict permissions to everything except the list action similar to this: def get_permissions(self): \"\"\" Instantiates and returns the list of permissions that this view requires. \"\"\" if self.action == 'list': permission_classes = [IsAuthenticated] else: permission_classes = [IsAdmin] return [permission() for permission in permission_classes] Marking extra actions for routing If you have ad-hoc methods that should be routable, you can mark them as such with the @action decorator. Like regular actions, extra actions may be intended for either a single object, or an entire collection. To indicate this, set the detail argument to True or False . The router will configure its URL patterns accordingly. e.g., the DefaultRouter will configure detail actions to contain pk in their URL patterns. A more complete example of extra actions: from django.contrib.auth.models import User from rest_framework import status, viewsets from rest_framework.decorators import action from rest_framework.response import Response from myapp.serializers import UserSerializer, PasswordSerializer class UserViewSet(viewsets.ModelViewSet): \"\"\" A viewset that provides the standard actions \"\"\" queryset = User.objects.all() serializer_class = UserSerializer @action(detail=True, methods=['post']) def set_password(self, request, pk=None): user = self.get_object() serializer = PasswordSerializer(data=request.data) if serializer.is_valid(): user.set_password(serializer.data['password']) user.save() return Response({'status': 'password set'}) else: return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) @action(detail=False) def recent_users(self, request): recent_users = User.objects.all().order_by('-last_login') page = self.paginate_queryset(recent_users) if page is not None: serializer = self.get_serializer(page, many=True) return self.get_paginated_response(serializer.data) serializer = self.get_serializer(recent_users, many=True) return Response(serializer.data) The decorator can additionally take extra arguments that will be set for the routed view only. For example: @action(detail=True, methods=['post'], permission_classes=[IsAdminOrIsSelf]) def set_password(self, request, pk=None): ... The action decorator will route GET requests by default, but may also accept other HTTP methods by setting the methods argument. For example: @action(detail=True, methods=['post', 'delete']) def unset_password(self, request, pk=None): ... The two new actions will then be available at the urls ^users/{pk}/set_password/$ and ^users/{pk}/unset_password/$ To view all extra actions, call the .get_extra_actions() method. Routing additional HTTP methods for extra actions Extra actions can map additional HTTP methods to separate ViewSet methods. For example, the above password set/unset methods could be consolidated into a single route. Note that additional mappings do not accept arguments. @action(detail=True, methods=['put'], name='Change Password') def password(self, request, pk=None): \"\"\"Update the user's password.\"\"\" ... @password.mapping.delete def delete_password(self, request, pk=None): \"\"\"Delete the user's password.\"\"\" ... Reversing action URLs If you need to get the URL of an action, use the .reverse_action() method. This is a convenience wrapper for reverse() , automatically passing the view's request object and prepending the url_name with the .basename attribute. Note that the basename is provided by the router during ViewSet registration. If you are not using a router, then you must provide the basename argument to the .as_view() method. Using the example from the previous section: >>> view.reverse_action('set-password', args=['1']) 'http://localhost:8000/api/users/1/set_password' Alternatively, you can use the url_name attribute set by the @action decorator. >>> view.reverse_action(view.set_password.url_name, args=['1']) 'http://localhost:8000/api/users/1/set_password' The url_name argument for .reverse_action() should match the same argument to the @action decorator. Additionally, this method can be used to reverse the default actions, such as list and create . API Reference ViewSet The ViewSet class inherits from APIView . You can use any of the standard attributes such as permission_classes , authentication_classes in order to control the API policy on the viewset. The ViewSet class does not provide any implementations of actions. In order to use a ViewSet class you'll override the class and define the action implementations explicitly. GenericViewSet The GenericViewSet class inherits from GenericAPIView , and provides the default set of get_object , get_queryset methods and other generic view base behavior, but does not include any actions by default. In order to use a GenericViewSet class you'll override the class and either mixin the required mixin classes, or define the action implementations explicitly. ModelViewSet The ModelViewSet class inherits from GenericAPIView and includes implementations for various actions, by mixing in the behavior of the various mixin classes. The actions provided by the ModelViewSet class are .list() , .retrieve() , .create() , .update() , .partial_update() , and .destroy() . Example Because ModelViewSet extends GenericAPIView , you'll normally need to provide at least the queryset and serializer_class attributes. For example: class AccountViewSet(viewsets.ModelViewSet): \"\"\" A simple ViewSet for viewing and editing accounts. \"\"\" queryset = Account.objects.all() serializer_class = AccountSerializer permission_classes = [IsAccountAdminOrReadOnly] Note that you can use any of the standard attributes or method overrides provided by GenericAPIView . For example, to use a ViewSet that dynamically determines the queryset it should operate on, you might do something like this: class AccountViewSet(viewsets.ModelViewSet): \"\"\" A simple ViewSet for viewing and editing the accounts associated with the user. \"\"\" serializer_class = AccountSerializer permission_classes = [IsAccountAdminOrReadOnly] def get_queryset(self): return self.request.user.accounts.all() Note however that upon removal of the queryset property from your ViewSet , any associated router will be unable to derive the basename of your Model automatically, and so you will have to specify the basename kwarg as part of your router registration . Also note that although this class provides the complete set of create/list/retrieve/update/destroy actions by default, you can restrict the available operations by using the standard permission classes. ReadOnlyModelViewSet The ReadOnlyModelViewSet class also inherits from GenericAPIView . As with ModelViewSet it also includes implementations for various actions, but unlike ModelViewSet only provides the 'read-only' actions, .list() and .retrieve() . Example As with ModelViewSet , you'll normally need to provide at least the queryset and serializer_class attributes. For example: class AccountViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" A simple ViewSet for viewing accounts. \"\"\" queryset = Account.objects.all() serializer_class = AccountSerializer Again, as with ModelViewSet , you can use any of the standard attributes and method overrides available to GenericAPIView . Custom ViewSet base classes You may need to provide custom ViewSet classes that do not have the full set of ModelViewSet actions, or that customize the behavior in some other way. Example To create a base viewset class that provides create , list and retrieve operations, inherit from GenericViewSet , and mixin the required actions: from rest_framework import mixins class CreateListRetrieveViewSet(mixins.CreateModelMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet): \"\"\" A viewset that provides `retrieve`, `create`, and `list` actions. To use it, override the class and set the `.queryset` and `.serializer_class` attributes. \"\"\" pass By creating your own base ViewSet classes, you can provide common behavior that can be reused in multiple viewsets across your API.","title":"ViewSets"},{"location":"api-guide/viewsets/#viewsets","text":"After routing has determined which controller to use for a request, your controller is responsible for making sense of the request and producing the appropriate output. \u2014 Ruby on Rails Documentation Django REST framework allows you to combine the logic for a set of related views in a single class, called a ViewSet . In other frameworks you may also find conceptually similar implementations named something like 'Resources' or 'Controllers'. A ViewSet class is simply a type of class-based View, that does not provide any method handlers such as .get() or .post() , and instead provides actions such as .list() and .create() . The method handlers for a ViewSet are only bound to the corresponding actions at the point of finalizing the view, using the .as_view() method. Typically, rather than explicitly registering the views in a viewset in the urlconf, you'll register the viewset with a router class, that automatically determines the urlconf for you.","title":"ViewSets"},{"location":"api-guide/viewsets/#example","text":"Let's define a simple viewset that can be used to list or retrieve all the users in the system. from django.contrib.auth.models import User from django.shortcuts import get_object_or_404 from myapps.serializers import UserSerializer from rest_framework import viewsets from rest_framework.response import Response class UserViewSet(viewsets.ViewSet): \"\"\" A simple ViewSet for listing or retrieving users. \"\"\" def list(self, request): queryset = User.objects.all() serializer = UserSerializer(queryset, many=True) return Response(serializer.data) def retrieve(self, request, pk=None): queryset = User.objects.all() user = get_object_or_404(queryset, pk=pk) serializer = UserSerializer(user) return Response(serializer.data) If we need to, we can bind this viewset into two separate views, like so: user_list = UserViewSet.as_view({'get': 'list'}) user_detail = UserViewSet.as_view({'get': 'retrieve'}) Typically we wouldn't do this, but would instead register the viewset with a router, and allow the urlconf to be automatically generated. from myapp.views import UserViewSet from rest_framework.routers import DefaultRouter router = DefaultRouter() router.register(r'users', UserViewSet, basename='user') urlpatterns = router.urls Rather than writing your own viewsets, you'll often want to use the existing base classes that provide a default set of behavior. For example: class UserViewSet(viewsets.ModelViewSet): \"\"\" A viewset for viewing and editing user instances. \"\"\" serializer_class = UserSerializer queryset = User.objects.all() There are two main advantages of using a ViewSet class over using a View class. Repeated logic can be combined into a single class. In the above example, we only need to specify the queryset once, and it'll be used across multiple views. By using routers, we no longer need to deal with wiring up the URL conf ourselves. Both of these come with a trade-off. Using regular views and URL confs is more explicit and gives you more control. ViewSets are helpful if you want to get up and running quickly, or when you have a large API and you want to enforce a consistent URL configuration throughout.","title":"Example"},{"location":"api-guide/viewsets/#viewset-actions","text":"The default routers included with REST framework will provide routes for a standard set of create/retrieve/update/destroy style actions, as shown below: class UserViewSet(viewsets.ViewSet): \"\"\" Example empty viewset demonstrating the standard actions that will be handled by a router class. If you're using format suffixes, make sure to also include the `format=None` keyword argument for each action. \"\"\" def list(self, request): pass def create(self, request): pass def retrieve(self, request, pk=None): pass def update(self, request, pk=None): pass def partial_update(self, request, pk=None): pass def destroy(self, request, pk=None): pass","title":"ViewSet actions"},{"location":"api-guide/viewsets/#introspecting-viewset-actions","text":"During dispatch, the following attributes are available on the ViewSet . basename - the base to use for the URL names that are created. action - the name of the current action (e.g., list , create ). detail - boolean indicating if the current action is configured for a list or detail view. suffix - the display suffix for the viewset type - mirrors the detail attribute. name - the display name for the viewset. This argument is mutually exclusive to suffix . description - the display description for the individual view of a viewset. You may inspect these attributes to adjust behaviour based on the current action. For example, you could restrict permissions to everything except the list action similar to this: def get_permissions(self): \"\"\" Instantiates and returns the list of permissions that this view requires. \"\"\" if self.action == 'list': permission_classes = [IsAuthenticated] else: permission_classes = [IsAdmin] return [permission() for permission in permission_classes]","title":"Introspecting ViewSet actions"},{"location":"api-guide/viewsets/#marking-extra-actions-for-routing","text":"If you have ad-hoc methods that should be routable, you can mark them as such with the @action decorator. Like regular actions, extra actions may be intended for either a single object, or an entire collection. To indicate this, set the detail argument to True or False . The router will configure its URL patterns accordingly. e.g., the DefaultRouter will configure detail actions to contain pk in their URL patterns. A more complete example of extra actions: from django.contrib.auth.models import User from rest_framework import status, viewsets from rest_framework.decorators import action from rest_framework.response import Response from myapp.serializers import UserSerializer, PasswordSerializer class UserViewSet(viewsets.ModelViewSet): \"\"\" A viewset that provides the standard actions \"\"\" queryset = User.objects.all() serializer_class = UserSerializer @action(detail=True, methods=['post']) def set_password(self, request, pk=None): user = self.get_object() serializer = PasswordSerializer(data=request.data) if serializer.is_valid(): user.set_password(serializer.data['password']) user.save() return Response({'status': 'password set'}) else: return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) @action(detail=False) def recent_users(self, request): recent_users = User.objects.all().order_by('-last_login') page = self.paginate_queryset(recent_users) if page is not None: serializer = self.get_serializer(page, many=True) return self.get_paginated_response(serializer.data) serializer = self.get_serializer(recent_users, many=True) return Response(serializer.data) The decorator can additionally take extra arguments that will be set for the routed view only. For example: @action(detail=True, methods=['post'], permission_classes=[IsAdminOrIsSelf]) def set_password(self, request, pk=None): ... The action decorator will route GET requests by default, but may also accept other HTTP methods by setting the methods argument. For example: @action(detail=True, methods=['post', 'delete']) def unset_password(self, request, pk=None): ... The two new actions will then be available at the urls ^users/{pk}/set_password/$ and ^users/{pk}/unset_password/$ To view all extra actions, call the .get_extra_actions() method.","title":"Marking extra actions for routing"},{"location":"api-guide/viewsets/#routing-additional-http-methods-for-extra-actions","text":"Extra actions can map additional HTTP methods to separate ViewSet methods. For example, the above password set/unset methods could be consolidated into a single route. Note that additional mappings do not accept arguments. @action(detail=True, methods=['put'], name='Change Password') def password(self, request, pk=None): \"\"\"Update the user's password.\"\"\" ... @password.mapping.delete def delete_password(self, request, pk=None): \"\"\"Delete the user's password.\"\"\" ...","title":"Routing additional HTTP methods for extra actions"},{"location":"api-guide/viewsets/#reversing-action-urls","text":"If you need to get the URL of an action, use the .reverse_action() method. This is a convenience wrapper for reverse() , automatically passing the view's request object and prepending the url_name with the .basename attribute. Note that the basename is provided by the router during ViewSet registration. If you are not using a router, then you must provide the basename argument to the .as_view() method. Using the example from the previous section: >>> view.reverse_action('set-password', args=['1']) 'http://localhost:8000/api/users/1/set_password' Alternatively, you can use the url_name attribute set by the @action decorator. >>> view.reverse_action(view.set_password.url_name, args=['1']) 'http://localhost:8000/api/users/1/set_password' The url_name argument for .reverse_action() should match the same argument to the @action decorator. Additionally, this method can be used to reverse the default actions, such as list and create .","title":"Reversing action URLs"},{"location":"api-guide/viewsets/#api-reference","text":"","title":"API Reference"},{"location":"api-guide/viewsets/#viewset","text":"The ViewSet class inherits from APIView . You can use any of the standard attributes such as permission_classes , authentication_classes in order to control the API policy on the viewset. The ViewSet class does not provide any implementations of actions. In order to use a ViewSet class you'll override the class and define the action implementations explicitly.","title":"ViewSet"},{"location":"api-guide/viewsets/#genericviewset","text":"The GenericViewSet class inherits from GenericAPIView , and provides the default set of get_object , get_queryset methods and other generic view base behavior, but does not include any actions by default. In order to use a GenericViewSet class you'll override the class and either mixin the required mixin classes, or define the action implementations explicitly.","title":"GenericViewSet"},{"location":"api-guide/viewsets/#modelviewset","text":"The ModelViewSet class inherits from GenericAPIView and includes implementations for various actions, by mixing in the behavior of the various mixin classes. The actions provided by the ModelViewSet class are .list() , .retrieve() , .create() , .update() , .partial_update() , and .destroy() .","title":"ModelViewSet"},{"location":"api-guide/viewsets/#example_1","text":"Because ModelViewSet extends GenericAPIView , you'll normally need to provide at least the queryset and serializer_class attributes. For example: class AccountViewSet(viewsets.ModelViewSet): \"\"\" A simple ViewSet for viewing and editing accounts. \"\"\" queryset = Account.objects.all() serializer_class = AccountSerializer permission_classes = [IsAccountAdminOrReadOnly] Note that you can use any of the standard attributes or method overrides provided by GenericAPIView . For example, to use a ViewSet that dynamically determines the queryset it should operate on, you might do something like this: class AccountViewSet(viewsets.ModelViewSet): \"\"\" A simple ViewSet for viewing and editing the accounts associated with the user. \"\"\" serializer_class = AccountSerializer permission_classes = [IsAccountAdminOrReadOnly] def get_queryset(self): return self.request.user.accounts.all() Note however that upon removal of the queryset property from your ViewSet , any associated router will be unable to derive the basename of your Model automatically, and so you will have to specify the basename kwarg as part of your router registration . Also note that although this class provides the complete set of create/list/retrieve/update/destroy actions by default, you can restrict the available operations by using the standard permission classes.","title":"Example"},{"location":"api-guide/viewsets/#readonlymodelviewset","text":"The ReadOnlyModelViewSet class also inherits from GenericAPIView . As with ModelViewSet it also includes implementations for various actions, but unlike ModelViewSet only provides the 'read-only' actions, .list() and .retrieve() .","title":"ReadOnlyModelViewSet"},{"location":"api-guide/viewsets/#example_2","text":"As with ModelViewSet , you'll normally need to provide at least the queryset and serializer_class attributes. For example: class AccountViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" A simple ViewSet for viewing accounts. \"\"\" queryset = Account.objects.all() serializer_class = AccountSerializer Again, as with ModelViewSet , you can use any of the standard attributes and method overrides available to GenericAPIView .","title":"Example"},{"location":"api-guide/viewsets/#custom-viewset-base-classes","text":"You may need to provide custom ViewSet classes that do not have the full set of ModelViewSet actions, or that customize the behavior in some other way.","title":"Custom ViewSet base classes"},{"location":"api-guide/viewsets/#example_3","text":"To create a base viewset class that provides create , list and retrieve operations, inherit from GenericViewSet , and mixin the required actions: from rest_framework import mixins class CreateListRetrieveViewSet(mixins.CreateModelMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet): \"\"\" A viewset that provides `retrieve`, `create`, and `list` actions. To use it, override the class and set the `.queryset` and `.serializer_class` attributes. \"\"\" pass By creating your own base ViewSet classes, you can provide common behavior that can be reused in multiple viewsets across your API.","title":"Example"},{"location":"api-guide/viewsets_zh/","text":"ViewSets \u5728\u8def\u7531\u5df2\u7ecf\u786e\u5b9a\u4e86\u7528\u4e8e\u8bf7\u6c42\u7684\u63a7\u5236\u5668\u4e4b\u540e\uff0c\u4f60\u7684\u63a7\u5236\u5668\u8d1f\u8d23\u7406\u89e3\u8bf7\u6c42\u5e76\u4ea7\u751f\u9002\u5f53\u7684\u8f93\u51fa\u3002 \u2014 Ruby on Rails \u6587\u6863 Django REST framework\u5141\u8bb8\u4f60\u5c06\u4e00\u7ec4\u76f8\u5173\u89c6\u56fe\u7684\u903b\u8f91\u7ec4\u5408\u5728\u5355\u4e2a\u7c7b\uff08\u79f0\u4e3a ViewSet \uff09\u4e2d\u3002 \u5728\u5176\u4ed6\u6846\u67b6\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u627e\u5230\u6982\u5ff5\u4e0a\u7c7b\u4f3c\u4e8e 'Resources' \u6216 'Controllers'\u7684\u7c7b\u4f3c\u5b9e\u73b0\u3002 ViewSet \u53ea\u662f \u4e00\u79cd\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5b83\u4e0d\u63d0\u4f9b\u4efb\u4f55\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f \uff08\u5982 .get() \u6216 .post() \uff09,\u800c\u662f\u63d0\u4f9b\u8bf8\u5982 .list() \u548c .create() \u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002 ViewSet \u7684\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u4ec5\u4f7f\u7528 .as_view() \u65b9\u6cd5\u7ed1\u5b9a\u5230\u5b8c\u6210\u89c6\u56fe\u7684\u76f8\u5e94\u64cd\u4f5c\u3002 \u901a\u5e38\u4e0d\u662f\u5728 urlconf \u4e2d\u7684\u89c6\u56fe\u96c6\u4e2d\u663e\u793a\u6ce8\u518c\u89c6\u56fe\uff0c\u800c\u662f\u8981\u4f7f\u7528\u8def\u7531\u7c7b\u6ce8\u518c\u89c6\u56fe\u96c6\uff0c\u8be5\u7c7b\u4f1a\u81ea\u52a8\u4e3a\u4f60\u786e\u5b9a urlconf\u3002 Example \u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u89c6\u56fe\u96c6\uff0c\u53ef\u4ee5\u7528\u6765\u5217\u51fa\u6216\u68c0\u7d22\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7528\u6237\u3002 from django.contrib.auth.models import User from django.shortcuts import get_object_or_404 from myapps.serializers import UserSerializer from rest_framework import viewsets from rest_framework.response import Response class UserViewSet(viewsets.ViewSet): \"\"\" A simple ViewSet for listing or retrieving users. \"\"\" def list(self, request): queryset = User.objects.all() serializer = UserSerializer(queryset, many=True) return Response(serializer.data) def retrieve(self, request, pk=None): queryset = User.objects.all() user = get_object_or_404(queryset, pk=pk) serializer = UserSerializer(user) return Response(serializer.data) \u5982\u679c\u6211\u4eec\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2aviewset\u7ed1\u5b9a\u5230\u4e24\u4e2a\u5355\u72ec\u7684\u89c6\u56fe\uff0c\u60f3\u8fd9\u6837\uff1a user_list = UserViewSet.as_view({'get': 'list'}) user_detail = UserViewSet.as_view({'get': 'retrieve'}) \u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u8fd9\u4e48\u505a\uff0c\u6211\u4eec\u4f1a\u7528\u4e00\u4e2arouter\u6765\u6ce8\u518c\u6211\u4eec\u7684viewset\uff0c\u8ba9urlconf\u81ea\u52a8\u751f\u6210\u3002 from myapp.views import UserViewSet from rest_framework.routers import DefaultRouter router = DefaultRouter() router.register(r'users', UserViewSet) urlpatterns = router.urls \u4e0d\u9700\u8981\u7f16\u5199\u81ea\u5df1\u7684\u89c6\u56fe\u96c6\uff0c\u4f60\u901a\u5e38\u4f1a\u60f3\u8981\u4f7f\u7528\u63d0\u4f9b\u9ed8\u8ba4\u884c\u4e3a\u7684\u73b0\u6709\u57fa\u7c7b\u3002\u4f8b\u5982\uff1a class UserViewSet(viewsets.ModelViewSet): \"\"\" \u7528\u4e8e\u67e5\u770b\u548c\u7f16\u8f91\u7528\u6237\u5b9e\u4f8b\u7684\u89c6\u56fe\u96c6\u3002 \"\"\" serializer_class = UserSerializer queryset = User.objects.all() \u4e0e\u4f7f\u7528 View \u7c7b\u76f8\u6bd4\uff0c\u4f7f\u7528 ViewSet \u7c7b\u6709\u4e24\u4e2a\u4e3b\u8981\u4f18\u70b9\u3002 \u91cd\u590d\u7684\u903b\u8f91\u53ef\u4ee5\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u6b21 queryset \uff0c\u5b83\u5c06\u5728\u591a\u4e2a\u89c6\u56fe\u4e2d\u4f7f\u7528\u3002 \u901a\u8fc7\u4f7f\u7528 routers, \u54e6\u4eec\u4e0d\u518d\u9700\u8981\u81ea\u5df1\u5904\u7406URLconf\u3002 \u8fd9\u4e24\u8005\u90fd\u6709\u4e00\u4e2a\u6743\u8861\u3002\u4f7f\u7528\u5e38\u89c4\u7684 views \u548c URL confs \u66f4\u660e\u786e\u4e5f\u80fd\u591f\u4e3a\u4f60\u63d0\u4f9b\u66f4\u591a\u7684\u63a7\u5236\u3002ViewSets\u6709\u52a9\u4e8e\u5feb\u901f\u542f\u52a8\u548c\u8fd0\u884c\uff0c\u6216\u8005\u5f53\u4f60\u6709\u5927\u578b\u7684API\uff0c\u5e76\u4e14\u5e0c\u671b\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6267\u884c\u4e00\u81f4\u7684 URL \u914d\u7f6e\u3002 \u6807\u8bb0\u8def\u7531\u7684\u989d\u5916\u64cd\u4f5c REST framework \u4e2d\u5305\u542b\u7684\u9ed8\u4efb routes \u5c06\u4e3a\u6807\u51c6\u7684 create/retrieve/update/destroy \u7c7b\u578b\u64cd\u4f5c\u63d0\u4f9b\u8def\u7531, \u5982\u4e0b\u6240\u793a\uff1a class UserViewSet(viewsets.ViewSet): \"\"\" \u793a\u4f8b viewset \u6f14\u793a\u4e86\u5c06\u7531\u8def\u7531\u5668\u7c7b\u5904\u7406\u7684\u6807\u51c6\u52a8\u4f5c\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\uff0c\u8bf7\u52a1\u5fc5\u4e3a\u6bcf\u4e2a\u52a8\u4f5c\u5305\u542b\u4e00\u4e2a`format=None` \u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 \"\"\" def list(self, request): pass def create(self, request): pass def retrieve(self, request, pk=None): pass def update(self, request, pk=None): pass def partial_update(self, request, pk=None): pass def destroy(self, request, pk=None): pass \u5982\u679c\u4f60\u6709\u9700\u8981\u88ab\u8def\u7531\u5230\u7684\u7279\u522b\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 @detail_route \u6216 @list_route \u88c5\u9970\u5668\u5c06\u5b83\u4eec\u6807\u8bb0\u4e3a\u9700\u8981\u8def\u7531\u3002 @detail_route \u88c5\u9970\u5668\u5728\u5176URL\u6a21\u5f0f\u4e2d\u5305\u542b pk \u7528\u4e8e\u9700\u8981\u5355\u4e2a\u5b9e\u4f8b\u7684\u65b9\u6cd5\u3002The @list_route \u88c5\u9970\u5668\u7528\u4e8e\u5bf9\u5bf9\u8c61\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002 \u4f8b\u5982\uff1a from django.contrib.auth.models import User from rest_framework import status from rest_framework import viewsets from rest_framework.decorators import detail_route, list_route from rest_framework.response import Response from myapp.serializers import UserSerializer, PasswordSerializer class UserViewSet(viewsets.ModelViewSet): \"\"\" \u4e00\u4e2a\u63d0\u4f9b\u6807\u51c6\u52a8\u4f5c\u7684 viewset \"\"\" queryset = User.objects.all() serializer_class = UserSerializer @detail_route(methods=['post']) def set_password(self, request, pk=None): user = self.get_object() serializer = PasswordSerializer(data=request.data) if serializer.is_valid(): user.set_password(serializer.data['password']) user.save() return Response({'status': 'password set'}) else: return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) @list_route() def recent_users(self, request): recent_users = User.objects.all().order('-last_login') page = self.paginate_queryset(recent_users) if page is not None: serializer = self.get_serializer(page, many=True) return self.get_paginated_response(serializer.data) serializer = self.get_serializer(recent_users, many=True) return Response(serializer.data) \u88c5\u9970\u5668\u53ef\u4ee5\u53e6\u5916\u83b7\u53d6\u4e3a\u8def\u7531\u89c6\u56fe\u8bbe\u7f6e\u7684\u989d\u5916\u53c2\u6570\u3002\u4f8b\u5982... @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf]) def set_password(self, request, pk=None): ... \u8fd9\u4e9b\u88c5\u9970\u5668\u5c06\u9ed8\u8ba4\u8def\u7531 GET \u8bf7\u6c42\uff0c\u4f46\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 methods \u53c2\u6570\u63a5\u53d7\u5176\u4ed6 HTTP \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a @detail_route(methods=['post', 'delete']) def unset_password(self, request, pk=None): ... \u8fd9\u4e24\u4e2a\u65b0\u52a8\u4f5c\u5c06\u5728 urls ^users/{pk}/set_password/$ \u548c ^users/{pk}/unset_password/$ \u4e0a\u53ef\u7528\u3002 API \u53c2\u8003 ViewSet ViewSet \u7ee7\u627f\u81ea APIView \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5c5e\u6027\uff0c\u5982 permission_classes , authentication_classes \u4ee5\u4fbf\u63a7\u5236\u89c6\u56fe\u96c6\u4e0a\u7684 API \u7b56\u7565\u3002 ViewSet \u7c7b\u4e0d\u63d0\u4f9b\u4efb\u4f55\u64cd\u4f5c\u7684\u5b9e\u73b0\u3002\u4e3a\u4e86\u4f7f\u7528 ViewSet \u7c7b\uff0c\u4f60\u5c06\u91cd\u5199\u8be5\u7c7b\u5e76\u663e\u5f0f\u5730\u5b9a\u4e49\u52a8\u4f5c\u5b9e\u73b0\u3002 GenericViewSet GenericViewSet \u7c7b\u7ee7\u627f\u81ea GenericAPIView \uff0c\u5e76\u63d0\u4f9b\u4e86 get_object \uff0c get_queryset \u65b9\u6cd5\u548c\u5176\u4ed6\u901a\u7528\u89c6\u56fe\u57fa\u672c\u884c\u4e3a\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0d\u5305\u62ec\u4efb\u4f55\u64cd\u4f5c\u3002 In order to use a GenericViewSet class you'll override the class and either mixin the required mixin classes, or define the action implementations explicitly. ModelViewSet The ModelViewSet class inherits from GenericAPIView and includes implementations for various actions, by mixing in the behavior of the various mixin classes. The actions provided by the ModelViewSet class are .list() , .retrieve() , .create() , .update() , .partial_update() , and .destroy() . Example Because ModelViewSet extends GenericAPIView , you'll normally need to provide at least the queryset and serializer_class attributes. For example: class AccountViewSet(viewsets.ModelViewSet): \"\"\" A simple ViewSet for viewing and editing accounts. \"\"\" queryset = Account.objects.all() serializer_class = AccountSerializer permission_classes = [IsAccountAdminOrReadOnly] Note that you can use any of the standard attributes or method overrides provided by GenericAPIView . For example, to use a ViewSet that dynamically determines the queryset it should operate on, you might do something like this: class AccountViewSet(viewsets.ModelViewSet): \"\"\" A simple ViewSet for viewing and editing the accounts associated with the user. \"\"\" serializer_class = AccountSerializer permission_classes = [IsAccountAdminOrReadOnly] def get_queryset(self): return self.request.user.accounts.all() Note however that upon removal of the queryset property from your ViewSet , any associated router will be unable to derive the base_name of your Model automatically, and so you will have to specify the base_name kwarg as part of your router registration . Also note that although this class provides the complete set of create/list/retrieve/update/destroy actions by default, you can restrict the available operations by using the standard permission classes. ReadOnlyModelViewSet The ReadOnlyModelViewSet class also inherits from GenericAPIView . As with ModelViewSet it also includes implementations for various actions, but unlike ModelViewSet only provides the 'read-only' actions, .list() and .retrieve() . Example As with ModelViewSet , you'll normally need to provide at least the queryset and serializer_class attributes. For example: class AccountViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" A simple ViewSet for viewing accounts. \"\"\" queryset = Account.objects.all() serializer_class = AccountSerializer Again, as with ModelViewSet , you can use any of the standard attributes and method overrides available to GenericAPIView . Custom ViewSet base classes You may need to provide custom ViewSet classes that do not have the full set of ModelViewSet actions, or that customize the behavior in some other way. Example To create a base viewset class that provides create , list and retrieve operations, inherit from GenericViewSet , and mixin the required actions: class CreateListRetrieveViewSet(mixins.CreateModelMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet): \"\"\" A viewset that provides `retrieve`, `create`, and `list` actions. To use it, override the class and set the `.queryset` and `.serializer_class` attributes. \"\"\" pass By creating your own base ViewSet classes, you can provide common behavior that can be reused in multiple viewsets across your API.","title":"Viewsets"},{"location":"api-guide/viewsets_zh/#viewsets","text":"\u5728\u8def\u7531\u5df2\u7ecf\u786e\u5b9a\u4e86\u7528\u4e8e\u8bf7\u6c42\u7684\u63a7\u5236\u5668\u4e4b\u540e\uff0c\u4f60\u7684\u63a7\u5236\u5668\u8d1f\u8d23\u7406\u89e3\u8bf7\u6c42\u5e76\u4ea7\u751f\u9002\u5f53\u7684\u8f93\u51fa\u3002 \u2014 Ruby on Rails \u6587\u6863 Django REST framework\u5141\u8bb8\u4f60\u5c06\u4e00\u7ec4\u76f8\u5173\u89c6\u56fe\u7684\u903b\u8f91\u7ec4\u5408\u5728\u5355\u4e2a\u7c7b\uff08\u79f0\u4e3a ViewSet \uff09\u4e2d\u3002 \u5728\u5176\u4ed6\u6846\u67b6\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u627e\u5230\u6982\u5ff5\u4e0a\u7c7b\u4f3c\u4e8e 'Resources' \u6216 'Controllers'\u7684\u7c7b\u4f3c\u5b9e\u73b0\u3002 ViewSet \u53ea\u662f \u4e00\u79cd\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5b83\u4e0d\u63d0\u4f9b\u4efb\u4f55\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f \uff08\u5982 .get() \u6216 .post() \uff09,\u800c\u662f\u63d0\u4f9b\u8bf8\u5982 .list() \u548c .create() \u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002 ViewSet \u7684\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u4ec5\u4f7f\u7528 .as_view() \u65b9\u6cd5\u7ed1\u5b9a\u5230\u5b8c\u6210\u89c6\u56fe\u7684\u76f8\u5e94\u64cd\u4f5c\u3002 \u901a\u5e38\u4e0d\u662f\u5728 urlconf \u4e2d\u7684\u89c6\u56fe\u96c6\u4e2d\u663e\u793a\u6ce8\u518c\u89c6\u56fe\uff0c\u800c\u662f\u8981\u4f7f\u7528\u8def\u7531\u7c7b\u6ce8\u518c\u89c6\u56fe\u96c6\uff0c\u8be5\u7c7b\u4f1a\u81ea\u52a8\u4e3a\u4f60\u786e\u5b9a urlconf\u3002","title":"ViewSets"},{"location":"api-guide/viewsets_zh/#example","text":"\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u89c6\u56fe\u96c6\uff0c\u53ef\u4ee5\u7528\u6765\u5217\u51fa\u6216\u68c0\u7d22\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7528\u6237\u3002 from django.contrib.auth.models import User from django.shortcuts import get_object_or_404 from myapps.serializers import UserSerializer from rest_framework import viewsets from rest_framework.response import Response class UserViewSet(viewsets.ViewSet): \"\"\" A simple ViewSet for listing or retrieving users. \"\"\" def list(self, request): queryset = User.objects.all() serializer = UserSerializer(queryset, many=True) return Response(serializer.data) def retrieve(self, request, pk=None): queryset = User.objects.all() user = get_object_or_404(queryset, pk=pk) serializer = UserSerializer(user) return Response(serializer.data) \u5982\u679c\u6211\u4eec\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2aviewset\u7ed1\u5b9a\u5230\u4e24\u4e2a\u5355\u72ec\u7684\u89c6\u56fe\uff0c\u60f3\u8fd9\u6837\uff1a user_list = UserViewSet.as_view({'get': 'list'}) user_detail = UserViewSet.as_view({'get': 'retrieve'}) \u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u8fd9\u4e48\u505a\uff0c\u6211\u4eec\u4f1a\u7528\u4e00\u4e2arouter\u6765\u6ce8\u518c\u6211\u4eec\u7684viewset\uff0c\u8ba9urlconf\u81ea\u52a8\u751f\u6210\u3002 from myapp.views import UserViewSet from rest_framework.routers import DefaultRouter router = DefaultRouter() router.register(r'users', UserViewSet) urlpatterns = router.urls \u4e0d\u9700\u8981\u7f16\u5199\u81ea\u5df1\u7684\u89c6\u56fe\u96c6\uff0c\u4f60\u901a\u5e38\u4f1a\u60f3\u8981\u4f7f\u7528\u63d0\u4f9b\u9ed8\u8ba4\u884c\u4e3a\u7684\u73b0\u6709\u57fa\u7c7b\u3002\u4f8b\u5982\uff1a class UserViewSet(viewsets.ModelViewSet): \"\"\" \u7528\u4e8e\u67e5\u770b\u548c\u7f16\u8f91\u7528\u6237\u5b9e\u4f8b\u7684\u89c6\u56fe\u96c6\u3002 \"\"\" serializer_class = UserSerializer queryset = User.objects.all() \u4e0e\u4f7f\u7528 View \u7c7b\u76f8\u6bd4\uff0c\u4f7f\u7528 ViewSet \u7c7b\u6709\u4e24\u4e2a\u4e3b\u8981\u4f18\u70b9\u3002 \u91cd\u590d\u7684\u903b\u8f91\u53ef\u4ee5\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6307\u5b9a\u4e00\u6b21 queryset \uff0c\u5b83\u5c06\u5728\u591a\u4e2a\u89c6\u56fe\u4e2d\u4f7f\u7528\u3002 \u901a\u8fc7\u4f7f\u7528 routers, \u54e6\u4eec\u4e0d\u518d\u9700\u8981\u81ea\u5df1\u5904\u7406URLconf\u3002 \u8fd9\u4e24\u8005\u90fd\u6709\u4e00\u4e2a\u6743\u8861\u3002\u4f7f\u7528\u5e38\u89c4\u7684 views \u548c URL confs \u66f4\u660e\u786e\u4e5f\u80fd\u591f\u4e3a\u4f60\u63d0\u4f9b\u66f4\u591a\u7684\u63a7\u5236\u3002ViewSets\u6709\u52a9\u4e8e\u5feb\u901f\u542f\u52a8\u548c\u8fd0\u884c\uff0c\u6216\u8005\u5f53\u4f60\u6709\u5927\u578b\u7684API\uff0c\u5e76\u4e14\u5e0c\u671b\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6267\u884c\u4e00\u81f4\u7684 URL \u914d\u7f6e\u3002","title":"Example"},{"location":"api-guide/viewsets_zh/#_1","text":"REST framework \u4e2d\u5305\u542b\u7684\u9ed8\u4efb routes \u5c06\u4e3a\u6807\u51c6\u7684 create/retrieve/update/destroy \u7c7b\u578b\u64cd\u4f5c\u63d0\u4f9b\u8def\u7531, \u5982\u4e0b\u6240\u793a\uff1a class UserViewSet(viewsets.ViewSet): \"\"\" \u793a\u4f8b viewset \u6f14\u793a\u4e86\u5c06\u7531\u8def\u7531\u5668\u7c7b\u5904\u7406\u7684\u6807\u51c6\u52a8\u4f5c\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\uff0c\u8bf7\u52a1\u5fc5\u4e3a\u6bcf\u4e2a\u52a8\u4f5c\u5305\u542b\u4e00\u4e2a`format=None` \u7684\u5173\u952e\u5b57\u53c2\u6570\u3002 \"\"\" def list(self, request): pass def create(self, request): pass def retrieve(self, request, pk=None): pass def update(self, request, pk=None): pass def partial_update(self, request, pk=None): pass def destroy(self, request, pk=None): pass \u5982\u679c\u4f60\u6709\u9700\u8981\u88ab\u8def\u7531\u5230\u7684\u7279\u522b\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 @detail_route \u6216 @list_route \u88c5\u9970\u5668\u5c06\u5b83\u4eec\u6807\u8bb0\u4e3a\u9700\u8981\u8def\u7531\u3002 @detail_route \u88c5\u9970\u5668\u5728\u5176URL\u6a21\u5f0f\u4e2d\u5305\u542b pk \u7528\u4e8e\u9700\u8981\u5355\u4e2a\u5b9e\u4f8b\u7684\u65b9\u6cd5\u3002The @list_route \u88c5\u9970\u5668\u7528\u4e8e\u5bf9\u5bf9\u8c61\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\u7684\u65b9\u6cd5\u3002 \u4f8b\u5982\uff1a from django.contrib.auth.models import User from rest_framework import status from rest_framework import viewsets from rest_framework.decorators import detail_route, list_route from rest_framework.response import Response from myapp.serializers import UserSerializer, PasswordSerializer class UserViewSet(viewsets.ModelViewSet): \"\"\" \u4e00\u4e2a\u63d0\u4f9b\u6807\u51c6\u52a8\u4f5c\u7684 viewset \"\"\" queryset = User.objects.all() serializer_class = UserSerializer @detail_route(methods=['post']) def set_password(self, request, pk=None): user = self.get_object() serializer = PasswordSerializer(data=request.data) if serializer.is_valid(): user.set_password(serializer.data['password']) user.save() return Response({'status': 'password set'}) else: return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) @list_route() def recent_users(self, request): recent_users = User.objects.all().order('-last_login') page = self.paginate_queryset(recent_users) if page is not None: serializer = self.get_serializer(page, many=True) return self.get_paginated_response(serializer.data) serializer = self.get_serializer(recent_users, many=True) return Response(serializer.data) \u88c5\u9970\u5668\u53ef\u4ee5\u53e6\u5916\u83b7\u53d6\u4e3a\u8def\u7531\u89c6\u56fe\u8bbe\u7f6e\u7684\u989d\u5916\u53c2\u6570\u3002\u4f8b\u5982... @detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf]) def set_password(self, request, pk=None): ... \u8fd9\u4e9b\u88c5\u9970\u5668\u5c06\u9ed8\u8ba4\u8def\u7531 GET \u8bf7\u6c42\uff0c\u4f46\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 methods \u53c2\u6570\u63a5\u53d7\u5176\u4ed6 HTTP \u65b9\u6cd5\u3002\u4f8b\u5982\uff1a @detail_route(methods=['post', 'delete']) def unset_password(self, request, pk=None): ... \u8fd9\u4e24\u4e2a\u65b0\u52a8\u4f5c\u5c06\u5728 urls ^users/{pk}/set_password/$ \u548c ^users/{pk}/unset_password/$ \u4e0a\u53ef\u7528\u3002","title":"\u6807\u8bb0\u8def\u7531\u7684\u989d\u5916\u64cd\u4f5c"},{"location":"api-guide/viewsets_zh/#api","text":"","title":"API \u53c2\u8003"},{"location":"api-guide/viewsets_zh/#viewset","text":"ViewSet \u7ee7\u627f\u81ea APIView \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5c5e\u6027\uff0c\u5982 permission_classes , authentication_classes \u4ee5\u4fbf\u63a7\u5236\u89c6\u56fe\u96c6\u4e0a\u7684 API \u7b56\u7565\u3002 ViewSet \u7c7b\u4e0d\u63d0\u4f9b\u4efb\u4f55\u64cd\u4f5c\u7684\u5b9e\u73b0\u3002\u4e3a\u4e86\u4f7f\u7528 ViewSet \u7c7b\uff0c\u4f60\u5c06\u91cd\u5199\u8be5\u7c7b\u5e76\u663e\u5f0f\u5730\u5b9a\u4e49\u52a8\u4f5c\u5b9e\u73b0\u3002","title":"ViewSet"},{"location":"api-guide/viewsets_zh/#genericviewset","text":"GenericViewSet \u7c7b\u7ee7\u627f\u81ea GenericAPIView \uff0c\u5e76\u63d0\u4f9b\u4e86 get_object \uff0c get_queryset \u65b9\u6cd5\u548c\u5176\u4ed6\u901a\u7528\u89c6\u56fe\u57fa\u672c\u884c\u4e3a\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0d\u5305\u62ec\u4efb\u4f55\u64cd\u4f5c\u3002 In order to use a GenericViewSet class you'll override the class and either mixin the required mixin classes, or define the action implementations explicitly.","title":"GenericViewSet"},{"location":"api-guide/viewsets_zh/#modelviewset","text":"The ModelViewSet class inherits from GenericAPIView and includes implementations for various actions, by mixing in the behavior of the various mixin classes. The actions provided by the ModelViewSet class are .list() , .retrieve() , .create() , .update() , .partial_update() , and .destroy() .","title":"ModelViewSet"},{"location":"api-guide/viewsets_zh/#example_1","text":"Because ModelViewSet extends GenericAPIView , you'll normally need to provide at least the queryset and serializer_class attributes. For example: class AccountViewSet(viewsets.ModelViewSet): \"\"\" A simple ViewSet for viewing and editing accounts. \"\"\" queryset = Account.objects.all() serializer_class = AccountSerializer permission_classes = [IsAccountAdminOrReadOnly] Note that you can use any of the standard attributes or method overrides provided by GenericAPIView . For example, to use a ViewSet that dynamically determines the queryset it should operate on, you might do something like this: class AccountViewSet(viewsets.ModelViewSet): \"\"\" A simple ViewSet for viewing and editing the accounts associated with the user. \"\"\" serializer_class = AccountSerializer permission_classes = [IsAccountAdminOrReadOnly] def get_queryset(self): return self.request.user.accounts.all() Note however that upon removal of the queryset property from your ViewSet , any associated router will be unable to derive the base_name of your Model automatically, and so you will have to specify the base_name kwarg as part of your router registration . Also note that although this class provides the complete set of create/list/retrieve/update/destroy actions by default, you can restrict the available operations by using the standard permission classes.","title":"Example"},{"location":"api-guide/viewsets_zh/#readonlymodelviewset","text":"The ReadOnlyModelViewSet class also inherits from GenericAPIView . As with ModelViewSet it also includes implementations for various actions, but unlike ModelViewSet only provides the 'read-only' actions, .list() and .retrieve() .","title":"ReadOnlyModelViewSet"},{"location":"api-guide/viewsets_zh/#example_2","text":"As with ModelViewSet , you'll normally need to provide at least the queryset and serializer_class attributes. For example: class AccountViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" A simple ViewSet for viewing accounts. \"\"\" queryset = Account.objects.all() serializer_class = AccountSerializer Again, as with ModelViewSet , you can use any of the standard attributes and method overrides available to GenericAPIView .","title":"Example"},{"location":"api-guide/viewsets_zh/#custom-viewset-base-classes","text":"You may need to provide custom ViewSet classes that do not have the full set of ModelViewSet actions, or that customize the behavior in some other way.","title":"Custom ViewSet base classes"},{"location":"api-guide/viewsets_zh/#example_3","text":"To create a base viewset class that provides create , list and retrieve operations, inherit from GenericViewSet , and mixin the required actions: class CreateListRetrieveViewSet(mixins.CreateModelMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet): \"\"\" A viewset that provides `retrieve`, `create`, and `list` actions. To use it, override the class and set the `.queryset` and `.serializer_class` attributes. \"\"\" pass By creating your own base ViewSet classes, you can provide common behavior that can be reused in multiple viewsets across your API.","title":"Example"},{"location":"community/3.0-announcement/","text":"Django REST framework 3.0 The 3.0 release of Django REST framework is the result of almost four years of iteration and refinement. It comprehensively addresses some of the previous remaining design issues in serializers, fields and the generic views. This release is incremental in nature. There are some breaking API changes, and upgrading will require you to read the release notes carefully, but the migration path should otherwise be relatively straightforward. The difference in quality of the REST framework API and implementation should make writing, maintaining and debugging your application far easier. 3.0 is the first of three releases that have been funded by our recent Kickstarter campaign . As ever, a huge thank you to our many wonderful sponsors . If you're looking for a Django gig, and want to work with smart community-minded folks, you should probably check out that list and see who's hiring. New features Notable features of this new release include: Printable representations on serializers that allow you to inspect exactly what fields are present on the instance. Simple model serializers that are vastly easier to understand and debug, and that make it easy to switch between the implicit ModelSerializer class and the explicit Serializer class. A new BaseSerializer class, making it easier to write serializers for alternative storage backends, or to completely customize your serialization and validation logic. A cleaner fields API including new classes such as ListField and MultipleChoiceField . Super simple default implementations for the generic views. Support for overriding how validation errors are handled by your API. A metadata API that allows you to customize how OPTIONS requests are handled by your API. A more compact JSON output with unicode style encoding turned on by default. Templated based HTML form rendering for serializers. This will be finalized as public API in the upcoming 3.1 release. Significant new functionality continues to be planned for the 3.1 and 3.2 releases. These releases will correspond to the two Kickstarter stretch goals - \"Feature improvements\" and \"Admin interface\". Further 3.x releases will present simple upgrades, without the same level of fundamental API changes necessary for the 3.0 release. REST framework: Under the hood. This talk from the Django: Under the Hood event in Amsterdam, Nov 2014, gives some good background context on the design decisions behind 3.0. Below is an in-depth guide to the API changes and migration notes for 3.0. Request objects The .data and .query_params properties. The usage of request.DATA and request.FILES is now pending deprecation in favor of a single request.data attribute that contains all the parsed data. Having separate attributes is reasonable for web applications that only ever parse url-encoded or multipart requests, but makes less sense for the general-purpose request parsing that REST framework supports. You may now pass all the request data to a serializer class in a single argument: # Do this... ExampleSerializer(data=request.data) Instead of passing the files argument separately: # Don't do this... ExampleSerializer(data=request.DATA, files=request.FILES) The usage of request.QUERY_PARAMS is now pending deprecation in favor of the lowercased request.query_params . Serializers Single-step object creation. Previously the serializers used a two-step object creation, as follows: Validating the data would create an object instance. This instance would be available as serializer.object . Calling serializer.save() would then save the object instance to the database. This style is in-line with how the ModelForm class works in Django, but is problematic for a number of reasons: Some data, such as many-to-many relationships, cannot be added to the object instance until after it has been saved. This type of data needed to be hidden in some undocumented state on the object instance, or kept as state on the serializer instance so that it could be used when .save() is called. Instantiating model instances directly means that you cannot use model manager classes for instance creation, e.g. ExampleModel.objects.create(...) . Manager classes are an excellent layer at which to enforce business logic and application-level data constraints. The two step process makes it unclear where to put deserialization logic. For example, should extra attributes such as the current user get added to the instance during object creation or during object save? We now use single-step object creation, like so: Validating the data makes the cleaned data available as serializer.validated_data . Calling serializer.save() then saves and returns the new object instance. The resulting API changes are further detailed below. The .create() and .update() methods. The .restore_object() method is now removed, and we instead have two separate methods, .create() and .update() . These methods work slightly different to the previous .restore_object() . When using the .create() and .update() methods you should both create and save the object instance. This is in contrast to the previous .restore_object() behavior that would instantiate the object but not save it. These methods also replace the optional .save_object() method, which no longer exists. The following example from the tutorial previously used restore_object() to handle both creating and updating object instances. def restore_object(self, attrs, instance=None): if instance: # Update existing instance instance.title = attrs.get('title', instance.title) instance.code = attrs.get('code', instance.code) instance.linenos = attrs.get('linenos', instance.linenos) instance.language = attrs.get('language', instance.language) instance.style = attrs.get('style', instance.style) return instance # Create new instance return Snippet(**attrs) This would now be split out into two separate methods. def update(self, instance, validated_data): instance.title = validated_data.get('title', instance.title) instance.code = validated_data.get('code', instance.code) instance.linenos = validated_data.get('linenos', instance.linenos) instance.language = validated_data.get('language', instance.language) instance.style = validated_data.get('style', instance.style) instance.save() return instance def create(self, validated_data): return Snippet.objects.create(**validated_data) Note that these methods should return the newly created object instance. Use .validated_data instead of .object . You must now use the .validated_data attribute if you need to inspect the data before saving, rather than using the .object attribute, which no longer exists. For example the following code is no longer valid : if serializer.is_valid(): name = serializer.object.name # Inspect validated field data. logging.info('Creating ticket \"%s\"' % name) serializer.object.user = request.user # Include the user when saving. serializer.save() Instead of using .object to inspect a partially constructed instance, you would now use .validated_data to inspect the cleaned incoming values. Also you can't set extra attributes on the instance directly, but instead pass them to the .save() method as keyword arguments. The corresponding code would now look like this: if serializer.is_valid(): name = serializer.validated_data['name'] # Inspect validated field data. logging.info('Creating ticket \"%s\"' % name) serializer.save(user=request.user) # Include the user when saving. Using .is_valid(raise_exception=True) The .is_valid() method now takes an optional boolean flag, raise_exception . Calling .is_valid(raise_exception=True) will cause a ValidationError to be raised if the serializer data contains validation errors. This error will be handled by REST framework's default exception handler, allowing you to remove error response handling from your view code. The handling and formatting of error responses may be altered globally by using the EXCEPTION_HANDLER settings key. This change also means it's now possible to alter the style of error responses used by the built-in generic views, without having to include mixin classes or other overrides. Using serializers.ValidationError . Previously serializers.ValidationError error was simply a synonym for django.core.exceptions.ValidationError . This has now been altered so that it inherits from the standard APIException base class. The reason behind this is that Django's ValidationError class is intended for use with HTML forms and its API makes using it slightly awkward with nested validation errors that can occur in serializers. For most users this change shouldn't require any updates to your codebase, but it is worth ensuring that whenever raising validation errors you should prefer using the serializers.ValidationError exception class, and not Django's built-in exception. We strongly recommend that you use the namespaced import style of import serializers and not from serializers import ValidationError in order to avoid any potential confusion. Change to validate_<field_name> . The validate_<field_name> method hooks that can be attached to serializer classes change their signature slightly and return type. Previously these would take a dictionary of all incoming data, and a key representing the field name, and would return a dictionary including the validated data for that field: def validate_score(self, attrs, source): if attrs['score'] % 10 != 0: raise serializers.ValidationError('This field should be a multiple of ten.') return attrs This is now simplified slightly, and the method hooks simply take the value to be validated, and return the validated value. def validate_score(self, value): if value % 10 != 0: raise serializers.ValidationError('This field should be a multiple of ten.') return value Any ad-hoc validation that applies to more than one field should go in the .validate(self, attrs) method as usual. Because .validate_<field_name> would previously accept the complete dictionary of attributes, it could be used to validate a field depending on the input in another field. Now if you need to do this you should use .validate() instead. You can either return non_field_errors from the validate method by raising a simple ValidationError def validate(self, attrs): # serializer.errors == {'non_field_errors': ['A non field error']} raise serializers.ValidationError('A non field error') Alternatively if you want the errors to be against a specific field, use a dictionary of when instantiating the ValidationError , like so: def validate(self, attrs): # serializer.errors == {'my_field': ['A field error']} raise serializers.ValidationError({'my_field': 'A field error'}) This ensures you can still write validation that compares all the input fields, but that marks the error against a particular field. Removal of transform_<field_name> . The under-used transform_<field_name> on serializer classes is no longer provided. Instead you should just override to_representation() if you need to apply any modifications to the representation style. For example: def to_representation(self, instance): ret = super(UserSerializer, self).to_representation(instance) ret['username'] = ret['username'].lower() return ret Dropping the extra point of API means there's now only one right way to do things. This helps with repetition and reinforcement of the core API, rather than having multiple differing approaches. If you absolutely need to preserve transform_<field_name> behavior, for example, in order to provide a simpler 2.x to 3.0 upgrade, you can use a mixin, or serializer base class that add the behavior back in. For example: class BaseModelSerializer(ModelSerializer): \"\"\" A custom ModelSerializer class that preserves 2.x style `transform_<field_name>` behavior. \"\"\" def to_representation(self, instance): ret = super(BaseModelSerializer, self).to_representation(instance) for key, value in ret.items(): method = getattr(self, 'transform_' + key, None) if method is not None: ret[key] = method(value) return ret Differences between ModelSerializer validation and ModelForm. This change also means that we no longer use the .full_clean() method on model instances, but instead perform all validation explicitly on the serializer. This gives a cleaner separation, and ensures that there's no automatic validation behavior on ModelSerializer classes that can't also be easily replicated on regular Serializer classes. For the most part this change should be transparent. Field validation and uniqueness checks will still be run as normal, but the implementation is a little different. The one difference that you do need to note is that the .clean() method will not be called as part of serializer validation, as it would be if using a ModelForm . Use the serializer .validate() method to perform a final validation step on incoming data where required. There may be some cases where you really do need to keep validation logic in the model .clean() method, and cannot instead separate it into the serializer .validate() . You can do so by explicitly instantiating a model instance in the .validate() method. def validate(self, attrs): instance = ExampleModel(**attrs) instance.clean() return attrs Again, you really should look at properly separating the validation logic out of the model method if possible, but the above might be useful in some backwards compatibility cases, or for an easy migration path. Writable nested serialization. REST framework 2.x attempted to automatically support writable nested serialization, but the behavior was complex and non-obvious. Attempting to automatically handle these case is problematic: There can be complex dependencies involved in order of saving multiple related model instances. It's unclear what behavior the user should expect when related models are passed None data. It's unclear how the user should expect to-many relationships to handle updates, creations and deletions of multiple records. Using the depth option on ModelSerializer will now create read-only nested serializers by default. If you try to use a writable nested serializer without writing a custom create() and/or update() method you'll see an assertion error when you attempt to save the serializer. For example: >>> class ProfileSerializer(serializers.ModelSerializer): >>> class Meta: >>> model = Profile >>> fields = ['address', 'phone'] >>> >>> class UserSerializer(serializers.ModelSerializer): >>> profile = ProfileSerializer() >>> class Meta: >>> model = User >>> fields = ['username', 'email', 'profile'] >>> >>> data = { >>> 'username': 'lizzy', >>> 'email': 'lizzy@example.com', >>> 'profile': {'address': '123 Acacia Avenue', 'phone': '01273 100200'} >>> } >>> >>> serializer = UserSerializer(data=data) >>> serializer.save() AssertionError: The `.create()` method does not support nested writable fields by default. Write an explicit `.create()` method for serializer `UserSerializer`, or set `read_only=True` on nested serializer fields. To use writable nested serialization you'll want to declare a nested field on the serializer class, and write the create() and/or update() methods explicitly. class UserSerializer(serializers.ModelSerializer): profile = ProfileSerializer() class Meta: model = User fields = ['username', 'email', 'profile'] def create(self, validated_data): profile_data = validated_data.pop('profile') user = User.objects.create(**validated_data) Profile.objects.create(user=user, **profile_data) return user The single-step object creation makes this far simpler and more obvious than the previous .restore_object() behavior. Printable serializer representations. Serializer instances now support a printable representation that allows you to inspect the fields present on the instance. For instance, given the following example model: class LocationRating(models.Model): location = models.CharField(max_length=100) rating = models.IntegerField() created_by = models.ForeignKey(User) Let's create a simple ModelSerializer class corresponding to the LocationRating model. class LocationRatingSerializer(serializer.ModelSerializer): class Meta: model = LocationRating We can now inspect the serializer representation in the Django shell, using python manage.py shell ... >>> serializer = LocationRatingSerializer() >>> print(serializer) # Or use `print serializer` in Python 2.x LocationRatingSerializer(): id = IntegerField(label='ID', read_only=True) location = CharField(max_length=100) rating = IntegerField() created_by = PrimaryKeyRelatedField(queryset=User.objects.all()) The extra_kwargs option. The write_only_fields option on ModelSerializer has been moved to PendingDeprecation and replaced with a more generic extra_kwargs . class MySerializer(serializer.ModelSerializer): class Meta: model = MyModel fields = ['id', 'email', 'notes', 'is_admin'] extra_kwargs = { 'is_admin': {'write_only': True} } Alternatively, specify the field explicitly on the serializer class: class MySerializer(serializer.ModelSerializer): is_admin = serializers.BooleanField(write_only=True) class Meta: model = MyModel fields = ['id', 'email', 'notes', 'is_admin'] The read_only_fields option remains as a convenient shortcut for the more common case. Changes to HyperlinkedModelSerializer . The view_name and lookup_field options have been moved to PendingDeprecation . They are no longer required, as you can use the extra_kwargs argument instead: class MySerializer(serializer.HyperlinkedModelSerializer): class Meta: model = MyModel fields = ['url', 'email', 'notes', 'is_admin'] extra_kwargs = { 'url': {'lookup_field': 'uuid'} } Alternatively, specify the field explicitly on the serializer class: class MySerializer(serializer.HyperlinkedModelSerializer): url = serializers.HyperlinkedIdentityField( view_name='mymodel-detail', lookup_field='uuid' ) class Meta: model = MyModel fields = ['url', 'email', 'notes', 'is_admin'] Fields for model methods and properties. With ModelSerializer you can now specify field names in the fields option that refer to model methods or properties. For example, suppose you have the following model: class Invitation(models.Model): created = models.DateTimeField() to_email = models.EmailField() message = models.CharField(max_length=1000) def expiry_date(self): return self.created + datetime.timedelta(days=30) You can include expiry_date as a field option on a ModelSerializer class. class InvitationSerializer(serializers.ModelSerializer): class Meta: model = Invitation fields = ['to_email', 'message', 'expiry_date'] These fields will be mapped to serializers.ReadOnlyField() instances. >>> serializer = InvitationSerializer() >>> print(repr(serializer)) InvitationSerializer(): to_email = EmailField(max_length=75) message = CharField(max_length=1000) expiry_date = ReadOnlyField() The ListSerializer class. The ListSerializer class has now been added, and allows you to create base serializer classes for only accepting multiple inputs. class MultipleUserSerializer(ListSerializer): child = UserSerializer() You can also still use the many=True argument to serializer classes. It's worth noting that many=True argument transparently creates a ListSerializer instance, allowing the validation logic for list and non-list data to be cleanly separated in the REST framework codebase. You will typically want to continue to use the existing many=True flag rather than declaring ListSerializer classes explicitly, but declaring the classes explicitly can be useful if you need to write custom create or update methods for bulk updates, or provide for other custom behavior. See also the new ListField class, which validates input in the same way, but does not include the serializer interfaces of .is_valid() , .data , .save() and so on. The BaseSerializer class. REST framework now includes a simple BaseSerializer class that can be used to easily support alternative serialization and deserialization styles. This class implements the same basic API as the Serializer class: .data - Returns the outgoing primitive representation. .is_valid() - Deserializes and validates incoming data. .validated_data - Returns the validated incoming data. .errors - Returns an errors during validation. .save() - Persists the validated data into an object instance. There are four methods that can be overridden, depending on what functionality you want the serializer class to support: .to_representation() - Override this to support serialization, for read operations. .to_internal_value() - Override this to support deserialization, for write operations. .create() and .update() - Override either or both of these to support saving instances. Because this class provides the same interface as the Serializer class, you can use it with the existing generic class-based views exactly as you would for a regular Serializer or ModelSerializer . The only difference you'll notice when doing so is the BaseSerializer classes will not generate HTML forms in the browsable API. This is because the data they return does not include all the field information that would allow each field to be rendered into a suitable HTML input. Read-only BaseSerializer classes. To implement a read-only serializer using the BaseSerializer class, we just need to override the .to_representation() method. Let's take a look at an example using a simple Django model: class HighScore(models.Model): created = models.DateTimeField(auto_now_add=True) player_name = models.CharField(max_length=10) score = models.IntegerField() It's simple to create a read-only serializer for converting HighScore instances into primitive data types. class HighScoreSerializer(serializers.BaseSerializer): def to_representation(self, obj): return { 'score': obj.score, 'player_name': obj.player_name } We can now use this class to serialize single HighScore instances: @api_view(['GET']) def high_score(request, pk): instance = HighScore.objects.get(pk=pk) serializer = HighScoreSerializer(instance) return Response(serializer.data) Or use it to serialize multiple instances: @api_view(['GET']) def all_high_scores(request): queryset = HighScore.objects.order_by('-score') serializer = HighScoreSerializer(queryset, many=True) return Response(serializer.data) Read-write BaseSerializer classes. To create a read-write serializer we first need to implement a .to_internal_value() method. This method returns the validated values that will be used to construct the object instance, and may raise a ValidationError if the supplied data is in an incorrect format. Once you've implemented .to_internal_value() , the basic validation API will be available on the serializer, and you will be able to use .is_valid() , .validated_data and .errors . If you want to also support .save() you'll need to also implement either or both of the .create() and .update() methods. Here's a complete example of our previous HighScoreSerializer , that's been updated to support both read and write operations. class HighScoreSerializer(serializers.BaseSerializer): def to_internal_value(self, data): score = data.get('score') player_name = data.get('player_name') # Perform the data validation. if not score: raise ValidationError({ 'score': 'This field is required.' }) if not player_name: raise ValidationError({ 'player_name': 'This field is required.' }) if len(player_name) > 10: raise ValidationError({ 'player_name': 'May not be more than 10 characters.' }) # Return the validated values. This will be available as # the `.validated_data` property. return { 'score': int(score), 'player_name': player_name } def to_representation(self, obj): return { 'score': obj.score, 'player_name': obj.player_name } def create(self, validated_data): return HighScore.objects.create(**validated_data) Creating new generic serializers with BaseSerializer . The BaseSerializer class is also useful if you want to implement new generic serializer classes for dealing with particular serialization styles, or for integrating with alternative storage backends. The following class is an example of a generic serializer that can handle coercing arbitrary objects into primitive representations. class ObjectSerializer(serializers.BaseSerializer): \"\"\" A read-only serializer that coerces arbitrary complex objects into primitive representations. \"\"\" def to_representation(self, obj): for attribute_name in dir(obj): attribute = getattr(obj, attribute_name) if attribute_name.startswith('_'): # Ignore private attributes. pass elif hasattr(attribute, '__call__'): # Ignore methods and other callables. pass elif isinstance(attribute, (str, int, bool, float, type(None))): # Primitive types can be passed through unmodified. output[attribute_name] = attribute elif isinstance(attribute, list): # Recursively deal with items in lists. output[attribute_name] = [ self.to_representation(item) for item in attribute ] elif isinstance(attribute, dict): # Recursively deal with items in dictionaries. output[attribute_name] = { str(key): self.to_representation(value) for key, value in attribute.items() } else: # Force anything else to its string representation. output[attribute_name] = str(attribute) Serializer fields The Field and ReadOnly field classes. There are some minor tweaks to the field base classes. Previously we had these two base classes: Field as the base class for read-only fields. A default implementation was included for serializing data. WritableField as the base class for read-write fields. We now use the following: Field is the base class for all fields. It does not include any default implementation for either serializing or deserializing data. ReadOnlyField is a concrete implementation for read-only fields that simply returns the attribute value without modification. The required , allow_null , allow_blank and default arguments. REST framework now has more explicit and clear control over validating empty values for fields. Previously the meaning of the required=False keyword argument was underspecified. In practice its use meant that a field could either be not included in the input, or it could be included, but be None or the empty string. We now have a better separation, with separate required , allow_null and allow_blank arguments. The following set of arguments are used to control validation of empty values: required=False : The value does not need to be present in the input, and will not be passed to .create() or .update() if it is not seen. default=<value> : The value does not need to be present in the input, and a default value will be passed to .create() or .update() if it is not seen. allow_null=True : None is a valid input. allow_blank=True : '' is valid input. For CharField and subclasses only. Typically you'll want to use required=False if the corresponding model field has a default value, and additionally set either allow_null=True or allow_blank=True if required. The default argument is also available and always implies that the field is not required to be in the input. It is unnecessary to use the required argument when a default is specified, and doing so will result in an error. Coercing output types. The previous field implementations did not forcibly coerce returned values into the correct type in many cases. For example, an IntegerField would return a string output if the attribute value was a string. We now more strictly coerce to the correct return type, leading to more constrained and expected behavior. Removal of .validate() . The .validate() method is now removed from field classes. This method was in any case undocumented and not public API. You should instead simply override to_internal_value() . class UppercaseCharField(serializers.CharField): def to_internal_value(self, data): value = super(UppercaseCharField, self).to_internal_value(data) if value != value.upper(): raise serializers.ValidationError('The input should be uppercase only.') return value Previously validation errors could be raised in either .to_native() or .validate() , making it non-obvious which should be used. Providing only a single point of API ensures more repetition and reinforcement of the core API. The ListField class. The ListField class has now been added. This field validates list input. It takes a child keyword argument which is used to specify the field used to validate each item in the list. For example: scores = ListField(child=IntegerField(min_value=0, max_value=100)) You can also use a declarative style to create new subclasses of ListField , like this: class ScoresField(ListField): child = IntegerField(min_value=0, max_value=100) We can now use the ScoresField class inside another serializer: scores = ScoresField() See also the new ListSerializer class, which validates input in the same way, but also includes the serializer interfaces of .is_valid() , .data , .save() and so on. The ChoiceField class may now accept a flat list. The ChoiceField class may now accept a list of choices in addition to the existing style of using a list of pairs of (name, display_value) . The following is now valid: color = ChoiceField(choices=['red', 'green', 'blue']) The MultipleChoiceField class. The MultipleChoiceField class has been added. This field acts like ChoiceField , but returns a set, which may include none, one or many of the valid choices. Changes to the custom field API. The from_native(self, value) and to_native(self, data) method names have been replaced with the more obviously named to_internal_value(self, data) and to_representation(self, value) . The field_from_native() and field_to_native() methods are removed. Previously you could use these methods if you wanted to customise the behaviour in a way that did not simply lookup the field value from the object. For example... def field_to_native(self, obj, field_name): \"\"\"A custom read-only field that returns the class name.\"\"\" return obj.__class__.__name__ Now if you need to access the entire object you'll instead need to override one or both of the following: Use get_attribute to modify the attribute value passed to to_representation() . Use get_value to modify the data value passed to_internal_value() . For example: def get_attribute(self, obj): # Pass the entire object through to `to_representation()`, # instead of the standard attribute lookup. return obj def to_representation(self, value): return value.__class__.__name__ Explicit queryset required on relational fields. Previously relational fields that were explicitly declared on a serializer class could omit the queryset argument if (and only if) they were declared on a ModelSerializer . This code would be valid in 2.4.3 : class AccountSerializer(serializers.ModelSerializer): organizations = serializers.SlugRelatedField(slug_field='name') class Meta: model = Account However this code would not be valid in 3.0 : # Missing `queryset` class AccountSerializer(serializers.Serializer): organizations = serializers.SlugRelatedField(slug_field='name') def restore_object(self, attrs, instance=None): # ... The queryset argument is now always required for writable relational fields. This removes some magic and makes it easier and more obvious to move between implicit ModelSerializer classes and explicit Serializer classes. class AccountSerializer(serializers.ModelSerializer): organizations = serializers.SlugRelatedField( slug_field='name', queryset=Organization.objects.all() ) class Meta: model = Account The queryset argument is only ever required for writable fields, and is not required or valid for fields with read_only=True . Optional argument to SerializerMethodField . The argument to SerializerMethodField is now optional, and defaults to get_<field_name> . For example the following is valid: class AccountSerializer(serializers.Serializer): # `method_name='get_billing_details'` by default. billing_details = serializers.SerializerMethodField() def get_billing_details(self, account): return calculate_billing(account) In order to ensure a consistent code style an assertion error will be raised if you include a redundant method name argument that matches the default method name. For example, the following code will raise an error : billing_details = serializers.SerializerMethodField('get_billing_details') Enforcing consistent source usage. I've see several codebases that unnecessarily include the source argument, setting it to the same value as the field name. This usage is redundant and confusing, making it less obvious that source is usually not required. The following usage will now raise an error : email = serializers.EmailField(source='email') The UniqueValidator and UniqueTogetherValidator classes. REST framework now provides new validators that allow you to ensure field uniqueness, while still using a completely explicit Serializer class instead of using ModelSerializer . The UniqueValidator should be applied to a serializer field, and takes a single queryset argument. from rest_framework import serializers from rest_framework.validators import UniqueValidator class OrganizationSerializer(serializers.Serializer): url = serializers.HyperlinkedIdentityField(view_name='organization_detail') created = serializers.DateTimeField(read_only=True) name = serializers.CharField( max_length=100, validators=UniqueValidator(queryset=Organization.objects.all()) ) The UniqueTogetherValidator should be applied to a serializer, and takes a queryset argument and a fields argument which should be a list or tuple of field names. class RaceResultSerializer(serializers.Serializer): category = serializers.ChoiceField(['5k', '10k']) position = serializers.IntegerField() name = serializers.CharField(max_length=100) class Meta: validators = [UniqueTogetherValidator( queryset=RaceResult.objects.all(), fields=['category', 'position'] )] The UniqueForDateValidator classes. REST framework also now includes explicit validator classes for validating the unique_for_date , unique_for_month , and unique_for_year model field constraints. These are used internally instead of calling into Model.full_clean() . These classes are documented in the Validators section of the documentation. Generic views Simplification of view logic. The view logic for the default method handlers has been significantly simplified, due to the new serializers API. Changes to pre/post save hooks. The pre_save and post_save hooks no longer exist, but are replaced with perform_create(self, serializer) and perform_update(self, serializer) . These methods should save the object instance by calling serializer.save() , adding in any additional arguments as required. They may also perform any custom pre-save or post-save behavior. For example: def perform_create(self, serializer): # Include the owner attribute directly, rather than from request data. instance = serializer.save(owner=self.request.user) # Perform a custom post-save action. send_email(instance.to_email, instance.message) The pre_delete and post_delete hooks no longer exist, and are replaced with .perform_destroy(self, instance) , which should delete the instance and perform any custom actions. def perform_destroy(self, instance): # Perform a custom pre-delete action. send_deletion_alert(user=instance.created_by, deleted=instance) # Delete the object instance. instance.delete() Removal of view attributes. The .object and .object_list attributes are no longer set on the view instance. Treating views as mutable object instances that store state during the processing of the view tends to be poor design, and can lead to obscure flow logic. I would personally recommend that developers treat view instances as immutable objects in their application code. PUT as create. Allowing PUT as create operations is problematic, as it necessarily exposes information about the existence or non-existence of objects. It's also not obvious that transparently allowing re-creating of previously deleted instances is necessarily a better default behavior than simply returning 404 responses. Both styles \" PUT as 404\" and \" PUT as create\" can be valid in different circumstances, but we've now opted for the 404 behavior as the default, due to it being simpler and more obvious. If you need to restore the previous behavior you may want to include this AllowPUTAsCreateMixin class as a mixin to your views. Customizing error responses. The generic views now raise ValidationFailed exception for invalid data. This exception is then dealt with by the exception handler, rather than the view returning a 400 Bad Request response directly. This change means that you can now easily customize the style of error responses across your entire API, without having to modify any of the generic views. The metadata API Behavior for dealing with OPTIONS requests was previously built directly into the class-based views. This has now been properly separated out into a Metadata API that allows the same pluggable style as other API policies in REST framework. This makes it far easier to use a different style for OPTIONS responses throughout your API, and makes it possible to create third-party metadata policies. Serializers as HTML forms REST framework 3.0 includes templated HTML form rendering for serializers. This API should not yet be considered finalized, and will only be promoted to public API for the 3.1 release. Significant changes that you do need to be aware of include: Nested HTML forms are now supported, for example, a UserSerializer with a nested ProfileSerializer will now render a nested fieldset when used in the browsable API. Nested lists of HTML forms are not yet supported, but are planned for 3.1. Because we now use templated HTML form generation, the widget option is no longer available for serializer fields . You can instead control the template that is used for a given field, by using the style dictionary. The style keyword argument for serializer fields. The style keyword argument can be used to pass through additional information from a serializer field, to the renderer class. In particular, the HTMLFormRenderer uses the base_template key to determine which template to render the field with. For example, to use a textarea control instead of the default input control, you would use the following\u2026 additional_notes = serializers.CharField( style={'base_template': 'textarea.html'} ) Similarly, to use a radio button control instead of the default select control, you would use the following\u2026 color_channel = serializers.ChoiceField( choices=['red', 'blue', 'green'], style={'base_template': 'radio.html'} ) This API should be considered provisional, and there may be minor alterations with the incoming 3.1 release. API style There are some improvements in the default style we use in our API responses. Unicode JSON by default. Unicode JSON is now the default. The UnicodeJSONRenderer class no longer exists, and the UNICODE_JSON setting has been added. To revert this behavior use the new setting: REST_FRAMEWORK = { 'UNICODE_JSON': False } Compact JSON by default. We now output compact JSON in responses by default. For example, we return: {\"email\":\"amy@example.com\",\"is_admin\":true} Instead of the following: {\"email\": \"amy@example.com\", \"is_admin\": true} The COMPACT_JSON setting has been added, and can be used to revert this behavior if needed: REST_FRAMEWORK = { 'COMPACT_JSON': False } File fields as URLs The FileField and ImageField classes are now represented as URLs by default. You should ensure you set Django's standard MEDIA_URL setting appropriately, and ensure your application serves the uploaded files . You can revert this behavior, and display filenames in the representation by using the UPLOADED_FILES_USE_URL settings key: REST_FRAMEWORK = { 'UPLOADED_FILES_USE_URL': False } You can also modify serializer fields individually, using the use_url argument: uploaded_file = serializers.FileField(use_url=False) Also note that you should pass the request object to the serializer as context when instantiating it, so that a fully qualified URL can be returned. Returned URLs will then be of the form https://example.com/url_path/filename.txt . For example: context = {'request': request} serializer = ExampleSerializer(instance, context=context) return Response(serializer.data) If the request is omitted from the context, the returned URLs will be of the form /url_path/filename.txt . Throttle headers using Retry-After . The custom X-Throttle-Wait-Second header has now been dropped in favor of the standard Retry-After header. You can revert this behavior if needed by writing a custom exception handler for your application. Date and time objects as ISO-8601 strings in serializer data. Date and Time objects are now coerced to strings by default in the serializer output. Previously they were returned as Date , Time and DateTime objects, and later coerced to strings by the renderer. You can modify this behavior globally by settings the existing DATE_FORMAT , DATETIME_FORMAT and TIME_FORMAT settings keys. Setting these values to None instead of their default value of 'iso-8601' will result in native objects being returned in serializer data. REST_FRAMEWORK = { # Return native `Date` and `Time` objects in `serializer.data` 'DATETIME_FORMAT': None 'DATE_FORMAT': None 'TIME_FORMAT': None } You can also modify serializer fields individually, using the date_format , time_format and datetime_format arguments: # Return `DateTime` instances in `serializer.data`, not strings. created = serializers.DateTimeField(format=None) Decimals as strings in serializer data. Decimals are now coerced to strings by default in the serializer output. Previously they were returned as Decimal objects, and later coerced to strings by the renderer. You can modify this behavior globally by using the COERCE_DECIMAL_TO_STRING settings key. REST_FRAMEWORK = { 'COERCE_DECIMAL_TO_STRING': False } Or modify it on an individual serializer field, using the coerce_to_string keyword argument. # Return `Decimal` instances in `serializer.data`, not strings. amount = serializers.DecimalField( max_digits=10, decimal_places=2, coerce_to_string=False ) The default JSON renderer will return float objects for un-coerced Decimal instances. This allows you to easily switch between string or float representations for decimals depending on your API design needs. Miscellaneous notes The serializer ChoiceField does not currently display nested choices, as was the case in 2.4. This will be address as part of 3.1. Due to the new templated form rendering, the 'widget' option is no longer valid. This means there's no easy way of using third party \"autocomplete\" widgets for rendering select inputs that contain a large number of choices. You'll either need to use a regular select or a plain text input. We may consider addressing this in 3.1 or 3.2 if there's sufficient demand. Some of the default validation error messages were rewritten and might no longer be pre-translated. You can still create language files with Django if you wish to localize them. APIException subclasses could previously take any arbitrary type in the detail argument. These exceptions now use translatable text strings, and as a result call force_text on the detail argument, which must be a string . If you need complex arguments to an APIException class, you should subclass it and override the __init__() method. Typically you'll instead want to use a custom exception handler to provide for non-standard error responses. What's coming next 3.0 is an incremental release, and there are several upcoming features that will build on the baseline improvements that it makes. The 3.1 release is planned to address improvements in the following components: Public API for using serializers as HTML forms. Request parsing, mediatypes & the implementation of the browsable API. Introduction of a new pagination API. Better support for API versioning. The 3.2 release is planned to introduce an alternative admin-style interface to the browsable API. You can follow development on the GitHub site, where we use milestones to indicate planning timescales .","title":"3.0 Announcement"},{"location":"community/3.0-announcement/#django-rest-framework-30","text":"The 3.0 release of Django REST framework is the result of almost four years of iteration and refinement. It comprehensively addresses some of the previous remaining design issues in serializers, fields and the generic views. This release is incremental in nature. There are some breaking API changes, and upgrading will require you to read the release notes carefully, but the migration path should otherwise be relatively straightforward. The difference in quality of the REST framework API and implementation should make writing, maintaining and debugging your application far easier. 3.0 is the first of three releases that have been funded by our recent Kickstarter campaign . As ever, a huge thank you to our many wonderful sponsors . If you're looking for a Django gig, and want to work with smart community-minded folks, you should probably check out that list and see who's hiring.","title":"Django REST framework 3.0"},{"location":"community/3.0-announcement/#new-features","text":"Notable features of this new release include: Printable representations on serializers that allow you to inspect exactly what fields are present on the instance. Simple model serializers that are vastly easier to understand and debug, and that make it easy to switch between the implicit ModelSerializer class and the explicit Serializer class. A new BaseSerializer class, making it easier to write serializers for alternative storage backends, or to completely customize your serialization and validation logic. A cleaner fields API including new classes such as ListField and MultipleChoiceField . Super simple default implementations for the generic views. Support for overriding how validation errors are handled by your API. A metadata API that allows you to customize how OPTIONS requests are handled by your API. A more compact JSON output with unicode style encoding turned on by default. Templated based HTML form rendering for serializers. This will be finalized as public API in the upcoming 3.1 release. Significant new functionality continues to be planned for the 3.1 and 3.2 releases. These releases will correspond to the two Kickstarter stretch goals - \"Feature improvements\" and \"Admin interface\". Further 3.x releases will present simple upgrades, without the same level of fundamental API changes necessary for the 3.0 release.","title":"New features"},{"location":"community/3.0-announcement/#rest-framework-under-the-hood","text":"This talk from the Django: Under the Hood event in Amsterdam, Nov 2014, gives some good background context on the design decisions behind 3.0. Below is an in-depth guide to the API changes and migration notes for 3.0.","title":"REST framework: Under the hood."},{"location":"community/3.0-announcement/#request-objects","text":"","title":"Request objects"},{"location":"community/3.0-announcement/#the-data-and-query_params-properties","text":"The usage of request.DATA and request.FILES is now pending deprecation in favor of a single request.data attribute that contains all the parsed data. Having separate attributes is reasonable for web applications that only ever parse url-encoded or multipart requests, but makes less sense for the general-purpose request parsing that REST framework supports. You may now pass all the request data to a serializer class in a single argument: # Do this... ExampleSerializer(data=request.data) Instead of passing the files argument separately: # Don't do this... ExampleSerializer(data=request.DATA, files=request.FILES) The usage of request.QUERY_PARAMS is now pending deprecation in favor of the lowercased request.query_params .","title":"The .data and .query_params properties."},{"location":"community/3.0-announcement/#serializers","text":"","title":"Serializers"},{"location":"community/3.0-announcement/#single-step-object-creation","text":"Previously the serializers used a two-step object creation, as follows: Validating the data would create an object instance. This instance would be available as serializer.object . Calling serializer.save() would then save the object instance to the database. This style is in-line with how the ModelForm class works in Django, but is problematic for a number of reasons: Some data, such as many-to-many relationships, cannot be added to the object instance until after it has been saved. This type of data needed to be hidden in some undocumented state on the object instance, or kept as state on the serializer instance so that it could be used when .save() is called. Instantiating model instances directly means that you cannot use model manager classes for instance creation, e.g. ExampleModel.objects.create(...) . Manager classes are an excellent layer at which to enforce business logic and application-level data constraints. The two step process makes it unclear where to put deserialization logic. For example, should extra attributes such as the current user get added to the instance during object creation or during object save? We now use single-step object creation, like so: Validating the data makes the cleaned data available as serializer.validated_data . Calling serializer.save() then saves and returns the new object instance. The resulting API changes are further detailed below.","title":"Single-step object creation."},{"location":"community/3.0-announcement/#the-create-and-update-methods","text":"The .restore_object() method is now removed, and we instead have two separate methods, .create() and .update() . These methods work slightly different to the previous .restore_object() . When using the .create() and .update() methods you should both create and save the object instance. This is in contrast to the previous .restore_object() behavior that would instantiate the object but not save it. These methods also replace the optional .save_object() method, which no longer exists. The following example from the tutorial previously used restore_object() to handle both creating and updating object instances. def restore_object(self, attrs, instance=None): if instance: # Update existing instance instance.title = attrs.get('title', instance.title) instance.code = attrs.get('code', instance.code) instance.linenos = attrs.get('linenos', instance.linenos) instance.language = attrs.get('language', instance.language) instance.style = attrs.get('style', instance.style) return instance # Create new instance return Snippet(**attrs) This would now be split out into two separate methods. def update(self, instance, validated_data): instance.title = validated_data.get('title', instance.title) instance.code = validated_data.get('code', instance.code) instance.linenos = validated_data.get('linenos', instance.linenos) instance.language = validated_data.get('language', instance.language) instance.style = validated_data.get('style', instance.style) instance.save() return instance def create(self, validated_data): return Snippet.objects.create(**validated_data) Note that these methods should return the newly created object instance.","title":"The .create() and .update() methods."},{"location":"community/3.0-announcement/#use-validated_data-instead-of-object","text":"You must now use the .validated_data attribute if you need to inspect the data before saving, rather than using the .object attribute, which no longer exists. For example the following code is no longer valid : if serializer.is_valid(): name = serializer.object.name # Inspect validated field data. logging.info('Creating ticket \"%s\"' % name) serializer.object.user = request.user # Include the user when saving. serializer.save() Instead of using .object to inspect a partially constructed instance, you would now use .validated_data to inspect the cleaned incoming values. Also you can't set extra attributes on the instance directly, but instead pass them to the .save() method as keyword arguments. The corresponding code would now look like this: if serializer.is_valid(): name = serializer.validated_data['name'] # Inspect validated field data. logging.info('Creating ticket \"%s\"' % name) serializer.save(user=request.user) # Include the user when saving.","title":"Use .validated_data instead of .object."},{"location":"community/3.0-announcement/#using-is_validraise_exceptiontrue","text":"The .is_valid() method now takes an optional boolean flag, raise_exception . Calling .is_valid(raise_exception=True) will cause a ValidationError to be raised if the serializer data contains validation errors. This error will be handled by REST framework's default exception handler, allowing you to remove error response handling from your view code. The handling and formatting of error responses may be altered globally by using the EXCEPTION_HANDLER settings key. This change also means it's now possible to alter the style of error responses used by the built-in generic views, without having to include mixin classes or other overrides.","title":"Using .is_valid(raise_exception=True)"},{"location":"community/3.0-announcement/#using-serializersvalidationerror","text":"Previously serializers.ValidationError error was simply a synonym for django.core.exceptions.ValidationError . This has now been altered so that it inherits from the standard APIException base class. The reason behind this is that Django's ValidationError class is intended for use with HTML forms and its API makes using it slightly awkward with nested validation errors that can occur in serializers. For most users this change shouldn't require any updates to your codebase, but it is worth ensuring that whenever raising validation errors you should prefer using the serializers.ValidationError exception class, and not Django's built-in exception. We strongly recommend that you use the namespaced import style of import serializers and not from serializers import ValidationError in order to avoid any potential confusion.","title":"Using serializers.ValidationError."},{"location":"community/3.0-announcement/#change-to-validate_field_name","text":"The validate_<field_name> method hooks that can be attached to serializer classes change their signature slightly and return type. Previously these would take a dictionary of all incoming data, and a key representing the field name, and would return a dictionary including the validated data for that field: def validate_score(self, attrs, source): if attrs['score'] % 10 != 0: raise serializers.ValidationError('This field should be a multiple of ten.') return attrs This is now simplified slightly, and the method hooks simply take the value to be validated, and return the validated value. def validate_score(self, value): if value % 10 != 0: raise serializers.ValidationError('This field should be a multiple of ten.') return value Any ad-hoc validation that applies to more than one field should go in the .validate(self, attrs) method as usual. Because .validate_<field_name> would previously accept the complete dictionary of attributes, it could be used to validate a field depending on the input in another field. Now if you need to do this you should use .validate() instead. You can either return non_field_errors from the validate method by raising a simple ValidationError def validate(self, attrs): # serializer.errors == {'non_field_errors': ['A non field error']} raise serializers.ValidationError('A non field error') Alternatively if you want the errors to be against a specific field, use a dictionary of when instantiating the ValidationError , like so: def validate(self, attrs): # serializer.errors == {'my_field': ['A field error']} raise serializers.ValidationError({'my_field': 'A field error'}) This ensures you can still write validation that compares all the input fields, but that marks the error against a particular field.","title":"Change to validate_&lt;field_name&gt;."},{"location":"community/3.0-announcement/#removal-of-transform_field_name","text":"The under-used transform_<field_name> on serializer classes is no longer provided. Instead you should just override to_representation() if you need to apply any modifications to the representation style. For example: def to_representation(self, instance): ret = super(UserSerializer, self).to_representation(instance) ret['username'] = ret['username'].lower() return ret Dropping the extra point of API means there's now only one right way to do things. This helps with repetition and reinforcement of the core API, rather than having multiple differing approaches. If you absolutely need to preserve transform_<field_name> behavior, for example, in order to provide a simpler 2.x to 3.0 upgrade, you can use a mixin, or serializer base class that add the behavior back in. For example: class BaseModelSerializer(ModelSerializer): \"\"\" A custom ModelSerializer class that preserves 2.x style `transform_<field_name>` behavior. \"\"\" def to_representation(self, instance): ret = super(BaseModelSerializer, self).to_representation(instance) for key, value in ret.items(): method = getattr(self, 'transform_' + key, None) if method is not None: ret[key] = method(value) return ret","title":"Removal of transform_&lt;field_name&gt;."},{"location":"community/3.0-announcement/#differences-between-modelserializer-validation-and-modelform","text":"This change also means that we no longer use the .full_clean() method on model instances, but instead perform all validation explicitly on the serializer. This gives a cleaner separation, and ensures that there's no automatic validation behavior on ModelSerializer classes that can't also be easily replicated on regular Serializer classes. For the most part this change should be transparent. Field validation and uniqueness checks will still be run as normal, but the implementation is a little different. The one difference that you do need to note is that the .clean() method will not be called as part of serializer validation, as it would be if using a ModelForm . Use the serializer .validate() method to perform a final validation step on incoming data where required. There may be some cases where you really do need to keep validation logic in the model .clean() method, and cannot instead separate it into the serializer .validate() . You can do so by explicitly instantiating a model instance in the .validate() method. def validate(self, attrs): instance = ExampleModel(**attrs) instance.clean() return attrs Again, you really should look at properly separating the validation logic out of the model method if possible, but the above might be useful in some backwards compatibility cases, or for an easy migration path.","title":"Differences between ModelSerializer validation and ModelForm."},{"location":"community/3.0-announcement/#writable-nested-serialization","text":"REST framework 2.x attempted to automatically support writable nested serialization, but the behavior was complex and non-obvious. Attempting to automatically handle these case is problematic: There can be complex dependencies involved in order of saving multiple related model instances. It's unclear what behavior the user should expect when related models are passed None data. It's unclear how the user should expect to-many relationships to handle updates, creations and deletions of multiple records. Using the depth option on ModelSerializer will now create read-only nested serializers by default. If you try to use a writable nested serializer without writing a custom create() and/or update() method you'll see an assertion error when you attempt to save the serializer. For example: >>> class ProfileSerializer(serializers.ModelSerializer): >>> class Meta: >>> model = Profile >>> fields = ['address', 'phone'] >>> >>> class UserSerializer(serializers.ModelSerializer): >>> profile = ProfileSerializer() >>> class Meta: >>> model = User >>> fields = ['username', 'email', 'profile'] >>> >>> data = { >>> 'username': 'lizzy', >>> 'email': 'lizzy@example.com', >>> 'profile': {'address': '123 Acacia Avenue', 'phone': '01273 100200'} >>> } >>> >>> serializer = UserSerializer(data=data) >>> serializer.save() AssertionError: The `.create()` method does not support nested writable fields by default. Write an explicit `.create()` method for serializer `UserSerializer`, or set `read_only=True` on nested serializer fields. To use writable nested serialization you'll want to declare a nested field on the serializer class, and write the create() and/or update() methods explicitly. class UserSerializer(serializers.ModelSerializer): profile = ProfileSerializer() class Meta: model = User fields = ['username', 'email', 'profile'] def create(self, validated_data): profile_data = validated_data.pop('profile') user = User.objects.create(**validated_data) Profile.objects.create(user=user, **profile_data) return user The single-step object creation makes this far simpler and more obvious than the previous .restore_object() behavior.","title":"Writable nested serialization."},{"location":"community/3.0-announcement/#printable-serializer-representations","text":"Serializer instances now support a printable representation that allows you to inspect the fields present on the instance. For instance, given the following example model: class LocationRating(models.Model): location = models.CharField(max_length=100) rating = models.IntegerField() created_by = models.ForeignKey(User) Let's create a simple ModelSerializer class corresponding to the LocationRating model. class LocationRatingSerializer(serializer.ModelSerializer): class Meta: model = LocationRating We can now inspect the serializer representation in the Django shell, using python manage.py shell ... >>> serializer = LocationRatingSerializer() >>> print(serializer) # Or use `print serializer` in Python 2.x LocationRatingSerializer(): id = IntegerField(label='ID', read_only=True) location = CharField(max_length=100) rating = IntegerField() created_by = PrimaryKeyRelatedField(queryset=User.objects.all())","title":"Printable serializer representations."},{"location":"community/3.0-announcement/#the-extra_kwargs-option","text":"The write_only_fields option on ModelSerializer has been moved to PendingDeprecation and replaced with a more generic extra_kwargs . class MySerializer(serializer.ModelSerializer): class Meta: model = MyModel fields = ['id', 'email', 'notes', 'is_admin'] extra_kwargs = { 'is_admin': {'write_only': True} } Alternatively, specify the field explicitly on the serializer class: class MySerializer(serializer.ModelSerializer): is_admin = serializers.BooleanField(write_only=True) class Meta: model = MyModel fields = ['id', 'email', 'notes', 'is_admin'] The read_only_fields option remains as a convenient shortcut for the more common case.","title":"The extra_kwargs option."},{"location":"community/3.0-announcement/#changes-to-hyperlinkedmodelserializer","text":"The view_name and lookup_field options have been moved to PendingDeprecation . They are no longer required, as you can use the extra_kwargs argument instead: class MySerializer(serializer.HyperlinkedModelSerializer): class Meta: model = MyModel fields = ['url', 'email', 'notes', 'is_admin'] extra_kwargs = { 'url': {'lookup_field': 'uuid'} } Alternatively, specify the field explicitly on the serializer class: class MySerializer(serializer.HyperlinkedModelSerializer): url = serializers.HyperlinkedIdentityField( view_name='mymodel-detail', lookup_field='uuid' ) class Meta: model = MyModel fields = ['url', 'email', 'notes', 'is_admin']","title":"Changes to HyperlinkedModelSerializer."},{"location":"community/3.0-announcement/#fields-for-model-methods-and-properties","text":"With ModelSerializer you can now specify field names in the fields option that refer to model methods or properties. For example, suppose you have the following model: class Invitation(models.Model): created = models.DateTimeField() to_email = models.EmailField() message = models.CharField(max_length=1000) def expiry_date(self): return self.created + datetime.timedelta(days=30) You can include expiry_date as a field option on a ModelSerializer class. class InvitationSerializer(serializers.ModelSerializer): class Meta: model = Invitation fields = ['to_email', 'message', 'expiry_date'] These fields will be mapped to serializers.ReadOnlyField() instances. >>> serializer = InvitationSerializer() >>> print(repr(serializer)) InvitationSerializer(): to_email = EmailField(max_length=75) message = CharField(max_length=1000) expiry_date = ReadOnlyField()","title":"Fields for model methods and properties."},{"location":"community/3.0-announcement/#the-listserializer-class","text":"The ListSerializer class has now been added, and allows you to create base serializer classes for only accepting multiple inputs. class MultipleUserSerializer(ListSerializer): child = UserSerializer() You can also still use the many=True argument to serializer classes. It's worth noting that many=True argument transparently creates a ListSerializer instance, allowing the validation logic for list and non-list data to be cleanly separated in the REST framework codebase. You will typically want to continue to use the existing many=True flag rather than declaring ListSerializer classes explicitly, but declaring the classes explicitly can be useful if you need to write custom create or update methods for bulk updates, or provide for other custom behavior. See also the new ListField class, which validates input in the same way, but does not include the serializer interfaces of .is_valid() , .data , .save() and so on.","title":"The ListSerializer class."},{"location":"community/3.0-announcement/#the-baseserializer-class","text":"REST framework now includes a simple BaseSerializer class that can be used to easily support alternative serialization and deserialization styles. This class implements the same basic API as the Serializer class: .data - Returns the outgoing primitive representation. .is_valid() - Deserializes and validates incoming data. .validated_data - Returns the validated incoming data. .errors - Returns an errors during validation. .save() - Persists the validated data into an object instance. There are four methods that can be overridden, depending on what functionality you want the serializer class to support: .to_representation() - Override this to support serialization, for read operations. .to_internal_value() - Override this to support deserialization, for write operations. .create() and .update() - Override either or both of these to support saving instances. Because this class provides the same interface as the Serializer class, you can use it with the existing generic class-based views exactly as you would for a regular Serializer or ModelSerializer . The only difference you'll notice when doing so is the BaseSerializer classes will not generate HTML forms in the browsable API. This is because the data they return does not include all the field information that would allow each field to be rendered into a suitable HTML input.","title":"The BaseSerializer class."},{"location":"community/3.0-announcement/#read-only-baseserializer-classes","text":"To implement a read-only serializer using the BaseSerializer class, we just need to override the .to_representation() method. Let's take a look at an example using a simple Django model: class HighScore(models.Model): created = models.DateTimeField(auto_now_add=True) player_name = models.CharField(max_length=10) score = models.IntegerField() It's simple to create a read-only serializer for converting HighScore instances into primitive data types. class HighScoreSerializer(serializers.BaseSerializer): def to_representation(self, obj): return { 'score': obj.score, 'player_name': obj.player_name } We can now use this class to serialize single HighScore instances: @api_view(['GET']) def high_score(request, pk): instance = HighScore.objects.get(pk=pk) serializer = HighScoreSerializer(instance) return Response(serializer.data) Or use it to serialize multiple instances: @api_view(['GET']) def all_high_scores(request): queryset = HighScore.objects.order_by('-score') serializer = HighScoreSerializer(queryset, many=True) return Response(serializer.data)","title":"Read-only BaseSerializer classes."},{"location":"community/3.0-announcement/#read-write-baseserializer-classes","text":"To create a read-write serializer we first need to implement a .to_internal_value() method. This method returns the validated values that will be used to construct the object instance, and may raise a ValidationError if the supplied data is in an incorrect format. Once you've implemented .to_internal_value() , the basic validation API will be available on the serializer, and you will be able to use .is_valid() , .validated_data and .errors . If you want to also support .save() you'll need to also implement either or both of the .create() and .update() methods. Here's a complete example of our previous HighScoreSerializer , that's been updated to support both read and write operations. class HighScoreSerializer(serializers.BaseSerializer): def to_internal_value(self, data): score = data.get('score') player_name = data.get('player_name') # Perform the data validation. if not score: raise ValidationError({ 'score': 'This field is required.' }) if not player_name: raise ValidationError({ 'player_name': 'This field is required.' }) if len(player_name) > 10: raise ValidationError({ 'player_name': 'May not be more than 10 characters.' }) # Return the validated values. This will be available as # the `.validated_data` property. return { 'score': int(score), 'player_name': player_name } def to_representation(self, obj): return { 'score': obj.score, 'player_name': obj.player_name } def create(self, validated_data): return HighScore.objects.create(**validated_data)","title":"Read-write BaseSerializer classes."},{"location":"community/3.0-announcement/#creating-new-generic-serializers-with-baseserializer","text":"The BaseSerializer class is also useful if you want to implement new generic serializer classes for dealing with particular serialization styles, or for integrating with alternative storage backends. The following class is an example of a generic serializer that can handle coercing arbitrary objects into primitive representations. class ObjectSerializer(serializers.BaseSerializer): \"\"\" A read-only serializer that coerces arbitrary complex objects into primitive representations. \"\"\" def to_representation(self, obj): for attribute_name in dir(obj): attribute = getattr(obj, attribute_name) if attribute_name.startswith('_'): # Ignore private attributes. pass elif hasattr(attribute, '__call__'): # Ignore methods and other callables. pass elif isinstance(attribute, (str, int, bool, float, type(None))): # Primitive types can be passed through unmodified. output[attribute_name] = attribute elif isinstance(attribute, list): # Recursively deal with items in lists. output[attribute_name] = [ self.to_representation(item) for item in attribute ] elif isinstance(attribute, dict): # Recursively deal with items in dictionaries. output[attribute_name] = { str(key): self.to_representation(value) for key, value in attribute.items() } else: # Force anything else to its string representation. output[attribute_name] = str(attribute)","title":"Creating new generic serializers with BaseSerializer."},{"location":"community/3.0-announcement/#serializer-fields","text":"","title":"Serializer fields"},{"location":"community/3.0-announcement/#the-field-and-readonly-field-classes","text":"There are some minor tweaks to the field base classes. Previously we had these two base classes: Field as the base class for read-only fields. A default implementation was included for serializing data. WritableField as the base class for read-write fields. We now use the following: Field is the base class for all fields. It does not include any default implementation for either serializing or deserializing data. ReadOnlyField is a concrete implementation for read-only fields that simply returns the attribute value without modification.","title":"The Field and ReadOnly field classes."},{"location":"community/3.0-announcement/#the-required-allow_null-allow_blank-and-default-arguments","text":"REST framework now has more explicit and clear control over validating empty values for fields. Previously the meaning of the required=False keyword argument was underspecified. In practice its use meant that a field could either be not included in the input, or it could be included, but be None or the empty string. We now have a better separation, with separate required , allow_null and allow_blank arguments. The following set of arguments are used to control validation of empty values: required=False : The value does not need to be present in the input, and will not be passed to .create() or .update() if it is not seen. default=<value> : The value does not need to be present in the input, and a default value will be passed to .create() or .update() if it is not seen. allow_null=True : None is a valid input. allow_blank=True : '' is valid input. For CharField and subclasses only. Typically you'll want to use required=False if the corresponding model field has a default value, and additionally set either allow_null=True or allow_blank=True if required. The default argument is also available and always implies that the field is not required to be in the input. It is unnecessary to use the required argument when a default is specified, and doing so will result in an error.","title":"The required, allow_null, allow_blank and default arguments."},{"location":"community/3.0-announcement/#coercing-output-types","text":"The previous field implementations did not forcibly coerce returned values into the correct type in many cases. For example, an IntegerField would return a string output if the attribute value was a string. We now more strictly coerce to the correct return type, leading to more constrained and expected behavior.","title":"Coercing output types."},{"location":"community/3.0-announcement/#removal-of-validate","text":"The .validate() method is now removed from field classes. This method was in any case undocumented and not public API. You should instead simply override to_internal_value() . class UppercaseCharField(serializers.CharField): def to_internal_value(self, data): value = super(UppercaseCharField, self).to_internal_value(data) if value != value.upper(): raise serializers.ValidationError('The input should be uppercase only.') return value Previously validation errors could be raised in either .to_native() or .validate() , making it non-obvious which should be used. Providing only a single point of API ensures more repetition and reinforcement of the core API.","title":"Removal of .validate()."},{"location":"community/3.0-announcement/#the-listfield-class","text":"The ListField class has now been added. This field validates list input. It takes a child keyword argument which is used to specify the field used to validate each item in the list. For example: scores = ListField(child=IntegerField(min_value=0, max_value=100)) You can also use a declarative style to create new subclasses of ListField , like this: class ScoresField(ListField): child = IntegerField(min_value=0, max_value=100) We can now use the ScoresField class inside another serializer: scores = ScoresField() See also the new ListSerializer class, which validates input in the same way, but also includes the serializer interfaces of .is_valid() , .data , .save() and so on.","title":"The ListField class."},{"location":"community/3.0-announcement/#the-choicefield-class-may-now-accept-a-flat-list","text":"The ChoiceField class may now accept a list of choices in addition to the existing style of using a list of pairs of (name, display_value) . The following is now valid: color = ChoiceField(choices=['red', 'green', 'blue'])","title":"The ChoiceField class may now accept a flat list."},{"location":"community/3.0-announcement/#the-multiplechoicefield-class","text":"The MultipleChoiceField class has been added. This field acts like ChoiceField , but returns a set, which may include none, one or many of the valid choices.","title":"The MultipleChoiceField class."},{"location":"community/3.0-announcement/#changes-to-the-custom-field-api","text":"The from_native(self, value) and to_native(self, data) method names have been replaced with the more obviously named to_internal_value(self, data) and to_representation(self, value) . The field_from_native() and field_to_native() methods are removed. Previously you could use these methods if you wanted to customise the behaviour in a way that did not simply lookup the field value from the object. For example... def field_to_native(self, obj, field_name): \"\"\"A custom read-only field that returns the class name.\"\"\" return obj.__class__.__name__ Now if you need to access the entire object you'll instead need to override one or both of the following: Use get_attribute to modify the attribute value passed to to_representation() . Use get_value to modify the data value passed to_internal_value() . For example: def get_attribute(self, obj): # Pass the entire object through to `to_representation()`, # instead of the standard attribute lookup. return obj def to_representation(self, value): return value.__class__.__name__","title":"Changes to the custom field API."},{"location":"community/3.0-announcement/#explicit-queryset-required-on-relational-fields","text":"Previously relational fields that were explicitly declared on a serializer class could omit the queryset argument if (and only if) they were declared on a ModelSerializer . This code would be valid in 2.4.3 : class AccountSerializer(serializers.ModelSerializer): organizations = serializers.SlugRelatedField(slug_field='name') class Meta: model = Account However this code would not be valid in 3.0 : # Missing `queryset` class AccountSerializer(serializers.Serializer): organizations = serializers.SlugRelatedField(slug_field='name') def restore_object(self, attrs, instance=None): # ... The queryset argument is now always required for writable relational fields. This removes some magic and makes it easier and more obvious to move between implicit ModelSerializer classes and explicit Serializer classes. class AccountSerializer(serializers.ModelSerializer): organizations = serializers.SlugRelatedField( slug_field='name', queryset=Organization.objects.all() ) class Meta: model = Account The queryset argument is only ever required for writable fields, and is not required or valid for fields with read_only=True .","title":"Explicit queryset required on relational fields."},{"location":"community/3.0-announcement/#optional-argument-to-serializermethodfield","text":"The argument to SerializerMethodField is now optional, and defaults to get_<field_name> . For example the following is valid: class AccountSerializer(serializers.Serializer): # `method_name='get_billing_details'` by default. billing_details = serializers.SerializerMethodField() def get_billing_details(self, account): return calculate_billing(account) In order to ensure a consistent code style an assertion error will be raised if you include a redundant method name argument that matches the default method name. For example, the following code will raise an error : billing_details = serializers.SerializerMethodField('get_billing_details')","title":"Optional argument to SerializerMethodField."},{"location":"community/3.0-announcement/#enforcing-consistent-source-usage","text":"I've see several codebases that unnecessarily include the source argument, setting it to the same value as the field name. This usage is redundant and confusing, making it less obvious that source is usually not required. The following usage will now raise an error : email = serializers.EmailField(source='email')","title":"Enforcing consistent source usage."},{"location":"community/3.0-announcement/#the-uniquevalidator-and-uniquetogethervalidator-classes","text":"REST framework now provides new validators that allow you to ensure field uniqueness, while still using a completely explicit Serializer class instead of using ModelSerializer . The UniqueValidator should be applied to a serializer field, and takes a single queryset argument. from rest_framework import serializers from rest_framework.validators import UniqueValidator class OrganizationSerializer(serializers.Serializer): url = serializers.HyperlinkedIdentityField(view_name='organization_detail') created = serializers.DateTimeField(read_only=True) name = serializers.CharField( max_length=100, validators=UniqueValidator(queryset=Organization.objects.all()) ) The UniqueTogetherValidator should be applied to a serializer, and takes a queryset argument and a fields argument which should be a list or tuple of field names. class RaceResultSerializer(serializers.Serializer): category = serializers.ChoiceField(['5k', '10k']) position = serializers.IntegerField() name = serializers.CharField(max_length=100) class Meta: validators = [UniqueTogetherValidator( queryset=RaceResult.objects.all(), fields=['category', 'position'] )]","title":"The UniqueValidator and UniqueTogetherValidator classes."},{"location":"community/3.0-announcement/#the-uniquefordatevalidator-classes","text":"REST framework also now includes explicit validator classes for validating the unique_for_date , unique_for_month , and unique_for_year model field constraints. These are used internally instead of calling into Model.full_clean() . These classes are documented in the Validators section of the documentation.","title":"The UniqueForDateValidator classes."},{"location":"community/3.0-announcement/#generic-views","text":"","title":"Generic views"},{"location":"community/3.0-announcement/#simplification-of-view-logic","text":"The view logic for the default method handlers has been significantly simplified, due to the new serializers API.","title":"Simplification of view logic."},{"location":"community/3.0-announcement/#changes-to-prepost-save-hooks","text":"The pre_save and post_save hooks no longer exist, but are replaced with perform_create(self, serializer) and perform_update(self, serializer) . These methods should save the object instance by calling serializer.save() , adding in any additional arguments as required. They may also perform any custom pre-save or post-save behavior. For example: def perform_create(self, serializer): # Include the owner attribute directly, rather than from request data. instance = serializer.save(owner=self.request.user) # Perform a custom post-save action. send_email(instance.to_email, instance.message) The pre_delete and post_delete hooks no longer exist, and are replaced with .perform_destroy(self, instance) , which should delete the instance and perform any custom actions. def perform_destroy(self, instance): # Perform a custom pre-delete action. send_deletion_alert(user=instance.created_by, deleted=instance) # Delete the object instance. instance.delete()","title":"Changes to pre/post save hooks."},{"location":"community/3.0-announcement/#removal-of-view-attributes","text":"The .object and .object_list attributes are no longer set on the view instance. Treating views as mutable object instances that store state during the processing of the view tends to be poor design, and can lead to obscure flow logic. I would personally recommend that developers treat view instances as immutable objects in their application code.","title":"Removal of view attributes."},{"location":"community/3.0-announcement/#put-as-create","text":"Allowing PUT as create operations is problematic, as it necessarily exposes information about the existence or non-existence of objects. It's also not obvious that transparently allowing re-creating of previously deleted instances is necessarily a better default behavior than simply returning 404 responses. Both styles \" PUT as 404\" and \" PUT as create\" can be valid in different circumstances, but we've now opted for the 404 behavior as the default, due to it being simpler and more obvious. If you need to restore the previous behavior you may want to include this AllowPUTAsCreateMixin class as a mixin to your views.","title":"PUT as create."},{"location":"community/3.0-announcement/#customizing-error-responses","text":"The generic views now raise ValidationFailed exception for invalid data. This exception is then dealt with by the exception handler, rather than the view returning a 400 Bad Request response directly. This change means that you can now easily customize the style of error responses across your entire API, without having to modify any of the generic views.","title":"Customizing error responses."},{"location":"community/3.0-announcement/#the-metadata-api","text":"Behavior for dealing with OPTIONS requests was previously built directly into the class-based views. This has now been properly separated out into a Metadata API that allows the same pluggable style as other API policies in REST framework. This makes it far easier to use a different style for OPTIONS responses throughout your API, and makes it possible to create third-party metadata policies.","title":"The metadata API"},{"location":"community/3.0-announcement/#serializers-as-html-forms","text":"REST framework 3.0 includes templated HTML form rendering for serializers. This API should not yet be considered finalized, and will only be promoted to public API for the 3.1 release. Significant changes that you do need to be aware of include: Nested HTML forms are now supported, for example, a UserSerializer with a nested ProfileSerializer will now render a nested fieldset when used in the browsable API. Nested lists of HTML forms are not yet supported, but are planned for 3.1. Because we now use templated HTML form generation, the widget option is no longer available for serializer fields . You can instead control the template that is used for a given field, by using the style dictionary.","title":"Serializers as HTML forms"},{"location":"community/3.0-announcement/#the-style-keyword-argument-for-serializer-fields","text":"The style keyword argument can be used to pass through additional information from a serializer field, to the renderer class. In particular, the HTMLFormRenderer uses the base_template key to determine which template to render the field with. For example, to use a textarea control instead of the default input control, you would use the following\u2026 additional_notes = serializers.CharField( style={'base_template': 'textarea.html'} ) Similarly, to use a radio button control instead of the default select control, you would use the following\u2026 color_channel = serializers.ChoiceField( choices=['red', 'blue', 'green'], style={'base_template': 'radio.html'} ) This API should be considered provisional, and there may be minor alterations with the incoming 3.1 release.","title":"The style keyword argument for serializer fields."},{"location":"community/3.0-announcement/#api-style","text":"There are some improvements in the default style we use in our API responses.","title":"API style"},{"location":"community/3.0-announcement/#unicode-json-by-default","text":"Unicode JSON is now the default. The UnicodeJSONRenderer class no longer exists, and the UNICODE_JSON setting has been added. To revert this behavior use the new setting: REST_FRAMEWORK = { 'UNICODE_JSON': False }","title":"Unicode JSON by default."},{"location":"community/3.0-announcement/#compact-json-by-default","text":"We now output compact JSON in responses by default. For example, we return: {\"email\":\"amy@example.com\",\"is_admin\":true} Instead of the following: {\"email\": \"amy@example.com\", \"is_admin\": true} The COMPACT_JSON setting has been added, and can be used to revert this behavior if needed: REST_FRAMEWORK = { 'COMPACT_JSON': False }","title":"Compact JSON by default."},{"location":"community/3.0-announcement/#file-fields-as-urls","text":"The FileField and ImageField classes are now represented as URLs by default. You should ensure you set Django's standard MEDIA_URL setting appropriately, and ensure your application serves the uploaded files . You can revert this behavior, and display filenames in the representation by using the UPLOADED_FILES_USE_URL settings key: REST_FRAMEWORK = { 'UPLOADED_FILES_USE_URL': False } You can also modify serializer fields individually, using the use_url argument: uploaded_file = serializers.FileField(use_url=False) Also note that you should pass the request object to the serializer as context when instantiating it, so that a fully qualified URL can be returned. Returned URLs will then be of the form https://example.com/url_path/filename.txt . For example: context = {'request': request} serializer = ExampleSerializer(instance, context=context) return Response(serializer.data) If the request is omitted from the context, the returned URLs will be of the form /url_path/filename.txt .","title":"File fields as URLs"},{"location":"community/3.0-announcement/#throttle-headers-using-retry-after","text":"The custom X-Throttle-Wait-Second header has now been dropped in favor of the standard Retry-After header. You can revert this behavior if needed by writing a custom exception handler for your application.","title":"Throttle headers using Retry-After."},{"location":"community/3.0-announcement/#date-and-time-objects-as-iso-8601-strings-in-serializer-data","text":"Date and Time objects are now coerced to strings by default in the serializer output. Previously they were returned as Date , Time and DateTime objects, and later coerced to strings by the renderer. You can modify this behavior globally by settings the existing DATE_FORMAT , DATETIME_FORMAT and TIME_FORMAT settings keys. Setting these values to None instead of their default value of 'iso-8601' will result in native objects being returned in serializer data. REST_FRAMEWORK = { # Return native `Date` and `Time` objects in `serializer.data` 'DATETIME_FORMAT': None 'DATE_FORMAT': None 'TIME_FORMAT': None } You can also modify serializer fields individually, using the date_format , time_format and datetime_format arguments: # Return `DateTime` instances in `serializer.data`, not strings. created = serializers.DateTimeField(format=None)","title":"Date and time objects as ISO-8601 strings in serializer data."},{"location":"community/3.0-announcement/#decimals-as-strings-in-serializer-data","text":"Decimals are now coerced to strings by default in the serializer output. Previously they were returned as Decimal objects, and later coerced to strings by the renderer. You can modify this behavior globally by using the COERCE_DECIMAL_TO_STRING settings key. REST_FRAMEWORK = { 'COERCE_DECIMAL_TO_STRING': False } Or modify it on an individual serializer field, using the coerce_to_string keyword argument. # Return `Decimal` instances in `serializer.data`, not strings. amount = serializers.DecimalField( max_digits=10, decimal_places=2, coerce_to_string=False ) The default JSON renderer will return float objects for un-coerced Decimal instances. This allows you to easily switch between string or float representations for decimals depending on your API design needs.","title":"Decimals as strings in serializer data."},{"location":"community/3.0-announcement/#miscellaneous-notes","text":"The serializer ChoiceField does not currently display nested choices, as was the case in 2.4. This will be address as part of 3.1. Due to the new templated form rendering, the 'widget' option is no longer valid. This means there's no easy way of using third party \"autocomplete\" widgets for rendering select inputs that contain a large number of choices. You'll either need to use a regular select or a plain text input. We may consider addressing this in 3.1 or 3.2 if there's sufficient demand. Some of the default validation error messages were rewritten and might no longer be pre-translated. You can still create language files with Django if you wish to localize them. APIException subclasses could previously take any arbitrary type in the detail argument. These exceptions now use translatable text strings, and as a result call force_text on the detail argument, which must be a string . If you need complex arguments to an APIException class, you should subclass it and override the __init__() method. Typically you'll instead want to use a custom exception handler to provide for non-standard error responses.","title":"Miscellaneous notes"},{"location":"community/3.0-announcement/#whats-coming-next","text":"3.0 is an incremental release, and there are several upcoming features that will build on the baseline improvements that it makes. The 3.1 release is planned to address improvements in the following components: Public API for using serializers as HTML forms. Request parsing, mediatypes & the implementation of the browsable API. Introduction of a new pagination API. Better support for API versioning. The 3.2 release is planned to introduce an alternative admin-style interface to the browsable API. You can follow development on the GitHub site, where we use milestones to indicate planning timescales .","title":"What's coming next"},{"location":"community/3.1-announcement/","text":"Django REST framework 3.1 The 3.1 release is an intermediate step in the Kickstarter project releases, and includes a range of new functionality. Some highlights include: A super-smart cursor pagination scheme. An improved pagination API, supporting header or in-body pagination styles. Pagination controls rendering in the browsable API. Better support for API versioning. Built-in internationalization support. Support for Django 1.8's HStoreField and ArrayField . Pagination The pagination API has been improved, making it both easier to use, and more powerful. A guide to the headline features follows. For full details, see the pagination documentation . Note that as a result of this work a number of settings keys and generic view attributes are now moved to pending deprecation. Controlling pagination styles is now largely handled by overriding a pagination class and modifying its configuration attributes. The PAGINATE_BY settings key will continue to work but is now pending deprecation. The more obviously named PAGE_SIZE settings key should now be used instead. The PAGINATE_BY_PARAM , MAX_PAGINATE_BY settings keys will continue to work but are now pending deprecation, in favor of setting configuration attributes on the configured pagination class. The paginate_by , page_query_param , paginate_by_param and max_paginate_by generic view attributes will continue to work but are now pending deprecation, in favor of setting configuration attributes on the configured pagination class. The pagination_serializer_class view attribute and DEFAULT_PAGINATION_SERIALIZER_CLASS settings key are no longer valid . The pagination API does not use serializers to determine the output format, and you'll need to instead override the get_paginated_response method on a pagination class in order to specify how the output format is controlled. New pagination schemes. Until now, there has only been a single built-in pagination style in REST framework. We now have page, limit/offset and cursor based schemes included by default. The cursor based pagination scheme is particularly smart, and is a better approach for clients iterating through large or frequently changing result sets. The scheme supports paging against non-unique indexes, by using both cursor and limit/offset information. It also allows for both forward and reverse cursor pagination. Much credit goes to David Cramer for this blog post on the subject. Pagination controls in the browsable API. Paginated results now include controls that render directly in the browsable API. If you're using the page or limit/offset style, then you'll see a page based control displayed in the browsable API: The cursor based pagination renders a more simple style of control: Support for header-based pagination. The pagination API was previously only able to alter the pagination style in the body of the response. The API now supports being able to write pagination information in response headers, making it possible to use pagination schemes that use the Link or Content-Range headers. For more information, see the custom pagination styles documentation. Versioning We've made it easier to build versioned APIs . Built-in schemes for versioning include both URL based and Accept header based variations. When using a URL based scheme, hyperlinked serializers will resolve relationships to the same API version as used on the incoming request. For example, when using NamespaceVersioning , and the following hyperlinked serializer: class AccountsSerializer(serializer.HyperlinkedModelSerializer): class Meta: model = Accounts fields = ['account_name', 'users'] The output representation would match the version used on the incoming request. Like so: GET http://example.org/v2/accounts/10 # Version 'v2' { \"account_name\": \"europa\", \"users\": [ \"http://example.org/v2/users/12\", # Version 'v2' \"http://example.org/v2/users/54\", \"http://example.org/v2/users/87\" ] } Internationalization REST framework now includes a built-in set of translations, and supports internationalized error responses . This allows you to either change the default language, or to allow clients to specify the language via the Accept-Language header. You can change the default language by using the standard Django LANGUAGE_CODE setting: LANGUAGE_CODE = \"es-es\" You can turn on per-request language requests by adding LocalMiddleware to your MIDDLEWARE_CLASSES setting: MIDDLEWARE_CLASSES = [ ... 'django.middleware.locale.LocaleMiddleware' ] When per-request internationalization is enabled, client requests will respect the Accept-Language header where possible. For example, let's make a request for an unsupported media type: Request GET /api/users HTTP/1.1 Accept: application/xml Accept-Language: es-es Host: example.org Response HTTP/1.0 406 NOT ACCEPTABLE { \"detail\": \"No se ha podido satisfacer la solicitud de cabecera de Accept.\" } Note that the structure of the error responses is still the same. We still have a detail key in the response. If needed you can modify this behavior too, by using a custom exception handler . We include built-in translations both for standard exception cases, and for serializer validation errors. The full list of supported languages can be found on our Transifex project page . If you only wish to support a subset of the supported languages, use Django's standard LANGUAGES setting: LANGUAGES = [ ('de', _('German')), ('en', _('English')), ] For more details, see the internationalization documentation . Many thanks to Craig Blaszczyk for helping push this through. New field types Django 1.8's new ArrayField , HStoreField and UUIDField are now all fully supported. This work also means that we now have both serializers.DictField() , and serializers.ListField() types, allowing you to express and validate a wider set of representations. If you're building a new 1.8 project, then you should probably consider using UUIDField as the primary keys for all your models. This style will work automatically with hyperlinked serializers, returning URLs in the following style: http://example.org/api/purchases/9b1a433f-e90d-4948-848b-300fdc26365d ModelSerializer API The serializer redesign in 3.0 did not include any public API for modifying how ModelSerializer classes automatically generate a set of fields from a given mode class. We've now re-introduced an API for this, allowing you to create new ModelSerializer base classes that behave differently, such as using a different default style for relationships. For more information, see the documentation on customizing field mappings for ModelSerializer classes. Moving packages out of core We've now moved a number of packages out of the core of REST framework, and into separately installable packages. If you're currently using these you don't need to worry, you simply need to pip install the new packages, and change any import paths. We're making this change in order to help distribute the maintenance workload, and keep better focus of the core essentials of the framework. The change also means we can be more flexible with which external packages we recommend. For example, the excellently maintained Django OAuth toolkit has now been promoted as our recommended option for integrating OAuth support. The following packages are now moved out of core and should be separately installed: OAuth - djangorestframework-oauth XML - djangorestframework-xml YAML - djangorestframework-yaml JSONP - djangorestframework-jsonp It's worth reiterating that this change in policy shouldn't mean any work in your codebase other than adding a new requirement and modifying some import paths. For example to install XML rendering, you would now do: pip install djangorestframework-xml And modify your settings, like so: REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer', 'rest_framework_xml.renderers.XMLRenderer' ] } Thanks go to the latest member of our maintenance team, Jos\u00e9 Padilla , for handling this work and taking on ownership of these packages. Deprecations The request.DATA , request.FILES and request.QUERY_PARAMS attributes move from pending deprecation, to deprecated. Use request.data and request.query_params instead, as discussed in the 3.0 release notes. The ModelSerializer Meta options for write_only_fields , view_name and lookup_field are also moved from pending deprecation, to deprecated. Use extra_kwargs instead, as discussed in the 3.0 release notes. All these attributes and options will still work in 3.1, but their usage will raise a warning. They will be fully removed in 3.2. What's next? The next focus will be on HTML renderings of API output and will include: HTML form rendering of serializers. Filtering controls built-in to the browsable API. An alternative admin-style interface. This will either be made as a single 3.2 release, or split across two separate releases, with the HTML forms and filter controls coming in 3.2, and the admin-style interface coming in a 3.3 release.","title":"3.1 Announcement"},{"location":"community/3.1-announcement/#django-rest-framework-31","text":"The 3.1 release is an intermediate step in the Kickstarter project releases, and includes a range of new functionality. Some highlights include: A super-smart cursor pagination scheme. An improved pagination API, supporting header or in-body pagination styles. Pagination controls rendering in the browsable API. Better support for API versioning. Built-in internationalization support. Support for Django 1.8's HStoreField and ArrayField .","title":"Django REST framework 3.1"},{"location":"community/3.1-announcement/#pagination","text":"The pagination API has been improved, making it both easier to use, and more powerful. A guide to the headline features follows. For full details, see the pagination documentation . Note that as a result of this work a number of settings keys and generic view attributes are now moved to pending deprecation. Controlling pagination styles is now largely handled by overriding a pagination class and modifying its configuration attributes. The PAGINATE_BY settings key will continue to work but is now pending deprecation. The more obviously named PAGE_SIZE settings key should now be used instead. The PAGINATE_BY_PARAM , MAX_PAGINATE_BY settings keys will continue to work but are now pending deprecation, in favor of setting configuration attributes on the configured pagination class. The paginate_by , page_query_param , paginate_by_param and max_paginate_by generic view attributes will continue to work but are now pending deprecation, in favor of setting configuration attributes on the configured pagination class. The pagination_serializer_class view attribute and DEFAULT_PAGINATION_SERIALIZER_CLASS settings key are no longer valid . The pagination API does not use serializers to determine the output format, and you'll need to instead override the get_paginated_response method on a pagination class in order to specify how the output format is controlled.","title":"Pagination"},{"location":"community/3.1-announcement/#new-pagination-schemes","text":"Until now, there has only been a single built-in pagination style in REST framework. We now have page, limit/offset and cursor based schemes included by default. The cursor based pagination scheme is particularly smart, and is a better approach for clients iterating through large or frequently changing result sets. The scheme supports paging against non-unique indexes, by using both cursor and limit/offset information. It also allows for both forward and reverse cursor pagination. Much credit goes to David Cramer for this blog post on the subject.","title":"New pagination schemes."},{"location":"community/3.1-announcement/#pagination-controls-in-the-browsable-api","text":"Paginated results now include controls that render directly in the browsable API. If you're using the page or limit/offset style, then you'll see a page based control displayed in the browsable API: The cursor based pagination renders a more simple style of control:","title":"Pagination controls in the browsable API."},{"location":"community/3.1-announcement/#support-for-header-based-pagination","text":"The pagination API was previously only able to alter the pagination style in the body of the response. The API now supports being able to write pagination information in response headers, making it possible to use pagination schemes that use the Link or Content-Range headers. For more information, see the custom pagination styles documentation.","title":"Support for header-based pagination."},{"location":"community/3.1-announcement/#versioning","text":"We've made it easier to build versioned APIs . Built-in schemes for versioning include both URL based and Accept header based variations. When using a URL based scheme, hyperlinked serializers will resolve relationships to the same API version as used on the incoming request. For example, when using NamespaceVersioning , and the following hyperlinked serializer: class AccountsSerializer(serializer.HyperlinkedModelSerializer): class Meta: model = Accounts fields = ['account_name', 'users'] The output representation would match the version used on the incoming request. Like so: GET http://example.org/v2/accounts/10 # Version 'v2' { \"account_name\": \"europa\", \"users\": [ \"http://example.org/v2/users/12\", # Version 'v2' \"http://example.org/v2/users/54\", \"http://example.org/v2/users/87\" ] }","title":"Versioning"},{"location":"community/3.1-announcement/#internationalization","text":"REST framework now includes a built-in set of translations, and supports internationalized error responses . This allows you to either change the default language, or to allow clients to specify the language via the Accept-Language header. You can change the default language by using the standard Django LANGUAGE_CODE setting: LANGUAGE_CODE = \"es-es\" You can turn on per-request language requests by adding LocalMiddleware to your MIDDLEWARE_CLASSES setting: MIDDLEWARE_CLASSES = [ ... 'django.middleware.locale.LocaleMiddleware' ] When per-request internationalization is enabled, client requests will respect the Accept-Language header where possible. For example, let's make a request for an unsupported media type: Request GET /api/users HTTP/1.1 Accept: application/xml Accept-Language: es-es Host: example.org Response HTTP/1.0 406 NOT ACCEPTABLE { \"detail\": \"No se ha podido satisfacer la solicitud de cabecera de Accept.\" } Note that the structure of the error responses is still the same. We still have a detail key in the response. If needed you can modify this behavior too, by using a custom exception handler . We include built-in translations both for standard exception cases, and for serializer validation errors. The full list of supported languages can be found on our Transifex project page . If you only wish to support a subset of the supported languages, use Django's standard LANGUAGES setting: LANGUAGES = [ ('de', _('German')), ('en', _('English')), ] For more details, see the internationalization documentation . Many thanks to Craig Blaszczyk for helping push this through.","title":"Internationalization"},{"location":"community/3.1-announcement/#new-field-types","text":"Django 1.8's new ArrayField , HStoreField and UUIDField are now all fully supported. This work also means that we now have both serializers.DictField() , and serializers.ListField() types, allowing you to express and validate a wider set of representations. If you're building a new 1.8 project, then you should probably consider using UUIDField as the primary keys for all your models. This style will work automatically with hyperlinked serializers, returning URLs in the following style: http://example.org/api/purchases/9b1a433f-e90d-4948-848b-300fdc26365d","title":"New field types"},{"location":"community/3.1-announcement/#modelserializer-api","text":"The serializer redesign in 3.0 did not include any public API for modifying how ModelSerializer classes automatically generate a set of fields from a given mode class. We've now re-introduced an API for this, allowing you to create new ModelSerializer base classes that behave differently, such as using a different default style for relationships. For more information, see the documentation on customizing field mappings for ModelSerializer classes.","title":"ModelSerializer API"},{"location":"community/3.1-announcement/#moving-packages-out-of-core","text":"We've now moved a number of packages out of the core of REST framework, and into separately installable packages. If you're currently using these you don't need to worry, you simply need to pip install the new packages, and change any import paths. We're making this change in order to help distribute the maintenance workload, and keep better focus of the core essentials of the framework. The change also means we can be more flexible with which external packages we recommend. For example, the excellently maintained Django OAuth toolkit has now been promoted as our recommended option for integrating OAuth support. The following packages are now moved out of core and should be separately installed: OAuth - djangorestframework-oauth XML - djangorestframework-xml YAML - djangorestframework-yaml JSONP - djangorestframework-jsonp It's worth reiterating that this change in policy shouldn't mean any work in your codebase other than adding a new requirement and modifying some import paths. For example to install XML rendering, you would now do: pip install djangorestframework-xml And modify your settings, like so: REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.BrowsableAPIRenderer', 'rest_framework_xml.renderers.XMLRenderer' ] } Thanks go to the latest member of our maintenance team, Jos\u00e9 Padilla , for handling this work and taking on ownership of these packages.","title":"Moving packages out of core"},{"location":"community/3.1-announcement/#deprecations","text":"The request.DATA , request.FILES and request.QUERY_PARAMS attributes move from pending deprecation, to deprecated. Use request.data and request.query_params instead, as discussed in the 3.0 release notes. The ModelSerializer Meta options for write_only_fields , view_name and lookup_field are also moved from pending deprecation, to deprecated. Use extra_kwargs instead, as discussed in the 3.0 release notes. All these attributes and options will still work in 3.1, but their usage will raise a warning. They will be fully removed in 3.2.","title":"Deprecations"},{"location":"community/3.1-announcement/#whats-next","text":"The next focus will be on HTML renderings of API output and will include: HTML form rendering of serializers. Filtering controls built-in to the browsable API. An alternative admin-style interface. This will either be made as a single 3.2 release, or split across two separate releases, with the HTML forms and filter controls coming in 3.2, and the admin-style interface coming in a 3.3 release.","title":"What's next?"},{"location":"community/3.10-announcement/","text":".promo li a { float: left; width: 130px; height: 20px; text-align: center; margin: 10px 30px; padding: 150px 0 0 0; background-position: 0 50%; background-size: 130px auto; background-repeat: no-repeat; font-size: 120%; color: black; } .promo li { list-style: none; } Django REST framework 3.10 The 3.10 release drops support for Python 2. Our supported Python versions are now: 3.5, 3.6, and 3.7. Our supported Django versions are now: 1.11, 2.0, 2.1, and 2.2. OpenAPI Schema Generation Since we first introduced schema support in Django REST Framework 3.5, OpenAPI has emerged as the widely adopted standard for modeling Web APIs. This release begins the deprecation process for the CoreAPI based schema generation, and introduces OpenAPI schema generation in its place. Continuing to use CoreAPI If you're currently using the CoreAPI schemas, you'll need to make sure to update your REST framework settings to include DEFAULT_SCHEMA_CLASS explicitly. settings.py : REST_FRAMEWORK = { ... 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema' } You'll still be able to keep using CoreAPI schemas, API docs, and client for the foreseeable future. We'll aim to ensure that the CoreAPI schema generator remains available as a third party package, even once it has eventually been removed from REST framework, scheduled for version 3.12. We have removed the old documentation for the CoreAPI based schema generation. You may view the Legacy CoreAPI documentation here . OpenAPI Quickstart You can generate a static OpenAPI schema, using the generateschema management command. Alternately, to have the project serve an API schema, use the get_schema_view() shortcut. In your urls.py : from rest_framework.schemas import get_schema_view urlpatterns = [ # ... # Use the `get_schema_view()` helper to add a `SchemaView` to project URLs. # * `title` and `description` parameters are passed to `SchemaGenerator`. # * Provide view name for use with `reverse()`. path('openapi', get_schema_view( title=\"Your Project\", description=\"API for all things \u2026\" ), name='openapi-schema'), # ... ] Customization For customizations that you want to apply across the entire API, you can subclass rest_framework.schemas.openapi.SchemaGenerator and provide it as an argument to the generateschema command or get_schema_view() helper function. For specific per-view customizations, you can subclass AutoSchema , making sure to set schema = <YourCustomClass> on the view. For more details, see the API Schema documentation . API Documentation There are some great third party options for documenting your API, based on the OpenAPI schema. See the Documenting you API section for more details. Feature Roadmap Given that our OpenAPI schema generation is a new feature, it's likely that there will still be some iterative improvements for us to make. There will be two main cases here: Expanding the supported range of OpenAPI schemas that are generated by default. Improving the ability for developers to customize the output. We'll aim to bring the first type of change quickly in point releases. For the second kind we'd like to adopt a slower approach, to make sure we keep the API simple, and as widely applicable as possible, before we bring in API changes. It's also possible that we'll end up implementing API documentation and API client tooling that are driven by the OpenAPI schema. The apistar project has a significant amount of work towards this. However, if we do so, we'll plan on keeping any tooling outside of the core framework. Funding REST framework is a collaboratively funded project . If you use REST framework commercially we strongly encourage you to invest in its continued development by signing up for a paid plan . Every single sign-up helps us make REST framework long-term financially sustainable. Sentry Stream ESG Rollbar Cadre Kloudless Lights On Software Many thanks to all our wonderful sponsors , and in particular to our premium backers, Sentry , Stream , ESG , Rollbar , Cadre , Kloudless , and Lights On Software .","title":"3.10 Announcement"},{"location":"community/3.10-announcement/#django-rest-framework-310","text":"The 3.10 release drops support for Python 2. Our supported Python versions are now: 3.5, 3.6, and 3.7. Our supported Django versions are now: 1.11, 2.0, 2.1, and 2.2.","title":"Django REST framework 3.10"},{"location":"community/3.10-announcement/#openapi-schema-generation","text":"Since we first introduced schema support in Django REST Framework 3.5, OpenAPI has emerged as the widely adopted standard for modeling Web APIs. This release begins the deprecation process for the CoreAPI based schema generation, and introduces OpenAPI schema generation in its place.","title":"OpenAPI Schema Generation"},{"location":"community/3.10-announcement/#continuing-to-use-coreapi","text":"If you're currently using the CoreAPI schemas, you'll need to make sure to update your REST framework settings to include DEFAULT_SCHEMA_CLASS explicitly. settings.py : REST_FRAMEWORK = { ... 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema' } You'll still be able to keep using CoreAPI schemas, API docs, and client for the foreseeable future. We'll aim to ensure that the CoreAPI schema generator remains available as a third party package, even once it has eventually been removed from REST framework, scheduled for version 3.12. We have removed the old documentation for the CoreAPI based schema generation. You may view the Legacy CoreAPI documentation here .","title":"Continuing to use CoreAPI"},{"location":"community/3.10-announcement/#openapi-quickstart","text":"You can generate a static OpenAPI schema, using the generateschema management command. Alternately, to have the project serve an API schema, use the get_schema_view() shortcut. In your urls.py : from rest_framework.schemas import get_schema_view urlpatterns = [ # ... # Use the `get_schema_view()` helper to add a `SchemaView` to project URLs. # * `title` and `description` parameters are passed to `SchemaGenerator`. # * Provide view name for use with `reverse()`. path('openapi', get_schema_view( title=\"Your Project\", description=\"API for all things \u2026\" ), name='openapi-schema'), # ... ]","title":"OpenAPI Quickstart"},{"location":"community/3.10-announcement/#customization","text":"For customizations that you want to apply across the entire API, you can subclass rest_framework.schemas.openapi.SchemaGenerator and provide it as an argument to the generateschema command or get_schema_view() helper function. For specific per-view customizations, you can subclass AutoSchema , making sure to set schema = <YourCustomClass> on the view. For more details, see the API Schema documentation .","title":"Customization"},{"location":"community/3.10-announcement/#api-documentation","text":"There are some great third party options for documenting your API, based on the OpenAPI schema. See the Documenting you API section for more details.","title":"API Documentation"},{"location":"community/3.10-announcement/#feature-roadmap","text":"Given that our OpenAPI schema generation is a new feature, it's likely that there will still be some iterative improvements for us to make. There will be two main cases here: Expanding the supported range of OpenAPI schemas that are generated by default. Improving the ability for developers to customize the output. We'll aim to bring the first type of change quickly in point releases. For the second kind we'd like to adopt a slower approach, to make sure we keep the API simple, and as widely applicable as possible, before we bring in API changes. It's also possible that we'll end up implementing API documentation and API client tooling that are driven by the OpenAPI schema. The apistar project has a significant amount of work towards this. However, if we do so, we'll plan on keeping any tooling outside of the core framework.","title":"Feature Roadmap"},{"location":"community/3.10-announcement/#funding","text":"REST framework is a collaboratively funded project . If you use REST framework commercially we strongly encourage you to invest in its continued development by signing up for a paid plan . Every single sign-up helps us make REST framework long-term financially sustainable. Sentry Stream ESG Rollbar Cadre Kloudless Lights On Software Many thanks to all our wonderful sponsors , and in particular to our premium backers, Sentry , Stream , ESG , Rollbar , Cadre , Kloudless , and Lights On Software .","title":"Funding"},{"location":"community/3.11-announcement/","text":".promo li a { float: left; width: 130px; height: 20px; text-align: center; margin: 10px 30px; padding: 150px 0 0 0; background-position: 0 50%; background-size: 130px auto; background-repeat: no-repeat; font-size: 120%; color: black; } .promo li { list-style: none; } Django REST framework 3.11 The 3.11 release adds support for Django 3.0. Our supported Python versions are now: 3.5, 3.6, 3.7, and 3.8. Our supported Django versions are now: 1.11, 2.0, 2.1, 2.2, and 3.0. This release will be the last to support Python 3.5 or Django 1.11. OpenAPI Schema Generation Improvements The OpenAPI schema generation continues to mature. Some highlights in 3.11 include: Automatic mapping of Django REST Framework renderers and parsers into OpenAPI request and response media-types. Improved mapping JSON schema mapping types, for example in HStoreFields, and with large integer values. Porting of the old CoreAPI parsing of docstrings to form OpenAPI operation descriptions. In this example view operation descriptions for the get and post methods will be extracted from the class docstring: class DocStringExampleListView(APIView): \"\"\" get: A description of my GET operation. post: A description of my POST operation. \"\"\" permission_classes = [permissions.IsAuthenticatedOrReadOnly] def get(self, request, *args, **kwargs): ... def post(self, request, *args, **kwargs): ... Validator / Default Context In some circumstances a Validator class or a Default class may need to access the serializer field with which it is called, or the .context with which the serializer was instantiated. In particular: Uniqueness validators need to be able to determine the name of the field to which they are applied, in order to run an appropriate database query. The CurrentUserDefault needs to be able to determine the context with which the serializer was instantiated, in order to return the current user instance. Previous our approach to this was that implementations could include a set_context method, which would be called prior to validation. However this approach had issues with potential race conditions. We have now move this approach into a pending deprecation state. It will continue to function, but will be escalated to a deprecated state in 3.12, and removed entirely in 3.13. Instead, validators or defaults which require the serializer context, should include a requires_context = True attribute on the class. The __call__ method should then include an additional serializer_field argument. Validator implementations will look like this: class CustomValidator: requires_context = True def __call__(self, value, serializer_field): ... Default implementations will look like this: class CustomDefault: requires_context = True def __call__(self, serializer_field): ... Funding REST framework is a collaboratively funded project . If you use REST framework commercially we strongly encourage you to invest in its continued development by signing up for a paid plan . Every single sign-up helps us make REST framework long-term financially sustainable. Sentry Stream ESG Rollbar Cadre Kloudless Lights On Software Retool Many thanks to all our wonderful sponsors , and in particular to our premium backers, Sentry , Stream , ESG , Rollbar , Cadre , Kloudless , Lights On Software , and Retool .","title":"3.11 Announcement"},{"location":"community/3.11-announcement/#django-rest-framework-311","text":"The 3.11 release adds support for Django 3.0. Our supported Python versions are now: 3.5, 3.6, 3.7, and 3.8. Our supported Django versions are now: 1.11, 2.0, 2.1, 2.2, and 3.0. This release will be the last to support Python 3.5 or Django 1.11.","title":"Django REST framework 3.11"},{"location":"community/3.11-announcement/#openapi-schema-generation-improvements","text":"The OpenAPI schema generation continues to mature. Some highlights in 3.11 include: Automatic mapping of Django REST Framework renderers and parsers into OpenAPI request and response media-types. Improved mapping JSON schema mapping types, for example in HStoreFields, and with large integer values. Porting of the old CoreAPI parsing of docstrings to form OpenAPI operation descriptions. In this example view operation descriptions for the get and post methods will be extracted from the class docstring: class DocStringExampleListView(APIView): \"\"\" get: A description of my GET operation. post: A description of my POST operation. \"\"\" permission_classes = [permissions.IsAuthenticatedOrReadOnly] def get(self, request, *args, **kwargs): ... def post(self, request, *args, **kwargs): ...","title":"OpenAPI Schema Generation Improvements"},{"location":"community/3.11-announcement/#validator-default-context","text":"In some circumstances a Validator class or a Default class may need to access the serializer field with which it is called, or the .context with which the serializer was instantiated. In particular: Uniqueness validators need to be able to determine the name of the field to which they are applied, in order to run an appropriate database query. The CurrentUserDefault needs to be able to determine the context with which the serializer was instantiated, in order to return the current user instance. Previous our approach to this was that implementations could include a set_context method, which would be called prior to validation. However this approach had issues with potential race conditions. We have now move this approach into a pending deprecation state. It will continue to function, but will be escalated to a deprecated state in 3.12, and removed entirely in 3.13. Instead, validators or defaults which require the serializer context, should include a requires_context = True attribute on the class. The __call__ method should then include an additional serializer_field argument. Validator implementations will look like this: class CustomValidator: requires_context = True def __call__(self, value, serializer_field): ... Default implementations will look like this: class CustomDefault: requires_context = True def __call__(self, serializer_field): ...","title":"Validator / Default Context"},{"location":"community/3.11-announcement/#funding","text":"REST framework is a collaboratively funded project . If you use REST framework commercially we strongly encourage you to invest in its continued development by signing up for a paid plan . Every single sign-up helps us make REST framework long-term financially sustainable. Sentry Stream ESG Rollbar Cadre Kloudless Lights On Software Retool Many thanks to all our wonderful sponsors , and in particular to our premium backers, Sentry , Stream , ESG , Rollbar , Cadre , Kloudless , Lights On Software , and Retool .","title":"Funding"},{"location":"community/3.12-announcement/","text":".promo li a { float: left; width: 130px; height: 20px; text-align: center; margin: 10px 30px; padding: 150px 0 0 0; background-position: 0 50%; background-size: 130px auto; background-repeat: no-repeat; font-size: 120%; color: black; } .promo li { list-style: none; } Django REST framework 3.12 REST framework 3.12 brings a handful of refinements to the OpenAPI schema generation, plus support for Django's new database-agnostic JSONField , and some improvements to the SearchFilter class. Grouping operations with tags. Open API schemas will now automatically include tags, based on the first element in the URL path. For example... Method Path Tags GET , PUT , PATCH , DELETE /users/{id}/ ['users'] GET , POST /users/ ['users'] GET , PUT , PATCH , DELETE /orders/{id}/ ['orders'] GET , POST /orders/ ['orders'] The tags used for a particular view may also be overridden... class MyOrders(APIView): schema = AutoSchema(tags=['users', 'orders']) ... See the schema documentation for more information. Customizing the operation ID. REST framework automatically determines operation IDs to use in OpenAPI schemas. The latest version provides more control for overriding the behaviour used to generate the operation IDs. See the schema documentation for more information. Support for OpenAPI components. In order to output more graceful OpenAPI schemes, REST framework 3.12 now defines components in the schema, and then references them inside request and response objects. This is in contrast with the previous approach, which fully expanded the request and response bodies for each operation. The names used for a component default to using the serializer class name, but may be overridden if needed ... class MyOrders(APIView): schema = AutoSchema(component_name=\"OrderDetails\") More Public API Many methods on the AutoSchema class have now been promoted to public API, allowing you to more fully customize the schema generation. The following methods are now available for overriding... get_path_parameters get_pagination_parameters get_filter_parameters get_request_body get_responses get_serializer get_paginator map_serializer map_field map_choice_field map_field_validators allows_filters . See the schema docs for details on using custom AutoSchema subclasses. Support for JSONField. Django 3.1 deprecated the existing django.contrib.postgres.fields.JSONField in favour of a new database-agnositic JSONField . REST framework 3.12 now supports this new model field, and ModelSerializer classes will correctly map the model field. SearchFilter improvements There are a couple of significant improvements to the SearchFilter class. Nested searches against JSONField and HStoreField The class now supports nested search within JSONField and HStoreField , using the double underscore notation for traversing which element of the field the search should apply to. class SitesSearchView(generics.ListAPIView): \"\"\" An API view to return a list of archaeological sites, optionally filtered by a search against the site name or location. (Location searches are matched against the region and country names.) \"\"\" queryset = Sites.objects.all() serializer_class = SitesSerializer filter_backends = [filters.SearchFilter] search_fields = ['site_name', 'location__region', 'location__country'] Searches against annotate fields Django allows querysets to create additional virtual fields, using the .annotate method. We now support searching against annotate fields. class PublisherSearchView(generics.ListAPIView): \"\"\" Search for publishers, optionally filtering the search against the average rating of all their books. \"\"\" queryset = Publisher.objects.annotate(avg_rating=Avg('book__rating')) serializer_class = PublisherSerializer filter_backends = [filters.SearchFilter] search_fields = ['avg_rating'] Funding REST framework is a collaboratively funded project . If you use REST framework commercially we strongly encourage you to invest in its continued development by signing up for a paid plan . Every single sign-up helps us make REST framework long-term financially sustainable. Sentry Stream ESG Rollbar Cadre Kloudless Lights On Software Retool Many thanks to all our wonderful sponsors , and in particular to our premium backers, Sentry , Stream , ESG , Rollbar , Cadre , Kloudless , Lights On Software , and Retool .","title":"3.12 Announcement"},{"location":"community/3.12-announcement/#django-rest-framework-312","text":"REST framework 3.12 brings a handful of refinements to the OpenAPI schema generation, plus support for Django's new database-agnostic JSONField , and some improvements to the SearchFilter class.","title":"Django REST framework 3.12"},{"location":"community/3.12-announcement/#grouping-operations-with-tags","text":"Open API schemas will now automatically include tags, based on the first element in the URL path. For example... Method Path Tags GET , PUT , PATCH , DELETE /users/{id}/ ['users'] GET , POST /users/ ['users'] GET , PUT , PATCH , DELETE /orders/{id}/ ['orders'] GET , POST /orders/ ['orders'] The tags used for a particular view may also be overridden... class MyOrders(APIView): schema = AutoSchema(tags=['users', 'orders']) ... See the schema documentation for more information.","title":"Grouping operations with tags."},{"location":"community/3.12-announcement/#customizing-the-operation-id","text":"REST framework automatically determines operation IDs to use in OpenAPI schemas. The latest version provides more control for overriding the behaviour used to generate the operation IDs. See the schema documentation for more information.","title":"Customizing the operation ID."},{"location":"community/3.12-announcement/#support-for-openapi-components","text":"In order to output more graceful OpenAPI schemes, REST framework 3.12 now defines components in the schema, and then references them inside request and response objects. This is in contrast with the previous approach, which fully expanded the request and response bodies for each operation. The names used for a component default to using the serializer class name, but may be overridden if needed ... class MyOrders(APIView): schema = AutoSchema(component_name=\"OrderDetails\")","title":"Support for OpenAPI components."},{"location":"community/3.12-announcement/#more-public-api","text":"Many methods on the AutoSchema class have now been promoted to public API, allowing you to more fully customize the schema generation. The following methods are now available for overriding... get_path_parameters get_pagination_parameters get_filter_parameters get_request_body get_responses get_serializer get_paginator map_serializer map_field map_choice_field map_field_validators allows_filters . See the schema docs for details on using custom AutoSchema subclasses.","title":"More Public API"},{"location":"community/3.12-announcement/#support-for-jsonfield","text":"Django 3.1 deprecated the existing django.contrib.postgres.fields.JSONField in favour of a new database-agnositic JSONField . REST framework 3.12 now supports this new model field, and ModelSerializer classes will correctly map the model field.","title":"Support for JSONField."},{"location":"community/3.12-announcement/#searchfilter-improvements","text":"There are a couple of significant improvements to the SearchFilter class.","title":"SearchFilter improvements"},{"location":"community/3.12-announcement/#nested-searches-against-jsonfield-and-hstorefield","text":"The class now supports nested search within JSONField and HStoreField , using the double underscore notation for traversing which element of the field the search should apply to. class SitesSearchView(generics.ListAPIView): \"\"\" An API view to return a list of archaeological sites, optionally filtered by a search against the site name or location. (Location searches are matched against the region and country names.) \"\"\" queryset = Sites.objects.all() serializer_class = SitesSerializer filter_backends = [filters.SearchFilter] search_fields = ['site_name', 'location__region', 'location__country']","title":"Nested searches against JSONField and HStoreField"},{"location":"community/3.12-announcement/#searches-against-annotate-fields","text":"Django allows querysets to create additional virtual fields, using the .annotate method. We now support searching against annotate fields. class PublisherSearchView(generics.ListAPIView): \"\"\" Search for publishers, optionally filtering the search against the average rating of all their books. \"\"\" queryset = Publisher.objects.annotate(avg_rating=Avg('book__rating')) serializer_class = PublisherSerializer filter_backends = [filters.SearchFilter] search_fields = ['avg_rating']","title":"Searches against annotate fields"},{"location":"community/3.12-announcement/#funding","text":"REST framework is a collaboratively funded project . If you use REST framework commercially we strongly encourage you to invest in its continued development by signing up for a paid plan . Every single sign-up helps us make REST framework long-term financially sustainable. Sentry Stream ESG Rollbar Cadre Kloudless Lights On Software Retool Many thanks to all our wonderful sponsors , and in particular to our premium backers, Sentry , Stream , ESG , Rollbar , Cadre , Kloudless , Lights On Software , and Retool .","title":"Funding"},{"location":"community/3.2-announcement/","text":"Django REST framework 3.2 The 3.2 release is the first version to include an admin interface for the browsable API. This interface is intended to act as a more user-friendly interface to the API. It can be used either as a replacement to the existing BrowsableAPIRenderer , or used together with it, allowing you to switch between the two styles as required. We've also fixed a huge number of issues, and made numerous cleanups and improvements. Over the course of the 3.1.x series we've resolved nearly 600 tickets on our GitHub issue tracker. This means we're currently running at a rate of closing around 100 issues or pull requests per month . None of this would have been possible without the support of our wonderful Kickstarter backers. If you're looking for a job in Django development we'd strongly recommend taking a look through our sponsors and finding out who's hiring. AdminRenderer To include AdminRenderer simply add it to your settings: REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.AdminRenderer', 'rest_framework.renderers.BrowsableAPIRenderer' ], 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 100 } There are some limitations to the AdminRenderer , in particular it is not yet able to handle list or dictionary inputs, as we do not have any HTML form fields that support those. Also note that this is an initial release and we do not yet have a public API for modifying the behavior or documentation on overriding the templates. The idea is to get this released to users early, so we can start getting feedback and release a more fully featured version in 3.3. Supported versions This release drops support for Django 1.4. Our supported Django versions are now 1.5.6+, 1.6.3+, 1.7 and 1.8. Deprecations There are no new deprecations in 3.2, although a number of existing deprecations have now escalated in line with our deprecation policy. request.DATA was put on the deprecation path in 3.0. It has now been removed and its usage will result in an error. Use the more pythonic style of request.data instead. request.QUERY_PARAMS was put on the deprecation path in 3.0. It has now been removed and its usage will result in an error. Use the more pythonic style of request.query_params instead. The following ModelSerializer.Meta options have now been removed: write_only_fields , view_name , lookup_field . Use the more general extra_kwargs option instead. The following pagination view attributes and settings have been moved into attributes on the pagination class since 3.1. Their usage was formerly in 'pending deprecation', and has now escalated to 'deprecated'. They will continue to function but will raise errors. view.paginate_by - Use paginator.page_size instead. view.page_query_param - Use paginator.page_query_param instead. view.paginate_by_param - Use paginator.page_size_query_param instead. view.max_paginate_by - Use paginator.max_page_size instead. settings.PAGINATE_BY - Use paginator.page_size instead. settings.PAGINATE_BY_PARAM - Use paginator.page_size_query_param instead. settings.MAX_PAGINATE_BY - Use paginator.max_page_size instead. Modifications to list behaviors There are a couple of bug fixes that are worth calling out as they introduce differing behavior. These are a little subtle and probably won't affect most users, but are worth understanding before upgrading your project. ManyToMany fields and blank=True We've now added an allow_empty argument, which can be used with ListSerializer , or with many=True relationships. This is True by default, but can be set to False if you want to disallow empty lists as valid input. As a follow-up to this we are now able to properly mirror the behavior of Django's ModelForm with respect to how many-to-many fields are validated. Previously a many-to-many field on a model would map to a serializer field that would allow either empty or non-empty list inputs. Now, a many-to-many field will map to a serializer field that requires at least one input, unless the model field has blank=True set. Here's what the mapping looks like in practice: models.ManyToManyField() \u2192 serializers.PrimaryKeyRelatedField(many=True, allow_empty=False) models.ManyToManyField(blank=True) \u2192 serializers.PrimaryKeyRelatedField(many=True) The upshot is this: If you have many to many fields in your models, then make sure you've included the argument blank=True if you want to allow empty inputs in the equivalent ModelSerializer fields. List fields and allow_null When using allow_null with ListField or a nested many=True serializer the previous behavior was to allow null values as items in the list. The behavior is now to allow null values instead of the list. For example, take the following field: NestedSerializer(many=True, allow_null=True) Previously the validation behavior would be: [{\u2026}, null, {\u2026}] is valid . null is invalid . Our validation behavior as of 3.2.0 is now: [{\u2026}, null, {\u2026}] is invalid . null is valid . If you want to allow null child items, you'll need to instead specify allow_null on the child class, using an explicit ListField instead of many=True . For example: ListField(child=NestedSerializer(allow_null=True)) What's next? The 3.3 release is currently planned for the start of October, and will be the last Kickstarter-funded release. This release is planned to include: Search and filtering controls in the browsable API and admin interface. Improvements and public API for the admin interface. Improvements and public API for our templated HTML forms and fields. Nested object and list support in HTML forms. Thanks once again to all our sponsors and supporters.","title":"3.2 Announcement"},{"location":"community/3.2-announcement/#django-rest-framework-32","text":"The 3.2 release is the first version to include an admin interface for the browsable API. This interface is intended to act as a more user-friendly interface to the API. It can be used either as a replacement to the existing BrowsableAPIRenderer , or used together with it, allowing you to switch between the two styles as required. We've also fixed a huge number of issues, and made numerous cleanups and improvements. Over the course of the 3.1.x series we've resolved nearly 600 tickets on our GitHub issue tracker. This means we're currently running at a rate of closing around 100 issues or pull requests per month . None of this would have been possible without the support of our wonderful Kickstarter backers. If you're looking for a job in Django development we'd strongly recommend taking a look through our sponsors and finding out who's hiring.","title":"Django REST framework 3.2"},{"location":"community/3.2-announcement/#adminrenderer","text":"To include AdminRenderer simply add it to your settings: REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': [ 'rest_framework.renderers.JSONRenderer', 'rest_framework.renderers.AdminRenderer', 'rest_framework.renderers.BrowsableAPIRenderer' ], 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 100 } There are some limitations to the AdminRenderer , in particular it is not yet able to handle list or dictionary inputs, as we do not have any HTML form fields that support those. Also note that this is an initial release and we do not yet have a public API for modifying the behavior or documentation on overriding the templates. The idea is to get this released to users early, so we can start getting feedback and release a more fully featured version in 3.3.","title":"AdminRenderer"},{"location":"community/3.2-announcement/#supported-versions","text":"This release drops support for Django 1.4. Our supported Django versions are now 1.5.6+, 1.6.3+, 1.7 and 1.8.","title":"Supported versions"},{"location":"community/3.2-announcement/#deprecations","text":"There are no new deprecations in 3.2, although a number of existing deprecations have now escalated in line with our deprecation policy. request.DATA was put on the deprecation path in 3.0. It has now been removed and its usage will result in an error. Use the more pythonic style of request.data instead. request.QUERY_PARAMS was put on the deprecation path in 3.0. It has now been removed and its usage will result in an error. Use the more pythonic style of request.query_params instead. The following ModelSerializer.Meta options have now been removed: write_only_fields , view_name , lookup_field . Use the more general extra_kwargs option instead. The following pagination view attributes and settings have been moved into attributes on the pagination class since 3.1. Their usage was formerly in 'pending deprecation', and has now escalated to 'deprecated'. They will continue to function but will raise errors. view.paginate_by - Use paginator.page_size instead. view.page_query_param - Use paginator.page_query_param instead. view.paginate_by_param - Use paginator.page_size_query_param instead. view.max_paginate_by - Use paginator.max_page_size instead. settings.PAGINATE_BY - Use paginator.page_size instead. settings.PAGINATE_BY_PARAM - Use paginator.page_size_query_param instead. settings.MAX_PAGINATE_BY - Use paginator.max_page_size instead.","title":"Deprecations"},{"location":"community/3.2-announcement/#modifications-to-list-behaviors","text":"There are a couple of bug fixes that are worth calling out as they introduce differing behavior. These are a little subtle and probably won't affect most users, but are worth understanding before upgrading your project.","title":"Modifications to list behaviors"},{"location":"community/3.2-announcement/#manytomany-fields-and-blanktrue","text":"We've now added an allow_empty argument, which can be used with ListSerializer , or with many=True relationships. This is True by default, but can be set to False if you want to disallow empty lists as valid input. As a follow-up to this we are now able to properly mirror the behavior of Django's ModelForm with respect to how many-to-many fields are validated. Previously a many-to-many field on a model would map to a serializer field that would allow either empty or non-empty list inputs. Now, a many-to-many field will map to a serializer field that requires at least one input, unless the model field has blank=True set. Here's what the mapping looks like in practice: models.ManyToManyField() \u2192 serializers.PrimaryKeyRelatedField(many=True, allow_empty=False) models.ManyToManyField(blank=True) \u2192 serializers.PrimaryKeyRelatedField(many=True) The upshot is this: If you have many to many fields in your models, then make sure you've included the argument blank=True if you want to allow empty inputs in the equivalent ModelSerializer fields.","title":"ManyToMany fields and blank=True"},{"location":"community/3.2-announcement/#list-fields-and-allow_null","text":"When using allow_null with ListField or a nested many=True serializer the previous behavior was to allow null values as items in the list. The behavior is now to allow null values instead of the list. For example, take the following field: NestedSerializer(many=True, allow_null=True) Previously the validation behavior would be: [{\u2026}, null, {\u2026}] is valid . null is invalid . Our validation behavior as of 3.2.0 is now: [{\u2026}, null, {\u2026}] is invalid . null is valid . If you want to allow null child items, you'll need to instead specify allow_null on the child class, using an explicit ListField instead of many=True . For example: ListField(child=NestedSerializer(allow_null=True))","title":"List fields and allow_null"},{"location":"community/3.2-announcement/#whats-next","text":"The 3.3 release is currently planned for the start of October, and will be the last Kickstarter-funded release. This release is planned to include: Search and filtering controls in the browsable API and admin interface. Improvements and public API for the admin interface. Improvements and public API for our templated HTML forms and fields. Nested object and list support in HTML forms. Thanks once again to all our sponsors and supporters.","title":"What's next?"},{"location":"community/3.3-announcement/","text":"Django REST framework 3.3 The 3.3 release marks the final work in the Kickstarter funded series. We'd like to offer a final resounding thank you to all our wonderful sponsors and supporters. The amount of work that has been achieved as a direct result of the funding is immense. We've added a huge amounts of new functionality, resolved nearly 2,000 tickets, and redesigned & refined large parts of the project. In order to continue driving REST framework forward, we'll shortly be announcing a new set of funding plans. Follow @_tomchristie to keep up to date with these announcements, and be among the first set of sign ups. We strongly believe that collaboratively funded software development yields outstanding results for a relatively low investment-per-head. If you or your company use REST framework commercially, then we would strongly urge you to participate in this latest funding drive, and help us continue to build an increasingly polished & professional product. Release notes Significant new functionality in the 3.3 release includes: Filters presented as HTML controls in the browsable API. A forms API , allowing serializers to be rendered as HTML forms. Django 1.9 support. A JSONField serializer field , corresponding to Django 1.9's Postgres JSONField model field. Browsable API support via AJAX , rather than server side request overloading. Example of the new filter controls Supported versions This release drops support for Django 1.5 and 1.6. Django 1.7, 1.8 or 1.9 are now required. This brings our supported versions into line with Django's currently supported versions Deprecations The AJAX based support for the browsable API means that there are a number of internal cleanups in the request class. For the vast majority of developers this should largely remain transparent: To support form based PUT and DELETE , or to support form content types such as JSON, you should now use the AJAX forms javascript library. This replaces the previous 'method and content type overloading' that required significant internal complexity to the request class. The accept query parameter is no longer supported by the default content negotiation class. If you require it then you'll need to use a custom content negotiation class . The custom HTTP_X_HTTP_METHOD_OVERRIDE header is no longer supported by default. If you require it then you'll need to use custom middleware . The following pagination view attributes and settings have been moved into attributes on the pagination class since 3.1. Their usage was formerly deprecated, and has now been removed entirely, in line with the deprecation policy. view.paginate_by - Use paginator.page_size instead. view.page_query_param - Use paginator.page_query_param instead. view.paginate_by_param - Use paginator.page_size_query_param instead. view.max_paginate_by - Use paginator.max_page_size instead. settings.PAGINATE_BY - Use paginator.page_size instead. settings.PAGINATE_BY_PARAM - Use paginator.page_size_query_param instead. settings.MAX_PAGINATE_BY - Use paginator.max_page_size instead. The ModelSerializer and HyperlinkedModelSerializer classes should now include either a fields or exclude option, although the fields = '__all__' shortcut may be used. Failing to include either of these two options is currently pending deprecation, and will be removed entirely in the 3.5 release. This behavior brings ModelSerializer more closely in line with Django's ModelForm behavior.","title":"3.3 Announcement"},{"location":"community/3.3-announcement/#django-rest-framework-33","text":"The 3.3 release marks the final work in the Kickstarter funded series. We'd like to offer a final resounding thank you to all our wonderful sponsors and supporters. The amount of work that has been achieved as a direct result of the funding is immense. We've added a huge amounts of new functionality, resolved nearly 2,000 tickets, and redesigned & refined large parts of the project. In order to continue driving REST framework forward, we'll shortly be announcing a new set of funding plans. Follow @_tomchristie to keep up to date with these announcements, and be among the first set of sign ups. We strongly believe that collaboratively funded software development yields outstanding results for a relatively low investment-per-head. If you or your company use REST framework commercially, then we would strongly urge you to participate in this latest funding drive, and help us continue to build an increasingly polished & professional product.","title":"Django REST framework 3.3"},{"location":"community/3.3-announcement/#release-notes","text":"Significant new functionality in the 3.3 release includes: Filters presented as HTML controls in the browsable API. A forms API , allowing serializers to be rendered as HTML forms. Django 1.9 support. A JSONField serializer field , corresponding to Django 1.9's Postgres JSONField model field. Browsable API support via AJAX , rather than server side request overloading. Example of the new filter controls","title":"Release notes"},{"location":"community/3.3-announcement/#supported-versions","text":"This release drops support for Django 1.5 and 1.6. Django 1.7, 1.8 or 1.9 are now required. This brings our supported versions into line with Django's currently supported versions","title":"Supported versions"},{"location":"community/3.3-announcement/#deprecations","text":"The AJAX based support for the browsable API means that there are a number of internal cleanups in the request class. For the vast majority of developers this should largely remain transparent: To support form based PUT and DELETE , or to support form content types such as JSON, you should now use the AJAX forms javascript library. This replaces the previous 'method and content type overloading' that required significant internal complexity to the request class. The accept query parameter is no longer supported by the default content negotiation class. If you require it then you'll need to use a custom content negotiation class . The custom HTTP_X_HTTP_METHOD_OVERRIDE header is no longer supported by default. If you require it then you'll need to use custom middleware . The following pagination view attributes and settings have been moved into attributes on the pagination class since 3.1. Their usage was formerly deprecated, and has now been removed entirely, in line with the deprecation policy. view.paginate_by - Use paginator.page_size instead. view.page_query_param - Use paginator.page_query_param instead. view.paginate_by_param - Use paginator.page_size_query_param instead. view.max_paginate_by - Use paginator.max_page_size instead. settings.PAGINATE_BY - Use paginator.page_size instead. settings.PAGINATE_BY_PARAM - Use paginator.page_size_query_param instead. settings.MAX_PAGINATE_BY - Use paginator.max_page_size instead. The ModelSerializer and HyperlinkedModelSerializer classes should now include either a fields or exclude option, although the fields = '__all__' shortcut may be used. Failing to include either of these two options is currently pending deprecation, and will be removed entirely in the 3.5 release. This behavior brings ModelSerializer more closely in line with Django's ModelForm behavior.","title":"Deprecations"},{"location":"community/3.4-announcement/","text":".promo li a { float: left; width: 130px; height: 20px; text-align: center; margin: 10px 30px; padding: 150px 0 0 0; background-position: 0 50%; background-size: 130px auto; background-repeat: no-repeat; font-size: 120%; color: black; } .promo li { list-style: none; } Django REST framework 3.4 The 3.4 release is the first in a planned series that will be addressing schema generation, hypermedia support, API clients, and finally realtime support. Funding The 3.4 release has been made possible a recent Mozilla grant , and by our collaborative funding model . If you use REST framework commercially, and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . The initial aim is to provide a single full-time position on REST framework. Right now we're over 60% of the way towards achieving that. Every single sign-up makes a significant impact. Rover.com Sentry Stream Many thanks to all our awesome sponsors , and in particular to our premium backers, Rover , Sentry , and Stream . Schemas & client libraries REST framework 3.4 brings built-in support for generating API schemas. We provide this support by using Core API , a Document Object Model for describing APIs. Because Core API represents the API schema in an format-independent manner, we're able to render the Core API Document object into many different schema formats, by allowing the renderer class to determine how the internal representation maps onto the external schema format. This approach should also open the door to a range of auto-generated API documentation options in the future, by rendering the Document object into HTML documentation pages. Alongside the built-in schema support, we're also now providing the following: A command line tool for interacting with APIs. A Python client library for interacting with APIs. These API clients are dynamically driven, and able to interact with any API that exposes a supported schema format. Dynamically driven clients allow you to interact with an API at an application layer interface, rather than a network layer interface, while still providing the benefits of RESTful Web API design. We're expecting to expand the range of languages that we provide client libraries for over the coming months. Further work on maturing the API schema support is also planned, including documentation on supporting file upload and download, and improved support for documentation generation and parameter annotation. Current support for schema formats is as follows: Name Support PyPI package Core JSON Schema generation & client support. Built-in support in coreapi . Swagger / OpenAPI Schema generation & client support. The openapi-codec package. JSON Hyper-Schema Currently client support only. The hyperschema-codec package. API Blueprint Not yet available. Not yet available. You can read more about any of this new functionality in the following: New tutorial section on schemas & client libraries . Documentation page on schema generation . Topic page on API clients . It is also worth noting that Marc Gibbons is currently working towards a 2.0 release of the popular Django REST Swagger package, which will tie in with our new built-in support. Supported versions The 3.4.0 release adds support for Django 1.10. The following versions of Python and Django are now supported: Django versions 1.8, 1.9, and 1.10. Python versions 2.7, 3.2(*), 3.3(*), 3.4, 3.5. (*) Note that Python 3.2 and 3.3 are not supported from Django 1.9 onwards. Deprecations and changes The 3.4 release includes very limited deprecation or behavioral changes, and should present a straightforward upgrade. Use fields or exclude on serializer classes. The following change in 3.3.0 is now escalated from \"pending deprecation\" to \"deprecated\". Its usage will continue to function but will raise warnings: ModelSerializer and HyperlinkedModelSerializer should include either a fields option, or an exclude option. The fields = '__all__' shortcut may be used to explicitly include all fields. Microsecond precision when returning time or datetime. Using the default JSON renderer and directly returning a datetime or time instance will now render with microsecond precision (6 digits), rather than millisecond precision (3 digits). This makes the output format consistent with the default string output of serializers.DateTimeField and serializers.TimeField . This change does not affect the default behavior when using serializers , which is to serialize datetime and time instances into strings with microsecond precision. The serializer behavior can be modified if needed, using the DATETIME_FORMAT and TIME_FORMAT settings. The renderer behavior can be modified by setting a custom encoder_class attribute on a JSONRenderer subclass. Relational choices no longer displayed in OPTIONS requests. Making an OPTIONS request to views that have a serializer choice field will result in a list of the available choices being returned in the response. In cases where there is a relational field, the previous behavior would be to return a list of available instances to choose from for that relational field. In order to minimise exposed information the behavior now is to not return choices information for relational fields. If you want to override this new behavior you'll need to implement a custom metadata class . See issue #3751 for more information on this behavioral change. Other improvements This release includes further work from a huge number of pull requests and issues . Many thanks to all our contributors who've been involved in the release, either through raising issues, giving feedback, improving the documentation, or suggesting and implementing code changes. The full set of itemized release notes are available here .","title":"3.4 Announcement"},{"location":"community/3.4-announcement/#django-rest-framework-34","text":"The 3.4 release is the first in a planned series that will be addressing schema generation, hypermedia support, API clients, and finally realtime support.","title":"Django REST framework 3.4"},{"location":"community/3.4-announcement/#funding","text":"The 3.4 release has been made possible a recent Mozilla grant , and by our collaborative funding model . If you use REST framework commercially, and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . The initial aim is to provide a single full-time position on REST framework. Right now we're over 60% of the way towards achieving that. Every single sign-up makes a significant impact. Rover.com Sentry Stream Many thanks to all our awesome sponsors , and in particular to our premium backers, Rover , Sentry , and Stream .","title":"Funding"},{"location":"community/3.4-announcement/#schemas-client-libraries","text":"REST framework 3.4 brings built-in support for generating API schemas. We provide this support by using Core API , a Document Object Model for describing APIs. Because Core API represents the API schema in an format-independent manner, we're able to render the Core API Document object into many different schema formats, by allowing the renderer class to determine how the internal representation maps onto the external schema format. This approach should also open the door to a range of auto-generated API documentation options in the future, by rendering the Document object into HTML documentation pages. Alongside the built-in schema support, we're also now providing the following: A command line tool for interacting with APIs. A Python client library for interacting with APIs. These API clients are dynamically driven, and able to interact with any API that exposes a supported schema format. Dynamically driven clients allow you to interact with an API at an application layer interface, rather than a network layer interface, while still providing the benefits of RESTful Web API design. We're expecting to expand the range of languages that we provide client libraries for over the coming months. Further work on maturing the API schema support is also planned, including documentation on supporting file upload and download, and improved support for documentation generation and parameter annotation. Current support for schema formats is as follows: Name Support PyPI package Core JSON Schema generation & client support. Built-in support in coreapi . Swagger / OpenAPI Schema generation & client support. The openapi-codec package. JSON Hyper-Schema Currently client support only. The hyperschema-codec package. API Blueprint Not yet available. Not yet available. You can read more about any of this new functionality in the following: New tutorial section on schemas & client libraries . Documentation page on schema generation . Topic page on API clients . It is also worth noting that Marc Gibbons is currently working towards a 2.0 release of the popular Django REST Swagger package, which will tie in with our new built-in support.","title":"Schemas &amp; client libraries"},{"location":"community/3.4-announcement/#supported-versions","text":"The 3.4.0 release adds support for Django 1.10. The following versions of Python and Django are now supported: Django versions 1.8, 1.9, and 1.10. Python versions 2.7, 3.2(*), 3.3(*), 3.4, 3.5. (*) Note that Python 3.2 and 3.3 are not supported from Django 1.9 onwards.","title":"Supported versions"},{"location":"community/3.4-announcement/#deprecations-and-changes","text":"The 3.4 release includes very limited deprecation or behavioral changes, and should present a straightforward upgrade.","title":"Deprecations and changes"},{"location":"community/3.4-announcement/#use-fields-or-exclude-on-serializer-classes","text":"The following change in 3.3.0 is now escalated from \"pending deprecation\" to \"deprecated\". Its usage will continue to function but will raise warnings: ModelSerializer and HyperlinkedModelSerializer should include either a fields option, or an exclude option. The fields = '__all__' shortcut may be used to explicitly include all fields.","title":"Use fields or exclude on serializer classes."},{"location":"community/3.4-announcement/#microsecond-precision-when-returning-time-or-datetime","text":"Using the default JSON renderer and directly returning a datetime or time instance will now render with microsecond precision (6 digits), rather than millisecond precision (3 digits). This makes the output format consistent with the default string output of serializers.DateTimeField and serializers.TimeField . This change does not affect the default behavior when using serializers , which is to serialize datetime and time instances into strings with microsecond precision. The serializer behavior can be modified if needed, using the DATETIME_FORMAT and TIME_FORMAT settings. The renderer behavior can be modified by setting a custom encoder_class attribute on a JSONRenderer subclass.","title":"Microsecond precision when returning time or datetime."},{"location":"community/3.4-announcement/#relational-choices-no-longer-displayed-in-options-requests","text":"Making an OPTIONS request to views that have a serializer choice field will result in a list of the available choices being returned in the response. In cases where there is a relational field, the previous behavior would be to return a list of available instances to choose from for that relational field. In order to minimise exposed information the behavior now is to not return choices information for relational fields. If you want to override this new behavior you'll need to implement a custom metadata class . See issue #3751 for more information on this behavioral change.","title":"Relational choices no longer displayed in OPTIONS requests."},{"location":"community/3.4-announcement/#other-improvements","text":"This release includes further work from a huge number of pull requests and issues . Many thanks to all our contributors who've been involved in the release, either through raising issues, giving feedback, improving the documentation, or suggesting and implementing code changes. The full set of itemized release notes are available here .","title":"Other improvements"},{"location":"community/3.5-announcement/","text":".promo li a { float: left; width: 130px; height: 20px; text-align: center; margin: 10px 30px; padding: 150px 0 0 0; background-position: 0 50%; background-size: 130px auto; background-repeat: no-repeat; font-size: 120%; color: black; } .promo li { list-style: none; } Django REST framework 3.5 The 3.5 release is the second in a planned series that is addressing schema generation, hypermedia support, API client libraries, and finally realtime support. Funding The 3.5 release would not have been possible without our collaborative funding model . If you use REST framework commercially and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . Rover.com Sentry Stream Machinalis Many thanks to all our sponsors , and in particular to our premium backers, Rover , Sentry , Stream , and Machinalis . Improved schema generation Docstrings on views are now pulled through into schema definitions, allowing you to use the schema definition to document your API . There is now also a shortcut function, get_schema_view() , which makes it easier to adding schema views to your API. For example, to include a swagger schema to your API, you would do the following: Run pip install django-rest-swagger . Add 'rest_framework_swagger' to your INSTALLED_APPS setting. Include the schema view in your URL conf: from rest_framework.schemas import get_schema_view from rest_framework_swagger.renderers import OpenAPIRenderer, SwaggerUIRenderer schema_view = get_schema_view( title='Example API', renderer_classes=[OpenAPIRenderer, SwaggerUIRenderer] ) urlpatterns = [ path('swagger/', schema_view), ... ] There have been a large number of fixes to the schema generation. These should resolve issues for anyone using the latest version of the django-rest-swagger package. Some of these changes do affect the resulting schema structure, so if you're already using schema generation you should make sure to review the deprecation notes , particularly if you're currently using a dynamic client library to interact with your API. Finally, we're also now exposing the schema generation as a publicly documented API , allowing you to more easily override the behaviour. Requests test client You can now test your project using the requests library. This exposes exactly the same interface as if you were using a standard requests session instance. client = RequestsClient() response = client.get('http://testserver/users/') assert response.status_code == 200 Rather than sending any HTTP requests to the network, this interface will coerce all outgoing requests into WSGI, and call into your application directly. Core API client You can also now test your project by interacting with it using the coreapi client library. # Fetch the API schema client = CoreAPIClient() schema = client.get('http://testserver/schema/') # Create a new organisation params = {'name': 'MegaCorp', 'status': 'active'} client.action(schema, ['organisations', 'create'], params) # Ensure that the organisation exists in the listing data = client.action(schema, ['organisations', 'list']) assert(len(data) == 1) assert(data == [{'name': 'MegaCorp', 'status': 'active'}]) Again, this will call directly into the application using the WSGI interface, rather than making actual network calls. This is a good option if you are planning for clients to mainly interact with your API using the coreapi client library, or some other auto-generated client. Live tests One interesting aspect of both the requests client and the coreapi client is that they allow you to write tests in such a way that they can also be made to run against a live service. By switching the WSGI based client instances to actual instances of requests.Session or coreapi.Client you can have the test cases make actual network calls. Being able to write test cases that can exercise your staging or production environment is a powerful tool. However in order to do this, you'll need to pay close attention to how you handle setup and teardown to ensure a strict isolation of test data from other live or staging data. RAML support We now have preliminary support for RAML documentation generation . Further work on the encoding and documentation generation is planned, in order to make features such as the 'Try it now' support available at a later date. This work also now means that you can use the Core API client libraries to interact with APIs that expose a RAML specification. The RAML codec gives some examples of interacting with the Spotify API in this way. Validation codes Exceptions raised by REST framework now include short code identifiers. When used together with our customizable error handling, this now allows you to modify the style of API error messages. As an example, this allows for the following style of error responses: { \"message\": \"You do not have permission to perform this action.\", \"code\": \"permission_denied\" } This is particularly useful with validation errors, which use appropriate codes to identify differing kinds of failure... { \"name\": {\"message\": \"This field is required.\", \"code\": \"required\"}, \"age\": {\"message\": \"A valid integer is required.\", \"code\": \"invalid\"} } Client upload & download support The Python coreapi client library and the Core API command line tool both now fully support file uploads and downloads . Deprecations Generating schemas from Router The router arguments for generating a schema view, such as schema_title , are now pending deprecation. Instead of using DefaultRouter(schema_title='Example API') , you should use the get_schema_view() function, and include the view in your URL conf. Make sure to include the view before your router urls. For example: from rest_framework.schemas import get_schema_view from my_project.routers import router schema_view = get_schema_view(title='Example API') urlpatterns = [ path('', schema_view), path('', include(router.urls)), ] Schema path representations The 'pk' identifier in schema paths is now mapped onto the actually model field name by default. This will typically be 'id' . This gives a better external representation for schemas, with less implementation detail being exposed. It also reflects the behaviour of using a ModelSerializer class with fields = '__all__' . You can revert to the previous behaviour by setting 'SCHEMA_COERCE_PATH_PK': False in the REST framework settings. Schema action name representations The internal retrieve() and destroy() method names are now coerced to an external representation of read and delete . You can revert to the previous behaviour by setting 'SCHEMA_COERCE_METHOD_NAMES': {} in the REST framework settings. DjangoFilterBackend The functionality of the built-in DjangoFilterBackend is now completely included by the django-filter package. You should change your imports and REST framework filter settings as follows: rest_framework.filters.DjangoFilterBackend becomes django_filters.rest_framework.DjangoFilterBackend . rest_framework.filters.FilterSet becomes django_filters.rest_framework.FilterSet . The existing imports will continue to work but are now pending deprecation. CoreJSON media type The media type for CoreJSON is now application/json+coreapi , rather than the previous application/vnd.json+coreapi . This brings it more into line with other custom media types, such as those used by Swagger and RAML. The clients currently accept either media type. The old style-media type will be deprecated at a later date. ModelSerializer 'fields' and 'exclude' ModelSerializer and HyperlinkedModelSerializer must include either a fields option, or an exclude option. The fields = '__all__' shortcut may be used to explicitly include all fields. Failing to set either fields or exclude raised a pending deprecation warning in version 3.3 and raised a deprecation warning in 3.4. Its usage is now mandatory.","title":"3.5 Announcement"},{"location":"community/3.5-announcement/#django-rest-framework-35","text":"The 3.5 release is the second in a planned series that is addressing schema generation, hypermedia support, API client libraries, and finally realtime support.","title":"Django REST framework 3.5"},{"location":"community/3.5-announcement/#funding","text":"The 3.5 release would not have been possible without our collaborative funding model . If you use REST framework commercially and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . Rover.com Sentry Stream Machinalis Many thanks to all our sponsors , and in particular to our premium backers, Rover , Sentry , Stream , and Machinalis .","title":"Funding"},{"location":"community/3.5-announcement/#improved-schema-generation","text":"Docstrings on views are now pulled through into schema definitions, allowing you to use the schema definition to document your API . There is now also a shortcut function, get_schema_view() , which makes it easier to adding schema views to your API. For example, to include a swagger schema to your API, you would do the following: Run pip install django-rest-swagger . Add 'rest_framework_swagger' to your INSTALLED_APPS setting. Include the schema view in your URL conf: from rest_framework.schemas import get_schema_view from rest_framework_swagger.renderers import OpenAPIRenderer, SwaggerUIRenderer schema_view = get_schema_view( title='Example API', renderer_classes=[OpenAPIRenderer, SwaggerUIRenderer] ) urlpatterns = [ path('swagger/', schema_view), ... ] There have been a large number of fixes to the schema generation. These should resolve issues for anyone using the latest version of the django-rest-swagger package. Some of these changes do affect the resulting schema structure, so if you're already using schema generation you should make sure to review the deprecation notes , particularly if you're currently using a dynamic client library to interact with your API. Finally, we're also now exposing the schema generation as a publicly documented API , allowing you to more easily override the behaviour.","title":"Improved schema generation"},{"location":"community/3.5-announcement/#requests-test-client","text":"You can now test your project using the requests library. This exposes exactly the same interface as if you were using a standard requests session instance. client = RequestsClient() response = client.get('http://testserver/users/') assert response.status_code == 200 Rather than sending any HTTP requests to the network, this interface will coerce all outgoing requests into WSGI, and call into your application directly.","title":"Requests test client"},{"location":"community/3.5-announcement/#core-api-client","text":"You can also now test your project by interacting with it using the coreapi client library. # Fetch the API schema client = CoreAPIClient() schema = client.get('http://testserver/schema/') # Create a new organisation params = {'name': 'MegaCorp', 'status': 'active'} client.action(schema, ['organisations', 'create'], params) # Ensure that the organisation exists in the listing data = client.action(schema, ['organisations', 'list']) assert(len(data) == 1) assert(data == [{'name': 'MegaCorp', 'status': 'active'}]) Again, this will call directly into the application using the WSGI interface, rather than making actual network calls. This is a good option if you are planning for clients to mainly interact with your API using the coreapi client library, or some other auto-generated client.","title":"Core API client"},{"location":"community/3.5-announcement/#live-tests","text":"One interesting aspect of both the requests client and the coreapi client is that they allow you to write tests in such a way that they can also be made to run against a live service. By switching the WSGI based client instances to actual instances of requests.Session or coreapi.Client you can have the test cases make actual network calls. Being able to write test cases that can exercise your staging or production environment is a powerful tool. However in order to do this, you'll need to pay close attention to how you handle setup and teardown to ensure a strict isolation of test data from other live or staging data.","title":"Live tests"},{"location":"community/3.5-announcement/#raml-support","text":"We now have preliminary support for RAML documentation generation . Further work on the encoding and documentation generation is planned, in order to make features such as the 'Try it now' support available at a later date. This work also now means that you can use the Core API client libraries to interact with APIs that expose a RAML specification. The RAML codec gives some examples of interacting with the Spotify API in this way.","title":"RAML support"},{"location":"community/3.5-announcement/#validation-codes","text":"Exceptions raised by REST framework now include short code identifiers. When used together with our customizable error handling, this now allows you to modify the style of API error messages. As an example, this allows for the following style of error responses: { \"message\": \"You do not have permission to perform this action.\", \"code\": \"permission_denied\" } This is particularly useful with validation errors, which use appropriate codes to identify differing kinds of failure... { \"name\": {\"message\": \"This field is required.\", \"code\": \"required\"}, \"age\": {\"message\": \"A valid integer is required.\", \"code\": \"invalid\"} }","title":"Validation codes"},{"location":"community/3.5-announcement/#client-upload-download-support","text":"The Python coreapi client library and the Core API command line tool both now fully support file uploads and downloads .","title":"Client upload &amp; download support"},{"location":"community/3.5-announcement/#deprecations","text":"","title":"Deprecations"},{"location":"community/3.5-announcement/#generating-schemas-from-router","text":"The router arguments for generating a schema view, such as schema_title , are now pending deprecation. Instead of using DefaultRouter(schema_title='Example API') , you should use the get_schema_view() function, and include the view in your URL conf. Make sure to include the view before your router urls. For example: from rest_framework.schemas import get_schema_view from my_project.routers import router schema_view = get_schema_view(title='Example API') urlpatterns = [ path('', schema_view), path('', include(router.urls)), ]","title":"Generating schemas from Router"},{"location":"community/3.5-announcement/#schema-path-representations","text":"The 'pk' identifier in schema paths is now mapped onto the actually model field name by default. This will typically be 'id' . This gives a better external representation for schemas, with less implementation detail being exposed. It also reflects the behaviour of using a ModelSerializer class with fields = '__all__' . You can revert to the previous behaviour by setting 'SCHEMA_COERCE_PATH_PK': False in the REST framework settings.","title":"Schema path representations"},{"location":"community/3.5-announcement/#schema-action-name-representations","text":"The internal retrieve() and destroy() method names are now coerced to an external representation of read and delete . You can revert to the previous behaviour by setting 'SCHEMA_COERCE_METHOD_NAMES': {} in the REST framework settings.","title":"Schema action name representations"},{"location":"community/3.5-announcement/#djangofilterbackend","text":"The functionality of the built-in DjangoFilterBackend is now completely included by the django-filter package. You should change your imports and REST framework filter settings as follows: rest_framework.filters.DjangoFilterBackend becomes django_filters.rest_framework.DjangoFilterBackend . rest_framework.filters.FilterSet becomes django_filters.rest_framework.FilterSet . The existing imports will continue to work but are now pending deprecation.","title":"DjangoFilterBackend"},{"location":"community/3.5-announcement/#corejson-media-type","text":"The media type for CoreJSON is now application/json+coreapi , rather than the previous application/vnd.json+coreapi . This brings it more into line with other custom media types, such as those used by Swagger and RAML. The clients currently accept either media type. The old style-media type will be deprecated at a later date.","title":"CoreJSON media type"},{"location":"community/3.5-announcement/#modelserializer-fields-and-exclude","text":"ModelSerializer and HyperlinkedModelSerializer must include either a fields option, or an exclude option. The fields = '__all__' shortcut may be used to explicitly include all fields. Failing to set either fields or exclude raised a pending deprecation warning in version 3.3 and raised a deprecation warning in 3.4. Its usage is now mandatory.","title":"ModelSerializer 'fields' and 'exclude'"},{"location":"community/3.6-announcement/","text":".promo li a { float: left; width: 130px; height: 20px; text-align: center; margin: 10px 30px; padding: 150px 0 0 0; background-position: 0 50%; background-size: 130px auto; background-repeat: no-repeat; font-size: 120%; color: black; } .promo li { list-style: none; } Django REST framework 3.6 The 3.6 release adds two major new features to REST framework. Built-in interactive API documentation support. A new JavaScript client library. Above: The interactive API documentation. Funding The 3.6 release would not have been possible without our backing from Mozilla to the project, and our collaborative funding model . If you use REST framework commercially and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . Rover.com Sentry Stream Machinalis Rollbar MicroPyramid Many thanks to all our sponsors , and in particular to our premium backers, Rover , Sentry , Stream , Machinalis , Rollbar , and MicroPyramid . Interactive API documentation REST framework's new API documentation supports a number of features: Live API interaction. Support for various authentication schemes. Code snippets for the Python, JavaScript, and Command Line clients. The coreapi library is required as a dependency for the API docs. Make sure to install the latest version (2.3.0 or above). The pygments and markdown libraries are optional but recommended. To install the API documentation, you'll need to include it in your projects URLconf: from rest_framework.documentation import include_docs_urls API_TITLE = 'API title' API_DESCRIPTION = '...' urlpatterns = [ ... path('docs/', include_docs_urls(title=API_TITLE, description=API_DESCRIPTION)) ] Once installed you should see something a little like this: We'll likely be making further refinements to the API documentation over the coming weeks. Keep in mind that this is a new feature, and please do give us feedback if you run into any issues or limitations. For more information on documenting your API endpoints see the \"Documenting your API\" section. JavaScript client library The JavaScript client library allows you to load an API schema, and then interact with that API at an application layer interface, rather than constructing fetch requests explicitly. Here's a brief example that demonstrates: Loading the client library and schema. Instantiating an authenticated client. Making an API request using the client. index.html <html> <head> <script src=\"/static/rest_framework/js/coreapi-0.1.0.js\"></script> <script src=\"/docs/schema.js\"></script> <script> const coreapi = window.coreapi const schema = window.schema // Instantiate a client... let auth = coreapi.auth.TokenAuthentication({scheme: 'JWT', token: 'xxx'}) let client = coreapi.Client({auth: auth}) // Make an API request... client.action(schema, ['projects', 'list']).then(function(result) { alert(result) }) </script> </head> </html> The JavaScript client library supports various authentication schemes, and can be used by your project itself, or as an external client interacting with your API. The client is not limited to usage with REST framework APIs, although it does currently only support loading CoreJSON API schemas. Support for Swagger and other API schemas is planned. For more details see the JavaScript client library documentation . Authentication classes for the Python client library Previous authentication support in the Python client library was limited to allowing users to provide explicit header values. We now have better support for handling the details of authentication, with the introduction of the BasicAuthentication , TokenAuthentication , and SessionAuthentication schemes. You can include the authentication scheme when instantiating a new client. auth = coreapi.auth.TokenAuthentication(scheme='JWT', token='xxx-xxx-xxx') client = coreapi.Client(auth=auth) For more information see the Python client library documentation . Deprecations Updating coreapi If you're using REST framework's schema generation, or want to use the API docs, then you'll need to update to the latest version of coreapi. (2.3.0) Generating schemas from Router The 3.5 \"pending deprecation\" of router arguments for generating a schema view, such as schema_title , schema_url and schema_renderers , have now been escalated to a \"deprecated\" warning. Instead of using DefaultRouter(schema_title='Example API') , you should use the get_schema_view() function, and include the view explicitly in your URL conf. DjangoFilterBackend The 3.5 \"pending deprecation\" warning of the built-in DjangoFilterBackend has now been escalated to a \"deprecated\" warning. You should change your imports and REST framework filter settings as follows: rest_framework.filters.DjangoFilterBackend becomes django_filters.rest_framework.DjangoFilterBackend . rest_framework.filters.FilterSet becomes django_filters.rest_framework.FilterSet . What's next There are likely to be a number of refinements to the API documentation and JavaScript client library over the coming weeks, which could include some of the following: Support for private API docs, requiring login. File upload and download support in the JavaScript client & API docs. Comprehensive documentation for the JavaScript client library. Automatically including authentication details in the API doc code snippets. Adding authentication support in the command line client. Support for loading Swagger and other schemas in the JavaScript client. Improved support for documenting parameter schemas and response schemas. Refining the API documentation interaction modal. Once work on those refinements is complete, we'll be starting feature work on realtime support, for the 3.7 release.","title":"3.6 Announcement"},{"location":"community/3.6-announcement/#django-rest-framework-36","text":"The 3.6 release adds two major new features to REST framework. Built-in interactive API documentation support. A new JavaScript client library. Above: The interactive API documentation.","title":"Django REST framework 3.6"},{"location":"community/3.6-announcement/#funding","text":"The 3.6 release would not have been possible without our backing from Mozilla to the project, and our collaborative funding model . If you use REST framework commercially and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . Rover.com Sentry Stream Machinalis Rollbar MicroPyramid Many thanks to all our sponsors , and in particular to our premium backers, Rover , Sentry , Stream , Machinalis , Rollbar , and MicroPyramid .","title":"Funding"},{"location":"community/3.6-announcement/#interactive-api-documentation","text":"REST framework's new API documentation supports a number of features: Live API interaction. Support for various authentication schemes. Code snippets for the Python, JavaScript, and Command Line clients. The coreapi library is required as a dependency for the API docs. Make sure to install the latest version (2.3.0 or above). The pygments and markdown libraries are optional but recommended. To install the API documentation, you'll need to include it in your projects URLconf: from rest_framework.documentation import include_docs_urls API_TITLE = 'API title' API_DESCRIPTION = '...' urlpatterns = [ ... path('docs/', include_docs_urls(title=API_TITLE, description=API_DESCRIPTION)) ] Once installed you should see something a little like this: We'll likely be making further refinements to the API documentation over the coming weeks. Keep in mind that this is a new feature, and please do give us feedback if you run into any issues or limitations. For more information on documenting your API endpoints see the \"Documenting your API\" section.","title":"Interactive API documentation"},{"location":"community/3.6-announcement/#javascript-client-library","text":"The JavaScript client library allows you to load an API schema, and then interact with that API at an application layer interface, rather than constructing fetch requests explicitly. Here's a brief example that demonstrates: Loading the client library and schema. Instantiating an authenticated client. Making an API request using the client. index.html <html> <head> <script src=\"/static/rest_framework/js/coreapi-0.1.0.js\"></script> <script src=\"/docs/schema.js\"></script> <script> const coreapi = window.coreapi const schema = window.schema // Instantiate a client... let auth = coreapi.auth.TokenAuthentication({scheme: 'JWT', token: 'xxx'}) let client = coreapi.Client({auth: auth}) // Make an API request... client.action(schema, ['projects', 'list']).then(function(result) { alert(result) }) </script> </head> </html> The JavaScript client library supports various authentication schemes, and can be used by your project itself, or as an external client interacting with your API. The client is not limited to usage with REST framework APIs, although it does currently only support loading CoreJSON API schemas. Support for Swagger and other API schemas is planned. For more details see the JavaScript client library documentation .","title":"JavaScript client library"},{"location":"community/3.6-announcement/#authentication-classes-for-the-python-client-library","text":"Previous authentication support in the Python client library was limited to allowing users to provide explicit header values. We now have better support for handling the details of authentication, with the introduction of the BasicAuthentication , TokenAuthentication , and SessionAuthentication schemes. You can include the authentication scheme when instantiating a new client. auth = coreapi.auth.TokenAuthentication(scheme='JWT', token='xxx-xxx-xxx') client = coreapi.Client(auth=auth) For more information see the Python client library documentation .","title":"Authentication classes for the Python client library"},{"location":"community/3.6-announcement/#deprecations","text":"","title":"Deprecations"},{"location":"community/3.6-announcement/#updating-coreapi","text":"If you're using REST framework's schema generation, or want to use the API docs, then you'll need to update to the latest version of coreapi. (2.3.0)","title":"Updating coreapi"},{"location":"community/3.6-announcement/#generating-schemas-from-router","text":"The 3.5 \"pending deprecation\" of router arguments for generating a schema view, such as schema_title , schema_url and schema_renderers , have now been escalated to a \"deprecated\" warning. Instead of using DefaultRouter(schema_title='Example API') , you should use the get_schema_view() function, and include the view explicitly in your URL conf.","title":"Generating schemas from Router"},{"location":"community/3.6-announcement/#djangofilterbackend","text":"The 3.5 \"pending deprecation\" warning of the built-in DjangoFilterBackend has now been escalated to a \"deprecated\" warning. You should change your imports and REST framework filter settings as follows: rest_framework.filters.DjangoFilterBackend becomes django_filters.rest_framework.DjangoFilterBackend . rest_framework.filters.FilterSet becomes django_filters.rest_framework.FilterSet .","title":"DjangoFilterBackend"},{"location":"community/3.6-announcement/#whats-next","text":"There are likely to be a number of refinements to the API documentation and JavaScript client library over the coming weeks, which could include some of the following: Support for private API docs, requiring login. File upload and download support in the JavaScript client & API docs. Comprehensive documentation for the JavaScript client library. Automatically including authentication details in the API doc code snippets. Adding authentication support in the command line client. Support for loading Swagger and other schemas in the JavaScript client. Improved support for documenting parameter schemas and response schemas. Refining the API documentation interaction modal. Once work on those refinements is complete, we'll be starting feature work on realtime support, for the 3.7 release.","title":"What's next"},{"location":"community/3.7-announcement/","text":".promo li a { float: left; width: 130px; height: 20px; text-align: center; margin: 10px 30px; padding: 150px 0 0 0; background-position: 0 50%; background-size: 130px auto; background-repeat: no-repeat; font-size: 120%; color: black; } .promo li { list-style: none; } Django REST framework 3.7 The 3.7 release focuses on improvements to schema generation and the interactive API documentation. This release has been made possible by Bayer who have sponsored the release. Funding If you use REST framework commercially and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . Rover.com Sentry Stream Machinalis Rollbar As well as our release sponsor, we'd like to say thanks in particular our premium backers, Rover , Sentry , Stream , Machinalis , and Rollbar . Customizing API docs & schema generation. The schema generation introduced in 3.5 and the related API docs generation in 3.6 are both hugely powerful features, however they've been somewhat limited in cases where the view introspection isn't able to correctly identify the schema for a particular view. In order to try to address this we're now adding the ability for per-view customization of the API schema. The interface that we're adding for this allows either basic manual overrides over which fields should be included on a view, or for more complex programmatic overriding of the schema generation. We believe this release comprehensively addresses some of the existing shortcomings of the schema features. Let's take a quick look at using the new functionality... The APIView class has a schema attribute, that is used to control how the Schema for that particular view is generated. The default behaviour is to use the AutoSchema class. from rest_framework.views import APIView from rest_framework.schemas import AutoSchema class CustomView(APIView): schema = AutoSchema() # Included for demonstration only. This is the default behavior. We can remove a view from the API schema and docs, like so: class CustomView(APIView): schema = None If we want to mostly use the default behavior, but additionally include some additional fields on a particular view, we can now do so easily... class CustomView(APIView): schema = AutoSchema(manual_fields=[ coreapi.Field('search', location='query') ]) To ignore the automatic generation for a particular view, and instead specify the schema explicitly, we use the ManualSchema class instead... class CustomView(APIView): schema = ManualSchema(fields=[...]) For more advanced behaviors you can subclass AutoSchema to provide for customized schema generation, and apply that to particular views. class CustomView(APIView): schema = CustomizedSchemaGeneration() For full details on the new functionality, please see the Schema Documentation . Django 2.0 support REST framework 3.7 supports Django versions 1.10, 1.11, and 2.0 alpha. Minor fixes and improvements There are a large number of minor fixes and improvements in this release. See the release notes page for a complete listing. The number of open tickets against the project currently at its lowest number in quite some time, and we're continuing to focus on reducing these to a manageable amount. Deprecations exclude_from_schema Both APIView.exclude_from_schema and the exclude_from_schema argument to the @api_view decorator and now PendingDeprecation . They will be moved to deprecated in the 3.8 release, and removed entirely in 3.9. For APIView you should instead set a schema = None attribute on the view class. For function based views the @schema decorator can be used to exclude the view from the schema, by using @schema(None) . DjangoFilterBackend The DjangoFilterBackend was moved to pending deprecation in 3.5, and deprecated in 3.6. It has now been removed from the core framework. The functionality remains fully available, but is instead provided in the django-filter package. What's next We're still planning to work on improving real-time support for REST framework by providing documentation on integrating with Django channels, as well adding support for more easily adding WebSocket support to existing HTTP endpoints. This will likely be timed so that any REST framework development here ties in with similar work on API Star .","title":"3.7 Announcement"},{"location":"community/3.7-announcement/#django-rest-framework-37","text":"The 3.7 release focuses on improvements to schema generation and the interactive API documentation. This release has been made possible by Bayer who have sponsored the release.","title":"Django REST framework 3.7"},{"location":"community/3.7-announcement/#funding","text":"If you use REST framework commercially and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . Rover.com Sentry Stream Machinalis Rollbar As well as our release sponsor, we'd like to say thanks in particular our premium backers, Rover , Sentry , Stream , Machinalis , and Rollbar .","title":"Funding"},{"location":"community/3.7-announcement/#customizing-api-docs-schema-generation","text":"The schema generation introduced in 3.5 and the related API docs generation in 3.6 are both hugely powerful features, however they've been somewhat limited in cases where the view introspection isn't able to correctly identify the schema for a particular view. In order to try to address this we're now adding the ability for per-view customization of the API schema. The interface that we're adding for this allows either basic manual overrides over which fields should be included on a view, or for more complex programmatic overriding of the schema generation. We believe this release comprehensively addresses some of the existing shortcomings of the schema features. Let's take a quick look at using the new functionality... The APIView class has a schema attribute, that is used to control how the Schema for that particular view is generated. The default behaviour is to use the AutoSchema class. from rest_framework.views import APIView from rest_framework.schemas import AutoSchema class CustomView(APIView): schema = AutoSchema() # Included for demonstration only. This is the default behavior. We can remove a view from the API schema and docs, like so: class CustomView(APIView): schema = None If we want to mostly use the default behavior, but additionally include some additional fields on a particular view, we can now do so easily... class CustomView(APIView): schema = AutoSchema(manual_fields=[ coreapi.Field('search', location='query') ]) To ignore the automatic generation for a particular view, and instead specify the schema explicitly, we use the ManualSchema class instead... class CustomView(APIView): schema = ManualSchema(fields=[...]) For more advanced behaviors you can subclass AutoSchema to provide for customized schema generation, and apply that to particular views. class CustomView(APIView): schema = CustomizedSchemaGeneration() For full details on the new functionality, please see the Schema Documentation .","title":"Customizing API docs &amp; schema generation."},{"location":"community/3.7-announcement/#django-20-support","text":"REST framework 3.7 supports Django versions 1.10, 1.11, and 2.0 alpha.","title":"Django 2.0 support"},{"location":"community/3.7-announcement/#minor-fixes-and-improvements","text":"There are a large number of minor fixes and improvements in this release. See the release notes page for a complete listing. The number of open tickets against the project currently at its lowest number in quite some time, and we're continuing to focus on reducing these to a manageable amount.","title":"Minor fixes and improvements"},{"location":"community/3.7-announcement/#deprecations","text":"","title":"Deprecations"},{"location":"community/3.7-announcement/#exclude_from_schema","text":"Both APIView.exclude_from_schema and the exclude_from_schema argument to the @api_view decorator and now PendingDeprecation . They will be moved to deprecated in the 3.8 release, and removed entirely in 3.9. For APIView you should instead set a schema = None attribute on the view class. For function based views the @schema decorator can be used to exclude the view from the schema, by using @schema(None) .","title":"exclude_from_schema"},{"location":"community/3.7-announcement/#djangofilterbackend","text":"The DjangoFilterBackend was moved to pending deprecation in 3.5, and deprecated in 3.6. It has now been removed from the core framework. The functionality remains fully available, but is instead provided in the django-filter package.","title":"DjangoFilterBackend"},{"location":"community/3.7-announcement/#whats-next","text":"We're still planning to work on improving real-time support for REST framework by providing documentation on integrating with Django channels, as well adding support for more easily adding WebSocket support to existing HTTP endpoints. This will likely be timed so that any REST framework development here ties in with similar work on API Star .","title":"What's next"},{"location":"community/3.8-announcement/","text":".promo li a { float: left; width: 130px; height: 20px; text-align: center; margin: 10px 30px; padding: 150px 0 0 0; background-position: 0 50%; background-size: 130px auto; background-repeat: no-repeat; font-size: 120%; color: black; } .promo li { list-style: none; } Django REST framework 3.8 The 3.8 release is a maintenance focused release resolving a large number of previously outstanding issues and laying the foundations for future changes. Funding If you use REST framework commercially and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . We'd like to say thanks in particular our premium backers, Rover , Sentry , Stream , Machinalis , and Rollbar . Breaking Changes Altered the behaviour of read_only plus default on Field. #5886 read_only fields will now always be excluded from writable fields. Previously read_only fields when combined with a default value would use the default for create and update operations. This was counter-intuitive in some circumstances and led to difficulties supporting dotted source attributes on nullable relations. In order to maintain the old behaviour you may need to pass the value of read_only fields when calling save() in the view: def perform_create(self, serializer): serializer.save(owner=self.request.user) Alternatively you may override save() or create() or update() on the serializer as appropriate. Deprecations action decorator replaces list_route and detail_route #5705 list_route and detail_route have been merge into a single action decorator. This improves viewset action introspection, and will allow extra actions to be displayed in the Browsable API in future versions. Both list_route and detail_route are now pending deprecation. They will be deprecated in 3.9 and removed entirely in 3.10. The new action decorator takes a boolean detail argument. Replace detail_route uses with @action(detail=True) . Replace list_route uses with @action(detail=False) . exclude_from_schema Both APIView.exclude_from_schema and the exclude_from_schema argument to the @api_view decorator are now deprecated. They will be removed entirely in 3.9. For APIView you should instead set a schema = None attribute on the view class. For function based views the @schema decorator can be used to exclude the view from the schema, by using @schema(None) . Minor fixes and improvements There are a large number of minor fixes and improvements in this release. See the release notes page for a complete listing. What's next We're currently working towards moving to using OpenAPI as our default schema output. We'll also be revisiting our API documentation generation and client libraries. We're doing some consolidation in order to make this happen. It's planned that 3.9 will drop the coreapi and coreschema libraries, and instead use apistar for the API documentation generation, schema generation, and API client libraries.","title":"3.8 Announcement"},{"location":"community/3.8-announcement/#django-rest-framework-38","text":"The 3.8 release is a maintenance focused release resolving a large number of previously outstanding issues and laying the foundations for future changes.","title":"Django REST framework 3.8"},{"location":"community/3.8-announcement/#funding","text":"If you use REST framework commercially and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . We'd like to say thanks in particular our premium backers, Rover , Sentry , Stream , Machinalis , and Rollbar .","title":"Funding"},{"location":"community/3.8-announcement/#breaking-changes","text":"","title":"Breaking Changes"},{"location":"community/3.8-announcement/#altered-the-behaviour-of-read_only-plus-default-on-field","text":"#5886 read_only fields will now always be excluded from writable fields. Previously read_only fields when combined with a default value would use the default for create and update operations. This was counter-intuitive in some circumstances and led to difficulties supporting dotted source attributes on nullable relations. In order to maintain the old behaviour you may need to pass the value of read_only fields when calling save() in the view: def perform_create(self, serializer): serializer.save(owner=self.request.user) Alternatively you may override save() or create() or update() on the serializer as appropriate.","title":"Altered the behaviour of read_only plus default on Field."},{"location":"community/3.8-announcement/#deprecations","text":"","title":"Deprecations"},{"location":"community/3.8-announcement/#action-decorator-replaces-list_route-and-detail_route","text":"#5705 list_route and detail_route have been merge into a single action decorator. This improves viewset action introspection, and will allow extra actions to be displayed in the Browsable API in future versions. Both list_route and detail_route are now pending deprecation. They will be deprecated in 3.9 and removed entirely in 3.10. The new action decorator takes a boolean detail argument. Replace detail_route uses with @action(detail=True) . Replace list_route uses with @action(detail=False) .","title":"action decorator replaces list_route and detail_route"},{"location":"community/3.8-announcement/#exclude_from_schema","text":"Both APIView.exclude_from_schema and the exclude_from_schema argument to the @api_view decorator are now deprecated. They will be removed entirely in 3.9. For APIView you should instead set a schema = None attribute on the view class. For function based views the @schema decorator can be used to exclude the view from the schema, by using @schema(None) .","title":"exclude_from_schema"},{"location":"community/3.8-announcement/#minor-fixes-and-improvements","text":"There are a large number of minor fixes and improvements in this release. See the release notes page for a complete listing.","title":"Minor fixes and improvements"},{"location":"community/3.8-announcement/#whats-next","text":"We're currently working towards moving to using OpenAPI as our default schema output. We'll also be revisiting our API documentation generation and client libraries. We're doing some consolidation in order to make this happen. It's planned that 3.9 will drop the coreapi and coreschema libraries, and instead use apistar for the API documentation generation, schema generation, and API client libraries.","title":"What's next"},{"location":"community/3.9-announcement/","text":".promo li a { float: left; width: 130px; height: 20px; text-align: center; margin: 10px 30px; padding: 150px 0 0 0; background-position: 0 50%; background-size: 130px auto; background-repeat: no-repeat; font-size: 120%; color: black; } .promo li { list-style: none; } Django REST framework 3.9 The 3.9 release gives access to extra actions in the Browsable API, introduces composable permissions and built-in OpenAPI schema support. (Formerly known as Swagger) Funding If you use REST framework commercially and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . Rover.com Sentry Stream Auklet Rollbar Cadre Load Impact Kloudless Many thanks to all our wonderful sponsors , and in particular to our premium backers, Rover , Sentry , Stream , Auklet , Rollbar , Cadre , Load Impact , and Kloudless . Built-in OpenAPI schema support REST framework now has a first-pass at directly including OpenAPI schema support. (Formerly known as Swagger) Specifically: There are now OpenAPIRenderer , and JSONOpenAPIRenderer classes that deal with encoding coreapi.Document instances into OpenAPI YAML or OpenAPI JSON. The get_schema_view(...) method now defaults to OpenAPI YAML, with CoreJSON as a secondary option if it is selected via HTTP content negotiation. There is a new management command generateschema , which you can use to dump the schema into your repository. Here's an example of adding an OpenAPI schema to the URL conf: from rest_framework.schemas import get_schema_view from rest_framework.renderers import JSONOpenAPIRenderer from django.urls import path schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', renderer_classes=[JSONOpenAPIRenderer] ) urlpatterns = [ path('schema.json', schema_view), ... ] And here's how you can use the generateschema management command: $ python manage.py generateschema --format openapi > schema.yml There's lots of different tooling that you can use for working with OpenAPI schemas. One option that we're working on is the API Star command line tool. You can use apistar to validate your API schema: $ apistar validate --path schema.json --format openapi \u2713 Valid OpenAPI schema. Or to build API documentation: $ apistar docs --path schema.json --format openapi \u2713 Documentation built at \"build/index.html\". API Star also includes a dynamic client library that uses an API schema to automatically provide a client library interface for making requests. Composable permission classes You can now compose permission classes using the and/or operators, & and | . For example... permission_classes = [IsAuthenticated & (ReadOnly | IsAdmin)] If you're using custom permission classes then make sure that you are subclassing from BasePermission in order to enable this support. ViewSet Extra Actions available in the Browsable API Following the introduction of the action decorator in v3.8, extra actions defined on a ViewSet are now available from the Browsable API. When defined, a dropdown of \"Extra Actions\", appropriately filtered to detail/non-detail actions, is displayed. Supported Versions REST framework 3.9 supports Django versions 1.11, 2.0, and 2.1. Deprecations DjangoObjectPermissionsFilter moved to third-party package. The DjangoObjectPermissionsFilter class is pending deprecation, will be deprecated in 3.10 and removed entirely in 3.11. It has been moved to the third-party djangorestframework-guardian package. Please use this instead. Router argument/method renamed to use basename for consistency. The Router.register base_name argument has been renamed in favor of basename . The Router.get_default_base_name method has been renamed in favor of Router.get_default_basename . #5990 See #5990 . base_name and get_default_base_name() are pending deprecation. They will be deprecated in 3.10 and removed entirely in 3.11. action decorator replaces list_route and detail_route Both list_route and detail_route are now deprecated in favour of the single action decorator. They will be removed entirely in 3.10. The action decorator takes a boolean detail argument. Replace detail_route uses with @action(detail=True) . Replace list_route uses with @action(detail=False) . exclude_from_schema Both APIView.exclude_from_schema and the exclude_from_schema argument to the @api_view have now been removed. For APIView you should instead set a schema = None attribute on the view class. For function-based views the @schema decorator can be used to exclude the view from the schema, by using @schema(None) . Minor fixes and improvements There are a large number of minor fixes and improvements in this release. See the release notes page for a complete listing. What's next We're planning to iteratively work towards OpenAPI becoming the standard schema representation. This will mean that the coreapi dependency will gradually become removed, and we'll instead generate the schema directly, rather than building a CoreAPI Document object. OpenAPI has clearly become the standard for specifying Web APIs, so there's not much value any more in our schema-agnostic document model. Making this change will mean that we'll more easily be able to take advantage of the full set of OpenAPI functionality. This will also make a wider range of tooling available. We'll focus on continuing to develop the API Star library and client tool into a recommended option for generating API docs, validating API schemas, and providing a dynamic client library. There's also a huge amount of ongoing work on maturing the ASGI landscape, with the possibility that some of this work will eventually feed back into Django . There will be further work on the Uvicorn web server, as well as lots of functionality planned for the Starlette web framework, which is building a foundational set of tooling for working with ASGI.","title":"3.9 Announcement"},{"location":"community/3.9-announcement/#django-rest-framework-39","text":"The 3.9 release gives access to extra actions in the Browsable API, introduces composable permissions and built-in OpenAPI schema support. (Formerly known as Swagger)","title":"Django REST framework 3.9"},{"location":"community/3.9-announcement/#funding","text":"If you use REST framework commercially and would like to see this work continue, we strongly encourage you to invest in its continued development by signing up for a paid plan . Rover.com Sentry Stream Auklet Rollbar Cadre Load Impact Kloudless Many thanks to all our wonderful sponsors , and in particular to our premium backers, Rover , Sentry , Stream , Auklet , Rollbar , Cadre , Load Impact , and Kloudless .","title":"Funding"},{"location":"community/3.9-announcement/#built-in-openapi-schema-support","text":"REST framework now has a first-pass at directly including OpenAPI schema support. (Formerly known as Swagger) Specifically: There are now OpenAPIRenderer , and JSONOpenAPIRenderer classes that deal with encoding coreapi.Document instances into OpenAPI YAML or OpenAPI JSON. The get_schema_view(...) method now defaults to OpenAPI YAML, with CoreJSON as a secondary option if it is selected via HTTP content negotiation. There is a new management command generateschema , which you can use to dump the schema into your repository. Here's an example of adding an OpenAPI schema to the URL conf: from rest_framework.schemas import get_schema_view from rest_framework.renderers import JSONOpenAPIRenderer from django.urls import path schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', renderer_classes=[JSONOpenAPIRenderer] ) urlpatterns = [ path('schema.json', schema_view), ... ] And here's how you can use the generateschema management command: $ python manage.py generateschema --format openapi > schema.yml There's lots of different tooling that you can use for working with OpenAPI schemas. One option that we're working on is the API Star command line tool. You can use apistar to validate your API schema: $ apistar validate --path schema.json --format openapi \u2713 Valid OpenAPI schema. Or to build API documentation: $ apistar docs --path schema.json --format openapi \u2713 Documentation built at \"build/index.html\". API Star also includes a dynamic client library that uses an API schema to automatically provide a client library interface for making requests.","title":"Built-in OpenAPI schema support"},{"location":"community/3.9-announcement/#composable-permission-classes","text":"You can now compose permission classes using the and/or operators, & and | . For example... permission_classes = [IsAuthenticated & (ReadOnly | IsAdmin)] If you're using custom permission classes then make sure that you are subclassing from BasePermission in order to enable this support.","title":"Composable permission classes"},{"location":"community/3.9-announcement/#viewset-extra-actions-available-in-the-browsable-api","text":"Following the introduction of the action decorator in v3.8, extra actions defined on a ViewSet are now available from the Browsable API. When defined, a dropdown of \"Extra Actions\", appropriately filtered to detail/non-detail actions, is displayed.","title":"ViewSet Extra Actions available in the Browsable API"},{"location":"community/3.9-announcement/#supported-versions","text":"REST framework 3.9 supports Django versions 1.11, 2.0, and 2.1.","title":"Supported Versions"},{"location":"community/3.9-announcement/#deprecations","text":"","title":"Deprecations"},{"location":"community/3.9-announcement/#djangoobjectpermissionsfilter-moved-to-third-party-package","text":"The DjangoObjectPermissionsFilter class is pending deprecation, will be deprecated in 3.10 and removed entirely in 3.11. It has been moved to the third-party djangorestframework-guardian package. Please use this instead.","title":"DjangoObjectPermissionsFilter moved to third-party package."},{"location":"community/3.9-announcement/#router-argumentmethod-renamed-to-use-basename-for-consistency","text":"The Router.register base_name argument has been renamed in favor of basename . The Router.get_default_base_name method has been renamed in favor of Router.get_default_basename . #5990 See #5990 . base_name and get_default_base_name() are pending deprecation. They will be deprecated in 3.10 and removed entirely in 3.11.","title":"Router argument/method renamed to use basename for consistency."},{"location":"community/3.9-announcement/#action-decorator-replaces-list_route-and-detail_route","text":"Both list_route and detail_route are now deprecated in favour of the single action decorator. They will be removed entirely in 3.10. The action decorator takes a boolean detail argument. Replace detail_route uses with @action(detail=True) . Replace list_route uses with @action(detail=False) .","title":"action decorator replaces list_route and detail_route"},{"location":"community/3.9-announcement/#exclude_from_schema","text":"Both APIView.exclude_from_schema and the exclude_from_schema argument to the @api_view have now been removed. For APIView you should instead set a schema = None attribute on the view class. For function-based views the @schema decorator can be used to exclude the view from the schema, by using @schema(None) .","title":"exclude_from_schema"},{"location":"community/3.9-announcement/#minor-fixes-and-improvements","text":"There are a large number of minor fixes and improvements in this release. See the release notes page for a complete listing.","title":"Minor fixes and improvements"},{"location":"community/3.9-announcement/#whats-next","text":"We're planning to iteratively work towards OpenAPI becoming the standard schema representation. This will mean that the coreapi dependency will gradually become removed, and we'll instead generate the schema directly, rather than building a CoreAPI Document object. OpenAPI has clearly become the standard for specifying Web APIs, so there's not much value any more in our schema-agnostic document model. Making this change will mean that we'll more easily be able to take advantage of the full set of OpenAPI functionality. This will also make a wider range of tooling available. We'll focus on continuing to develop the API Star library and client tool into a recommended option for generating API docs, validating API schemas, and providing a dynamic client library. There's also a huge amount of ongoing work on maturing the ASGI landscape, with the possibility that some of this work will eventually feed back into Django . There will be further work on the Uvicorn web server, as well as lots of functionality planned for the Starlette web framework, which is building a foundational set of tooling for working with ASGI.","title":"What's next"},{"location":"community/contributing/","text":"Contributing to REST framework The world can only really be changed one piece at a time. The art is picking that piece. \u2014 Tim Berners-Lee There are many ways you can contribute to Django REST framework. We'd like it to be a community-led project, so please get involved and help shape the future of the project. Community The most important thing you can do to help push the REST framework project forward is to be actively involved wherever possible. Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case. If you use REST framework, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about using REST framework, or publishing a tutorial about building a project with a particular JavaScript framework. Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of REST framework are more difficult to understand and work with. Other really great ways you can help move the community forward include helping to answer questions on the discussion group , or setting up an email alert on StackOverflow so that you get notified of any new questions with the django-rest-framework tag. When answering questions make sure to help future contributors find their way around by hyperlinking wherever possible to related threads and tickets, and include backlinks from those items if relevant. Code of conduct Please keep the tone polite & professional. For some users a discussion on the REST framework mailing list or ticket tracker may be their first engagement with the open source community. First impressions count, so let's try to make everyone feel welcome. Be mindful in the language you choose. As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive. It's just as easy, and more inclusive to use gender neutral language in those situations. The Django code of conduct gives a fuller set of guidelines for participating in community forums. Issues It's really helpful if you can make sure to address issues on the correct channel. Usage questions should be directed to the discussion group . Feature requests, bug reports and other issues should be raised on the GitHub issue tracker . Some tips on good issue reporting: When describing issues try to phrase your ticket in terms of the behavior you think needs changing rather than the code you think need changing. Search the issue list first for related items, and make sure you're running the latest version of REST framework before reporting an issue. If reporting a bug, then try to include a pull request with a failing test case. This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one. Feature requests will often be closed with a recommendation that they be implemented outside of the core REST framework library. Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead of REST framework, so that the focus can be on continued stability, bugfixes, and great documentation. Closing an issue doesn't necessarily mean the end of a discussion. If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened. Triaging issues Getting involved in triaging incoming issues is a good way to start contributing. Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be. Anyone can help out with this, you just need to be willing to Read through the ticket - does it make sense, is it missing any context that would help explain it better? Is the ticket reported in the correct place, would it be better suited as a discussion on the discussion group? If the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request? If the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package? If a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again. Development To start developing on Django REST framework, first create a Fork from the Django REST Framework repo on GitHub. Then clone your fork. The clone command will look like this, with your GitHub username instead of YOUR-USERNAME: git clone https://github.com/YOUR-USERNAME/Spoon-Knife See GitHub's Fork a Repo Guide for more help. Changes should broadly follow the PEP 8 style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles. Testing To run the tests, clone the repository, and then: # Setup the virtual environment python3 -m venv env source env/bin/activate pip install django pip install -r requirements.txt # Run the tests ./runtests.py Test options Run using a more concise output style. ./runtests.py -q Run the tests using a more concise output style, no coverage, no flake8. ./runtests.py --fast Don't run the flake8 code linting. ./runtests.py --nolint Only run the flake8 code linting, don't run the tests. ./runtests.py --lintonly Run the tests for a given test case. ./runtests.py MyTestCase Run the tests for a given test method. ./runtests.py MyTestCase.test_this_method Shorter form to run the tests for a given test method. ./runtests.py test_this_method Note: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given command line input. Running against multiple environments You can also use the excellent tox testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run: tox Pull requests It's a good idea to make pull requests early on. A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission. It's also always best to make a new branch before starting work on a pull request. This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests. It's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests. GitHub's documentation for working on pull requests is available here . Always run the tests before submitting pull requests, and ideally run tox in order to check that your modifications are compatible on all supported versions of Python and Django. Once you've made a pull request take a look at the Travis build status in the GitHub interface and make sure the tests are running as you'd expect. Above: Travis build notifications Managing compatibility issues Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into the compat.py module, and should provide a single common interface that the rest of the codebase can use. Documentation The documentation for REST framework is built from the Markdown source files in the docs directory . There are many great Markdown editors that make working with the documentation really easy. The Mou editor for Mac is one such editor that comes highly recommended. Building the documentation To build the documentation, install MkDocs with pip install mkdocs and then run the following command. mkdocs build This will build the documentation into the site directory. You can build the documentation and open a preview in a browser window by using the serve command. mkdocs serve Language style Documentation should be in American English. The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible. Some other tips: Keep paragraphs reasonably short. Don't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'. Markdown style There are a couple of conventions you should follow when working on the documentation. 1. Headers Headers should use the hash style. For example: ### Some important topic The underline style should not be used. Don't do this: Some important topic ==================== 2. Links Links should always use the reference style, with the referenced hyperlinks kept at the end of the document. Here is a link to [some other thing][other-thing]. More text... [other-thing]: http://example.com/other/thing This style helps keep the documentation source consistent and readable. If you are hyperlinking to another REST framework document, you should use a relative link, and link to the .md suffix. For example: [authentication]: ../api-guide/authentication.md Linking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document. When the documentation is built, these links will be converted into regular links to HTML pages. 3. Notes If you want to draw attention to a note or warning, use a pair of enclosing lines, like so: --- **Note:** A useful documentation note. ---","title":"Contributing to REST framework"},{"location":"community/contributing/#contributing-to-rest-framework","text":"The world can only really be changed one piece at a time. The art is picking that piece. \u2014 Tim Berners-Lee There are many ways you can contribute to Django REST framework. We'd like it to be a community-led project, so please get involved and help shape the future of the project.","title":"Contributing to REST framework"},{"location":"community/contributing/#community","text":"The most important thing you can do to help push the REST framework project forward is to be actively involved wherever possible. Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case. If you use REST framework, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about using REST framework, or publishing a tutorial about building a project with a particular JavaScript framework. Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of REST framework are more difficult to understand and work with. Other really great ways you can help move the community forward include helping to answer questions on the discussion group , or setting up an email alert on StackOverflow so that you get notified of any new questions with the django-rest-framework tag. When answering questions make sure to help future contributors find their way around by hyperlinking wherever possible to related threads and tickets, and include backlinks from those items if relevant.","title":"Community"},{"location":"community/contributing/#code-of-conduct","text":"Please keep the tone polite & professional. For some users a discussion on the REST framework mailing list or ticket tracker may be their first engagement with the open source community. First impressions count, so let's try to make everyone feel welcome. Be mindful in the language you choose. As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive. It's just as easy, and more inclusive to use gender neutral language in those situations. The Django code of conduct gives a fuller set of guidelines for participating in community forums.","title":"Code of conduct"},{"location":"community/contributing/#issues","text":"It's really helpful if you can make sure to address issues on the correct channel. Usage questions should be directed to the discussion group . Feature requests, bug reports and other issues should be raised on the GitHub issue tracker . Some tips on good issue reporting: When describing issues try to phrase your ticket in terms of the behavior you think needs changing rather than the code you think need changing. Search the issue list first for related items, and make sure you're running the latest version of REST framework before reporting an issue. If reporting a bug, then try to include a pull request with a failing test case. This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one. Feature requests will often be closed with a recommendation that they be implemented outside of the core REST framework library. Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead of REST framework, so that the focus can be on continued stability, bugfixes, and great documentation. Closing an issue doesn't necessarily mean the end of a discussion. If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened.","title":"Issues"},{"location":"community/contributing/#triaging-issues","text":"Getting involved in triaging incoming issues is a good way to start contributing. Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be. Anyone can help out with this, you just need to be willing to Read through the ticket - does it make sense, is it missing any context that would help explain it better? Is the ticket reported in the correct place, would it be better suited as a discussion on the discussion group? If the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request? If the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package? If a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again.","title":"Triaging issues"},{"location":"community/contributing/#development","text":"To start developing on Django REST framework, first create a Fork from the Django REST Framework repo on GitHub. Then clone your fork. The clone command will look like this, with your GitHub username instead of YOUR-USERNAME: git clone https://github.com/YOUR-USERNAME/Spoon-Knife See GitHub's Fork a Repo Guide for more help. Changes should broadly follow the PEP 8 style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles.","title":"Development"},{"location":"community/contributing/#testing","text":"To run the tests, clone the repository, and then: # Setup the virtual environment python3 -m venv env source env/bin/activate pip install django pip install -r requirements.txt # Run the tests ./runtests.py","title":"Testing"},{"location":"community/contributing/#test-options","text":"Run using a more concise output style. ./runtests.py -q Run the tests using a more concise output style, no coverage, no flake8. ./runtests.py --fast Don't run the flake8 code linting. ./runtests.py --nolint Only run the flake8 code linting, don't run the tests. ./runtests.py --lintonly Run the tests for a given test case. ./runtests.py MyTestCase Run the tests for a given test method. ./runtests.py MyTestCase.test_this_method Shorter form to run the tests for a given test method. ./runtests.py test_this_method Note: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given command line input.","title":"Test options"},{"location":"community/contributing/#running-against-multiple-environments","text":"You can also use the excellent tox testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run: tox","title":"Running against multiple environments"},{"location":"community/contributing/#pull-requests","text":"It's a good idea to make pull requests early on. A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission. It's also always best to make a new branch before starting work on a pull request. This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests. It's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests. GitHub's documentation for working on pull requests is available here . Always run the tests before submitting pull requests, and ideally run tox in order to check that your modifications are compatible on all supported versions of Python and Django. Once you've made a pull request take a look at the Travis build status in the GitHub interface and make sure the tests are running as you'd expect. Above: Travis build notifications","title":"Pull requests"},{"location":"community/contributing/#managing-compatibility-issues","text":"Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into the compat.py module, and should provide a single common interface that the rest of the codebase can use.","title":"Managing compatibility issues"},{"location":"community/contributing/#documentation","text":"The documentation for REST framework is built from the Markdown source files in the docs directory . There are many great Markdown editors that make working with the documentation really easy. The Mou editor for Mac is one such editor that comes highly recommended.","title":"Documentation"},{"location":"community/contributing/#building-the-documentation","text":"To build the documentation, install MkDocs with pip install mkdocs and then run the following command. mkdocs build This will build the documentation into the site directory. You can build the documentation and open a preview in a browser window by using the serve command. mkdocs serve","title":"Building the documentation"},{"location":"community/contributing/#language-style","text":"Documentation should be in American English. The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible. Some other tips: Keep paragraphs reasonably short. Don't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'.","title":"Language style"},{"location":"community/contributing/#markdown-style","text":"There are a couple of conventions you should follow when working on the documentation.","title":"Markdown style"},{"location":"community/contributing/#1-headers","text":"Headers should use the hash style. For example: ### Some important topic The underline style should not be used. Don't do this: Some important topic ====================","title":"1. Headers"},{"location":"community/contributing/#2-links","text":"Links should always use the reference style, with the referenced hyperlinks kept at the end of the document. Here is a link to [some other thing][other-thing]. More text... [other-thing]: http://example.com/other/thing This style helps keep the documentation source consistent and readable. If you are hyperlinking to another REST framework document, you should use a relative link, and link to the .md suffix. For example: [authentication]: ../api-guide/authentication.md Linking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document. When the documentation is built, these links will be converted into regular links to HTML pages.","title":"2. Links"},{"location":"community/contributing/#3-notes","text":"If you want to draw attention to a note or warning, use a pair of enclosing lines, like so: --- **Note:** A useful documentation note. ---","title":"3. Notes"},{"location":"community/funding/","text":"// Imperfect, but easier to fit in with the existing docs build. // Hyperlinks should point directly to the \"fund.\" subdomain, but this'll // handle the nav bar links without requiring any docs build changes for the moment. if (window.location.hostname == \"www.django-rest-framework.org\") { window.location.replace(\"https://fund.django-rest-framework.org/topics/funding/\"); } .promo li a { float: left; width: 130px; height: 20px; text-align: center; margin: 10px 30px; padding: 150px 0 0 0; background-position: 0 50%; background-size: 130px auto; background-repeat: no-repeat; font-size: 120%; color: black; } .promo li { list-style: none; } .chart { background-color: #e3e3e3; background: -webkit-linear-gradient(top, #fff 0, #e3e3e3 100%); border: 1px solid #E6E6E6; border-radius: 5px; box-shadow: 0px 0px 2px 0px rgba(181, 181, 181, 0.3); padding: 40px 0px 5px; position: relative; text-align: center; width: 97%; min-height: 255px; position: relative; top: 37px; margin-bottom: 20px } .quantity { text-align: center } .dollar { font-size: 19px; position: relative; top: -18px; } .price { font-size: 49px; } .period { font-size: 17px; position: relative; top: -8px; margin-left: 4px; } .plan-name { text-align: center; font-size: 20px; font-weight: 400; color: #777; border-bottom: 1px solid #d5d5d5; padding-bottom: 15px; width: 90%; margin: 0 auto; margin-top: 8px; } .specs { margin-top: 20px; min-height: 130px; } .specs.freelancer { min-height: 0px; } .spec { font-size: 15px; color: #474747; text-align: center; font-weight: 300; margin-bottom: 13px; } .variable { color: #1FBEE7; font-weight: 400; } form.signup { margin-top: 35px } .clear-promo { padding-top: 30px } #main-content h1:first-of-type { margin: 0 0 50px; font-size: 60px; font-weight: 200; text-align: center } #main-content { padding-top: 10px; line-height: 23px } #main-content li { line-height: 23px } Funding If you use REST framework commercially we strongly encourage you to invest in its continued development by signing up for a paid plan. We believe that collaboratively funded software can offer outstanding returns on investment, by encouraging our users to collectively share the cost of development. Signing up for a paid plan will: Directly contribute to faster releases, more features, and higher quality software. Allow more time to be invested in documentation, issue triage, and community support. Safeguard the future development of REST framework. REST framework continues to be open-source and permissively licensed, but we firmly believe it is in the commercial best-interest for users of the project to invest in its ongoing development. What funding has enabled so far The 3.4 and 3.5 releases, including schema generation for both Swagger and RAML, a Python client library, a Command Line client, and addressing of a large number of outstanding issues. The 3.6 release, including JavaScript client library, and API documentation, complete with auto-generated code samples. The 3.7 release , made possible due to our collaborative funding model, focuses on improvements to schema generation and the interactive API documentation. The recent 3.8 release . Tom Christie, the creator of Django REST framework, working on the project full-time. Around 80-90 issues and pull requests closed per month since Tom Christie started working on the project full-time. A community & operations manager position part-time for 4 months, helping mature the business and grow sponsorship. Contracting development time for the work on the JavaScript client library and API documentation tooling. What future funding will enable Realtime API support, using WebSockets. This will consist of documentation and support for using REST framework together with Django Channels, plus integrating WebSocket support into the client libraries. Better authentication defaults, possibly bringing JWT & CORs support into the core package. Securing the community & operations manager position long-term. Opening up and securing a part-time position to focus on ticket triage and resolution. Paying for development time on building API client libraries in a range of programming languages. These would be integrated directly into the upcoming API documentation. Sign up for a paid plan today, and help ensure that REST framework becomes a sustainable, full-time funded project. What our sponsors and users say As a developer, Django REST framework feels like an obvious and natural extension to all the great things that make up Django and it's community. Getting started is easy while providing simple abstractions which makes it flexible and customizable. Contributing and supporting Django REST framework helps ensure its future and one way or another it also helps Django, and the Python ecosystem. \u2014 Jos\u00e9 Padilla, Django REST framework contributor The number one feature of the Python programming language is its community. Such a community is only possible because of the Open Source nature of the language and all the culture that comes from it. Building great Open Source projects require great minds. Given that, we at Vinta are not only proud to sponsor the team behind DRF but we also recognize the ROI that comes from it. \u2014 Filipe Ximenes, Vinta Software It's really awesome that this project continues to endure. The code base is top notch and the maintainers are committed to the highest level of quality. DRF is one of the core reasons why Django is top choice among web frameworks today. In my opinion, it sets the standard for rest frameworks for the development community at large. \u2014 Andrew Conti, Django REST framework user Individual plan This subscription is recommended for individuals with an interest in seeing REST framework continue to improve. If you are using REST framework as a full-time employee, consider recommending that your company takes out a corporate plan . {{ symbol }} {{ rates.personal1 }} /month{% if vat %} +VAT{% endif %} Individual Support ongoing development Credited on the site Billing is monthly and you can cancel at any time. Corporate plans These subscriptions are recommended for companies and organizations using REST framework either publicly or privately. In exchange for funding you'll also receive advertising space on our site, allowing you to promote your company or product to many tens of thousands of developers worldwide . Our professional and premium plans also include priority support . At any time your engineers can escalate an issue or discussion group thread, and we'll ensure it gets a guaranteed response within the next working day. {{ symbol }} {{ rates.corporate1 }} /month{% if vat %} +VAT{% endif %} Basic Support ongoing development Funding page ad placement {{ symbol }} {{ rates.corporate2 }} /month{% if vat %} +VAT{% endif %} Professional Support ongoing development Sidebar ad placement Priority support for your engineers {{ symbol }} {{ rates.corporate3 }} /month{% if vat %} +VAT{% endif %} Premium Support ongoing development Homepage ad placement Sidebar ad placement Priority support for your engineers Billing is monthly and you can cancel at any time. Once you've signed up, we will contact you via email and arrange your ad placements on the site. For further enquires please contact funding@django-rest-framework.org . Accountability In an effort to keep the project as transparent as possible, we are releasing monthly progress reports and regularly include financial reports and cost breakdowns. #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /<em> Add your own MailChimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. </em>/ Stay up to date, with our monthly progress reports... Email Address (function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';}(jQuery));var $mcj = jQuery.noConflict(true); Frequently asked questions Q: Can you issue monthly invoices? A: Yes, we are happy to issue monthly invoices. Please just email us and let us know who to issue the invoice to (name and address) and which email address to send it to each month. Q: Does sponsorship include VAT? A: Sponsorship is VAT exempt. Q: Do I have to sign up for a certain time period? A: No, we appreciate your support for any time period that is convenient for you. Also, you can cancel your sponsorship anytime. Q: Can I pay yearly? Can I pay upfront fox X amount of months at a time? A: We are currently only set up to accept monthly payments. However, if you'd like to support Django REST framework and you can only do yearly/upfront payments, we are happy to work with you and figure out a convenient solution. Q: Are you only looking for corporate sponsors? A: No, we value individual sponsors just as much as corporate sponsors and appreciate any kind of support. Our sponsors","title":"Funding"},{"location":"community/funding/#funding","text":"If you use REST framework commercially we strongly encourage you to invest in its continued development by signing up for a paid plan. We believe that collaboratively funded software can offer outstanding returns on investment, by encouraging our users to collectively share the cost of development. Signing up for a paid plan will: Directly contribute to faster releases, more features, and higher quality software. Allow more time to be invested in documentation, issue triage, and community support. Safeguard the future development of REST framework. REST framework continues to be open-source and permissively licensed, but we firmly believe it is in the commercial best-interest for users of the project to invest in its ongoing development.","title":"Funding"},{"location":"community/funding/#what-funding-has-enabled-so-far","text":"The 3.4 and 3.5 releases, including schema generation for both Swagger and RAML, a Python client library, a Command Line client, and addressing of a large number of outstanding issues. The 3.6 release, including JavaScript client library, and API documentation, complete with auto-generated code samples. The 3.7 release , made possible due to our collaborative funding model, focuses on improvements to schema generation and the interactive API documentation. The recent 3.8 release . Tom Christie, the creator of Django REST framework, working on the project full-time. Around 80-90 issues and pull requests closed per month since Tom Christie started working on the project full-time. A community & operations manager position part-time for 4 months, helping mature the business and grow sponsorship. Contracting development time for the work on the JavaScript client library and API documentation tooling.","title":"What funding has enabled so far"},{"location":"community/funding/#what-future-funding-will-enable","text":"Realtime API support, using WebSockets. This will consist of documentation and support for using REST framework together with Django Channels, plus integrating WebSocket support into the client libraries. Better authentication defaults, possibly bringing JWT & CORs support into the core package. Securing the community & operations manager position long-term. Opening up and securing a part-time position to focus on ticket triage and resolution. Paying for development time on building API client libraries in a range of programming languages. These would be integrated directly into the upcoming API documentation. Sign up for a paid plan today, and help ensure that REST framework becomes a sustainable, full-time funded project.","title":"What future funding will enable"},{"location":"community/funding/#what-our-sponsors-and-users-say","text":"As a developer, Django REST framework feels like an obvious and natural extension to all the great things that make up Django and it's community. Getting started is easy while providing simple abstractions which makes it flexible and customizable. Contributing and supporting Django REST framework helps ensure its future and one way or another it also helps Django, and the Python ecosystem. \u2014 Jos\u00e9 Padilla, Django REST framework contributor The number one feature of the Python programming language is its community. Such a community is only possible because of the Open Source nature of the language and all the culture that comes from it. Building great Open Source projects require great minds. Given that, we at Vinta are not only proud to sponsor the team behind DRF but we also recognize the ROI that comes from it. \u2014 Filipe Ximenes, Vinta Software It's really awesome that this project continues to endure. The code base is top notch and the maintainers are committed to the highest level of quality. DRF is one of the core reasons why Django is top choice among web frameworks today. In my opinion, it sets the standard for rest frameworks for the development community at large. \u2014 Andrew Conti, Django REST framework user","title":"What our sponsors and users say"},{"location":"community/funding/#individual-plan","text":"This subscription is recommended for individuals with an interest in seeing REST framework continue to improve. If you are using REST framework as a full-time employee, consider recommending that your company takes out a corporate plan . {{ symbol }} {{ rates.personal1 }} /month{% if vat %} +VAT{% endif %} Individual Support ongoing development Credited on the site Billing is monthly and you can cancel at any time.","title":"Individual plan"},{"location":"community/funding/#corporate-plans","text":"These subscriptions are recommended for companies and organizations using REST framework either publicly or privately. In exchange for funding you'll also receive advertising space on our site, allowing you to promote your company or product to many tens of thousands of developers worldwide . Our professional and premium plans also include priority support . At any time your engineers can escalate an issue or discussion group thread, and we'll ensure it gets a guaranteed response within the next working day. {{ symbol }} {{ rates.corporate1 }} /month{% if vat %} +VAT{% endif %} Basic Support ongoing development Funding page ad placement {{ symbol }} {{ rates.corporate2 }} /month{% if vat %} +VAT{% endif %} Professional Support ongoing development Sidebar ad placement Priority support for your engineers {{ symbol }} {{ rates.corporate3 }} /month{% if vat %} +VAT{% endif %} Premium Support ongoing development Homepage ad placement Sidebar ad placement Priority support for your engineers Billing is monthly and you can cancel at any time. Once you've signed up, we will contact you via email and arrange your ad placements on the site. For further enquires please contact funding@django-rest-framework.org .","title":"Corporate plans"},{"location":"community/funding/#accountability","text":"In an effort to keep the project as transparent as possible, we are releasing monthly progress reports and regularly include financial reports and cost breakdowns. #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /<em> Add your own MailChimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. </em>/","title":"Accountability"},{"location":"community/funding/#frequently-asked-questions","text":"Q: Can you issue monthly invoices? A: Yes, we are happy to issue monthly invoices. Please just email us and let us know who to issue the invoice to (name and address) and which email address to send it to each month. Q: Does sponsorship include VAT? A: Sponsorship is VAT exempt. Q: Do I have to sign up for a certain time period? A: No, we appreciate your support for any time period that is convenient for you. Also, you can cancel your sponsorship anytime. Q: Can I pay yearly? Can I pay upfront fox X amount of months at a time? A: We are currently only set up to accept monthly payments. However, if you'd like to support Django REST framework and you can only do yearly/upfront payments, we are happy to work with you and figure out a convenient solution. Q: Are you only looking for corporate sponsors? A: No, we value individual sponsors just as much as corporate sponsors and appreciate any kind of support.","title":"Frequently asked questions"},{"location":"community/funding/#our-sponsors","text":"","title":"Our sponsors"},{"location":"community/jobs/","text":"Jobs Looking for a new Django REST Framework related role? On this site we provide a list of job resources that may be helpful. It's also worth checking out if any of our sponsors are hiring . Places to look for Django REST Framework Jobs https://www.djangoproject.com/community/jobs/ https://www.python.org/jobs/ https://djangogigs.com https://djangojobs.net/jobs/ https://findwork.dev/django-rest-framework-jobs https://www.indeed.com/q-Django-jobs.html https://stackoverflow.com/jobs/developer-jobs-using-django https://www.upwork.com/o/jobs/browse/skill/django-framework/ https://www.technojobs.co.uk/django-jobs https://remoteok.io/remote-django-jobs https://www.remotepython.com/jobs/ Know of any other great resources for Django REST Framework jobs that are missing in our list? Please submit a pull request or email us . Wonder how else you can help? One of the best ways you can help Django REST Framework is to ask interviewers if their company is signed up for REST Framework sponsorship yet.","title":"Jobs"},{"location":"community/jobs/#jobs","text":"Looking for a new Django REST Framework related role? On this site we provide a list of job resources that may be helpful. It's also worth checking out if any of our sponsors are hiring .","title":"Jobs"},{"location":"community/jobs/#places-to-look-for-django-rest-framework-jobs","text":"https://www.djangoproject.com/community/jobs/ https://www.python.org/jobs/ https://djangogigs.com https://djangojobs.net/jobs/ https://findwork.dev/django-rest-framework-jobs https://www.indeed.com/q-Django-jobs.html https://stackoverflow.com/jobs/developer-jobs-using-django https://www.upwork.com/o/jobs/browse/skill/django-framework/ https://www.technojobs.co.uk/django-jobs https://remoteok.io/remote-django-jobs https://www.remotepython.com/jobs/ Know of any other great resources for Django REST Framework jobs that are missing in our list? Please submit a pull request or email us . Wonder how else you can help? One of the best ways you can help Django REST Framework is to ask interviewers if their company is signed up for REST Framework sponsorship yet.","title":"Places to look for Django REST Framework Jobs"},{"location":"community/kickstarter-announcement/","text":"Kickstarting Django REST framework 3 In order to continue to drive the project forward, I'm launching a Kickstarter campaign to help fund the development of a major new release - Django REST framework 3. Project details This new release will allow us to comprehensively address some of the shortcomings of the framework, and will aim to include the following: Faster, simpler and easier-to-use serializers. An alternative admin-style interface for the browsable API. Search and filtering controls made accessible in the browsable API. Alternative API pagination styles. Documentation around API versioning. Triage of outstanding tickets. Improving the ongoing quality and maintainability of the project. Full details are available now on the project page . If you're interested in helping make sustainable open source development a reality please visit the Kickstarter page and consider funding the project. I can't wait to see where this takes us! Many thanks to everyone for your support so far, Tom Christie :) Sponsors We've now blazed way past all our goals, with a staggering \u00a330,000 (~$50,000), meaning I'll be in a position to work on the project significantly beyond what we'd originally planned for. I owe a huge debt of gratitude to all the wonderful companies and individuals who have been backing the project so generously, and making this possible. Platinum sponsors Our platinum sponsors have each made a hugely substantial contribution to the future development of Django REST framework, and I simply can't thank them enough. Eventbrite Divio Lulu Potato Wiredrive Cyan Runscope Simple Energy VOKAL Interactive Purple Bit KuwaitNET Gold sponsors Our gold sponsors include companies large and small. Many thanks for their significant funding of the project and their commitment to sustainable open-source development. LaterPay Schuberg Philis ProReNata AB SGA Websites Sirono Vinta Software Studio Rapasso Mirus Research Hipo Byte Lightning Kite Opbeat Koordinates Pulsecode Inc. Singing Horse Studio Ltd. Heroku Rheinwerk Verlag Security Compass Django Software Foundation Hipflask Crate Cryptico Corp NextHub Compile WusaWork Envision Linux Silver sponsors The serious financial contribution that our silver sponsors have made is very much appreciated. I'd like to say a particular thank you to individuals who have chosen to privately support the project at this level. IMT Computer Services Wildfish Thermondo GmbH Providenz alwaysdata.com Triggered Messaging PushPull Technology Ltd Transcode Garfo Shippo Gizmag Tivix Safari Bright Loop ABA Systems beefarm.ru Vzzual.com Infinite Code Crossword Tracker PkgFarm Life. The Game. Blimp Pathwright Fluxility Teonite TrackMaven Phurba Nephila Aditium OpenEye Scientific Software Holvi Cantemo MakeSpace AX Semantics ISL Individual backers : Paul Hallett, Paul Whipp , Dylan Roy, Jannis Leidel, Xavier Ordoquy , Johannes Spielmann , Rob Spectre , Chris Heisel , Marwan Alsabbagh, Haris Ali, Tuomas Toivonen. Advocates The following individuals made a significant financial contribution to the development of Django REST framework 3, for which I can only offer a huge, warm and sincere thank you! Individual backers : Jure Cuhalev, Kevin Brolly, Ferenc Szalai, Dougal Matthews, Stefan Foulis, Carlos Hernando, Alen Mujezinovic, Ross Crawford-d'Heureuse, George Kappel, Alasdair Nicol, John Carr, Steve Winton, Trey, Manuel Miranda, David Horn, Vince Mi, Daniel Sears, Jamie Matthews, Ryan Currah, Marty Kemka, Scott Nixon, Moshin Elahi, Kevin Campbell, Jose Antonio Leiva Izquierdo, Kevin Stone, Andrew Godwin, Tijs Teulings, Roger Boardman, Xavier Antoviaque, Darian Moody, Lujeni, Jon Dugan, Wiley Kestner, Daniel C. Silverstein, Daniel Hahler, Subodh Nijsure, Philipp Weidenhiller, Yusuke Muraoka, Danny Roa, Reto Aebersold, Kyle Getrost, D\u00e9c\u00e9bal Hormuz, James Dacosta, Matt Long, Mauro Rocco, Tyrel Souza, Ryan Campbell, Ville Jyrkk\u00e4, Charalampos Papaloizou, Nikolai R\u00f8ed Kristiansen, Antoni Aloy L\u00f3pez, Celia Oakley, Micha\u0142 Krawczak, Ivan VenOsdel, Tim Watts, Martin Warne, Nicola Jordan, Ryan Kaskel. Corporate backers : Savannah Informatics, Prism Skylabs, Musical Operating Devices. Supporters There were also almost 300 further individuals choosing to help fund the project at other levels or choosing to give anonymously. Again, thank you, thank you, thank you!","title":"Kickstarter Announcement"},{"location":"community/kickstarter-announcement/#kickstarting-django-rest-framework-3","text":"In order to continue to drive the project forward, I'm launching a Kickstarter campaign to help fund the development of a major new release - Django REST framework 3.","title":"Kickstarting Django REST framework 3"},{"location":"community/kickstarter-announcement/#project-details","text":"This new release will allow us to comprehensively address some of the shortcomings of the framework, and will aim to include the following: Faster, simpler and easier-to-use serializers. An alternative admin-style interface for the browsable API. Search and filtering controls made accessible in the browsable API. Alternative API pagination styles. Documentation around API versioning. Triage of outstanding tickets. Improving the ongoing quality and maintainability of the project. Full details are available now on the project page . If you're interested in helping make sustainable open source development a reality please visit the Kickstarter page and consider funding the project. I can't wait to see where this takes us! Many thanks to everyone for your support so far, Tom Christie :)","title":"Project details"},{"location":"community/kickstarter-announcement/#sponsors","text":"We've now blazed way past all our goals, with a staggering \u00a330,000 (~$50,000), meaning I'll be in a position to work on the project significantly beyond what we'd originally planned for. I owe a huge debt of gratitude to all the wonderful companies and individuals who have been backing the project so generously, and making this possible.","title":"Sponsors"},{"location":"community/kickstarter-announcement/#platinum-sponsors","text":"Our platinum sponsors have each made a hugely substantial contribution to the future development of Django REST framework, and I simply can't thank them enough. Eventbrite Divio Lulu Potato Wiredrive Cyan Runscope Simple Energy VOKAL Interactive Purple Bit KuwaitNET","title":"Platinum sponsors"},{"location":"community/kickstarter-announcement/#gold-sponsors","text":"Our gold sponsors include companies large and small. Many thanks for their significant funding of the project and their commitment to sustainable open-source development. LaterPay Schuberg Philis ProReNata AB SGA Websites Sirono Vinta Software Studio Rapasso Mirus Research Hipo Byte Lightning Kite Opbeat Koordinates Pulsecode Inc. Singing Horse Studio Ltd. Heroku Rheinwerk Verlag Security Compass Django Software Foundation Hipflask Crate Cryptico Corp NextHub Compile WusaWork Envision Linux","title":"Gold sponsors"},{"location":"community/kickstarter-announcement/#silver-sponsors","text":"The serious financial contribution that our silver sponsors have made is very much appreciated. I'd like to say a particular thank you to individuals who have chosen to privately support the project at this level. IMT Computer Services Wildfish Thermondo GmbH Providenz alwaysdata.com Triggered Messaging PushPull Technology Ltd Transcode Garfo Shippo Gizmag Tivix Safari Bright Loop ABA Systems beefarm.ru Vzzual.com Infinite Code Crossword Tracker PkgFarm Life. The Game. Blimp Pathwright Fluxility Teonite TrackMaven Phurba Nephila Aditium OpenEye Scientific Software Holvi Cantemo MakeSpace AX Semantics ISL Individual backers : Paul Hallett, Paul Whipp , Dylan Roy, Jannis Leidel, Xavier Ordoquy , Johannes Spielmann , Rob Spectre , Chris Heisel , Marwan Alsabbagh, Haris Ali, Tuomas Toivonen.","title":"Silver sponsors"},{"location":"community/kickstarter-announcement/#advocates","text":"The following individuals made a significant financial contribution to the development of Django REST framework 3, for which I can only offer a huge, warm and sincere thank you! Individual backers : Jure Cuhalev, Kevin Brolly, Ferenc Szalai, Dougal Matthews, Stefan Foulis, Carlos Hernando, Alen Mujezinovic, Ross Crawford-d'Heureuse, George Kappel, Alasdair Nicol, John Carr, Steve Winton, Trey, Manuel Miranda, David Horn, Vince Mi, Daniel Sears, Jamie Matthews, Ryan Currah, Marty Kemka, Scott Nixon, Moshin Elahi, Kevin Campbell, Jose Antonio Leiva Izquierdo, Kevin Stone, Andrew Godwin, Tijs Teulings, Roger Boardman, Xavier Antoviaque, Darian Moody, Lujeni, Jon Dugan, Wiley Kestner, Daniel C. Silverstein, Daniel Hahler, Subodh Nijsure, Philipp Weidenhiller, Yusuke Muraoka, Danny Roa, Reto Aebersold, Kyle Getrost, D\u00e9c\u00e9bal Hormuz, James Dacosta, Matt Long, Mauro Rocco, Tyrel Souza, Ryan Campbell, Ville Jyrkk\u00e4, Charalampos Papaloizou, Nikolai R\u00f8ed Kristiansen, Antoni Aloy L\u00f3pez, Celia Oakley, Micha\u0142 Krawczak, Ivan VenOsdel, Tim Watts, Martin Warne, Nicola Jordan, Ryan Kaskel. Corporate backers : Savannah Informatics, Prism Skylabs, Musical Operating Devices.","title":"Advocates"},{"location":"community/kickstarter-announcement/#supporters","text":"There were also almost 300 further individuals choosing to help fund the project at other levels or choosing to give anonymously. Again, thank you, thank you, thank you!","title":"Supporters"},{"location":"community/mozilla-grant/","text":"Mozilla Grant We have recently been awarded a Mozilla grant , in order to fund the next major releases of REST framework. This work will focus on seamless client-side integration by introducing supporting client libraries that are able to dynamically interact with REST framework APIs. The framework will provide for either hypermedia or schema endpoints, which will expose the available interface for the client libraries to interact with. Additionally, we will be building on the realtime support that Django Channels provides, supporting and documenting how to build realtime APIs with REST framework. Again, this will include supporting work in the associated client libraries, making it easier to build richly interactive applications. The Core API project will provide the foundations for our client library support, and will allow us to support interaction using a wide range of schemas and hypermedia formats. It's worth noting that these client libraries won't be tightly coupled to solely REST framework APIs either, and will be able to interact with any API that exposes a supported schema or hypermedia format. Specifically, the work includes: Client libraries This work will include built-in schema and hypermedia support, allowing dynamic client libraries to interact with the API. I'll also be releasing both Python and Javascript client libraries, plus a command-line client, a new tutorial section, and further documentation. Client library support in REST framework. Schema & hypermedia support for REST framework APIs. A test client, allowing you to write tests that emulate a client library interacting with your API. New tutorial sections on using client libraries to interact with REST framework APIs. Python client library. JavaScript client library. Command line client. Realtime APIs The next goal is to build on the realtime support offered by Django Channels, adding support & documentation for building realtime API endpoints. Support for API subscription endpoints, using REST framework and Django Channels. New tutorial section on building realtime API endpoints with REST framework. Realtime support in the Python & Javascript client libraries. Accountability In order to ensure that I can be fully focused on trying to secure a sustainable & well-funded open source business I will be leaving my current role at DabApps at the end of May 2016. I have formed a UK limited company, Encode , which will act as the business entity behind REST framework. I will be issuing monthly reports from Encode on progress both towards the Mozilla grant, and for development time funded via the REST framework paid plans . #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /<em> Add your own MailChimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. </em>/ Stay up to date, with our monthly progress reports... Email Address (function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';}(jQuery));var $mcj = jQuery.noConflict(true);","title":"Mozilla Grant"},{"location":"community/mozilla-grant/#mozilla-grant","text":"We have recently been awarded a Mozilla grant , in order to fund the next major releases of REST framework. This work will focus on seamless client-side integration by introducing supporting client libraries that are able to dynamically interact with REST framework APIs. The framework will provide for either hypermedia or schema endpoints, which will expose the available interface for the client libraries to interact with. Additionally, we will be building on the realtime support that Django Channels provides, supporting and documenting how to build realtime APIs with REST framework. Again, this will include supporting work in the associated client libraries, making it easier to build richly interactive applications. The Core API project will provide the foundations for our client library support, and will allow us to support interaction using a wide range of schemas and hypermedia formats. It's worth noting that these client libraries won't be tightly coupled to solely REST framework APIs either, and will be able to interact with any API that exposes a supported schema or hypermedia format. Specifically, the work includes:","title":"Mozilla Grant"},{"location":"community/mozilla-grant/#client-libraries","text":"This work will include built-in schema and hypermedia support, allowing dynamic client libraries to interact with the API. I'll also be releasing both Python and Javascript client libraries, plus a command-line client, a new tutorial section, and further documentation. Client library support in REST framework. Schema & hypermedia support for REST framework APIs. A test client, allowing you to write tests that emulate a client library interacting with your API. New tutorial sections on using client libraries to interact with REST framework APIs. Python client library. JavaScript client library. Command line client.","title":"Client libraries"},{"location":"community/mozilla-grant/#realtime-apis","text":"The next goal is to build on the realtime support offered by Django Channels, adding support & documentation for building realtime API endpoints. Support for API subscription endpoints, using REST framework and Django Channels. New tutorial section on building realtime API endpoints with REST framework. Realtime support in the Python & Javascript client libraries.","title":"Realtime APIs"},{"location":"community/mozilla-grant/#accountability","text":"In order to ensure that I can be fully focused on trying to secure a sustainable & well-funded open source business I will be leaving my current role at DabApps at the end of May 2016. I have formed a UK limited company, Encode , which will act as the business entity behind REST framework. I will be issuing monthly reports from Encode on progress both towards the Mozilla grant, and for development time funded via the REST framework paid plans . #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /<em> Add your own MailChimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. </em>/","title":"Accountability"},{"location":"community/project-management/","text":"Project management \"No one can whistle a symphony; it takes a whole orchestra to play it\" \u2014 Halford E. Luccock This document outlines our project management processes for REST framework. The aim is to ensure that the project has a high \"bus factor\" , and can continue to remain well supported for the foreseeable future. Suggestions for improvements to our process are welcome. Maintenance team We have a quarterly maintenance cycle where new members may join the maintenance team. We currently cap the size of the team at 5 members, and may encourage folks to step out of the team for a cycle to allow new members to participate. Current team The maintenance team for Q4 2015 : @tomchristie @xordoquy (Release manager.) @carltongibson @kevin-brown @jpadilla Maintenance cycles Each maintenance cycle is initiated by an issue being opened with the Process label. To be considered for a maintainer role simply comment against the issue. Existing members must explicitly opt-in to the next cycle by check-marking their name. The final decision on the incoming team will be made by @tomchristie . Members of the maintenance team will be added as collaborators to the repository. The following template should be used for the description of the issue, and serves as the formal process for selecting the team. This issue is for determining the maintenance team for the *** period. Please see the [Project management](https://www.django-rest-framework.org/topics/project-management/) section of our documentation for more details. --- #### Renewing existing members. The following people are the current maintenance team. Please checkmark your name if you wish to continue to have write permission on the repository for the *** period. - [ ] @*** - [ ] @*** - [ ] @*** - [ ] @*** - [ ] @*** --- #### New members. If you wish to be considered for this or a future date, please comment against this or subsequent issues. To modify this process for future maintenance cycles make a pull request to the [project management](https://www.django-rest-framework.org/topics/project-management/) documentation. Responsibilities of team members Team members have the following responsibilities. Close invalid or resolved tickets. Add triage labels and milestones to tickets. Merge finalized pull requests. Build and deploy the documentation, using mkdocs gh-deploy . Build and update the included translation packs. Further notes for maintainers: Code changes should come in the form of a pull request - do not push directly to master. Maintainers should typically not merge their own pull requests. Each issue/pull request should have exactly one label once triaged. Search for un-triaged issues with is:open no:label . It should be noted that participating actively in the REST framework project clearly does not require being part of the maintenance team . Almost every import part of issue triage and project improvement can be actively worked on regardless of your collaborator status on the repository. Release process The release manager is selected on every quarterly maintenance cycle. The manager should be selected by @tomchristie . The manager will then have the maintainer role added to PyPI package. The previous manager will then have the maintainer role removed from the PyPI package. Our PyPI releases will be handled by either the current release manager, or by @tomchristie . Every release should have an open issue tagged with the Release label and marked against the appropriate milestone. The following template should be used for the description of the issue, and serves as a release checklist. Release manager is @***. Pull request is #***. During development cycle: - [ ] Upload the new content to be translated to [transifex](https://www.django-rest-framework.org/topics/project-management/#translations). Checklist: - [ ] Create pull request for [release notes](https://github.com/encode/django-rest-framework/blob/master/docs/topics/release-notes.md) based on the [*.*.* milestone](https://github.com/encode/django-rest-framework/milestones/***). - [ ] Update supported versions: - [ ] `setup.py` `python_requires` list - [ ] `setup.py` Python & Django version trove classifiers - [ ] `README` Python & Django versions - [ ] `docs` Python & Django versions - [ ] Update the translations from [transifex](https://www.django-rest-framework.org/topics/project-management/#translations). - [ ] Ensure the pull request increments the version to `*.*.*` in [`restframework/__init__.py`](https://github.com/encode/django-rest-framework/blob/master/rest_framework/__init__.py). - [ ] Confirm with @tomchristie that release is finalized and ready to go. - [ ] Ensure that release date is included in pull request. - [ ] Merge the release pull request. - [ ] Push the package to PyPI with `./setup.py publish`. - [ ] Tag the release, with `git tag -a *.*.* -m 'version *.*.*'; git push --tags`. - [ ] Deploy the documentation with `mkdocs gh-deploy`. - [ ] Make a release announcement on the [discussion group](https://groups.google.com/forum/?fromgroups#!forum/django-rest-framework). - [ ] Make a release announcement on twitter. - [ ] Close the milestone on GitHub. To modify this process for future releases make a pull request to the [project management](https://www.django-rest-framework.org/topics/project-management/) documentation. When pushing the release to PyPI ensure that your environment has been installed from our development requirement.txt , so that documentation and PyPI installs are consistently being built against a pinned set of packages. Translations The maintenance team are responsible for managing the translation packs include in REST framework. Translating the source strings into multiple languages is managed through the transifex service . Managing Transifex The official Transifex client is used to upload and download translations to Transifex. The client is installed using pip: pip install transifex-client To use it you'll need a login to Transifex which has a password, and you'll need to have administrative access to the Transifex project. You'll need to create a ~/.transifexrc file which contains your credentials. [https://www.transifex.com] username = *** token = *** password = *** hostname = https://www.transifex.com Upload new source files When any user visible strings are changed, they should be uploaded to Transifex so that the translators can start to translate them. To do this, just run: # 1. Update the source django.po file, which is the US English version. cd rest_framework django-admin makemessages -l en_US # 2. Push the source django.po file to Transifex. cd .. tx push -s When pushing source files, Transifex will update the source strings of a resource to match those from the new source file. Here's how differences between the old and new source files will be handled: New strings will be added. Modified strings will be added as well. Strings which do not exist in the new source file will be removed from the database, along with their translations. If that source strings gets re-added later then Transifex Translation Memory will automatically include the translation string. Download translations When a translator has finished translating their work needs to be downloaded from Transifex into the REST framework repository. To do this, run: # 3. Pull the translated django.po files from Transifex. tx pull -a --minimum-perc 10 cd rest_framework # 4. Compile the binary .mo files for all supported languages. django-admin compilemessages Project requirements All our test requirements are pinned to exact versions, in order to ensure that our test runs are reproducible. We maintain the requirements in the requirements directory. The requirements files are referenced from the tox.ini configuration file, ensuring we have a single source of truth for package versions used in testing. Package upgrades should generally be treated as isolated pull requests. You can check if there are any packages available at a newer version, by using the pip list --outdated . Project ownership The PyPI package is owned by @tomchristie . As a backup @j4mie also has ownership of the package. If @tomchristie ceases to participate in the project then @j4mie has responsibility for handing over ownership duties. Outstanding management & ownership issues The following issues still need to be addressed: Ensure @jamie has back-up access to the django-rest-framework.org domain setup and admin. Document ownership of the live example API. Document ownership of the mailing list and IRC channel. Document ownership and management of the security mailing list.","title":"Project management"},{"location":"community/project-management/#project-management","text":"\"No one can whistle a symphony; it takes a whole orchestra to play it\" \u2014 Halford E. Luccock This document outlines our project management processes for REST framework. The aim is to ensure that the project has a high \"bus factor\" , and can continue to remain well supported for the foreseeable future. Suggestions for improvements to our process are welcome.","title":"Project management"},{"location":"community/project-management/#maintenance-team","text":"We have a quarterly maintenance cycle where new members may join the maintenance team. We currently cap the size of the team at 5 members, and may encourage folks to step out of the team for a cycle to allow new members to participate.","title":"Maintenance team"},{"location":"community/project-management/#current-team","text":"The maintenance team for Q4 2015 : @tomchristie @xordoquy (Release manager.) @carltongibson @kevin-brown @jpadilla","title":"Current team"},{"location":"community/project-management/#maintenance-cycles","text":"Each maintenance cycle is initiated by an issue being opened with the Process label. To be considered for a maintainer role simply comment against the issue. Existing members must explicitly opt-in to the next cycle by check-marking their name. The final decision on the incoming team will be made by @tomchristie . Members of the maintenance team will be added as collaborators to the repository. The following template should be used for the description of the issue, and serves as the formal process for selecting the team. This issue is for determining the maintenance team for the *** period. Please see the [Project management](https://www.django-rest-framework.org/topics/project-management/) section of our documentation for more details. --- #### Renewing existing members. The following people are the current maintenance team. Please checkmark your name if you wish to continue to have write permission on the repository for the *** period. - [ ] @*** - [ ] @*** - [ ] @*** - [ ] @*** - [ ] @*** --- #### New members. If you wish to be considered for this or a future date, please comment against this or subsequent issues. To modify this process for future maintenance cycles make a pull request to the [project management](https://www.django-rest-framework.org/topics/project-management/) documentation.","title":"Maintenance cycles"},{"location":"community/project-management/#responsibilities-of-team-members","text":"Team members have the following responsibilities. Close invalid or resolved tickets. Add triage labels and milestones to tickets. Merge finalized pull requests. Build and deploy the documentation, using mkdocs gh-deploy . Build and update the included translation packs. Further notes for maintainers: Code changes should come in the form of a pull request - do not push directly to master. Maintainers should typically not merge their own pull requests. Each issue/pull request should have exactly one label once triaged. Search for un-triaged issues with is:open no:label . It should be noted that participating actively in the REST framework project clearly does not require being part of the maintenance team . Almost every import part of issue triage and project improvement can be actively worked on regardless of your collaborator status on the repository.","title":"Responsibilities of team members"},{"location":"community/project-management/#release-process","text":"The release manager is selected on every quarterly maintenance cycle. The manager should be selected by @tomchristie . The manager will then have the maintainer role added to PyPI package. The previous manager will then have the maintainer role removed from the PyPI package. Our PyPI releases will be handled by either the current release manager, or by @tomchristie . Every release should have an open issue tagged with the Release label and marked against the appropriate milestone. The following template should be used for the description of the issue, and serves as a release checklist. Release manager is @***. Pull request is #***. During development cycle: - [ ] Upload the new content to be translated to [transifex](https://www.django-rest-framework.org/topics/project-management/#translations). Checklist: - [ ] Create pull request for [release notes](https://github.com/encode/django-rest-framework/blob/master/docs/topics/release-notes.md) based on the [*.*.* milestone](https://github.com/encode/django-rest-framework/milestones/***). - [ ] Update supported versions: - [ ] `setup.py` `python_requires` list - [ ] `setup.py` Python & Django version trove classifiers - [ ] `README` Python & Django versions - [ ] `docs` Python & Django versions - [ ] Update the translations from [transifex](https://www.django-rest-framework.org/topics/project-management/#translations). - [ ] Ensure the pull request increments the version to `*.*.*` in [`restframework/__init__.py`](https://github.com/encode/django-rest-framework/blob/master/rest_framework/__init__.py). - [ ] Confirm with @tomchristie that release is finalized and ready to go. - [ ] Ensure that release date is included in pull request. - [ ] Merge the release pull request. - [ ] Push the package to PyPI with `./setup.py publish`. - [ ] Tag the release, with `git tag -a *.*.* -m 'version *.*.*'; git push --tags`. - [ ] Deploy the documentation with `mkdocs gh-deploy`. - [ ] Make a release announcement on the [discussion group](https://groups.google.com/forum/?fromgroups#!forum/django-rest-framework). - [ ] Make a release announcement on twitter. - [ ] Close the milestone on GitHub. To modify this process for future releases make a pull request to the [project management](https://www.django-rest-framework.org/topics/project-management/) documentation. When pushing the release to PyPI ensure that your environment has been installed from our development requirement.txt , so that documentation and PyPI installs are consistently being built against a pinned set of packages.","title":"Release process"},{"location":"community/project-management/#translations","text":"The maintenance team are responsible for managing the translation packs include in REST framework. Translating the source strings into multiple languages is managed through the transifex service .","title":"Translations"},{"location":"community/project-management/#managing-transifex","text":"The official Transifex client is used to upload and download translations to Transifex. The client is installed using pip: pip install transifex-client To use it you'll need a login to Transifex which has a password, and you'll need to have administrative access to the Transifex project. You'll need to create a ~/.transifexrc file which contains your credentials. [https://www.transifex.com] username = *** token = *** password = *** hostname = https://www.transifex.com","title":"Managing Transifex"},{"location":"community/project-management/#upload-new-source-files","text":"When any user visible strings are changed, they should be uploaded to Transifex so that the translators can start to translate them. To do this, just run: # 1. Update the source django.po file, which is the US English version. cd rest_framework django-admin makemessages -l en_US # 2. Push the source django.po file to Transifex. cd .. tx push -s When pushing source files, Transifex will update the source strings of a resource to match those from the new source file. Here's how differences between the old and new source files will be handled: New strings will be added. Modified strings will be added as well. Strings which do not exist in the new source file will be removed from the database, along with their translations. If that source strings gets re-added later then Transifex Translation Memory will automatically include the translation string.","title":"Upload new source files"},{"location":"community/project-management/#download-translations","text":"When a translator has finished translating their work needs to be downloaded from Transifex into the REST framework repository. To do this, run: # 3. Pull the translated django.po files from Transifex. tx pull -a --minimum-perc 10 cd rest_framework # 4. Compile the binary .mo files for all supported languages. django-admin compilemessages","title":"Download translations"},{"location":"community/project-management/#project-requirements","text":"All our test requirements are pinned to exact versions, in order to ensure that our test runs are reproducible. We maintain the requirements in the requirements directory. The requirements files are referenced from the tox.ini configuration file, ensuring we have a single source of truth for package versions used in testing. Package upgrades should generally be treated as isolated pull requests. You can check if there are any packages available at a newer version, by using the pip list --outdated .","title":"Project requirements"},{"location":"community/project-management/#project-ownership","text":"The PyPI package is owned by @tomchristie . As a backup @j4mie also has ownership of the package. If @tomchristie ceases to participate in the project then @j4mie has responsibility for handing over ownership duties.","title":"Project ownership"},{"location":"community/project-management/#outstanding-management-ownership-issues","text":"The following issues still need to be addressed: Ensure @jamie has back-up access to the django-rest-framework.org domain setup and admin. Document ownership of the live example API. Document ownership of the mailing list and IRC channel. Document ownership and management of the security mailing list.","title":"Outstanding management &amp; ownership issues"},{"location":"community/release-notes/","text":"Release Notes Versioning Minor version numbers (0.0.x) are used for changes that are API compatible. You should be able to upgrade between minor point releases without any other code changes. Medium version numbers (0.x.0) may include API changes, in line with the deprecation policy . You should read the release notes carefully before upgrading between medium point releases. Major version numbers (x.0.0) are reserved for substantial project milestones. Deprecation policy REST framework releases follow a formal deprecation policy, which is in line with Django's deprecation policy . The timeline for deprecation of a feature present in version 1.0 would work as follows: Version 1.1 would remain fully backwards compatible with 1.0, but would raise RemovedInDRF13Warning warnings, subclassing PendingDeprecationWarning , if you use the feature that are due to be deprecated. These warnings are silent by default , but can be explicitly enabled when you're ready to start migrating any required changes. For example if you start running your tests using python -Wd manage.py test , you'll be warned of any API changes you need to make. Version 1.2 would escalate these warnings to subclass DeprecationWarning , which is loud by default. Version 1.3 would remove the deprecated bits of API entirely. Note that in line with Django's policy, any parts of the framework not mentioned in the documentation should generally be considered private API, and may be subject to change. Upgrading To upgrade Django REST framework to the latest version, use pip: pip install -U djangorestframework You can determine your currently installed version using pip show : pip show djangorestframework 3.12.x series 3.12.2 Date: 13th October 2020 Fix issue if rest_framework.authtoken.models is imported, but rest_framework.authtoken is not in INSTALLED_APPS. [#7571] Ignore subclasses of BrowsableAPIRenderer in OpenAPI schema. [#7497] Narrower exception catching in serilizer fields, to ensure that any errors in broken get_queryset() methods are not masked. [#7480] 3.12.1 Date: 28th September 2020 Add TokenProxy migration. [#7557] 3.12.0 Date: 28th September 2020 Add --file option to generateschema command. [#7130] Support tags for OpenAPI schema generation. See the schema docs . [#7184] Support customising the operation ID for schema generation. See the schema docs . [#7190] Support OpenAPI components for schema generation. See the schema docs . [#7124] The following methods on AutoSchema become public API: get_path_parameters , get_pagination_parameters , get_filter_parameters , get_request_body , get_responses , get_serializer , get_paginator , map_serializer , map_field , map_choice_field , map_field_validators , allows_filters . See the schema docs Add support for Django 3.1's database-agnositic JSONField . [#7467] SearchFilter now supports nested search on JSONField and HStoreField model fields. [#7121] SearchFilter now supports searching on annotate() fields. [#6240] The authtoken model no longer exposes the pk in the admin URL. [#7341] Add __repr__ for Request instances. [#7239] UTF-8 decoding with Latin-1 fallback for basic auth credentials. [#7193] CharField treats surrogate characters as a validation failure. [#7026] Don't include callables as default values in schemas. [#7105] Improve ListField schema output to include all available child information. [#7137] Allow default=False to be included for BooleanField schema outputs. [#7165] Include \"type\" information in ChoiceField schema outputs. [#7161] Include \"type\": \"object\" on schema objects. [#7169] Don't include component in schema output for DELETE requests. [#7229] Fix schema types for DecimalField . [#7254] Fix schema generation for ObtainAuthToken view. [#7211] Support passing context=... to view .get_serializer() methods. [#7298] Pass custom code to PermissionDenied if permission class has one set. [#7306] Include \"example\" in schema pagination output. [#7275] Default status code of 201 on schema output for POST requests. [#7206] Use camelCase for operation IDs in schema output. [#7208] Warn if duplicate operation IDs exist in schema output. [#7207] Improve handling of decimal type when mapping ChoiceField to a schema output. [#7264] Disable YAML aliases for OpenAPI schema outputs. [#7131] Fix action URL names for APIs included under a namespaced URL. [#7287] Update jQuery version from 3.4 to 3.5. [#7313] Fix UniqueTogether handling when serializer fields use source=... . [#7143] HTTP HEAD requests now set self.action correctly on a ViewSet instance. [#7223] Return a valid OpenAPI schema for the case where no API schema paths exist. [#7125] Include tests in package distribution. [#7145] Allow type checkers to support annotations like ModelSerializer[Author] . [#7385] Don't include invalid charset=None portion in the request Content-Type header when using APIClient. [#7400] Fix \\Z / \\z tokens in OpenAPI regexs. [#7389] Fix PrimaryKeyRelatedField and HyperlinkedRelatedField when source field is actually a property. [#7142] Token.generate_key is now a class method. [#7502] @action warns if method is wrapped in a decorator that does not preserve information using @functools.wraps . [#7098] 3.11.x series 3.11.2 Date : 30th September 2020 Security : Drop urlize_quoted_links template tag in favour of Django's built-in urlize . Removes a XSS vulnerability for some kinds of content in the browsable API. 3.11.1 Date : 5th August 2020 Fix compat with Django 3.1 3.11.0 Date : 12th December 2019 Drop .set_context API in favour of a requires_context marker . Changed default widget for TextField with choices to select box. #6892 Supported nested writes on non-relational fields, such as JSONField. #6916 Include request/response media types in OpenAPI schemas, based on configured parsers/renderers. #6865 Include operation descriptions in OpenAPI schemas, based on the docstring on the view. #6898 Fix representation of serializers with all optional fields in OpenAPI schemas. #6941 , #6944 Fix representation of serializers.HStoreField in OpenAPI schemas. #6914 Fix OpenAPI generation when title or version is not provided. #6912 Use int64 representation for large integers in OpenAPI schemas. #7018 Improved error messages if no .to_representation implementation is provided on a field subclass. #6996 Fix for serializer classes that use multiple inheritance. #6980 Fix for reversing Hyperlinked URL fields with percent encoded components in the path. #7059 Update bootstrap to 3.4.1. #6923 3.10.x series 3.10.3 Date : 4th September 2019 Include API version in OpenAPI schema generation, defaulting to empty string. Add pagination properties to OpenAPI response schemas. Add missing \"description\" property to OpenAPI response schemas. Only include \"required\" for non-empty cases in OpenAPI schemas. Fix response schemas for \"DELETE\" case in OpenAPI schemas. Use an array type for list view response schemas. Use consistent lowerInitialCamelCase style in OpenAPI operation IDs. Fix minLength / maxLength / minItems / maxItems properties in OpenAPI schemas. Only call FileField.url once in serialization, for improved performance. Fix an edge case where throttling calculations could error after a configuration change. 3.10.2 Date : 29th July 2019 Various OpenAPI schema fixes. Ability to specify urlconf in include_docs_urls. 3.10.1 Date : 17th July 2019 Don't include autocomplete fields on TokenAuth admin, since it forces constraints on custom user models & admin. Require uritemplate for OpenAPI schema generation, but not coreapi . 3.10.0 Date : 15th July 2019 Switch to OpenAPI schema generation. Drop Python 2 support. Add generateschema --generator_class CLI option Updated PyYaml dependency for OpenAPI schema generation to pyyaml>=5.1 #6680 Resolve DeprecationWarning with markdown. #6317 Use user.get_username in templates, in preference to user.username . Fix for cursor pagination issue that could occur after object deletions. Fix for nullable fields with source=\"*\" Always apply all throttle classes during throttling checks. Updates to jQuery and Markdown dependencies. Don't strict disallow redundant SerializerMethodField field name arguments. Don't render extra actions in browable API if not authenticated. Strip null characters from search parameters. 3.9.x series 3.9.4 Date : 10th May 2019 This is a maintenance release that fixes an error handling bug under Python 2. 3.9.3 Date : 29th April 2019 This is the last Django REST Framework release that will support Python 2. Be sure to upgrade to Python 3 before upgrading to Django REST Framework 3.10. Adjusted the compat check for django-guardian to allow the last guardian version (v1.4.9) compatible with Python 2. #6613 3.9.2 Date : 3rd March 2019 Routers: invalidate _urls cache on register() #6407 Deferred schema renderer creation to avoid requiring pyyaml. #6416 Added 'request_forms' block to base.html #6340 Fixed SchemaView to reset renderer on exception. #6429 Update Django Guardian dependency. #6430 Ensured support for Django 2.2 #6422 & #6455 Made templates compatible with session-based CSRF. #6207 Adjusted field validators to accept non-list iterables. #6282 Added SearchFilter.get_search_fields() hook. #6279 Fix DeprecationWarning when accessing collections.abc classes via collections #6268 Allowed Q objects in limit_choices_to introspection. #6472 Added lazy evaluation to composed permissions. #6463 Add negation ~ operator to permissions composition #6361 Avoided calling distinct on annotated fields in SearchFilter. #6240 Introduced RemovedInDRF\u2026Warning classes to simplify deprecations. #6480 3.9.1 Date : 16th January 2019 Resolve XSS issue in browsable API. #6330 Upgrade Bootstrap to 3.4.0 to resolve XSS issue. Resolve issues with composable permissions. #6299 Respect limit_choices_to on foreign keys. #6371 3.9.0 Date : 18th October 2018 Improvements to ViewSet extra actions #5605 Fix action support for ViewSet suffixes #6081 Allow action docs sections #6060 Deprecate the Router.register base_name argument in favor of basename . #5990 Deprecate the Router.get_default_base_name method in favor of Router.get_default_basename . #5990 Change CharField to disallow null bytes. #6073 To revert to the old behavior, subclass CharField and remove ProhibitNullCharactersValidator from the validators. python class NullableCharField(serializers.CharField): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) self.validators = [v for v in self.validators if not isinstance(v, ProhibitNullCharactersValidator)] Add OpenAPIRenderer and generate_schema management command. #6229 Add OpenAPIRenderer by default, and add schema docs. #6233 Allow permissions to be composed #5753 Allow nullable BooleanField in Django 2.1 #6183 Add testing of Python 3.7 support #6141 Test using Django 2.1 final release. #6109 Added djangorestframework-datatables to third-party packages #5931 Change ISO 8601 date format to exclude year/month-only options #5936 Update all pypi.python.org URLs to pypi.org #5942 Ensure that html forms (multipart form data) respect optional fields #5927 Allow hashing of ErrorDetail. #5932 Correct schema parsing for JSONField #5878 Render descriptions (from help_text) using safe #5869 Removed input value from deault_error_message #5881 Added min_value/max_value support in DurationField #5643 Fixed instance being overwritten in pk-only optimization try/except block #5747 Fixed AttributeError from items filter when value is None #5981 Fixed Javascript e.indexOf is not a function error #5982 Fix schemas for extra actions #5992 Improved get_error_detail to use error_dict/error_list #5785 Improved URLs in Admin renderer #5988 Add \"Community\" section to docs, minor cleanup #5993 Moved guardian imports out of compat #6054 Deprecate the DjangoObjectPermissionsFilter class, moved to the djangorestframework-guardian package. #6075 Drop Django 1.10 support #5657 Only catch TypeError/ValueError for object lookups #6028 Handle models without .objects manager in ModelSerializer. #6111 Improve ModelSerializer.create() error message. #6112 Fix CSRF cookie check failure when using session auth with django 1.11.6+ #6113 Updated JWT docs. #6138 Fix autoescape not getting passed to urlize_quoted_links filter #6191 3.8.x series 3.8.2 Date : 6th April 2018 Fix read_only + default unique_together validation. #5922 authtoken.views import coreapi from rest_framework.compat, not directly. #5921 Docs: Add missing argument 'detail' to Route #5920 3.8.1 Date : 4th April 2018 Use old url_name behavior in route decorators #5915 For list_route and detail_route maintain the old behavior of url_name , basing it on the url_path instead of the function name. 3.8.0 Date : 3rd April 2018 Breaking Change : Alter read_only plus default behaviour. #5886 read_only fields will now always be excluded from writable fields. Previously read_only fields with a default value would use the default for create and update operations. In order to maintain the old behaviour you may need to pass the value of read_only fields when calling save() in the view: def perform_create(self, serializer): serializer.save(owner=self.request.user) Alternatively you may override save() or create() or update() on the serializer as appropriate. Correct allow_null behaviour when required=False #5888 Without an explicit default , allow_null implies a default of null for outgoing serialization. Previously such fields were being skipped when read-only or otherwise not required. Possible backwards compatibility break if you were relying on such fields being excluded from the outgoing representation. In order to restore the old behaviour you can override data to exclude the field when None . For example: @property def data(self): \"\"\" Drop `maybe_none` field if None. \"\"\" data = super().data if 'maybe_none' in data and data['maybe_none'] is None: del data['maybe_none'] return data Refactor dynamic route generation and improve viewset action introspectibility. #5705 ViewSet s have been provided with new attributes and methods that allow it to introspect its set of actions and the details of the current action. Merged list_route and detail_route into a single action decorator. Get all extra actions on a ViewSet with .get_extra_actions() . Extra actions now set the url_name and url_path on the decorated method. url_name is now based on the function name, instead of the url_path , as the path is not always suitable (e.g., capturing arguments in the path). Enable action url reversing through .reverse_action() method (added in 3.7.4) Example reverse call: self.reverse_action(self.custom_action.url_name) Add detail initkwarg to indicate if the current action is operating on a collection or a single instance. Additional changes: Deprecated list_route & detail_route in favor of action decorator with detail boolean. Deprecated dynamic list/detail route variants in favor of DynamicRoute with detail boolean. Refactored the router's dynamic route generation. list_route and detail_route maintain the old behavior of url_name , basing it on the url_path instead of the function name. Fix formatting of the 3.7.4 release note #5704 Docs: Update DRF Writable Nested Serializers references #5711 Docs: Fixed typo in auth URLs example. #5713 Improve composite field child errors #5655 Disable HTML inputs for dict/list fields #5702 Fix typo in HostNameVersioning doc #5709 Use rsplit to get module and classname for imports #5712 Formalize URLPatternsTestCase #5703 Add exception translation test #5700 Test staticfiles #5701 Add drf-yasg to documentation and schema 3rd party packages #5720 Remove unused compat._resolve_model() #5733 Drop compat workaround for unsupported Python 3.2 #5734 Prefer iter(dict) over iter(dict.keys()) #5736 Pass python_requires argument to setuptools #5739 Remove unused links from docs #5735 Prefer https protocol for links in docs when available #5729 Add HStoreField, postgres fields tests #5654 Always fully qualify ValidationError in docs #5751 Remove unreachable code from ManualSchema #5766 Allowed customising API documentation code samples #5752 Updated docs to use pip show #5757 Load 'static' instead of 'staticfiles' in templates #5773 Fixed a typo in fields docs #5783 Refer to \"NamespaceVersioning\" instead of \"NamespacedVersioning\" in the documentation #5754 ErrorDetail: add __eq__ / __ne__ and __repr__ #5787 Replace background-attachment: fixed in docs #5777 Make 404 & 403 responses consistent with exceptions.APIException output #5763 Small fix to API documentation: schemas #5796 Fix schema generation for PrimaryKeyRelatedField #5764 Represent serializer DictField as an Object in schema #5765 Added docs example reimplementing ObtainAuthToken #5802 Add schema to the ObtainAuthToken view #5676 Fix request formdata handling #5800 Fix authtoken views imports #5818 Update pytest, isort #5815 #5817 #5894 Fixed active timezone handling for non ISO8601 datetimes. #5833 Made TemplateHTMLRenderer render IntegerField inputs when value is 0 . #5834 Corrected endpoint in tutorial instructions #5835 Add Django Rest Framework Role Filters to Third party packages #5809 Use single copy of static assets. Update jQuery #5823 Changes ternary conditionals to be PEP308 compliant #5827 Added links to 'A Todo List API with React' and 'Blog API' tutorials #5837 Fix comment typo in ModelSerializer #5844 Add admin to installed apps to avoid test failures. #5870 Fixed schema for UUIDField in SimpleMetadata. #5872 Corrected docs on router include with namespaces. #5843 Test using model objects for dotted source default #5880 Allow traversing nullable related fields #5849 Added: Tutorial: Django REST with React (Django 2.0) #5891 Add LimitOffsetPagination.get_count to allow method override #5846 Don't show hidden fields in metadata #5854 Enable OrderingFilter to handle an empty tuple (or list) for the 'ordering' field. #5899 Added generic 500 and 400 JSON error handlers. #5904 3.7.x series 3.7.7 Date : 21st December 2017 Fix typo to include *.mo locale files to packaging. #5697 , #5695 3.7.6 Date : 21st December 2017 Add missing *.ico icon files to packaging. 3.7.5 Date : 21st December 2017 Add missing *.woff2 font files to packaging. #5692 Add missing *.mo locale files to packaging. #5695 , #5696 3.7.4 Date : 20th December 2017 Schema: Extract method for manual_fields processing #5633 Allows for easier customisation of manual_fields processing, for example to provide per-method manual fields. AutoSchema adds get_manual_fields , as the intended override point, and a utility method update_fields , to handle by-name field replacement from a list, which, in general, you are not expected to override. Note: AutoSchema.__init__ now ensures manual_fields is a list. Previously may have been stored internally as None . Remove ulrparse compatibility shim; use six instead #5579 Drop compat wrapper for TimeDelta.total_seconds() #5577 Clean up all whitespace throughout project #5578 Compat cleanup #5581 Add pygments CSS block in browsable API views #5584 #5587 Remove set_rollback() from compat #5591 Fix request body/POST access #5590 Rename test to reference correct issue #5610 Documentation Fixes #5611 #5612 Remove references to unsupported Django versions in docs and code #5602 Test Serializer exclude for declared fields #5599 Fixed schema generation for filter backends #5613 Minor cleanup for ModelSerializer tests #5598 Reimplement request attribute access w/ __getattr__ #5617 Fixed SchemaJSRenderer renders invalid Javascript #5607 Make Django 2.0 support official/explicit #5619 Perform type check on passed request argument #5618 Fix AttributeError hiding on request authenticators #5600 Update test requirements #5626 Docs: Serializer._declared_fields enable modifying fields on a serializer #5629 Fix packaging #5624 Fix readme rendering for PyPI, add readme build to CI #5625 Update tutorial #5622 Non-required fields with allow_null=True should not imply a default value #5639 Docs: Add allow_null serialization output note #5641 Update to use the Django 2.0 release in tox.ini #5645 Fix Serializer.data for Browsable API rendering when provided invalid data #5646 Docs: Note AutoSchema limitations on bare APIView #5649 Add .basename and .reverse_action() to ViewSet #5648 Docs: Fix typos in serializers documentation #5652 Fix override_settings compat #5668 Add DEFAULT_SCHEMA_CLASS setting #5658 Add docs note re generated BooleanField being required=False #5665 Add 'dist' build #5656 Fix typo in docstring #5678 Docs: Add UNAUTHENTICATED_USER = None note #5679 Update OPTIONS example from \u201cDocumenting Your API\u201d #5680 Docs: Add note on object permissions for FBVs #5681 Docs: Add example to to_representation docs #5682 Add link to Classy DRF in docs #5683 Document ViewSet.action #5685 Fix schema docs typo #5687 Fix URL pattern parsing in schema generation #5689 Add example using source=\u2018*\u2019 to custom field docs. #5688 Fix format_suffix_patterns behavior with Django 2 path() routes #5691 3.7.3 Date : 6th November 2017 Fix AppRegistryNotReady error from contrib.auth view imports #5567 3.7.2 Date : 6th November 2017 Fixed Django 2.1 compatibility due to removal of django.contrib.auth.login()/logout() views. #5510 Add missing import for TextLexer. #5512 Adding examples and documentation for caching #5514 Include date and date-time format for schema generation #5511 Use triple backticks for markdown code blocks #5513 Interactive docs - make bottom sidebar items sticky #5516 Clarify pagination system check #5524 Stop JSONBoundField mangling invalid JSON #5527 Have JSONField render as textarea in Browsable API #5530 Schema: Exclude OPTIONS/HEAD for ViewSet actions #5532 Fix ordering for dotted sources #5533 Fix: Fields with allow_null=True should imply a default serialization value #5518 Ensure Location header is strictly a 'str', not subclass. #5544 Add import to example in api-guide/parsers #5547 Catch OverflowError for \"out of range\" datetimes #5546 Add djangorestframework-rapidjson to third party packages #5549 Increase test coverage for drf_create_token command #5550 Add trove classifier for Python 3.6 support. #5555 Add pip cache support to the Travis CI configuration #5556 Rename [ wheel ] section to [ bdist_wheel ] as the former is legacy #5557 Fix invalid escape sequence deprecation warnings #5560 Add interactive docs error template #5548 Add rounding parameter to DecimalField #5562 Fix all BytesWarning caught during tests #5561 Use dict and set literals instead of calls to dict() and set() #5559 Change ImageField validation pattern, use validators from DjangoImageField #5539 Fix processing unicode symbols in query_string by Python 2 #5552 3.7.1 Date : 16th October 2017 Fix Interactive documentation always uses false for boolean fields in requests #5492 Improve compatibility with Django 2.0 alpha. #5500 #5503 Improved handling of schema naming collisions #5486 Added additional docs and tests around providing a default value for dotted source fields #5489 3.7.0 Date : 6th October 2017 Fix DjangoModelPermissions to ensure user authentication before calling the view's get_queryset() method. As a side effect, this changes the order of the HTTP method permissions and authentication checks, and 405 responses will only be returned when authenticated. If you want to replicate the old behavior, see the PR for details. #5376 Deprecated exclude_from_schema on APIView and api_view decorator. Set schema = None or @schema(None) as appropriate. #5422 Timezone-aware DateTimeField s now respect active or default timezone during serialization, instead of always using UTC. #5435 Resolves inconsistency whereby instances were serialized with supplied datetime for create but UTC for retrieve . #3732 Possible backwards compatibility break if you were relying on datetime strings being UTC. Have client interpret datetimes or set default or active timezone (docs) to UTC if needed. Removed DjangoFilterBackend inline with deprecation policy. Use django_filters.rest_framework.FilterSet and/or django_filters.rest_framework.DjangoFilterBackend instead. #5273 Don't strip microseconds from time when encoding. Makes consistent with datetime . BC Change : Previously only milliseconds were encoded. #5440 Added STRICT_JSON setting (default True ) to raise exception for the extended float values ( nan , inf , -inf ) accepted by Python's json module. BC Change : Previously these values would converted to corresponding strings. Set STRICT_JSON to False to restore the previous behaviour. #5265 Add support for page_size parameter in CursorPaginator class #5250 Make DEFAULT_PAGINATION_CLASS None by default. BC Change : If your were just setting PAGE_SIZE to enable pagination you will need to add DEFAULT_PAGINATION_CLASS . The previous default was rest_framework.pagination.PageNumberPagination . There is a system check warning to catch this case. You may silence that if you are setting pagination class on a per-view basis. #5170 Catch APIException from get_serializer_fields in schema generation. #5443 Allow custom authentication and permission classes when using include_docs_urls #5448 Defer translated string evaluation on validators. #5452 Added default value for 'detail' param into 'ValidationError' exception #5342 Adjust schema get_filter_fields rules to match framework #5454 Updated test matrix to add Django 2.0 and drop Django 1.8 & 1.9 BC Change : This removes Django 1.8 and Django 1.9 from Django REST Framework supported versions. #5457 Fixed a deprecation warning in serializers.ModelField #5058 Added a more explicit error message when get_queryset returned None #5348 Fix docs for Response data description #5361 Fix pycache /.pyc excludes when packaging #5373 Fix default value handling for dotted sources #5375 Ensure content_type is set when passing empty body to RequestFactory #5351 Fix ErrorDetail Documentation #5380 Allow optional content in the generic content form #5372 Updated supported values for the NullBooleanField #5387 Fix ModelSerializer custom named fields with source on model #5388 Fixed the MultipleFieldLookupMixin documentation example to properly check for object level permission #5398 Update get_object() example in permissions.md #5401 Fix authtoken management command #5415 Fix schema generation markdown #5421 Allow ChoiceField.choices to be set dynamically #5426 Add the project layout to the quickstart #5434 Reuse 'apply_markdown' function in 'render_markdown' templatetag #5469 Added links to drf-openapi package in docs #5470 Added docstrings code highlighting with pygments #5462 Fixed documentation rendering for views named data #5472 Docs: Clarified 'to_internal_value()' validation behavior #5466 Fix missing six.text_type() call on APIException. str #5476 Document documentation.py #5478 Fix naming collisions in Schema Generation #5464 Call Django's authenticate function with the request object #5295 Update coreapi JS to 0.1.1 #5479 Have is_list_view recognise RetrieveModel\u2026 views #5480 Remove Django 1.8 & 1.9 compatibility code #5481 Remove deprecated schema code from DefaultRouter #5482 Refactor schema generation to allow per-view customisation. BC Change : SchemaGenerator.get_serializer_fields has been refactored as AutoSchema.get_serializer_fields and drops the view argument [#5354][gh5354] 3.6.x series 3.6.4 Date : 21st August 2017 Ignore any invalidly formed query parameters for OrderingFilter. #5131 Improve memory footprint when reading large JSON requests. #5147 Fix schema generation for pagination. #5161 Fix exception when HTML_CUTOFF is set to None . #5174 Fix browsable API not supporting multipart/form-data correctly. #5176 Fixed test_hyperlinked_related_lookup_url_encoded_exists . #5179 Make sure max_length is in FileField kwargs. #5186 Fix list_route & detail_route with kwargs contains curly bracket in url_path #5187 Add Django manage command to create a DRF user Token. #5188 Ensure API documentation templates do not check for user authentication #5162 Fix special case where OneToOneField is also primary key. #5192 Added aria-label and a new region for accessibility purposes in base.html #5196 Quote nested API parameters in api.js. #5214 Set ViewSet args/kwargs/request before dispatch. #5229 Added unicode support to SlugField. #5231 Fix HiddenField appears in Raw Data form initial content. #5259 Raise validation error on invalid timezone parsing. #5261 Fix SearchFilter to-many behavior/performance. #5264 Simplified chained comparisons and minor code fixes. #5276 RemoteUserAuthentication, docs, and tests. #5306 Revert \"Cached the field's root and context property\" #5313 Fix introspection of list field in schema. #5326 Fix interactive docs for multiple nested and extra methods. #5334 Fix/remove undefined template var \"schema\" #5346 3.6.3 Date : 12th May 2017 Raise 404 if a URL lookup results in ValidationError. ( #5126 ) Honor http_method_names on class based view, when generating API schemas. ( #5085 ) Allow overridden get_limit in LimitOffsetPagination to return all records. ( #4437 ) Fix partial update for the ListSerializer. ( #4222 ) Render JSONField control correctly in browsable API. ( #4999 , #5042 ) Raise validation errors for invalid datetime in given timezone. ( #4987 ) Support restricting doc & schema shortcuts to a subset of urls. ( #4979 ) Resolve SchemaGenerator error with paginators that have no page_size attribute. ( #5086 , #3692 ) Resolve HyperlinkedRelatedField exception on string with %20 instead of space. ( #4748 , #5078 ) Customizable schema generator classes. ( #5082 ) Update existing vary headers in response instead of overwriting them. ( #5047 ) Support passing .as_view() to view instance. ( #5053 ) Use correct exception handler when settings overridden on a view. ( #5055 , #5054 ) Update Boolean field to support 'yes' and 'no' values. ( #5038 ) Fix unique validator for ChoiceField. ( #5004 , #5026 , #5028 ) JavaScript cleanups in API Docs. ( #5001 ) Include URL path regexs in API schemas where valid. ( #5014 ) Correctly set scheme in coreapi TokenAuthentication. ( #5000 , #4994 ) HEAD requests on ViewSets should not return 405. ( #4705 , #4973 , #4864 ) Support usage of 'source' in extra_kwargs . ( #4688 ) Fix invalid content type for schema.js ( #4968 ) Fix DjangoFilterBackend inheritance issues. ( #5089 , #5117 ) 3.6.2 Date : 10th March 2017 Support for Safari & IE in API docs. ( #4959 , #4961 ) Add missing mark_safe in API docs template tags. ( #4952 , #4953 ) Add missing glyphicon fonts. ( #4950 , #4951 ) Fix One-to-one fields in API docs. ( #4955 , #4956 ) Test clean ups. ( #4949 ) 3.6.1 Date : 9th March 2017 Ensure markdown dependency is optional. ( #4947 ) 3.6.0 Date : 9th March 2017 See the release announcement . 3.5.x series 3.5.4 Date : 10th February 2017 Add max_length and min_length arguments for ListField. ( #4877 ) Add per-view custom exception handler support. ( #4753 ) Support disabling of declared fields on serializer subclasses. ( #4764 ) Support custom view names on @list_route and @detail_route endpoints. ( #4821 ) Correct labels for fields in login template when custom user model is used. ( #4841 ) Whitespace fixes for descriptions generated from docstrings. ( #4759 , #4869 , #4870 ) Better error reporting when schemas are returned by views without a schema renderer. ( #4790 ) Fix for returned response of PUT requests when prefetch_related is used. ( #4661 , #4668 ) Fix for breadcrumb view names. ( #4750 ) Fix for RequestsClient ensuring fully qualified URLs. ( #4678 ) Fix for incorrect behavior of writable-nested fields check in some cases. ( #4634 , #4669 ) Resolve Django deprecation warnings. ( #4712 ) Various cleanup of test cases. 3.5.3 Date : 7th November 2016 Don't raise incorrect FilterSet deprecation warnings. ( #4660 , #4643 , #4644 ) Schema generation should not raise 404 when a view permission class does. ( #4645 , #4646 ) Add autofocus support for input controls. ( #4650 ) 3.5.2 Date : 1st November 2016 Restore exception tracebacks in Python 2.7. ( #4631 , #4638 ) Properly display dicts in the admin console. ( #4532 , #4636 ) Fix is_simple_callable with variable args, kwargs. ( #4622 , #4602 ) Support 'on'/'off' literals with BooleanField. ( #4640 , #4624 ) Enable cursor pagination of value querysets. ( #4569 ) Fix support of get_full_details() for Throttled exceptions. ( #4627 ) Fix FilterSet proxy. ( #4620 ) Make serializer fields import explicit. ( #4628 ) Drop redundant requests adapter. ( #4639 ) 3.5.1 Date : 21st October 2016 Make rest_framework/compat.py imports. ( #4612 , #4608 , #4601 ) Fix bug in schema base path generation. ( #4611 , #4605 ) Fix broken case of ListSerializer with single item. ( #4609 , #4606 ) Remove bare raise for Python 3.5 compat. ( #4600 ) 3.5.0 Date : 20th October 2016 3.4.x series 3.4.7 Date : 21st September 2016 Fallback behavior for request parsing when request.POST already accessed. ( #3951 , #4500 ) Fix regression of RegexField . ( #4489 , #4490 , #2617 ) Missing comma in admin.html causing CSRF error. ( #4472 , #4473 ) Fix response rendering with empty context. ( #4495 ) Fix indentation regression in API listing. ( #4493 ) Fixed an issue where the incorrect value is set to ResolverMatch.func_name of api_view decorated view. ( #4465 , #4462 ) Fix APIClient.get() when path contains unicode arguments ( #4458 ) 3.4.6 Date : 23rd August 2016 Fix malformed Javascript in browsable API. ( #4435 ) Skip HiddenField from Schema fields. ( #4425 , #4429 ) Improve Create to show the original exception traceback. ( #3508 ) Fix AdminRenderer display of PK only related fields. ( #4419 , #4423 ) 3.4.5 Date : 19th August 2016 Improve debug error handling. ( #4416 , #4409 ) Allow custom CSRF_HEADER_NAME setting. ( #4415 , #4410 ) Include .action attribute on viewsets when generating schemas. ( #4408 , #4398 ) Do not include request.FILES items in request.POST. ( #4407 ) Fix rendering of checkbox multiple. ( #4403 ) Fix docstring of Field.get_default. ( #4404 ) Replace utf8 character with its ascii counterpart in README. ( #4412 ) 3.4.4 Date : 12th August 2016 Ensure views are fully initialized when generating schemas. ( #4373 , #4382 , #4383 , #4279 , #4278 ) Add form field descriptions to schemas. ( #4387 ) Fix category generation for schema endpoints. ( #4391 , #4394 , #4390 , #4386 , #4376 , #4329 ) Don't strip empty query params when paginating. ( #4392 , #4393 , #4260 ) Do not re-run query for empty results with LimitOffsetPagination. ( #4201 , #4388 ) Stricter type validation for CharField. ( #4380 , #3394 ) RelatedField.choices should preserve non-string values. ( #4111 , #4379 , #3365 ) Test case for rendering checkboxes in vertical form style. ( #4378 , #3868 , #3868 ) Show error traceback HTML in browsable API ( #4042 , #4172 ) Fix handling of ALLOWED_VERSIONS and no DEFAULT_VERSION. #4370 Allow max_digits=None on DecimalField. ( #4377 , #4372 ) Limit queryset when rendering relational choices. ( #4375 , #4122 , #3329 , #3330 , #3877 ) Resolve form display with ChoiceField, MultipleChoiceField and non-string choices. ( #4374 , #4119 , #4121 , #4137 , #4120 ) Fix call to TemplateHTMLRenderer.resolve_context() fallback method. ( #4371 ) 3.4.3 Date : 5th August 2016 Include fallback for users of older TemplateHTMLRenderer internal API. ( #4361 ) 3.4.2 Date : 5th August 2016 Include kwargs passed to 'as_view' when generating schemas. ( #4359 , #4330 , #4331 ) Access request.user.is_authenticated as property not method, under Django 1.10+ ( #4358 , #4354 ) Filter HEAD out from schemas. ( #4357 ) extra_kwargs takes precedence over uniqueness kwargs. ( #4198 , #4199 , #4349 ) Correct descriptions when tabs are used in code indentation. ( #4345 , #4347 )* Change template context generation in TemplateHTMLRenderer. ( #4236 ) Serializer defaults should not be included in partial updates. ( #4346 , #3565 ) Consistent behavior & descriptive error from FileUploadParser when filename not included. ( #4340 , #3610 , #4292 , #4296 ) DecimalField quantizes incoming digitals. ( #4339 , #4318 ) Handle non-string input for IP fields. ( #4335 , #4336 , #4338 ) Fix leading slash handling when Schema generation includes a root URL. ( #4332 ) Test cases for DictField with allow_null options. ( #4348 ) Update tests from Django 1.10 beta to Django 1.10. ( #4344 ) 3.4.1 Date : 28th July 2016 Added root_renderers argument to DefaultRouter . ( #4323 , #4268 ) Added url and schema_url arguments. ( #4321 , #4308 , #4305 ) Unique together checks should apply to read-only fields which have a default. ( #4316 , #4294 ) Set view.format_kwarg in schema generator. ( #4293 , #4315 ) Fix schema generator for views with pagination_class = None . ( #4314 , #4289 ) Fix schema generator for views with no get_serializer_class . ( #4265 , #4285 ) Fixes for media type parameters in Accept and Content-Type headers. ( #4287 , #4313 , #4281 ) Use verbose_name instead of object_name in error messages. ( #4299 ) Minor version update to Twitter Bootstrap. ( #4307 ) SearchFilter raises error when using with related field. ( #4302 , #4303 , #4298 ) Adding support for RFC 4918 status codes. ( #4291 ) Add LICENSE.md to the built wheel. ( #4270 ) Serializing \"complex\" field returns None instead of the value since 3.4 ( #4272 , #4273 , #4288 ) 3.4.0 Date : 14th July 2016 Don't strip microseconds in JSON output. ( #4256 ) Two slightly different iso 8601 datetime serialization. ( #4255 ) Resolve incorrect inclusion of media type parameters. ( #4254 ) Response Content-Type potentially malformed. ( #4253 ) Fix setup.py error on some platforms. ( #4246 ) Move alternate formats in coreapi into separate packages. ( #4244 ) Add localize keyword argument to DecimalField . ( #4233 ) Fix issues with routers for custom list-route and detail-routes. ( #4229 ) Namespace versioning with nested namespaces. ( #4219 ) Robust uniqueness checks. ( #4217 ) Minor refactoring of must_call_distinct . ( #4215 ) Overridable offset cutoff in CursorPagination. ( #4212 ) Pass through strings as-in with date/time fields. ( #4196 ) Add test confirming that required=False is valid on a relational field. ( #4195 ) In LimitOffsetPagination limit=0 should revert to default limit. ( #4194 ) Exclude read_only=True fields from unique_together validation & add docs. ( #4192 ) Handle bytestrings in JSON. ( #4191 ) JSONField(binary=True) represents using binary strings, which JSONRenderer does not support. ( #4187 ) JSONField(binary=True) represents using binary strings, which JSONRenderer does not support. ( #4185 ) More robust form rendering in the browsable API. ( #4181 ) Empty cases of .validated_data and .errors as lists not dicts for ListSerializer. ( #4180 ) Schemas & client libraries. ( #4179 ) Removed AUTH_USER_MODEL compat property. ( #4176 ) Clean up existing deprecation warnings. ( #4166 ) Django 1.10 support. ( #4158 ) Updated jQuery version to 1.12.4. ( #4157 ) More robust default behavior on OrderingFilter. ( #4156 ) description.py codes and tests removal. ( #4153 ) Wrap guardian.VERSION in tuple. ( #4149 ) Refine validator for fields with kwargs. ( #4146 ) Fix None values representation in childs of ListField, DictField. ( #4118 ) Resolve TimeField representation for midnight value. ( #4107 ) Set proper status code in AdminRenderer for the redirection after POST/DELETE requests. ( #4106 ) TimeField render returns None instead of 00:00:00. ( #4105 ) Fix incorrectly named zh-hans and zh-hant locale path. ( #4103 ) Prevent raising exception when limit is 0. ( #4098 ) TokenAuthentication: Allow custom keyword in the header. ( #4097 ) Handle incorrectly padded HTTP basic auth header. ( #4090 ) LimitOffset pagination crashes Browseable API when limit=0. ( #4079 ) Fixed DecimalField arbitrary precision support. ( #4075 ) Added support for custom CSRF cookie names. ( #4049 ) Fix regression introduced by #4035. ( #4041 ) No auth view failing permission should raise 403. ( #4040 ) Fix string_types / text_types confusion. ( #4025 ) Do not list related field choices in OPTIONS requests. ( #4021 ) Fix typo. ( #4008 ) Reorder initializing the view. ( #4006 ) Type error in DjangoObjectPermissionsFilter on Python 3.4. ( #4005 ) Fixed use of deprecated Query.aggregates. ( #4003 ) Fix blank lines around docstrings. ( #4002 ) Fixed admin pagination when limit is 0. ( #3990 ) OrderingFilter adjustments. ( #3983 ) Non-required serializer related fields. ( #3976 ) Using safer calling way of \"@api_view\" in tutorial. ( #3971 ) ListSerializer doesn't handle unique_together constraints. ( #3970 ) Add missing migration file. ( #3968 ) OrderingFilter should call get_serializer_class() to determine default fields. ( #3964 ) Remove old Django checks from tests and compat. ( #3953 ) Support callable as the value of initial for any serializer.Field . ( #3943 ) Prevented unnecessary distinct() call in SearchFilter. ( #3938 ) Fix None UUID ForeignKey serialization. ( #3936 ) Drop EOL Django 1.7. ( #3933 ) Add missing space in serializer error message. ( #3926 ) Fixed _force_text_recursive typo. ( #3908 ) Attempt to address Django 2.0 deprecate warnings related to field.rel . ( #3906 ) Fix parsing multipart data using a nested serializer with list. ( #3820 ) Resolving APIs URL to different namespaces. ( #3816 ) Do not HTML-escape help_text in Browsable API forms. ( #3812 ) OPTIONS fetches and shows all possible foreign keys in choices field. ( #3751 ) Django 1.9 deprecation warnings ( #3729 ) Test case for #3598 ( #3710 ) Adding support for multiple values for search filter. ( #3541 ) Use get_serializer_class in ordering filter. ( #3487 ) Serializers with many=True should return empty list rather than empty dict. ( #3476 ) LimitOffsetPagination limit=0 fix. ( #3444 ) Enable Validators to defer string evaluation and handle new string format. ( #3438 ) Unique validator is executed and breaks if field is invalid. ( #3381 ) Do not ignore overridden View.get_view_name() in breadcrumbs. ( #3273 ) Retry form rendering when rendering with serializer fails. ( #3164 ) Unique constraint prevents nested serializers from updating. ( #2996 ) Uniqueness validators should not be run for excluded (read_only) fields. ( #2848 ) UniqueValidator raises exception for nested objects. ( #2403 ) lookup_type is deprecated in favor of lookup_expr . ( #4259 ) 3.3.x series 3.3.3 Date : 14th March 2016 . Remove version string from templates. Thanks to @blag for the report and fixes. ( #3878 , #3913 , #3912 ) Fixes vertical html layout for BooleanField . Thanks to Mikalai Radchuk for the fix. ( #3910 ) Silenced deprecation warnings on Django 1.8. Thanks to Simon Charette for the fix. ( #3903 ) Internationalization for authtoken. Thanks to Michael Nacharov for the fix. ( #3887 , #3968 ) Fix Token model as abstract when the authtoken application isn't declared. Thanks to Adam Thomas for the report. ( #3860 , #3858 ) Improve Markdown version compatibility. Thanks to Michael J. Schultz for the fix. ( #3604 , #3842 ) QueryParameterVersioning does not use DEFAULT_VERSION setting. Thanks to Brad Montgomery for the fix. ( #3833 ) Add an explicit on_delete on the models. Thanks to Mads Jensen for the fix. ( #3832 ) Fix DateField.to_representation to work with Python 2 unicode. Thanks to Mikalai Radchuk for the fix. ( #3819 ) Fixed TimeField not handling string times. Thanks to Areski Belaid for the fix. ( #3809 ) Avoid updates of Meta.extra_kwargs . Thanks to Kevin Massey for the report and fix. ( #3805 , #3804 ) Fix nested validation error being rendered incorrectly. Thanks to Craig de Stigter for the fix. ( #3801 ) Document how to avoid CSRF and missing button issues with django-crispy-forms . Thanks to Emmanuelle Delescolle, Jos\u00e9 Padilla and Luis San Pablo for the report, analysis and fix. ( #3787 , #3636 , #3637 ) Improve Rest Framework Settings file setup time. Thanks to Miles Hutson for the report and Mads Jensen for the fix. ( #3786 , #3815 ) Improve authtoken compatibility with Django 1.9. Thanks to S. Andrew Sheppard for the fix. ( #3785 ) Fix Min/MaxValueValidator transfer from a model's DecimalField . Thanks to Kevin Brown for the fix. ( #3774 ) Improve HTML title in the Browsable API. Thanks to Mike Lissner for the report and fix. ( #3769 ) Fix AutoFilterSet to inherit from default_filter_set . Thanks to Tom Linford for the fix. ( #3753 ) Fix transifex config to handle the new Chinese language codes. Thanks to @nypisces for the report and fix. ( #3739 ) DateTimeField does not handle empty values correctly. Thanks to Mick Parker for the report and fix. ( #3731 , #3726 ) Raise error when setting a removed rest_framework setting. Thanks to Luis San Pablo for the fix. ( #3715 ) Add missing csrf_token in AdminRenderer post form. Thanks to Piotr \u015aniegowski for the fix. ( #3703 ) Refactored _get_reverse_relationships() to use correct to_field . Thanks to Benjamin Phillips for the fix. ( #3696 ) Document the use of get_queryset for RelatedField . Thanks to Ryan Hiebert for the fix. ( #3605 ) Fix empty pk detection in HyperlinkRelatedField.get_url. Thanks to @jslang for the fix ( #3962 ) 3.3.2 Date : 14th December 2015 . ListField enforces input is a list. ( #3513 ) Fix regression hiding raw data form. ( #3600 , #3578 ) Fix Python 3.5 compatibility. ( #3534 , #3626 ) Allow setting a custom Django Paginator in pagination.PageNumberPagination . ( #3631 , #3684 ) Fix relational fields without to_fields attribute. ( #3635 , #3634 ) Fix template.render deprecation warnings for Django 1.9. ( #3654 ) Sort response headers in browsable API renderer. ( #3655 ) Use related_objects api for Django 1.9+. ( #3656 , #3252 ) Add confirm modal when deleting. ( #3228 , #3662 ) Reveal previously hidden AttributeErrors and TypeErrors while calling has_[object_]permissions. ( #3668 ) Make DRF compatible with multi template engine in Django 1.8. ( #3672 ) Update NestedBoundField to also handle empty string when rendering its form. ( #3677 ) Fix UUID validation to properly catch invalid input types. ( #3687 , #3679 ) Fix caching issues. ( #3628 , #3701 ) Fix Admin and API browser for views without a filter_class. ( #3705 , #3596 , #3597 ) Add app_name to rest_framework.urls. ( #3714 ) Improve authtoken's views to support url versioning. ( #3718 , #3723 ) 3.3.1 Date : 4th November 2015 . Resolve parsing bug when accessing request.POST ( #3592 ) Correctly deal with to_field referring to primary key. ( #3593 ) Allow filter HTML to render when no filter_class is defined. ( #3560 ) Fix admin rendering issues. ( #3564 , #3556 ) Fix issue with DecimalValidator. ( #3568 ) 3.3.0 Date : 28th October 2015 . HTML controls for filters. ( #3315 ) Forms API. ( #3475 ) AJAX browsable API. ( #3410 ) Added JSONField. ( #3454 ) Correctly map to_field when creating ModelSerializer relational fields. ( #3526 ) Include keyword arguments when mapping FilePathField to a serializer field. ( #3536 ) Map appropriate model error_messages on ModelSerializer uniqueness constraints. ( #3435 ) Include max_length constraint for ModelSerializer fields mapped from TextField. ( #3509 ) Added support for Django 1.9. ( #3450 , #3525 ) Removed support for Django 1.5 & 1.6. ( #3421 , #3429 ) Removed 'south' migrations. ( #3495 ) 3.2.x series 3.2.5 Date : 27th October 2015 . Escape username in optional logout tag. ( #3550 ) 3.2.4 Date : 21th September 2015 . Don't error on missing ViewSet.search_fields attribute. ( #3324 , #3323 ) Fix allow_empty not working on serializers with many=True . ( #3361 , #3364 ) Let DurationField accepts integers. ( #3359 ) Multi-level dictionaries not supported in multipart requests. ( #3314 ) Fix ListField truncation on HTTP PATCH ( #3415 , #2761 ) 3.2.3 Date : 24th August 2015 . Added html_cutoff and html_cutoff_text for limiting select dropdowns. ( #3313 ) Added regex style to SearchFilter . ( #3316 ) Resolve issues with setting blank HTML fields. ( #3318 ) ( #3321 ) Correctly display existing 'select multiple' values in browsable API forms. ( #3290 ) Resolve duplicated validation message for IPAddressField . ([#3249 gh3249 ) ( #3250 ) Fix to ensure admin renderer continues to work when pagination is disabled. ( #3275 ) Resolve error with LimitOffsetPagination when count=0, offset=0. ( #3303 ) 3.2.2 Date : 13th August 2015 . Add display_value() method for use when displaying relational field select inputs. ( #3254 ) Fix issue with BooleanField checkboxes incorrectly displaying as checked. ( #3258 ) Ensure empty checkboxes properly set BooleanField to False in all cases. ( #2776 ) Allow WSGIRequest.FILES property without raising incorrect deprecated error. ( #3261 ) Resolve issue with rendering nested serializers in forms. ( #3260 ) Raise an error if user accidentally pass a serializer instance to a response, rather than data. ( #3241 ) 3.2.1 Date : 7th August 2015 . Fix for relational select widgets rendering without any choices. ( #3237 ) Fix for 1 , 0 rendering as true , false in the admin interface. #3227 ) Fix for ListFields with single value in HTML form input. ( #3238 ) Allow request.FILES for compat with Django's HTTPRequest class. ( #3239 ) 3.2.0 Date : 6th August 2015 . Add AdminRenderer . ( #2926 ) Add FilePathField . ( #1854 ) Add allow_empty to ListField . ( #2250 ) Support django-guardian 1.3. ( #3165 ) Support grouped choices. ( #3225 ) Support error forms in browsable API. ( #3024 ) Allow permission classes to customize the error message. ( #2539 ) Support source=<method> on hyperlinked fields. ( #2690 ) ListField(allow_null=True) now allows null as the list value, not null items in the list. ( #2766 ) ManyToMany() maps to allow_empty=False , ManyToMany(blank=True) maps to allow_empty=True . ( #2804 ) Support custom serialization styles for primary key fields. ( #2789 ) OPTIONS requests support nested representations. ( #2915 ) Set view.action == \"metadata\" for viewsets with OPTIONS requests. ( #3115 ) Support allow_blank on UUIDField . ([#3130][gh#3130]) Do not display view docstrings with 401 or 403 response codes. ( #3216 ) Resolve Django 1.8 deprecation warnings. ( #2886 ) Fix for DecimalField validation. ( #3139 ) Fix behavior of allow_blank=False when used with trim_whitespace=True . ( #2712 ) Fix issue with some field combinations incorrectly mapping to an invalid allow_blank argument. ( #3011 ) Fix for output representations with prefetches and modified querysets. ( #2704 , #2727 ) Fix assertion error when CursorPagination is provided with certain invalid query parameters. (#2920) gh2920 . Fix UnicodeDecodeError when invalid characters included in header with TokenAuthentication . ( #2928 ) Fix transaction rollbacks with @non_atomic_requests decorator. ( #3016 ) Fix duplicate results issue with Oracle databases using SearchFilter . ( #2935 ) Fix checkbox alignment and rendering in browsable API forms. ( #2783 ) Fix for unsaved file objects which should use \"url\": null in the representation. ( #2759 ) Fix field value rendering in browsable API. ( #2416 ) Fix HStoreField to include allow_blank=True in DictField mapping. ( #2659 ) Numerous other cleanups, improvements to error messaging, private API & minor fixes. 3.1.x series 3.1.3 Date : 4th June 2015 . Add DurationField . ( #2481 , #2989 ) Add format argument to UUIDField . ( #2788 , #3000 ) MultipleChoiceField empties incorrectly on a partial update using multipart/form-data ( #2993 , #2894 ) Fix a bug in options related to read-only RelatedField . ( #2981 , #2811 ) Fix nested serializers with unique_together relations. ( #2975 ) Allow unexpected values for ChoiceField / MultipleChoiceField representations. ( #2839 , #2940 ) Rollback the transaction on error if ATOMIC_REQUESTS is set. ( #2887 , #2034 ) Set the action on a view when override_method regardless of its None-ness. ( #2933 ) DecimalField accepts 2E+2 as 200 and validates decimal place correctly. ( #2948 , #2947 ) Support basic authentication with custom UserModel that change username . ( #2952 ) IPAddressField improvements. ( #2747 , #2618 , #3008 ) Improve DecimalField for easier subclassing. ( #2695 ) 3.1.2 Date : 13rd May 2015 . DateField.to_representation can handle str and empty values. ( #2656 , #2687 , #2869 ) Use default reason phrases from HTTP standard. ( #2764 , #2763 ) Raise error when ModelSerializer used with abstract model. ( #2757 , #2630 ) Handle reversal of non-API view_name in HyperLinkedRelatedField ( #2724 , #2711 ) Don't require pk strictly for related fields. ( #2745 , #2754 ) Metadata detects null boolean field type. ( #2762 ) Proper handling of depth in nested serializers. ( #2798 ) Display viewset without paginator. ( #2807 ) Don't check for deprecated .model attribute in permissions ( #2818 ) Restrict integer field to integers and strings. ( #2835 , #2836 ) Improve IntegerField to use compiled decimal regex. ( #2853 ) Prevent empty queryset to raise AssertionError. ( #2862 ) DjangoModelPermissions rely on get_queryset . ( #2863 ) Check AcceptHeaderVersioning with content negotiation in place. ( #2868 ) Allow DjangoObjectPermissions to use views that define get_queryset . ( #2905 ) 3.1.1 Date : 23rd March 2015 . Security fix : Escape tab switching cookie name in browsable API. Display input forms in browsable API if serializer_class is used, even when get_serializer method does not exist on the view. ( #2743 ) Use a password input for the AuthTokenSerializer. ( #2741 ) Fix missing anchor closing tag after next button. ( #2691 ) Fix lookup_url_kwarg handling in viewsets. ( #2685 , #2591 ) Fix problem with importing rest_framework.views in apps.py ( #2678 ) LimitOffsetPagination raises TypeError if PAGE_SIZE not set ( #2667 , #2700 ) German translation for min_value field error message references max_value . ( #2645 ) Remove MergeDict . ( #2640 ) Support serializing unsaved models with related fields. ( #2637 , #2641 ) Allow blank/null on radio.html choices. ( #2631 ) 3.1.0 Date : 5th March 2015 . For full details see the 3.1 release announcement . 3.0.x series 3.0.5 Date : 10th February 2015 . Fix a bug where _closable_objects breaks pickling. ( #1850 , #2492 ) Allow non-standard User models with Throttling . ( #2524 ) Support custom User.db_table in TokenAuthentication migration. ( #2479 ) Fix misleading AttributeError tracebacks on Request objects. ( #2530 , #2108 ) ManyRelatedField.get_value clearing field on partial update. ( #2475 ) Removed '.model' shortcut from code. ( #2486 ) Fix detail_route and list_route mutable argument. ( #2518 ) Prefetching the user object when getting the token in TokenAuthentication . ( #2519 ) 3.0.4 Date : 28th January 2015 . Django 1.8a1 support. ( #2425 , #2446 , #2441 ) Add DictField and support Django 1.8 HStoreField . ( #2451 , #2106 ) Add UUIDField and support Django 1.8 UUIDField . ( #2448 , #2433 , #2432 ) BaseRenderer.render now raises NotImplementedError . ( #2434 ) Fix timedelta JSON serialization on Python 2.6. ( #2430 ) ResultDict and ResultList now appear as standard dict/list. ( #2421 ) Fix visible HiddenField in the HTML form of the web browsable API page. ( #2410 ) Use OrderedDict for RelatedField.choices . ( #2408 ) Fix ident format when using HTTP_X_FORWARDED_FOR . ( #2401 ) Fix invalid key with memcached while using throttling. ( #2400 ) Fix FileUploadParser with version 3.x. ( #2399 ) Fix the serializer inheritance. ( #2388 ) Fix caching issues with ReturnDict . ( #2360 ) 3.0.3 Date : 8th January 2015 . Fix MinValueValidator on models.DateField . ( #2369 ) Fix serializer missing context when pagination is used. ( #2355 ) Namespaced router URLs are now supported by the DefaultRouter . ( #2351 ) required=False allows omission of value for output. ( #2342 ) Use textarea input for models.TextField . ( #2340 ) Use custom ListSerializer for pagination if required. ( #2331 , #2327 ) Better behavior with null and '' for blank HTML fields. ( #2330 ) Ensure fields in exclude are model fields. ( #2319 ) Fix IntegerField and max_length argument incompatibility. ( #2317 ) Fix the YAML encoder for 3.0 serializers. ( #2315 , #2283 ) Fix the behavior of empty HTML fields. ( #2311 , #1101 ) Fix Metaclass attribute depth ignoring fields attribute. ( #2287 ) Fix format_suffix_patterns to work with Django's i18n_patterns . ( #2278 ) Ability to customize router URLs for custom actions, using url_path . ( #2010 ) Don't install Django REST Framework as egg. ( #2386 ) 3.0.2 Date : 17th December 2014 . Ensure request.user is made available to response middleware. ( #2155 ) Client.logout() also cancels any existing force_authenticate . ( #2218 , #2259 ) Extra assertions and better checks to preventing incorrect serializer API use. ( #2228 , #2234 , #2262 , #2263 , #2266 , #2267 , #2289 , #2291 ) Fixed min_length message for CharField . ( #2255 ) Fix UnicodeDecodeError , which can occur on serializer repr . ( #2270 , #2279 ) Fix empty HTML values when a default is provided. ( #2280 , #2294 ) Fix SlugRelatedField raising UnicodeEncodeError when used as a multiple choice input. ( #2290 ) 3.0.1 Date : 11th December 2014 . More helpful error message when the default Serializer create() fails. ( #2013 ) Raise error when attempting to save serializer if data is not valid. ( #2098 ) Fix FileUploadParser breaks with empty file names and multiple upload handlers. ( #2109 ) Improve BindingDict to support standard dict-functions. ( #2135 , #2163 ) Add validate() to ListSerializer . ( #2168 , #2225 , #2232 ) Fix JSONP renderer failing to escape some characters. ( #2169 , #2195 ) Add missing default style for FileField . ( #2172 ) Actions are required when calling ViewSet.as_view() . ( #2175 ) Add allow_blank to ChoiceField . ( #2184 , #2239 ) Cosmetic fixes in the HTML renderer. ( #2187 ) Raise error if fields on serializer is not a list of strings. ( #2193 , #2213 ) Improve checks for nested creates and updates. ( #2194 , #2196 ) validated_attrs argument renamed to validated_data in Serializer create() / update() . ( #2197 ) Remove deprecated code to reflect the dropped Django versions. ( #2200 ) Better serializer errors for nested writes. ( #2202 , #2215 ) Fix pagination and custom permissions incompatibility. ( #2205 ) Raise error if fields on serializer is not a list of strings. ( #2213 ) Add missing translation markers for relational fields. ( #2231 ) Improve field lookup behavior for dicts/mappings. ( #2244 , #2243 ) Optimized hyperlinked PK. ( #2242 ) 3.0.0 Date : 1st December 2014 For full details see the 3.0 release announcement . For older release notes, please see the version 2.x documentation .","title":"Release Notes"},{"location":"community/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"community/release-notes/#versioning","text":"Minor version numbers (0.0.x) are used for changes that are API compatible. You should be able to upgrade between minor point releases without any other code changes. Medium version numbers (0.x.0) may include API changes, in line with the deprecation policy . You should read the release notes carefully before upgrading between medium point releases. Major version numbers (x.0.0) are reserved for substantial project milestones.","title":"Versioning"},{"location":"community/release-notes/#deprecation-policy","text":"REST framework releases follow a formal deprecation policy, which is in line with Django's deprecation policy . The timeline for deprecation of a feature present in version 1.0 would work as follows: Version 1.1 would remain fully backwards compatible with 1.0, but would raise RemovedInDRF13Warning warnings, subclassing PendingDeprecationWarning , if you use the feature that are due to be deprecated. These warnings are silent by default , but can be explicitly enabled when you're ready to start migrating any required changes. For example if you start running your tests using python -Wd manage.py test , you'll be warned of any API changes you need to make. Version 1.2 would escalate these warnings to subclass DeprecationWarning , which is loud by default. Version 1.3 would remove the deprecated bits of API entirely. Note that in line with Django's policy, any parts of the framework not mentioned in the documentation should generally be considered private API, and may be subject to change.","title":"Deprecation policy"},{"location":"community/release-notes/#upgrading","text":"To upgrade Django REST framework to the latest version, use pip: pip install -U djangorestframework You can determine your currently installed version using pip show : pip show djangorestframework","title":"Upgrading"},{"location":"community/release-notes/#312x-series","text":"","title":"3.12.x series"},{"location":"community/release-notes/#3122","text":"Date: 13th October 2020 Fix issue if rest_framework.authtoken.models is imported, but rest_framework.authtoken is not in INSTALLED_APPS. [#7571] Ignore subclasses of BrowsableAPIRenderer in OpenAPI schema. [#7497] Narrower exception catching in serilizer fields, to ensure that any errors in broken get_queryset() methods are not masked. [#7480]","title":"3.12.2"},{"location":"community/release-notes/#3121","text":"Date: 28th September 2020 Add TokenProxy migration. [#7557]","title":"3.12.1"},{"location":"community/release-notes/#3120","text":"Date: 28th September 2020 Add --file option to generateschema command. [#7130] Support tags for OpenAPI schema generation. See the schema docs . [#7184] Support customising the operation ID for schema generation. See the schema docs . [#7190] Support OpenAPI components for schema generation. See the schema docs . [#7124] The following methods on AutoSchema become public API: get_path_parameters , get_pagination_parameters , get_filter_parameters , get_request_body , get_responses , get_serializer , get_paginator , map_serializer , map_field , map_choice_field , map_field_validators , allows_filters . See the schema docs Add support for Django 3.1's database-agnositic JSONField . [#7467] SearchFilter now supports nested search on JSONField and HStoreField model fields. [#7121] SearchFilter now supports searching on annotate() fields. [#6240] The authtoken model no longer exposes the pk in the admin URL. [#7341] Add __repr__ for Request instances. [#7239] UTF-8 decoding with Latin-1 fallback for basic auth credentials. [#7193] CharField treats surrogate characters as a validation failure. [#7026] Don't include callables as default values in schemas. [#7105] Improve ListField schema output to include all available child information. [#7137] Allow default=False to be included for BooleanField schema outputs. [#7165] Include \"type\" information in ChoiceField schema outputs. [#7161] Include \"type\": \"object\" on schema objects. [#7169] Don't include component in schema output for DELETE requests. [#7229] Fix schema types for DecimalField . [#7254] Fix schema generation for ObtainAuthToken view. [#7211] Support passing context=... to view .get_serializer() methods. [#7298] Pass custom code to PermissionDenied if permission class has one set. [#7306] Include \"example\" in schema pagination output. [#7275] Default status code of 201 on schema output for POST requests. [#7206] Use camelCase for operation IDs in schema output. [#7208] Warn if duplicate operation IDs exist in schema output. [#7207] Improve handling of decimal type when mapping ChoiceField to a schema output. [#7264] Disable YAML aliases for OpenAPI schema outputs. [#7131] Fix action URL names for APIs included under a namespaced URL. [#7287] Update jQuery version from 3.4 to 3.5. [#7313] Fix UniqueTogether handling when serializer fields use source=... . [#7143] HTTP HEAD requests now set self.action correctly on a ViewSet instance. [#7223] Return a valid OpenAPI schema for the case where no API schema paths exist. [#7125] Include tests in package distribution. [#7145] Allow type checkers to support annotations like ModelSerializer[Author] . [#7385] Don't include invalid charset=None portion in the request Content-Type header when using APIClient. [#7400] Fix \\Z / \\z tokens in OpenAPI regexs. [#7389] Fix PrimaryKeyRelatedField and HyperlinkedRelatedField when source field is actually a property. [#7142] Token.generate_key is now a class method. [#7502] @action warns if method is wrapped in a decorator that does not preserve information using @functools.wraps . [#7098]","title":"3.12.0"},{"location":"community/release-notes/#311x-series","text":"","title":"3.11.x series"},{"location":"community/release-notes/#3112","text":"Date : 30th September 2020 Security : Drop urlize_quoted_links template tag in favour of Django's built-in urlize . Removes a XSS vulnerability for some kinds of content in the browsable API.","title":"3.11.2"},{"location":"community/release-notes/#3111","text":"Date : 5th August 2020 Fix compat with Django 3.1","title":"3.11.1"},{"location":"community/release-notes/#3110","text":"Date : 12th December 2019 Drop .set_context API in favour of a requires_context marker . Changed default widget for TextField with choices to select box. #6892 Supported nested writes on non-relational fields, such as JSONField. #6916 Include request/response media types in OpenAPI schemas, based on configured parsers/renderers. #6865 Include operation descriptions in OpenAPI schemas, based on the docstring on the view. #6898 Fix representation of serializers with all optional fields in OpenAPI schemas. #6941 , #6944 Fix representation of serializers.HStoreField in OpenAPI schemas. #6914 Fix OpenAPI generation when title or version is not provided. #6912 Use int64 representation for large integers in OpenAPI schemas. #7018 Improved error messages if no .to_representation implementation is provided on a field subclass. #6996 Fix for serializer classes that use multiple inheritance. #6980 Fix for reversing Hyperlinked URL fields with percent encoded components in the path. #7059 Update bootstrap to 3.4.1. #6923","title":"3.11.0"},{"location":"community/release-notes/#310x-series","text":"","title":"3.10.x series"},{"location":"community/release-notes/#3103","text":"Date : 4th September 2019 Include API version in OpenAPI schema generation, defaulting to empty string. Add pagination properties to OpenAPI response schemas. Add missing \"description\" property to OpenAPI response schemas. Only include \"required\" for non-empty cases in OpenAPI schemas. Fix response schemas for \"DELETE\" case in OpenAPI schemas. Use an array type for list view response schemas. Use consistent lowerInitialCamelCase style in OpenAPI operation IDs. Fix minLength / maxLength / minItems / maxItems properties in OpenAPI schemas. Only call FileField.url once in serialization, for improved performance. Fix an edge case where throttling calculations could error after a configuration change.","title":"3.10.3"},{"location":"community/release-notes/#3102","text":"Date : 29th July 2019 Various OpenAPI schema fixes. Ability to specify urlconf in include_docs_urls.","title":"3.10.2"},{"location":"community/release-notes/#3101","text":"Date : 17th July 2019 Don't include autocomplete fields on TokenAuth admin, since it forces constraints on custom user models & admin. Require uritemplate for OpenAPI schema generation, but not coreapi .","title":"3.10.1"},{"location":"community/release-notes/#3100","text":"Date : 15th July 2019 Switch to OpenAPI schema generation. Drop Python 2 support. Add generateschema --generator_class CLI option Updated PyYaml dependency for OpenAPI schema generation to pyyaml>=5.1 #6680 Resolve DeprecationWarning with markdown. #6317 Use user.get_username in templates, in preference to user.username . Fix for cursor pagination issue that could occur after object deletions. Fix for nullable fields with source=\"*\" Always apply all throttle classes during throttling checks. Updates to jQuery and Markdown dependencies. Don't strict disallow redundant SerializerMethodField field name arguments. Don't render extra actions in browable API if not authenticated. Strip null characters from search parameters.","title":"3.10.0"},{"location":"community/release-notes/#39x-series","text":"","title":"3.9.x series"},{"location":"community/release-notes/#394","text":"Date : 10th May 2019 This is a maintenance release that fixes an error handling bug under Python 2.","title":"3.9.4"},{"location":"community/release-notes/#393","text":"Date : 29th April 2019 This is the last Django REST Framework release that will support Python 2. Be sure to upgrade to Python 3 before upgrading to Django REST Framework 3.10. Adjusted the compat check for django-guardian to allow the last guardian version (v1.4.9) compatible with Python 2. #6613","title":"3.9.3"},{"location":"community/release-notes/#392","text":"Date : 3rd March 2019 Routers: invalidate _urls cache on register() #6407 Deferred schema renderer creation to avoid requiring pyyaml. #6416 Added 'request_forms' block to base.html #6340 Fixed SchemaView to reset renderer on exception. #6429 Update Django Guardian dependency. #6430 Ensured support for Django 2.2 #6422 & #6455 Made templates compatible with session-based CSRF. #6207 Adjusted field validators to accept non-list iterables. #6282 Added SearchFilter.get_search_fields() hook. #6279 Fix DeprecationWarning when accessing collections.abc classes via collections #6268 Allowed Q objects in limit_choices_to introspection. #6472 Added lazy evaluation to composed permissions. #6463 Add negation ~ operator to permissions composition #6361 Avoided calling distinct on annotated fields in SearchFilter. #6240 Introduced RemovedInDRF\u2026Warning classes to simplify deprecations. #6480","title":"3.9.2"},{"location":"community/release-notes/#391","text":"Date : 16th January 2019 Resolve XSS issue in browsable API. #6330 Upgrade Bootstrap to 3.4.0 to resolve XSS issue. Resolve issues with composable permissions. #6299 Respect limit_choices_to on foreign keys. #6371","title":"3.9.1"},{"location":"community/release-notes/#390","text":"Date : 18th October 2018 Improvements to ViewSet extra actions #5605 Fix action support for ViewSet suffixes #6081 Allow action docs sections #6060 Deprecate the Router.register base_name argument in favor of basename . #5990 Deprecate the Router.get_default_base_name method in favor of Router.get_default_basename . #5990 Change CharField to disallow null bytes. #6073 To revert to the old behavior, subclass CharField and remove ProhibitNullCharactersValidator from the validators. python class NullableCharField(serializers.CharField): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) self.validators = [v for v in self.validators if not isinstance(v, ProhibitNullCharactersValidator)] Add OpenAPIRenderer and generate_schema management command. #6229 Add OpenAPIRenderer by default, and add schema docs. #6233 Allow permissions to be composed #5753 Allow nullable BooleanField in Django 2.1 #6183 Add testing of Python 3.7 support #6141 Test using Django 2.1 final release. #6109 Added djangorestframework-datatables to third-party packages #5931 Change ISO 8601 date format to exclude year/month-only options #5936 Update all pypi.python.org URLs to pypi.org #5942 Ensure that html forms (multipart form data) respect optional fields #5927 Allow hashing of ErrorDetail. #5932 Correct schema parsing for JSONField #5878 Render descriptions (from help_text) using safe #5869 Removed input value from deault_error_message #5881 Added min_value/max_value support in DurationField #5643 Fixed instance being overwritten in pk-only optimization try/except block #5747 Fixed AttributeError from items filter when value is None #5981 Fixed Javascript e.indexOf is not a function error #5982 Fix schemas for extra actions #5992 Improved get_error_detail to use error_dict/error_list #5785 Improved URLs in Admin renderer #5988 Add \"Community\" section to docs, minor cleanup #5993 Moved guardian imports out of compat #6054 Deprecate the DjangoObjectPermissionsFilter class, moved to the djangorestframework-guardian package. #6075 Drop Django 1.10 support #5657 Only catch TypeError/ValueError for object lookups #6028 Handle models without .objects manager in ModelSerializer. #6111 Improve ModelSerializer.create() error message. #6112 Fix CSRF cookie check failure when using session auth with django 1.11.6+ #6113 Updated JWT docs. #6138 Fix autoescape not getting passed to urlize_quoted_links filter #6191","title":"3.9.0"},{"location":"community/release-notes/#38x-series","text":"","title":"3.8.x series"},{"location":"community/release-notes/#382","text":"Date : 6th April 2018 Fix read_only + default unique_together validation. #5922 authtoken.views import coreapi from rest_framework.compat, not directly. #5921 Docs: Add missing argument 'detail' to Route #5920","title":"3.8.2"},{"location":"community/release-notes/#381","text":"Date : 4th April 2018 Use old url_name behavior in route decorators #5915 For list_route and detail_route maintain the old behavior of url_name , basing it on the url_path instead of the function name.","title":"3.8.1"},{"location":"community/release-notes/#380","text":"Date : 3rd April 2018 Breaking Change : Alter read_only plus default behaviour. #5886 read_only fields will now always be excluded from writable fields. Previously read_only fields with a default value would use the default for create and update operations. In order to maintain the old behaviour you may need to pass the value of read_only fields when calling save() in the view: def perform_create(self, serializer): serializer.save(owner=self.request.user) Alternatively you may override save() or create() or update() on the serializer as appropriate. Correct allow_null behaviour when required=False #5888 Without an explicit default , allow_null implies a default of null for outgoing serialization. Previously such fields were being skipped when read-only or otherwise not required. Possible backwards compatibility break if you were relying on such fields being excluded from the outgoing representation. In order to restore the old behaviour you can override data to exclude the field when None . For example: @property def data(self): \"\"\" Drop `maybe_none` field if None. \"\"\" data = super().data if 'maybe_none' in data and data['maybe_none'] is None: del data['maybe_none'] return data Refactor dynamic route generation and improve viewset action introspectibility. #5705 ViewSet s have been provided with new attributes and methods that allow it to introspect its set of actions and the details of the current action. Merged list_route and detail_route into a single action decorator. Get all extra actions on a ViewSet with .get_extra_actions() . Extra actions now set the url_name and url_path on the decorated method. url_name is now based on the function name, instead of the url_path , as the path is not always suitable (e.g., capturing arguments in the path). Enable action url reversing through .reverse_action() method (added in 3.7.4) Example reverse call: self.reverse_action(self.custom_action.url_name) Add detail initkwarg to indicate if the current action is operating on a collection or a single instance. Additional changes: Deprecated list_route & detail_route in favor of action decorator with detail boolean. Deprecated dynamic list/detail route variants in favor of DynamicRoute with detail boolean. Refactored the router's dynamic route generation. list_route and detail_route maintain the old behavior of url_name , basing it on the url_path instead of the function name. Fix formatting of the 3.7.4 release note #5704 Docs: Update DRF Writable Nested Serializers references #5711 Docs: Fixed typo in auth URLs example. #5713 Improve composite field child errors #5655 Disable HTML inputs for dict/list fields #5702 Fix typo in HostNameVersioning doc #5709 Use rsplit to get module and classname for imports #5712 Formalize URLPatternsTestCase #5703 Add exception translation test #5700 Test staticfiles #5701 Add drf-yasg to documentation and schema 3rd party packages #5720 Remove unused compat._resolve_model() #5733 Drop compat workaround for unsupported Python 3.2 #5734 Prefer iter(dict) over iter(dict.keys()) #5736 Pass python_requires argument to setuptools #5739 Remove unused links from docs #5735 Prefer https protocol for links in docs when available #5729 Add HStoreField, postgres fields tests #5654 Always fully qualify ValidationError in docs #5751 Remove unreachable code from ManualSchema #5766 Allowed customising API documentation code samples #5752 Updated docs to use pip show #5757 Load 'static' instead of 'staticfiles' in templates #5773 Fixed a typo in fields docs #5783 Refer to \"NamespaceVersioning\" instead of \"NamespacedVersioning\" in the documentation #5754 ErrorDetail: add __eq__ / __ne__ and __repr__ #5787 Replace background-attachment: fixed in docs #5777 Make 404 & 403 responses consistent with exceptions.APIException output #5763 Small fix to API documentation: schemas #5796 Fix schema generation for PrimaryKeyRelatedField #5764 Represent serializer DictField as an Object in schema #5765 Added docs example reimplementing ObtainAuthToken #5802 Add schema to the ObtainAuthToken view #5676 Fix request formdata handling #5800 Fix authtoken views imports #5818 Update pytest, isort #5815 #5817 #5894 Fixed active timezone handling for non ISO8601 datetimes. #5833 Made TemplateHTMLRenderer render IntegerField inputs when value is 0 . #5834 Corrected endpoint in tutorial instructions #5835 Add Django Rest Framework Role Filters to Third party packages #5809 Use single copy of static assets. Update jQuery #5823 Changes ternary conditionals to be PEP308 compliant #5827 Added links to 'A Todo List API with React' and 'Blog API' tutorials #5837 Fix comment typo in ModelSerializer #5844 Add admin to installed apps to avoid test failures. #5870 Fixed schema for UUIDField in SimpleMetadata. #5872 Corrected docs on router include with namespaces. #5843 Test using model objects for dotted source default #5880 Allow traversing nullable related fields #5849 Added: Tutorial: Django REST with React (Django 2.0) #5891 Add LimitOffsetPagination.get_count to allow method override #5846 Don't show hidden fields in metadata #5854 Enable OrderingFilter to handle an empty tuple (or list) for the 'ordering' field. #5899 Added generic 500 and 400 JSON error handlers. #5904","title":"3.8.0"},{"location":"community/release-notes/#37x-series","text":"","title":"3.7.x series"},{"location":"community/release-notes/#377","text":"Date : 21st December 2017 Fix typo to include *.mo locale files to packaging. #5697 , #5695","title":"3.7.7"},{"location":"community/release-notes/#376","text":"Date : 21st December 2017 Add missing *.ico icon files to packaging.","title":"3.7.6"},{"location":"community/release-notes/#375","text":"Date : 21st December 2017 Add missing *.woff2 font files to packaging. #5692 Add missing *.mo locale files to packaging. #5695 , #5696","title":"3.7.5"},{"location":"community/release-notes/#374","text":"Date : 20th December 2017 Schema: Extract method for manual_fields processing #5633 Allows for easier customisation of manual_fields processing, for example to provide per-method manual fields. AutoSchema adds get_manual_fields , as the intended override point, and a utility method update_fields , to handle by-name field replacement from a list, which, in general, you are not expected to override. Note: AutoSchema.__init__ now ensures manual_fields is a list. Previously may have been stored internally as None . Remove ulrparse compatibility shim; use six instead #5579 Drop compat wrapper for TimeDelta.total_seconds() #5577 Clean up all whitespace throughout project #5578 Compat cleanup #5581 Add pygments CSS block in browsable API views #5584 #5587 Remove set_rollback() from compat #5591 Fix request body/POST access #5590 Rename test to reference correct issue #5610 Documentation Fixes #5611 #5612 Remove references to unsupported Django versions in docs and code #5602 Test Serializer exclude for declared fields #5599 Fixed schema generation for filter backends #5613 Minor cleanup for ModelSerializer tests #5598 Reimplement request attribute access w/ __getattr__ #5617 Fixed SchemaJSRenderer renders invalid Javascript #5607 Make Django 2.0 support official/explicit #5619 Perform type check on passed request argument #5618 Fix AttributeError hiding on request authenticators #5600 Update test requirements #5626 Docs: Serializer._declared_fields enable modifying fields on a serializer #5629 Fix packaging #5624 Fix readme rendering for PyPI, add readme build to CI #5625 Update tutorial #5622 Non-required fields with allow_null=True should not imply a default value #5639 Docs: Add allow_null serialization output note #5641 Update to use the Django 2.0 release in tox.ini #5645 Fix Serializer.data for Browsable API rendering when provided invalid data #5646 Docs: Note AutoSchema limitations on bare APIView #5649 Add .basename and .reverse_action() to ViewSet #5648 Docs: Fix typos in serializers documentation #5652 Fix override_settings compat #5668 Add DEFAULT_SCHEMA_CLASS setting #5658 Add docs note re generated BooleanField being required=False #5665 Add 'dist' build #5656 Fix typo in docstring #5678 Docs: Add UNAUTHENTICATED_USER = None note #5679 Update OPTIONS example from \u201cDocumenting Your API\u201d #5680 Docs: Add note on object permissions for FBVs #5681 Docs: Add example to to_representation docs #5682 Add link to Classy DRF in docs #5683 Document ViewSet.action #5685 Fix schema docs typo #5687 Fix URL pattern parsing in schema generation #5689 Add example using source=\u2018*\u2019 to custom field docs. #5688 Fix format_suffix_patterns behavior with Django 2 path() routes #5691","title":"3.7.4"},{"location":"community/release-notes/#373","text":"Date : 6th November 2017 Fix AppRegistryNotReady error from contrib.auth view imports #5567","title":"3.7.3"},{"location":"community/release-notes/#372","text":"Date : 6th November 2017 Fixed Django 2.1 compatibility due to removal of django.contrib.auth.login()/logout() views. #5510 Add missing import for TextLexer. #5512 Adding examples and documentation for caching #5514 Include date and date-time format for schema generation #5511 Use triple backticks for markdown code blocks #5513 Interactive docs - make bottom sidebar items sticky #5516 Clarify pagination system check #5524 Stop JSONBoundField mangling invalid JSON #5527 Have JSONField render as textarea in Browsable API #5530 Schema: Exclude OPTIONS/HEAD for ViewSet actions #5532 Fix ordering for dotted sources #5533 Fix: Fields with allow_null=True should imply a default serialization value #5518 Ensure Location header is strictly a 'str', not subclass. #5544 Add import to example in api-guide/parsers #5547 Catch OverflowError for \"out of range\" datetimes #5546 Add djangorestframework-rapidjson to third party packages #5549 Increase test coverage for drf_create_token command #5550 Add trove classifier for Python 3.6 support. #5555 Add pip cache support to the Travis CI configuration #5556 Rename [ wheel ] section to [ bdist_wheel ] as the former is legacy #5557 Fix invalid escape sequence deprecation warnings #5560 Add interactive docs error template #5548 Add rounding parameter to DecimalField #5562 Fix all BytesWarning caught during tests #5561 Use dict and set literals instead of calls to dict() and set() #5559 Change ImageField validation pattern, use validators from DjangoImageField #5539 Fix processing unicode symbols in query_string by Python 2 #5552","title":"3.7.2"},{"location":"community/release-notes/#371","text":"Date : 16th October 2017 Fix Interactive documentation always uses false for boolean fields in requests #5492 Improve compatibility with Django 2.0 alpha. #5500 #5503 Improved handling of schema naming collisions #5486 Added additional docs and tests around providing a default value for dotted source fields #5489","title":"3.7.1"},{"location":"community/release-notes/#370","text":"Date : 6th October 2017 Fix DjangoModelPermissions to ensure user authentication before calling the view's get_queryset() method. As a side effect, this changes the order of the HTTP method permissions and authentication checks, and 405 responses will only be returned when authenticated. If you want to replicate the old behavior, see the PR for details. #5376 Deprecated exclude_from_schema on APIView and api_view decorator. Set schema = None or @schema(None) as appropriate. #5422 Timezone-aware DateTimeField s now respect active or default timezone during serialization, instead of always using UTC. #5435 Resolves inconsistency whereby instances were serialized with supplied datetime for create but UTC for retrieve . #3732 Possible backwards compatibility break if you were relying on datetime strings being UTC. Have client interpret datetimes or set default or active timezone (docs) to UTC if needed. Removed DjangoFilterBackend inline with deprecation policy. Use django_filters.rest_framework.FilterSet and/or django_filters.rest_framework.DjangoFilterBackend instead. #5273 Don't strip microseconds from time when encoding. Makes consistent with datetime . BC Change : Previously only milliseconds were encoded. #5440 Added STRICT_JSON setting (default True ) to raise exception for the extended float values ( nan , inf , -inf ) accepted by Python's json module. BC Change : Previously these values would converted to corresponding strings. Set STRICT_JSON to False to restore the previous behaviour. #5265 Add support for page_size parameter in CursorPaginator class #5250 Make DEFAULT_PAGINATION_CLASS None by default. BC Change : If your were just setting PAGE_SIZE to enable pagination you will need to add DEFAULT_PAGINATION_CLASS . The previous default was rest_framework.pagination.PageNumberPagination . There is a system check warning to catch this case. You may silence that if you are setting pagination class on a per-view basis. #5170 Catch APIException from get_serializer_fields in schema generation. #5443 Allow custom authentication and permission classes when using include_docs_urls #5448 Defer translated string evaluation on validators. #5452 Added default value for 'detail' param into 'ValidationError' exception #5342 Adjust schema get_filter_fields rules to match framework #5454 Updated test matrix to add Django 2.0 and drop Django 1.8 & 1.9 BC Change : This removes Django 1.8 and Django 1.9 from Django REST Framework supported versions. #5457 Fixed a deprecation warning in serializers.ModelField #5058 Added a more explicit error message when get_queryset returned None #5348 Fix docs for Response data description #5361 Fix pycache /.pyc excludes when packaging #5373 Fix default value handling for dotted sources #5375 Ensure content_type is set when passing empty body to RequestFactory #5351 Fix ErrorDetail Documentation #5380 Allow optional content in the generic content form #5372 Updated supported values for the NullBooleanField #5387 Fix ModelSerializer custom named fields with source on model #5388 Fixed the MultipleFieldLookupMixin documentation example to properly check for object level permission #5398 Update get_object() example in permissions.md #5401 Fix authtoken management command #5415 Fix schema generation markdown #5421 Allow ChoiceField.choices to be set dynamically #5426 Add the project layout to the quickstart #5434 Reuse 'apply_markdown' function in 'render_markdown' templatetag #5469 Added links to drf-openapi package in docs #5470 Added docstrings code highlighting with pygments #5462 Fixed documentation rendering for views named data #5472 Docs: Clarified 'to_internal_value()' validation behavior #5466 Fix missing six.text_type() call on APIException. str #5476 Document documentation.py #5478 Fix naming collisions in Schema Generation #5464 Call Django's authenticate function with the request object #5295 Update coreapi JS to 0.1.1 #5479 Have is_list_view recognise RetrieveModel\u2026 views #5480 Remove Django 1.8 & 1.9 compatibility code #5481 Remove deprecated schema code from DefaultRouter #5482 Refactor schema generation to allow per-view customisation. BC Change : SchemaGenerator.get_serializer_fields has been refactored as AutoSchema.get_serializer_fields and drops the view argument [#5354][gh5354]","title":"3.7.0"},{"location":"community/release-notes/#36x-series","text":"","title":"3.6.x series"},{"location":"community/release-notes/#364","text":"Date : 21st August 2017 Ignore any invalidly formed query parameters for OrderingFilter. #5131 Improve memory footprint when reading large JSON requests. #5147 Fix schema generation for pagination. #5161 Fix exception when HTML_CUTOFF is set to None . #5174 Fix browsable API not supporting multipart/form-data correctly. #5176 Fixed test_hyperlinked_related_lookup_url_encoded_exists . #5179 Make sure max_length is in FileField kwargs. #5186 Fix list_route & detail_route with kwargs contains curly bracket in url_path #5187 Add Django manage command to create a DRF user Token. #5188 Ensure API documentation templates do not check for user authentication #5162 Fix special case where OneToOneField is also primary key. #5192 Added aria-label and a new region for accessibility purposes in base.html #5196 Quote nested API parameters in api.js. #5214 Set ViewSet args/kwargs/request before dispatch. #5229 Added unicode support to SlugField. #5231 Fix HiddenField appears in Raw Data form initial content. #5259 Raise validation error on invalid timezone parsing. #5261 Fix SearchFilter to-many behavior/performance. #5264 Simplified chained comparisons and minor code fixes. #5276 RemoteUserAuthentication, docs, and tests. #5306 Revert \"Cached the field's root and context property\" #5313 Fix introspection of list field in schema. #5326 Fix interactive docs for multiple nested and extra methods. #5334 Fix/remove undefined template var \"schema\" #5346","title":"3.6.4"},{"location":"community/release-notes/#363","text":"Date : 12th May 2017 Raise 404 if a URL lookup results in ValidationError. ( #5126 ) Honor http_method_names on class based view, when generating API schemas. ( #5085 ) Allow overridden get_limit in LimitOffsetPagination to return all records. ( #4437 ) Fix partial update for the ListSerializer. ( #4222 ) Render JSONField control correctly in browsable API. ( #4999 , #5042 ) Raise validation errors for invalid datetime in given timezone. ( #4987 ) Support restricting doc & schema shortcuts to a subset of urls. ( #4979 ) Resolve SchemaGenerator error with paginators that have no page_size attribute. ( #5086 , #3692 ) Resolve HyperlinkedRelatedField exception on string with %20 instead of space. ( #4748 , #5078 ) Customizable schema generator classes. ( #5082 ) Update existing vary headers in response instead of overwriting them. ( #5047 ) Support passing .as_view() to view instance. ( #5053 ) Use correct exception handler when settings overridden on a view. ( #5055 , #5054 ) Update Boolean field to support 'yes' and 'no' values. ( #5038 ) Fix unique validator for ChoiceField. ( #5004 , #5026 , #5028 ) JavaScript cleanups in API Docs. ( #5001 ) Include URL path regexs in API schemas where valid. ( #5014 ) Correctly set scheme in coreapi TokenAuthentication. ( #5000 , #4994 ) HEAD requests on ViewSets should not return 405. ( #4705 , #4973 , #4864 ) Support usage of 'source' in extra_kwargs . ( #4688 ) Fix invalid content type for schema.js ( #4968 ) Fix DjangoFilterBackend inheritance issues. ( #5089 , #5117 )","title":"3.6.3"},{"location":"community/release-notes/#362","text":"Date : 10th March 2017 Support for Safari & IE in API docs. ( #4959 , #4961 ) Add missing mark_safe in API docs template tags. ( #4952 , #4953 ) Add missing glyphicon fonts. ( #4950 , #4951 ) Fix One-to-one fields in API docs. ( #4955 , #4956 ) Test clean ups. ( #4949 )","title":"3.6.2"},{"location":"community/release-notes/#361","text":"Date : 9th March 2017 Ensure markdown dependency is optional. ( #4947 )","title":"3.6.1"},{"location":"community/release-notes/#360","text":"Date : 9th March 2017 See the release announcement .","title":"3.6.0"},{"location":"community/release-notes/#35x-series","text":"","title":"3.5.x series"},{"location":"community/release-notes/#354","text":"Date : 10th February 2017 Add max_length and min_length arguments for ListField. ( #4877 ) Add per-view custom exception handler support. ( #4753 ) Support disabling of declared fields on serializer subclasses. ( #4764 ) Support custom view names on @list_route and @detail_route endpoints. ( #4821 ) Correct labels for fields in login template when custom user model is used. ( #4841 ) Whitespace fixes for descriptions generated from docstrings. ( #4759 , #4869 , #4870 ) Better error reporting when schemas are returned by views without a schema renderer. ( #4790 ) Fix for returned response of PUT requests when prefetch_related is used. ( #4661 , #4668 ) Fix for breadcrumb view names. ( #4750 ) Fix for RequestsClient ensuring fully qualified URLs. ( #4678 ) Fix for incorrect behavior of writable-nested fields check in some cases. ( #4634 , #4669 ) Resolve Django deprecation warnings. ( #4712 ) Various cleanup of test cases.","title":"3.5.4"},{"location":"community/release-notes/#353","text":"Date : 7th November 2016 Don't raise incorrect FilterSet deprecation warnings. ( #4660 , #4643 , #4644 ) Schema generation should not raise 404 when a view permission class does. ( #4645 , #4646 ) Add autofocus support for input controls. ( #4650 )","title":"3.5.3"},{"location":"community/release-notes/#352","text":"Date : 1st November 2016 Restore exception tracebacks in Python 2.7. ( #4631 , #4638 ) Properly display dicts in the admin console. ( #4532 , #4636 ) Fix is_simple_callable with variable args, kwargs. ( #4622 , #4602 ) Support 'on'/'off' literals with BooleanField. ( #4640 , #4624 ) Enable cursor pagination of value querysets. ( #4569 ) Fix support of get_full_details() for Throttled exceptions. ( #4627 ) Fix FilterSet proxy. ( #4620 ) Make serializer fields import explicit. ( #4628 ) Drop redundant requests adapter. ( #4639 )","title":"3.5.2"},{"location":"community/release-notes/#351","text":"Date : 21st October 2016 Make rest_framework/compat.py imports. ( #4612 , #4608 , #4601 ) Fix bug in schema base path generation. ( #4611 , #4605 ) Fix broken case of ListSerializer with single item. ( #4609 , #4606 ) Remove bare raise for Python 3.5 compat. ( #4600 )","title":"3.5.1"},{"location":"community/release-notes/#350","text":"Date : 20th October 2016","title":"3.5.0"},{"location":"community/release-notes/#34x-series","text":"","title":"3.4.x series"},{"location":"community/release-notes/#347","text":"Date : 21st September 2016 Fallback behavior for request parsing when request.POST already accessed. ( #3951 , #4500 ) Fix regression of RegexField . ( #4489 , #4490 , #2617 ) Missing comma in admin.html causing CSRF error. ( #4472 , #4473 ) Fix response rendering with empty context. ( #4495 ) Fix indentation regression in API listing. ( #4493 ) Fixed an issue where the incorrect value is set to ResolverMatch.func_name of api_view decorated view. ( #4465 , #4462 ) Fix APIClient.get() when path contains unicode arguments ( #4458 )","title":"3.4.7"},{"location":"community/release-notes/#346","text":"Date : 23rd August 2016 Fix malformed Javascript in browsable API. ( #4435 ) Skip HiddenField from Schema fields. ( #4425 , #4429 ) Improve Create to show the original exception traceback. ( #3508 ) Fix AdminRenderer display of PK only related fields. ( #4419 , #4423 )","title":"3.4.6"},{"location":"community/release-notes/#345","text":"Date : 19th August 2016 Improve debug error handling. ( #4416 , #4409 ) Allow custom CSRF_HEADER_NAME setting. ( #4415 , #4410 ) Include .action attribute on viewsets when generating schemas. ( #4408 , #4398 ) Do not include request.FILES items in request.POST. ( #4407 ) Fix rendering of checkbox multiple. ( #4403 ) Fix docstring of Field.get_default. ( #4404 ) Replace utf8 character with its ascii counterpart in README. ( #4412 )","title":"3.4.5"},{"location":"community/release-notes/#344","text":"Date : 12th August 2016 Ensure views are fully initialized when generating schemas. ( #4373 , #4382 , #4383 , #4279 , #4278 ) Add form field descriptions to schemas. ( #4387 ) Fix category generation for schema endpoints. ( #4391 , #4394 , #4390 , #4386 , #4376 , #4329 ) Don't strip empty query params when paginating. ( #4392 , #4393 , #4260 ) Do not re-run query for empty results with LimitOffsetPagination. ( #4201 , #4388 ) Stricter type validation for CharField. ( #4380 , #3394 ) RelatedField.choices should preserve non-string values. ( #4111 , #4379 , #3365 ) Test case for rendering checkboxes in vertical form style. ( #4378 , #3868 , #3868 ) Show error traceback HTML in browsable API ( #4042 , #4172 ) Fix handling of ALLOWED_VERSIONS and no DEFAULT_VERSION. #4370 Allow max_digits=None on DecimalField. ( #4377 , #4372 ) Limit queryset when rendering relational choices. ( #4375 , #4122 , #3329 , #3330 , #3877 ) Resolve form display with ChoiceField, MultipleChoiceField and non-string choices. ( #4374 , #4119 , #4121 , #4137 , #4120 ) Fix call to TemplateHTMLRenderer.resolve_context() fallback method. ( #4371 )","title":"3.4.4"},{"location":"community/release-notes/#343","text":"Date : 5th August 2016 Include fallback for users of older TemplateHTMLRenderer internal API. ( #4361 )","title":"3.4.3"},{"location":"community/release-notes/#342","text":"Date : 5th August 2016 Include kwargs passed to 'as_view' when generating schemas. ( #4359 , #4330 , #4331 ) Access request.user.is_authenticated as property not method, under Django 1.10+ ( #4358 , #4354 ) Filter HEAD out from schemas. ( #4357 ) extra_kwargs takes precedence over uniqueness kwargs. ( #4198 , #4199 , #4349 ) Correct descriptions when tabs are used in code indentation. ( #4345 , #4347 )* Change template context generation in TemplateHTMLRenderer. ( #4236 ) Serializer defaults should not be included in partial updates. ( #4346 , #3565 ) Consistent behavior & descriptive error from FileUploadParser when filename not included. ( #4340 , #3610 , #4292 , #4296 ) DecimalField quantizes incoming digitals. ( #4339 , #4318 ) Handle non-string input for IP fields. ( #4335 , #4336 , #4338 ) Fix leading slash handling when Schema generation includes a root URL. ( #4332 ) Test cases for DictField with allow_null options. ( #4348 ) Update tests from Django 1.10 beta to Django 1.10. ( #4344 )","title":"3.4.2"},{"location":"community/release-notes/#341","text":"Date : 28th July 2016 Added root_renderers argument to DefaultRouter . ( #4323 , #4268 ) Added url and schema_url arguments. ( #4321 , #4308 , #4305 ) Unique together checks should apply to read-only fields which have a default. ( #4316 , #4294 ) Set view.format_kwarg in schema generator. ( #4293 , #4315 ) Fix schema generator for views with pagination_class = None . ( #4314 , #4289 ) Fix schema generator for views with no get_serializer_class . ( #4265 , #4285 ) Fixes for media type parameters in Accept and Content-Type headers. ( #4287 , #4313 , #4281 ) Use verbose_name instead of object_name in error messages. ( #4299 ) Minor version update to Twitter Bootstrap. ( #4307 ) SearchFilter raises error when using with related field. ( #4302 , #4303 , #4298 ) Adding support for RFC 4918 status codes. ( #4291 ) Add LICENSE.md to the built wheel. ( #4270 ) Serializing \"complex\" field returns None instead of the value since 3.4 ( #4272 , #4273 , #4288 )","title":"3.4.1"},{"location":"community/release-notes/#340","text":"Date : 14th July 2016 Don't strip microseconds in JSON output. ( #4256 ) Two slightly different iso 8601 datetime serialization. ( #4255 ) Resolve incorrect inclusion of media type parameters. ( #4254 ) Response Content-Type potentially malformed. ( #4253 ) Fix setup.py error on some platforms. ( #4246 ) Move alternate formats in coreapi into separate packages. ( #4244 ) Add localize keyword argument to DecimalField . ( #4233 ) Fix issues with routers for custom list-route and detail-routes. ( #4229 ) Namespace versioning with nested namespaces. ( #4219 ) Robust uniqueness checks. ( #4217 ) Minor refactoring of must_call_distinct . ( #4215 ) Overridable offset cutoff in CursorPagination. ( #4212 ) Pass through strings as-in with date/time fields. ( #4196 ) Add test confirming that required=False is valid on a relational field. ( #4195 ) In LimitOffsetPagination limit=0 should revert to default limit. ( #4194 ) Exclude read_only=True fields from unique_together validation & add docs. ( #4192 ) Handle bytestrings in JSON. ( #4191 ) JSONField(binary=True) represents using binary strings, which JSONRenderer does not support. ( #4187 ) JSONField(binary=True) represents using binary strings, which JSONRenderer does not support. ( #4185 ) More robust form rendering in the browsable API. ( #4181 ) Empty cases of .validated_data and .errors as lists not dicts for ListSerializer. ( #4180 ) Schemas & client libraries. ( #4179 ) Removed AUTH_USER_MODEL compat property. ( #4176 ) Clean up existing deprecation warnings. ( #4166 ) Django 1.10 support. ( #4158 ) Updated jQuery version to 1.12.4. ( #4157 ) More robust default behavior on OrderingFilter. ( #4156 ) description.py codes and tests removal. ( #4153 ) Wrap guardian.VERSION in tuple. ( #4149 ) Refine validator for fields with kwargs. ( #4146 ) Fix None values representation in childs of ListField, DictField. ( #4118 ) Resolve TimeField representation for midnight value. ( #4107 ) Set proper status code in AdminRenderer for the redirection after POST/DELETE requests. ( #4106 ) TimeField render returns None instead of 00:00:00. ( #4105 ) Fix incorrectly named zh-hans and zh-hant locale path. ( #4103 ) Prevent raising exception when limit is 0. ( #4098 ) TokenAuthentication: Allow custom keyword in the header. ( #4097 ) Handle incorrectly padded HTTP basic auth header. ( #4090 ) LimitOffset pagination crashes Browseable API when limit=0. ( #4079 ) Fixed DecimalField arbitrary precision support. ( #4075 ) Added support for custom CSRF cookie names. ( #4049 ) Fix regression introduced by #4035. ( #4041 ) No auth view failing permission should raise 403. ( #4040 ) Fix string_types / text_types confusion. ( #4025 ) Do not list related field choices in OPTIONS requests. ( #4021 ) Fix typo. ( #4008 ) Reorder initializing the view. ( #4006 ) Type error in DjangoObjectPermissionsFilter on Python 3.4. ( #4005 ) Fixed use of deprecated Query.aggregates. ( #4003 ) Fix blank lines around docstrings. ( #4002 ) Fixed admin pagination when limit is 0. ( #3990 ) OrderingFilter adjustments. ( #3983 ) Non-required serializer related fields. ( #3976 ) Using safer calling way of \"@api_view\" in tutorial. ( #3971 ) ListSerializer doesn't handle unique_together constraints. ( #3970 ) Add missing migration file. ( #3968 ) OrderingFilter should call get_serializer_class() to determine default fields. ( #3964 ) Remove old Django checks from tests and compat. ( #3953 ) Support callable as the value of initial for any serializer.Field . ( #3943 ) Prevented unnecessary distinct() call in SearchFilter. ( #3938 ) Fix None UUID ForeignKey serialization. ( #3936 ) Drop EOL Django 1.7. ( #3933 ) Add missing space in serializer error message. ( #3926 ) Fixed _force_text_recursive typo. ( #3908 ) Attempt to address Django 2.0 deprecate warnings related to field.rel . ( #3906 ) Fix parsing multipart data using a nested serializer with list. ( #3820 ) Resolving APIs URL to different namespaces. ( #3816 ) Do not HTML-escape help_text in Browsable API forms. ( #3812 ) OPTIONS fetches and shows all possible foreign keys in choices field. ( #3751 ) Django 1.9 deprecation warnings ( #3729 ) Test case for #3598 ( #3710 ) Adding support for multiple values for search filter. ( #3541 ) Use get_serializer_class in ordering filter. ( #3487 ) Serializers with many=True should return empty list rather than empty dict. ( #3476 ) LimitOffsetPagination limit=0 fix. ( #3444 ) Enable Validators to defer string evaluation and handle new string format. ( #3438 ) Unique validator is executed and breaks if field is invalid. ( #3381 ) Do not ignore overridden View.get_view_name() in breadcrumbs. ( #3273 ) Retry form rendering when rendering with serializer fails. ( #3164 ) Unique constraint prevents nested serializers from updating. ( #2996 ) Uniqueness validators should not be run for excluded (read_only) fields. ( #2848 ) UniqueValidator raises exception for nested objects. ( #2403 ) lookup_type is deprecated in favor of lookup_expr . ( #4259 )","title":"3.4.0"},{"location":"community/release-notes/#33x-series","text":"","title":"3.3.x series"},{"location":"community/release-notes/#333","text":"Date : 14th March 2016 . Remove version string from templates. Thanks to @blag for the report and fixes. ( #3878 , #3913 , #3912 ) Fixes vertical html layout for BooleanField . Thanks to Mikalai Radchuk for the fix. ( #3910 ) Silenced deprecation warnings on Django 1.8. Thanks to Simon Charette for the fix. ( #3903 ) Internationalization for authtoken. Thanks to Michael Nacharov for the fix. ( #3887 , #3968 ) Fix Token model as abstract when the authtoken application isn't declared. Thanks to Adam Thomas for the report. ( #3860 , #3858 ) Improve Markdown version compatibility. Thanks to Michael J. Schultz for the fix. ( #3604 , #3842 ) QueryParameterVersioning does not use DEFAULT_VERSION setting. Thanks to Brad Montgomery for the fix. ( #3833 ) Add an explicit on_delete on the models. Thanks to Mads Jensen for the fix. ( #3832 ) Fix DateField.to_representation to work with Python 2 unicode. Thanks to Mikalai Radchuk for the fix. ( #3819 ) Fixed TimeField not handling string times. Thanks to Areski Belaid for the fix. ( #3809 ) Avoid updates of Meta.extra_kwargs . Thanks to Kevin Massey for the report and fix. ( #3805 , #3804 ) Fix nested validation error being rendered incorrectly. Thanks to Craig de Stigter for the fix. ( #3801 ) Document how to avoid CSRF and missing button issues with django-crispy-forms . Thanks to Emmanuelle Delescolle, Jos\u00e9 Padilla and Luis San Pablo for the report, analysis and fix. ( #3787 , #3636 , #3637 ) Improve Rest Framework Settings file setup time. Thanks to Miles Hutson for the report and Mads Jensen for the fix. ( #3786 , #3815 ) Improve authtoken compatibility with Django 1.9. Thanks to S. Andrew Sheppard for the fix. ( #3785 ) Fix Min/MaxValueValidator transfer from a model's DecimalField . Thanks to Kevin Brown for the fix. ( #3774 ) Improve HTML title in the Browsable API. Thanks to Mike Lissner for the report and fix. ( #3769 ) Fix AutoFilterSet to inherit from default_filter_set . Thanks to Tom Linford for the fix. ( #3753 ) Fix transifex config to handle the new Chinese language codes. Thanks to @nypisces for the report and fix. ( #3739 ) DateTimeField does not handle empty values correctly. Thanks to Mick Parker for the report and fix. ( #3731 , #3726 ) Raise error when setting a removed rest_framework setting. Thanks to Luis San Pablo for the fix. ( #3715 ) Add missing csrf_token in AdminRenderer post form. Thanks to Piotr \u015aniegowski for the fix. ( #3703 ) Refactored _get_reverse_relationships() to use correct to_field . Thanks to Benjamin Phillips for the fix. ( #3696 ) Document the use of get_queryset for RelatedField . Thanks to Ryan Hiebert for the fix. ( #3605 ) Fix empty pk detection in HyperlinkRelatedField.get_url. Thanks to @jslang for the fix ( #3962 )","title":"3.3.3"},{"location":"community/release-notes/#332","text":"Date : 14th December 2015 . ListField enforces input is a list. ( #3513 ) Fix regression hiding raw data form. ( #3600 , #3578 ) Fix Python 3.5 compatibility. ( #3534 , #3626 ) Allow setting a custom Django Paginator in pagination.PageNumberPagination . ( #3631 , #3684 ) Fix relational fields without to_fields attribute. ( #3635 , #3634 ) Fix template.render deprecation warnings for Django 1.9. ( #3654 ) Sort response headers in browsable API renderer. ( #3655 ) Use related_objects api for Django 1.9+. ( #3656 , #3252 ) Add confirm modal when deleting. ( #3228 , #3662 ) Reveal previously hidden AttributeErrors and TypeErrors while calling has_[object_]permissions. ( #3668 ) Make DRF compatible with multi template engine in Django 1.8. ( #3672 ) Update NestedBoundField to also handle empty string when rendering its form. ( #3677 ) Fix UUID validation to properly catch invalid input types. ( #3687 , #3679 ) Fix caching issues. ( #3628 , #3701 ) Fix Admin and API browser for views without a filter_class. ( #3705 , #3596 , #3597 ) Add app_name to rest_framework.urls. ( #3714 ) Improve authtoken's views to support url versioning. ( #3718 , #3723 )","title":"3.3.2"},{"location":"community/release-notes/#331","text":"Date : 4th November 2015 . Resolve parsing bug when accessing request.POST ( #3592 ) Correctly deal with to_field referring to primary key. ( #3593 ) Allow filter HTML to render when no filter_class is defined. ( #3560 ) Fix admin rendering issues. ( #3564 , #3556 ) Fix issue with DecimalValidator. ( #3568 )","title":"3.3.1"},{"location":"community/release-notes/#330","text":"Date : 28th October 2015 . HTML controls for filters. ( #3315 ) Forms API. ( #3475 ) AJAX browsable API. ( #3410 ) Added JSONField. ( #3454 ) Correctly map to_field when creating ModelSerializer relational fields. ( #3526 ) Include keyword arguments when mapping FilePathField to a serializer field. ( #3536 ) Map appropriate model error_messages on ModelSerializer uniqueness constraints. ( #3435 ) Include max_length constraint for ModelSerializer fields mapped from TextField. ( #3509 ) Added support for Django 1.9. ( #3450 , #3525 ) Removed support for Django 1.5 & 1.6. ( #3421 , #3429 ) Removed 'south' migrations. ( #3495 )","title":"3.3.0"},{"location":"community/release-notes/#32x-series","text":"","title":"3.2.x series"},{"location":"community/release-notes/#325","text":"Date : 27th October 2015 . Escape username in optional logout tag. ( #3550 )","title":"3.2.5"},{"location":"community/release-notes/#324","text":"Date : 21th September 2015 . Don't error on missing ViewSet.search_fields attribute. ( #3324 , #3323 ) Fix allow_empty not working on serializers with many=True . ( #3361 , #3364 ) Let DurationField accepts integers. ( #3359 ) Multi-level dictionaries not supported in multipart requests. ( #3314 ) Fix ListField truncation on HTTP PATCH ( #3415 , #2761 )","title":"3.2.4"},{"location":"community/release-notes/#323","text":"Date : 24th August 2015 . Added html_cutoff and html_cutoff_text for limiting select dropdowns. ( #3313 ) Added regex style to SearchFilter . ( #3316 ) Resolve issues with setting blank HTML fields. ( #3318 ) ( #3321 ) Correctly display existing 'select multiple' values in browsable API forms. ( #3290 ) Resolve duplicated validation message for IPAddressField . ([#3249 gh3249 ) ( #3250 ) Fix to ensure admin renderer continues to work when pagination is disabled. ( #3275 ) Resolve error with LimitOffsetPagination when count=0, offset=0. ( #3303 )","title":"3.2.3"},{"location":"community/release-notes/#322","text":"Date : 13th August 2015 . Add display_value() method for use when displaying relational field select inputs. ( #3254 ) Fix issue with BooleanField checkboxes incorrectly displaying as checked. ( #3258 ) Ensure empty checkboxes properly set BooleanField to False in all cases. ( #2776 ) Allow WSGIRequest.FILES property without raising incorrect deprecated error. ( #3261 ) Resolve issue with rendering nested serializers in forms. ( #3260 ) Raise an error if user accidentally pass a serializer instance to a response, rather than data. ( #3241 )","title":"3.2.2"},{"location":"community/release-notes/#321","text":"Date : 7th August 2015 . Fix for relational select widgets rendering without any choices. ( #3237 ) Fix for 1 , 0 rendering as true , false in the admin interface. #3227 ) Fix for ListFields with single value in HTML form input. ( #3238 ) Allow request.FILES for compat with Django's HTTPRequest class. ( #3239 )","title":"3.2.1"},{"location":"community/release-notes/#320","text":"Date : 6th August 2015 . Add AdminRenderer . ( #2926 ) Add FilePathField . ( #1854 ) Add allow_empty to ListField . ( #2250 ) Support django-guardian 1.3. ( #3165 ) Support grouped choices. ( #3225 ) Support error forms in browsable API. ( #3024 ) Allow permission classes to customize the error message. ( #2539 ) Support source=<method> on hyperlinked fields. ( #2690 ) ListField(allow_null=True) now allows null as the list value, not null items in the list. ( #2766 ) ManyToMany() maps to allow_empty=False , ManyToMany(blank=True) maps to allow_empty=True . ( #2804 ) Support custom serialization styles for primary key fields. ( #2789 ) OPTIONS requests support nested representations. ( #2915 ) Set view.action == \"metadata\" for viewsets with OPTIONS requests. ( #3115 ) Support allow_blank on UUIDField . ([#3130][gh#3130]) Do not display view docstrings with 401 or 403 response codes. ( #3216 ) Resolve Django 1.8 deprecation warnings. ( #2886 ) Fix for DecimalField validation. ( #3139 ) Fix behavior of allow_blank=False when used with trim_whitespace=True . ( #2712 ) Fix issue with some field combinations incorrectly mapping to an invalid allow_blank argument. ( #3011 ) Fix for output representations with prefetches and modified querysets. ( #2704 , #2727 ) Fix assertion error when CursorPagination is provided with certain invalid query parameters. (#2920) gh2920 . Fix UnicodeDecodeError when invalid characters included in header with TokenAuthentication . ( #2928 ) Fix transaction rollbacks with @non_atomic_requests decorator. ( #3016 ) Fix duplicate results issue with Oracle databases using SearchFilter . ( #2935 ) Fix checkbox alignment and rendering in browsable API forms. ( #2783 ) Fix for unsaved file objects which should use \"url\": null in the representation. ( #2759 ) Fix field value rendering in browsable API. ( #2416 ) Fix HStoreField to include allow_blank=True in DictField mapping. ( #2659 ) Numerous other cleanups, improvements to error messaging, private API & minor fixes.","title":"3.2.0"},{"location":"community/release-notes/#31x-series","text":"","title":"3.1.x series"},{"location":"community/release-notes/#313","text":"Date : 4th June 2015 . Add DurationField . ( #2481 , #2989 ) Add format argument to UUIDField . ( #2788 , #3000 ) MultipleChoiceField empties incorrectly on a partial update using multipart/form-data ( #2993 , #2894 ) Fix a bug in options related to read-only RelatedField . ( #2981 , #2811 ) Fix nested serializers with unique_together relations. ( #2975 ) Allow unexpected values for ChoiceField / MultipleChoiceField representations. ( #2839 , #2940 ) Rollback the transaction on error if ATOMIC_REQUESTS is set. ( #2887 , #2034 ) Set the action on a view when override_method regardless of its None-ness. ( #2933 ) DecimalField accepts 2E+2 as 200 and validates decimal place correctly. ( #2948 , #2947 ) Support basic authentication with custom UserModel that change username . ( #2952 ) IPAddressField improvements. ( #2747 , #2618 , #3008 ) Improve DecimalField for easier subclassing. ( #2695 )","title":"3.1.3"},{"location":"community/release-notes/#312","text":"Date : 13rd May 2015 . DateField.to_representation can handle str and empty values. ( #2656 , #2687 , #2869 ) Use default reason phrases from HTTP standard. ( #2764 , #2763 ) Raise error when ModelSerializer used with abstract model. ( #2757 , #2630 ) Handle reversal of non-API view_name in HyperLinkedRelatedField ( #2724 , #2711 ) Don't require pk strictly for related fields. ( #2745 , #2754 ) Metadata detects null boolean field type. ( #2762 ) Proper handling of depth in nested serializers. ( #2798 ) Display viewset without paginator. ( #2807 ) Don't check for deprecated .model attribute in permissions ( #2818 ) Restrict integer field to integers and strings. ( #2835 , #2836 ) Improve IntegerField to use compiled decimal regex. ( #2853 ) Prevent empty queryset to raise AssertionError. ( #2862 ) DjangoModelPermissions rely on get_queryset . ( #2863 ) Check AcceptHeaderVersioning with content negotiation in place. ( #2868 ) Allow DjangoObjectPermissions to use views that define get_queryset . ( #2905 )","title":"3.1.2"},{"location":"community/release-notes/#311","text":"Date : 23rd March 2015 . Security fix : Escape tab switching cookie name in browsable API. Display input forms in browsable API if serializer_class is used, even when get_serializer method does not exist on the view. ( #2743 ) Use a password input for the AuthTokenSerializer. ( #2741 ) Fix missing anchor closing tag after next button. ( #2691 ) Fix lookup_url_kwarg handling in viewsets. ( #2685 , #2591 ) Fix problem with importing rest_framework.views in apps.py ( #2678 ) LimitOffsetPagination raises TypeError if PAGE_SIZE not set ( #2667 , #2700 ) German translation for min_value field error message references max_value . ( #2645 ) Remove MergeDict . ( #2640 ) Support serializing unsaved models with related fields. ( #2637 , #2641 ) Allow blank/null on radio.html choices. ( #2631 )","title":"3.1.1"},{"location":"community/release-notes/#310","text":"Date : 5th March 2015 . For full details see the 3.1 release announcement .","title":"3.1.0"},{"location":"community/release-notes/#30x-series","text":"","title":"3.0.x series"},{"location":"community/release-notes/#305","text":"Date : 10th February 2015 . Fix a bug where _closable_objects breaks pickling. ( #1850 , #2492 ) Allow non-standard User models with Throttling . ( #2524 ) Support custom User.db_table in TokenAuthentication migration. ( #2479 ) Fix misleading AttributeError tracebacks on Request objects. ( #2530 , #2108 ) ManyRelatedField.get_value clearing field on partial update. ( #2475 ) Removed '.model' shortcut from code. ( #2486 ) Fix detail_route and list_route mutable argument. ( #2518 ) Prefetching the user object when getting the token in TokenAuthentication . ( #2519 )","title":"3.0.5"},{"location":"community/release-notes/#304","text":"Date : 28th January 2015 . Django 1.8a1 support. ( #2425 , #2446 , #2441 ) Add DictField and support Django 1.8 HStoreField . ( #2451 , #2106 ) Add UUIDField and support Django 1.8 UUIDField . ( #2448 , #2433 , #2432 ) BaseRenderer.render now raises NotImplementedError . ( #2434 ) Fix timedelta JSON serialization on Python 2.6. ( #2430 ) ResultDict and ResultList now appear as standard dict/list. ( #2421 ) Fix visible HiddenField in the HTML form of the web browsable API page. ( #2410 ) Use OrderedDict for RelatedField.choices . ( #2408 ) Fix ident format when using HTTP_X_FORWARDED_FOR . ( #2401 ) Fix invalid key with memcached while using throttling. ( #2400 ) Fix FileUploadParser with version 3.x. ( #2399 ) Fix the serializer inheritance. ( #2388 ) Fix caching issues with ReturnDict . ( #2360 )","title":"3.0.4"},{"location":"community/release-notes/#303","text":"Date : 8th January 2015 . Fix MinValueValidator on models.DateField . ( #2369 ) Fix serializer missing context when pagination is used. ( #2355 ) Namespaced router URLs are now supported by the DefaultRouter . ( #2351 ) required=False allows omission of value for output. ( #2342 ) Use textarea input for models.TextField . ( #2340 ) Use custom ListSerializer for pagination if required. ( #2331 , #2327 ) Better behavior with null and '' for blank HTML fields. ( #2330 ) Ensure fields in exclude are model fields. ( #2319 ) Fix IntegerField and max_length argument incompatibility. ( #2317 ) Fix the YAML encoder for 3.0 serializers. ( #2315 , #2283 ) Fix the behavior of empty HTML fields. ( #2311 , #1101 ) Fix Metaclass attribute depth ignoring fields attribute. ( #2287 ) Fix format_suffix_patterns to work with Django's i18n_patterns . ( #2278 ) Ability to customize router URLs for custom actions, using url_path . ( #2010 ) Don't install Django REST Framework as egg. ( #2386 )","title":"3.0.3"},{"location":"community/release-notes/#302","text":"Date : 17th December 2014 . Ensure request.user is made available to response middleware. ( #2155 ) Client.logout() also cancels any existing force_authenticate . ( #2218 , #2259 ) Extra assertions and better checks to preventing incorrect serializer API use. ( #2228 , #2234 , #2262 , #2263 , #2266 , #2267 , #2289 , #2291 ) Fixed min_length message for CharField . ( #2255 ) Fix UnicodeDecodeError , which can occur on serializer repr . ( #2270 , #2279 ) Fix empty HTML values when a default is provided. ( #2280 , #2294 ) Fix SlugRelatedField raising UnicodeEncodeError when used as a multiple choice input. ( #2290 )","title":"3.0.2"},{"location":"community/release-notes/#301","text":"Date : 11th December 2014 . More helpful error message when the default Serializer create() fails. ( #2013 ) Raise error when attempting to save serializer if data is not valid. ( #2098 ) Fix FileUploadParser breaks with empty file names and multiple upload handlers. ( #2109 ) Improve BindingDict to support standard dict-functions. ( #2135 , #2163 ) Add validate() to ListSerializer . ( #2168 , #2225 , #2232 ) Fix JSONP renderer failing to escape some characters. ( #2169 , #2195 ) Add missing default style for FileField . ( #2172 ) Actions are required when calling ViewSet.as_view() . ( #2175 ) Add allow_blank to ChoiceField . ( #2184 , #2239 ) Cosmetic fixes in the HTML renderer. ( #2187 ) Raise error if fields on serializer is not a list of strings. ( #2193 , #2213 ) Improve checks for nested creates and updates. ( #2194 , #2196 ) validated_attrs argument renamed to validated_data in Serializer create() / update() . ( #2197 ) Remove deprecated code to reflect the dropped Django versions. ( #2200 ) Better serializer errors for nested writes. ( #2202 , #2215 ) Fix pagination and custom permissions incompatibility. ( #2205 ) Raise error if fields on serializer is not a list of strings. ( #2213 ) Add missing translation markers for relational fields. ( #2231 ) Improve field lookup behavior for dicts/mappings. ( #2244 , #2243 ) Optimized hyperlinked PK. ( #2242 )","title":"3.0.1"},{"location":"community/release-notes/#300","text":"Date : 1st December 2014 For full details see the 3.0 release announcement . For older release notes, please see the version 2.x documentation .","title":"3.0.0"},{"location":"community/third-party-packages/","text":"Third Party Packages Software ecosystems [\u2026] establish a community that further accelerates the sharing of knowledge, content, issues, expertise and skills. \u2014 Jan Bosch . About Third Party Packages Third Party Packages allow developers to share code that extends the functionality of Django REST framework, in order to support additional use-cases. We support , encourage and strongly favor the creation of Third Party Packages to encapsulate new behavior rather than adding additional functionality directly to Django REST Framework. We aim to make creating third party packages as easy as possible, whilst keeping a simple and well maintained core API. By promoting third party packages we ensure that the responsibility for a package remains with its author. If a package proves suitably popular it can always be considered for inclusion into the core REST framework. If you have an idea for a new feature please consider how it may be packaged as a Third Party Package. We're always happy to discuss ideas on the Mailing List . How to create a Third Party Package Creating your package You can use this cookiecutter template for creating reusable Django REST Framework packages quickly. Cookiecutter creates projects from project templates. While optional, this cookiecutter template includes best practices from Django REST framework and other packages, as well as a Travis CI configuration, Tox configuration, and a sane setup.py for easy PyPI registration/distribution. Note: Let us know if you have an alternate cookiecutter package so we can also link to it. Running the initial cookiecutter command To run the initial cookiecutter command, you'll first need to install the Python cookiecutter package. $ pip install cookiecutter Once cookiecutter is installed just run the following to create a new project. $ cookiecutter gh:jpadilla/cookiecutter-django-rest-framework You'll be prompted for some questions, answer them, then it'll create your Python package in the current working directory based on those values. full_name (default is \"Your full name here\")? Johnny Appleseed email (default is \"you@example.com\")? jappleseed@example.com github_username (default is \"yourname\")? jappleseed pypi_project_name (default is \"dj-package\")? djangorestframework-custom-auth repo_name (default is \"dj-package\")? django-rest-framework-custom-auth app_name (default is \"djpackage\")? custom_auth project_short_description (default is \"Your project description goes here\")? year (default is \"2014\")? version (default is \"0.1.0\")? Getting it onto GitHub To put your project up on GitHub, you'll need a repository for it to live in. You can create a new repository here . If you need help, check out the Create A Repo article on GitHub. Adding to Travis CI We recommend using Travis CI , a hosted continuous integration service which integrates well with GitHub and is free for public repositories. To get started with Travis CI, sign in with your GitHub account. Once you're signed in, go to your profile page and enable the service hook for the repository you want. If you use the cookiecutter template, your project will already contain a .travis.yml file which Travis CI will use to build your project and run tests. By default, builds are triggered every time you push to your repository or create Pull Request. Uploading to PyPI Once you've got at least a prototype working and tests running, you should publish it on PyPI to allow others to install it via pip . You must register an account before publishing to PyPI. To register your package on PyPI run the following command. $ python setup.py register If this is the first time publishing to PyPI, you'll be prompted to login. Note: Before publishing you'll need to make sure you have the latest pip that supports wheel as well as install the wheel package. $ pip install --upgrade pip $ pip install wheel After this, every time you want to release a new version on PyPI just run the following command. $ python setup.py publish You probably want to also tag the version now: git tag -a {0} -m 'version 0.1.0' git push --tags After releasing a new version to PyPI, it's always a good idea to tag the version and make available as a GitHub Release. We recommend to follow Semantic Versioning for your package's versions. Development Version requirements The cookiecutter template assumes a set of supported versions will be provided for Python and Django. Make sure you correctly update your requirements, docs, tox.ini , .travis.yml , and setup.py to match the set of versions you wish to support. Tests The cookiecutter template includes a runtests.py which uses the pytest package as a test runner. Before running, you'll need to install a couple test requirements. $ pip install -r requirements.txt Once requirements installed, you can run runtests.py . $ ./runtests.py Run using a more concise output style. $ ./runtests.py -q Run the tests using a more concise output style, no coverage, no flake8. $ ./runtests.py --fast Don't run the flake8 code linting. $ ./runtests.py --nolint Only run the flake8 code linting, don't run the tests. $ ./runtests.py --lintonly Run the tests for a given test case. $ ./runtests.py MyTestCase Run the tests for a given test method. $ ./runtests.py MyTestCase.test_this_method Shorter form to run the tests for a given test method. $ ./runtests.py test_this_method To run your tests against multiple versions of Python as different versions of requirements such as Django we recommend using tox . Tox is a generic virtualenv management and test command line tool. First, install tox globally. $ pip install tox To run tox , just simply run: $ tox To run a particular tox environment: $ tox -e envlist envlist is a comma-separated value to that specifies the environments to run tests against. To view a list of all possible test environments, run: $ tox -l Version compatibility Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into a compat.py module, and should provide a single common interface that the rest of the codebase can use. Check out Django REST framework's compat.py for an example. Once your package is available Once your package is decently documented and available on PyPI, you might want share it with others that might find it useful. Adding to the Django REST framework grid We suggest adding your package to the REST Framework grid on Django Packages. Adding to the Django REST framework docs Create a Pull Request or Issue on GitHub, and we'll add a link to it from the main REST framework documentation. You can add your package under Third party packages of the API Guide section that best applies, like Authentication or Permissions . You can also link your package under the Third Party Packages section. Announce on the discussion group. You can also let others know about your package through the discussion group . Existing Third Party Packages Django REST Framework has a growing community of developers, packages, and resources. Check out a grid detailing all the packages and ecosystem around Django REST Framework at Django Packages . To submit new content, open an issue or create a pull request . Authentication djangorestframework-digestauth - Provides Digest Access Authentication support. django-oauth-toolkit - Provides OAuth 2.0 support. djangorestframework-simplejwt - Provides JSON Web Token Authentication support. hawkrest - Provides Hawk HTTP Authorization. djangorestframework-httpsignature - Provides an easy to use HTTP Signature Authentication mechanism. djoser - Provides a set of views to handle basic actions such as registration, login, logout, password reset and account activation. django-rest-auth - Provides a set of REST API endpoints for registration, authentication (including social media authentication), password reset, retrieve and update user details, etc. drf-oidc-auth - Implements OpenID Connect token authentication for DRF. drfpasswordless - Adds (Medium, Square Cash inspired) passwordless logins and signups via email and mobile numbers. Permissions drf-any-permissions - Provides alternative permission handling. djangorestframework-composed-permissions - Provides a simple way to define complex permissions. rest_condition - Another extension for building complex permissions in a simple and convenient way. dry-rest-permissions - Provides a simple way to define permissions for individual api actions. drf-access-policy - Declarative and flexible permissions inspired by AWS' IAM policies. drf-psq - An extension that gives support for having action-based permission_classes , serializer_class , and queryset dependent on permission-based rules. Serializers django-rest-framework-mongoengine - Serializer class that supports using MongoDB as the storage layer for Django REST framework. djangorestframework-gis - Geographic add-ons djangorestframework-hstore - Serializer class to support django-hstore DictionaryField model field and its schema-mode feature. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. html-json-forms - Provides an algorithm and serializer to process HTML JSON Form submissions per the (inactive) spec. django-rest-framework-serializer-extensions - Enables black/whitelisting fields, and conditionally expanding child serializers on a per-view/request basis. djangorestframework-queryfields - Serializer mixin allowing clients to control which fields will be sent in the API response. drf-flex-fields - Serializer providing dynamic field expansion and sparse field sets via URL parameters. drf-action-serializer - Serializer providing per-action fields config for use with ViewSets to prevent having to write multiple serializers. djangorestframework-dataclasses - Serializer providing automatic field generation for Python dataclasses, like the built-in ModelSerializer does for models. django-restql - Turn your REST API into a GraphQL like API(It allows clients to control which fields will be sent in a response, uses GraphQL like syntax, supports read and write on both flat and nested fields). Serializer fields drf-compound-fields - Provides \"compound\" serializer fields, such as lists of simple values. django-extra-fields - Provides extra serializer fields. django-versatileimagefield - Provides a drop-in replacement for Django's stock ImageField that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, click here . Views django-rest-multiple-models - Provides a generic view (and mixin) for sending multiple serialized models and/or querysets via a single API request. drf-typed-views - Use Python type annotations to validate/deserialize request parameters. Inspired by API Star, Hug and FastAPI. Routers drf-nested-routers - Provides routers and relationship fields for working with nested resources. wq.db.rest - Provides an admin-style model registration API with reasonable default URLs and viewsets. Parsers djangorestframework-msgpack - Provides MessagePack renderer and parser support. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. djangorestframework-camel-case - Provides camel case JSON renderers and parsers. Renderers djangorestframework-csv - Provides CSV renderer support. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. drf_ujson2 - Implements JSON rendering using the UJSON package. rest-pandas - Pandas DataFrame-powered renderers including Excel, CSV, and SVG formats. djangorestframework-rapidjson - Provides rapidjson support with parser and renderer. Filtering djangorestframework-chain - Allows arbitrary chaining of both relations and lookup filters. django-url-filter - Allows a safe way to filter data via human-friendly URLs. It is a generic library which is not tied to DRF but it provides easy integration with DRF. drf-url-filter is a simple Django app to apply filters on drf ModelViewSet 's Queryset in a clean, simple and configurable way. It also supports validations on incoming query params and their values. django-rest-framework-guardian - Provides integration with django-guardian, including the DjangoObjectPermissionsFilter previously found in DRF. Misc cookiecutter-django-rest - A cookiecutter template that takes care of the setup and configuration so you can focus on making your REST apis awesome. djangorestrelationalhyperlink - A hyperlinked serializer that can can be used to alter relationships via hyperlinks, but otherwise like a hyperlink model serializer. django-rest-framework-proxy - Proxy to redirect incoming request to another API server. gaiarestframework - Utils for django-rest-framework drf-extensions - A collection of custom extensions ember-django-adapter - An adapter for working with Ember.js django-versatileimagefield - Provides a drop-in replacement for Django's stock ImageField that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, click here . drf-tracking - Utilities to track requests to DRF API views. drf_tweaks - Serializers with one-step validation (and more), pagination without counts and other tweaks. django-rest-framework-braces - Collection of utilities for working with Django Rest Framework. The most notable ones are FormSerializer and SerializerForm , which are adapters between DRF serializers and Django forms. drf-haystack - Haystack search for Django Rest Framework django-rest-framework-version-transforms - Enables the use of delta transformations for versioning of DRF resource representations. django-rest-messaging , django-rest-messaging-centrifugo and django-rest-messaging-js - A real-time pluggable messaging service using DRM. djangorest-alchemy - SQLAlchemy support for REST framework. djangorestframework-datatables - Seamless integration between Django REST framework and Datatables . django-rest-framework-condition - Decorators for managing HTTP cache headers for Django REST framework (ETag and Last-modified). django-rest-witchcraft - Provides DRF integration with SQLAlchemy with SQLAlchemy model serializers/viewsets and a bunch of other goodies djangorestframework-mvt - An extension for creating views that serve Postgres data as Map Box Vector Tiles. drf-viewset-profiler - Lib to profile all methods from a viewset line by line. djangorestframework-features - Advanced schema generation and more based on named features. django-elasticsearch-dsl-drf - Integrate Elasticsearch DSL with Django REST framework. Package provides views, serializers, filter backends, pagination and other handy add-ons. django-api-client - DRF client that groups the Endpoint response, for use in CBVs and FBV as if you were working with Django's Native Models..","title":"Third Party Packages"},{"location":"community/third-party-packages/#third-party-packages","text":"Software ecosystems [\u2026] establish a community that further accelerates the sharing of knowledge, content, issues, expertise and skills. \u2014 Jan Bosch .","title":"Third Party Packages"},{"location":"community/third-party-packages/#about-third-party-packages","text":"Third Party Packages allow developers to share code that extends the functionality of Django REST framework, in order to support additional use-cases. We support , encourage and strongly favor the creation of Third Party Packages to encapsulate new behavior rather than adding additional functionality directly to Django REST Framework. We aim to make creating third party packages as easy as possible, whilst keeping a simple and well maintained core API. By promoting third party packages we ensure that the responsibility for a package remains with its author. If a package proves suitably popular it can always be considered for inclusion into the core REST framework. If you have an idea for a new feature please consider how it may be packaged as a Third Party Package. We're always happy to discuss ideas on the Mailing List .","title":"About Third Party Packages"},{"location":"community/third-party-packages/#how-to-create-a-third-party-package","text":"","title":"How to create a Third Party Package"},{"location":"community/third-party-packages/#creating-your-package","text":"You can use this cookiecutter template for creating reusable Django REST Framework packages quickly. Cookiecutter creates projects from project templates. While optional, this cookiecutter template includes best practices from Django REST framework and other packages, as well as a Travis CI configuration, Tox configuration, and a sane setup.py for easy PyPI registration/distribution. Note: Let us know if you have an alternate cookiecutter package so we can also link to it.","title":"Creating your package"},{"location":"community/third-party-packages/#running-the-initial-cookiecutter-command","text":"To run the initial cookiecutter command, you'll first need to install the Python cookiecutter package. $ pip install cookiecutter Once cookiecutter is installed just run the following to create a new project. $ cookiecutter gh:jpadilla/cookiecutter-django-rest-framework You'll be prompted for some questions, answer them, then it'll create your Python package in the current working directory based on those values. full_name (default is \"Your full name here\")? Johnny Appleseed email (default is \"you@example.com\")? jappleseed@example.com github_username (default is \"yourname\")? jappleseed pypi_project_name (default is \"dj-package\")? djangorestframework-custom-auth repo_name (default is \"dj-package\")? django-rest-framework-custom-auth app_name (default is \"djpackage\")? custom_auth project_short_description (default is \"Your project description goes here\")? year (default is \"2014\")? version (default is \"0.1.0\")?","title":"Running the initial cookiecutter command"},{"location":"community/third-party-packages/#getting-it-onto-github","text":"To put your project up on GitHub, you'll need a repository for it to live in. You can create a new repository here . If you need help, check out the Create A Repo article on GitHub.","title":"Getting it onto GitHub"},{"location":"community/third-party-packages/#adding-to-travis-ci","text":"We recommend using Travis CI , a hosted continuous integration service which integrates well with GitHub and is free for public repositories. To get started with Travis CI, sign in with your GitHub account. Once you're signed in, go to your profile page and enable the service hook for the repository you want. If you use the cookiecutter template, your project will already contain a .travis.yml file which Travis CI will use to build your project and run tests. By default, builds are triggered every time you push to your repository or create Pull Request.","title":"Adding to Travis CI"},{"location":"community/third-party-packages/#uploading-to-pypi","text":"Once you've got at least a prototype working and tests running, you should publish it on PyPI to allow others to install it via pip . You must register an account before publishing to PyPI. To register your package on PyPI run the following command. $ python setup.py register If this is the first time publishing to PyPI, you'll be prompted to login. Note: Before publishing you'll need to make sure you have the latest pip that supports wheel as well as install the wheel package. $ pip install --upgrade pip $ pip install wheel After this, every time you want to release a new version on PyPI just run the following command. $ python setup.py publish You probably want to also tag the version now: git tag -a {0} -m 'version 0.1.0' git push --tags After releasing a new version to PyPI, it's always a good idea to tag the version and make available as a GitHub Release. We recommend to follow Semantic Versioning for your package's versions.","title":"Uploading to PyPI"},{"location":"community/third-party-packages/#development","text":"","title":"Development"},{"location":"community/third-party-packages/#version-requirements","text":"The cookiecutter template assumes a set of supported versions will be provided for Python and Django. Make sure you correctly update your requirements, docs, tox.ini , .travis.yml , and setup.py to match the set of versions you wish to support.","title":"Version requirements"},{"location":"community/third-party-packages/#tests","text":"The cookiecutter template includes a runtests.py which uses the pytest package as a test runner. Before running, you'll need to install a couple test requirements. $ pip install -r requirements.txt Once requirements installed, you can run runtests.py . $ ./runtests.py Run using a more concise output style. $ ./runtests.py -q Run the tests using a more concise output style, no coverage, no flake8. $ ./runtests.py --fast Don't run the flake8 code linting. $ ./runtests.py --nolint Only run the flake8 code linting, don't run the tests. $ ./runtests.py --lintonly Run the tests for a given test case. $ ./runtests.py MyTestCase Run the tests for a given test method. $ ./runtests.py MyTestCase.test_this_method Shorter form to run the tests for a given test method. $ ./runtests.py test_this_method To run your tests against multiple versions of Python as different versions of requirements such as Django we recommend using tox . Tox is a generic virtualenv management and test command line tool. First, install tox globally. $ pip install tox To run tox , just simply run: $ tox To run a particular tox environment: $ tox -e envlist envlist is a comma-separated value to that specifies the environments to run tests against. To view a list of all possible test environments, run: $ tox -l","title":"Tests"},{"location":"community/third-party-packages/#version-compatibility","text":"Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into a compat.py module, and should provide a single common interface that the rest of the codebase can use. Check out Django REST framework's compat.py for an example.","title":"Version compatibility"},{"location":"community/third-party-packages/#once-your-package-is-available","text":"Once your package is decently documented and available on PyPI, you might want share it with others that might find it useful.","title":"Once your package is available"},{"location":"community/third-party-packages/#adding-to-the-django-rest-framework-grid","text":"We suggest adding your package to the REST Framework grid on Django Packages.","title":"Adding to the Django REST framework grid"},{"location":"community/third-party-packages/#adding-to-the-django-rest-framework-docs","text":"Create a Pull Request or Issue on GitHub, and we'll add a link to it from the main REST framework documentation. You can add your package under Third party packages of the API Guide section that best applies, like Authentication or Permissions . You can also link your package under the Third Party Packages section.","title":"Adding to the Django REST framework docs"},{"location":"community/third-party-packages/#announce-on-the-discussion-group","text":"You can also let others know about your package through the discussion group .","title":"Announce on the discussion group."},{"location":"community/third-party-packages/#existing-third-party-packages","text":"Django REST Framework has a growing community of developers, packages, and resources. Check out a grid detailing all the packages and ecosystem around Django REST Framework at Django Packages . To submit new content, open an issue or create a pull request .","title":"Existing Third Party Packages"},{"location":"community/third-party-packages/#authentication","text":"djangorestframework-digestauth - Provides Digest Access Authentication support. django-oauth-toolkit - Provides OAuth 2.0 support. djangorestframework-simplejwt - Provides JSON Web Token Authentication support. hawkrest - Provides Hawk HTTP Authorization. djangorestframework-httpsignature - Provides an easy to use HTTP Signature Authentication mechanism. djoser - Provides a set of views to handle basic actions such as registration, login, logout, password reset and account activation. django-rest-auth - Provides a set of REST API endpoints for registration, authentication (including social media authentication), password reset, retrieve and update user details, etc. drf-oidc-auth - Implements OpenID Connect token authentication for DRF. drfpasswordless - Adds (Medium, Square Cash inspired) passwordless logins and signups via email and mobile numbers.","title":"Authentication"},{"location":"community/third-party-packages/#permissions","text":"drf-any-permissions - Provides alternative permission handling. djangorestframework-composed-permissions - Provides a simple way to define complex permissions. rest_condition - Another extension for building complex permissions in a simple and convenient way. dry-rest-permissions - Provides a simple way to define permissions for individual api actions. drf-access-policy - Declarative and flexible permissions inspired by AWS' IAM policies. drf-psq - An extension that gives support for having action-based permission_classes , serializer_class , and queryset dependent on permission-based rules.","title":"Permissions"},{"location":"community/third-party-packages/#serializers","text":"django-rest-framework-mongoengine - Serializer class that supports using MongoDB as the storage layer for Django REST framework. djangorestframework-gis - Geographic add-ons djangorestframework-hstore - Serializer class to support django-hstore DictionaryField model field and its schema-mode feature. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. html-json-forms - Provides an algorithm and serializer to process HTML JSON Form submissions per the (inactive) spec. django-rest-framework-serializer-extensions - Enables black/whitelisting fields, and conditionally expanding child serializers on a per-view/request basis. djangorestframework-queryfields - Serializer mixin allowing clients to control which fields will be sent in the API response. drf-flex-fields - Serializer providing dynamic field expansion and sparse field sets via URL parameters. drf-action-serializer - Serializer providing per-action fields config for use with ViewSets to prevent having to write multiple serializers. djangorestframework-dataclasses - Serializer providing automatic field generation for Python dataclasses, like the built-in ModelSerializer does for models. django-restql - Turn your REST API into a GraphQL like API(It allows clients to control which fields will be sent in a response, uses GraphQL like syntax, supports read and write on both flat and nested fields).","title":"Serializers"},{"location":"community/third-party-packages/#serializer-fields","text":"drf-compound-fields - Provides \"compound\" serializer fields, such as lists of simple values. django-extra-fields - Provides extra serializer fields. django-versatileimagefield - Provides a drop-in replacement for Django's stock ImageField that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, click here .","title":"Serializer fields"},{"location":"community/third-party-packages/#views","text":"django-rest-multiple-models - Provides a generic view (and mixin) for sending multiple serialized models and/or querysets via a single API request. drf-typed-views - Use Python type annotations to validate/deserialize request parameters. Inspired by API Star, Hug and FastAPI.","title":"Views"},{"location":"community/third-party-packages/#routers","text":"drf-nested-routers - Provides routers and relationship fields for working with nested resources. wq.db.rest - Provides an admin-style model registration API with reasonable default URLs and viewsets.","title":"Routers"},{"location":"community/third-party-packages/#parsers","text":"djangorestframework-msgpack - Provides MessagePack renderer and parser support. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. djangorestframework-camel-case - Provides camel case JSON renderers and parsers.","title":"Parsers"},{"location":"community/third-party-packages/#renderers","text":"djangorestframework-csv - Provides CSV renderer support. djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec. drf_ujson2 - Implements JSON rendering using the UJSON package. rest-pandas - Pandas DataFrame-powered renderers including Excel, CSV, and SVG formats. djangorestframework-rapidjson - Provides rapidjson support with parser and renderer.","title":"Renderers"},{"location":"community/third-party-packages/#filtering","text":"djangorestframework-chain - Allows arbitrary chaining of both relations and lookup filters. django-url-filter - Allows a safe way to filter data via human-friendly URLs. It is a generic library which is not tied to DRF but it provides easy integration with DRF. drf-url-filter is a simple Django app to apply filters on drf ModelViewSet 's Queryset in a clean, simple and configurable way. It also supports validations on incoming query params and their values. django-rest-framework-guardian - Provides integration with django-guardian, including the DjangoObjectPermissionsFilter previously found in DRF.","title":"Filtering"},{"location":"community/third-party-packages/#misc","text":"cookiecutter-django-rest - A cookiecutter template that takes care of the setup and configuration so you can focus on making your REST apis awesome. djangorestrelationalhyperlink - A hyperlinked serializer that can can be used to alter relationships via hyperlinks, but otherwise like a hyperlink model serializer. django-rest-framework-proxy - Proxy to redirect incoming request to another API server. gaiarestframework - Utils for django-rest-framework drf-extensions - A collection of custom extensions ember-django-adapter - An adapter for working with Ember.js django-versatileimagefield - Provides a drop-in replacement for Django's stock ImageField that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, click here . drf-tracking - Utilities to track requests to DRF API views. drf_tweaks - Serializers with one-step validation (and more), pagination without counts and other tweaks. django-rest-framework-braces - Collection of utilities for working with Django Rest Framework. The most notable ones are FormSerializer and SerializerForm , which are adapters between DRF serializers and Django forms. drf-haystack - Haystack search for Django Rest Framework django-rest-framework-version-transforms - Enables the use of delta transformations for versioning of DRF resource representations. django-rest-messaging , django-rest-messaging-centrifugo and django-rest-messaging-js - A real-time pluggable messaging service using DRM. djangorest-alchemy - SQLAlchemy support for REST framework. djangorestframework-datatables - Seamless integration between Django REST framework and Datatables . django-rest-framework-condition - Decorators for managing HTTP cache headers for Django REST framework (ETag and Last-modified). django-rest-witchcraft - Provides DRF integration with SQLAlchemy with SQLAlchemy model serializers/viewsets and a bunch of other goodies djangorestframework-mvt - An extension for creating views that serve Postgres data as Map Box Vector Tiles. drf-viewset-profiler - Lib to profile all methods from a viewset line by line. djangorestframework-features - Advanced schema generation and more based on named features. django-elasticsearch-dsl-drf - Integrate Elasticsearch DSL with Django REST framework. Package provides views, serializers, filter backends, pagination and other handy add-ons. django-api-client - DRF client that groups the Endpoint response, for use in CBVs and FBV as if you were working with Django's Native Models..","title":"Misc"},{"location":"community/tutorials-and-resources/","text":"Tutorials and Resources There are a wide range of resources available for learning and using Django REST framework. We try to keep a comprehensive list available here. Books Tutorials Beginner's Guide to the Django REST Framework Django REST Framework - An Introduction Django REST Framework Tutorial Django REST Framework Course Building a RESTful API with Django REST Framework Getting Started with Django REST Framework and AngularJS End to End Web App with Django REST Framework & AngularJS Start Your API - Django REST Framework Part 1 Permissions & Authentication - Django REST Framework Part 2 ViewSets and Routers - Django REST Framework Part 3 Django REST Framework User Endpoint Check Credentials Using Django REST Framework Creating a Production Ready API with Python and Django REST Framework \u2013 Part 1 Creating a Production Ready API with Python and Django REST Framework \u2013 Part 2 Django REST Framework Tutorial - Build a Blog API Django REST Framework & React Tutorial - Build a Todo List API Tutorial: Django REST with React (Django 2.0) Videos Talks Level Up! Rethinking the Web API Framework How to Make a Full Fledged REST API with Django OAuth Toolkit Django REST API - So Easy You Can Learn It in 25 Minutes Tom Christie about Django Rest Framework at Django: Under The Hood Django REST Framework: Schemas, Hypermedia & Client Libraries Tutorials Django REST Framework Part 1 Django REST Framework in Your PJ's! Building a REST API Using Django & Django REST Framework Blog API with Django REST Framework Ember and Django Part 1 Django REST Framework Image Upload Tutorial (with AngularJS) Django REST Framework Tutorials Articles Web API performance: Profiling Django REST Framework API Development with Django and Django REST Framework Integrating Pandas, Django REST Framework and Bokeh Controlling Uncertainty on Web Applications and APIs Full Text Search in Django REST Framework with Database Backends OAuth2 Authentication with Django REST Framework and Custom Third-Party OAuth2 Backends Nested Resources with Django REST Framework Image Fields with Django REST Framework Chatbot Using Django REST Framework + api.ai + Slack\u200a\u2014\u200aPart 1/3 New Django Admin with DRF and EmberJS... What are the News? Blog posts about Django REST Framework Documentations Classy Django REST Framework DRF-schema-adapter Want your Django REST Framework talk/tutorial/article to be added to our website? Or know of a resource that's not yet included here? Please submit a pull request or email us !","title":"Tutorials and Resources"},{"location":"community/tutorials-and-resources/#tutorials-and-resources","text":"There are a wide range of resources available for learning and using Django REST framework. We try to keep a comprehensive list available here.","title":"Tutorials and Resources"},{"location":"community/tutorials-and-resources/#books","text":"","title":"Books"},{"location":"community/tutorials-and-resources/#tutorials","text":"Beginner's Guide to the Django REST Framework Django REST Framework - An Introduction Django REST Framework Tutorial Django REST Framework Course Building a RESTful API with Django REST Framework Getting Started with Django REST Framework and AngularJS End to End Web App with Django REST Framework & AngularJS Start Your API - Django REST Framework Part 1 Permissions & Authentication - Django REST Framework Part 2 ViewSets and Routers - Django REST Framework Part 3 Django REST Framework User Endpoint Check Credentials Using Django REST Framework Creating a Production Ready API with Python and Django REST Framework \u2013 Part 1 Creating a Production Ready API with Python and Django REST Framework \u2013 Part 2 Django REST Framework Tutorial - Build a Blog API Django REST Framework & React Tutorial - Build a Todo List API Tutorial: Django REST with React (Django 2.0)","title":"Tutorials"},{"location":"community/tutorials-and-resources/#videos","text":"","title":"Videos"},{"location":"community/tutorials-and-resources/#talks","text":"Level Up! Rethinking the Web API Framework How to Make a Full Fledged REST API with Django OAuth Toolkit Django REST API - So Easy You Can Learn It in 25 Minutes Tom Christie about Django Rest Framework at Django: Under The Hood Django REST Framework: Schemas, Hypermedia & Client Libraries","title":"Talks"},{"location":"community/tutorials-and-resources/#tutorials_1","text":"Django REST Framework Part 1 Django REST Framework in Your PJ's! Building a REST API Using Django & Django REST Framework Blog API with Django REST Framework Ember and Django Part 1 Django REST Framework Image Upload Tutorial (with AngularJS) Django REST Framework Tutorials","title":"Tutorials"},{"location":"community/tutorials-and-resources/#articles","text":"Web API performance: Profiling Django REST Framework API Development with Django and Django REST Framework Integrating Pandas, Django REST Framework and Bokeh Controlling Uncertainty on Web Applications and APIs Full Text Search in Django REST Framework with Database Backends OAuth2 Authentication with Django REST Framework and Custom Third-Party OAuth2 Backends Nested Resources with Django REST Framework Image Fields with Django REST Framework Chatbot Using Django REST Framework + api.ai + Slack\u200a\u2014\u200aPart 1/3 New Django Admin with DRF and EmberJS... What are the News? Blog posts about Django REST Framework","title":"Articles"},{"location":"community/tutorials-and-resources/#documentations","text":"Classy Django REST Framework DRF-schema-adapter Want your Django REST Framework talk/tutorial/article to be added to our website? Or know of a resource that's not yet included here? Please submit a pull request or email us !","title":"Documentations"},{"location":"coreapi/","text":"Legacy CoreAPI Schemas Docs Use of CoreAPI-based schemas were deprecated with the introduction of native OpenAPI-based schema generation in Django REST Framework v3.10. See the Version 3.10 Release Announcement for more details. You can continue to use CoreAPI schemas by setting the appropriate default schema class: # In settings.py REST_FRAMEWORK = { 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema', } Under-the-hood, any subclass of coreapi.AutoSchema here will trigger use of the old CoreAPI schemas. Otherwise you will automatically be opted-in to the new OpenAPI schemas. All CoreAPI related code will be removed in Django REST Framework v3.12. Switch to OpenAPI schemas by then. For reference this folder contains the old CoreAPI related documentation: Tutorial 7: Schemas & client libraries . Excerpts from Documenting your API topic page . rest_framework.schemas API Reference .","title":"Legacy CoreAPI Schemas Docs"},{"location":"coreapi/#legacy-coreapi-schemas-docs","text":"Use of CoreAPI-based schemas were deprecated with the introduction of native OpenAPI-based schema generation in Django REST Framework v3.10. See the Version 3.10 Release Announcement for more details. You can continue to use CoreAPI schemas by setting the appropriate default schema class: # In settings.py REST_FRAMEWORK = { 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema', } Under-the-hood, any subclass of coreapi.AutoSchema here will trigger use of the old CoreAPI schemas. Otherwise you will automatically be opted-in to the new OpenAPI schemas. All CoreAPI related code will be removed in Django REST Framework v3.12. Switch to OpenAPI schemas by then. For reference this folder contains the old CoreAPI related documentation: Tutorial 7: Schemas & client libraries . Excerpts from Documenting your API topic page . rest_framework.schemas API Reference .","title":"Legacy CoreAPI Schemas Docs"},{"location":"coreapi/7-schemas-and-client-libraries/","text":"Tutorial 7: Schemas & client libraries A schema is a machine-readable document that describes the available API endpoints, their URLS, and what operations they support. Schemas can be a useful tool for auto-generated documentation, and can also be used to drive dynamic client libraries that can interact with the API. Core API In order to provide schema support REST framework uses Core API . Core API is a document specification for describing APIs. It is used to provide an internal representation format of the available endpoints and possible interactions that an API exposes. It can either be used server-side, or client-side. When used server-side, Core API allows an API to support rendering to a wide range of schema or hypermedia formats. When used client-side, Core API allows for dynamically driven client libraries that can interact with any API that exposes a supported schema or hypermedia format. Adding a schema REST framework supports either explicitly defined schema views, or automatically generated schemas. Since we're using viewsets and routers, we can simply use the automatic schema generation. You'll need to install the coreapi python package in order to include an API schema, and pyyaml to render the schema into the commonly used YAML-based OpenAPI format. $ pip install coreapi pyyaml We can now include a schema for our API, by including an autogenerated schema view in our URL configuration. from rest_framework.schemas import get_schema_view schema_view = get_schema_view(title='Pastebin API') urlpatterns = [ path('schema/', schema_view), ... ] If you visit the /schema/ endpoint in a browser you should now see corejson representation become available as an option. We can also request the schema from the command line, by specifying the desired content type in the Accept header. $ http http://127.0.0.1:8000/schema/ Accept:application/coreapi+json HTTP/1.0 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/coreapi+json { \"_meta\": { \"title\": \"Pastebin API\" }, \"_type\": \"document\", ... The default output style is to use the Core JSON encoding. Other schema formats, such as Open API (formerly Swagger) are also supported. Using a command line client Now that our API is exposing a schema endpoint, we can use a dynamic client library to interact with the API. To demonstrate this, let's use the Core API command line client. The command line client is available as the coreapi-cli package: $ pip install coreapi-cli Now check that it is available on the command line... $ coreapi Usage: coreapi [OPTIONS] COMMAND [ARGS]... Command line client for interacting with CoreAPI services. Visit https://www.coreapi.org/ for more information. Options: --version Display the package version number. --help Show this message and exit. Commands: ... First we'll load the API schema using the command line client. $ coreapi get http://127.0.0.1:8000/schema/ <Pastebin API \"http://127.0.0.1:8000/schema/\"> snippets: { highlight(id) list() read(id) } users: { list() read(id) } We haven't authenticated yet, so right now we're only able to see the read only endpoints, in line with how we've set up the permissions on the API. Let's try listing the existing snippets, using the command line client: $ coreapi action snippets list [ { \"url\": \"http://127.0.0.1:8000/snippets/1/\", \"id\": 1, \"highlight\": \"http://127.0.0.1:8000/snippets/1/highlight/\", \"owner\": \"lucy\", \"title\": \"Example\", \"code\": \"print('hello, world!')\", \"linenos\": true, \"language\": \"python\", \"style\": \"friendly\" }, ... Some of the API endpoints require named parameters. For example, to get back the highlight HTML for a particular snippet we need to provide an id. $ coreapi action snippets highlight --param id=1 <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> <html> <head> <title>Example</title> ... Authenticating our client If we want to be able to create, edit and delete snippets, we'll need to authenticate as a valid user. In this case we'll just use basic auth. Make sure to replace the <username> and <password> below with your actual username and password. $ coreapi credentials add 127.0.0.1 <username>:<password> --auth basic Added credentials 127.0.0.1 \"Basic <...>\" Now if we fetch the schema again, we should be able to see the full set of available interactions. $ coreapi reload Pastebin API \"http://127.0.0.1:8000/schema/\"> snippets: { create(code, [title], [linenos], [language], [style]) delete(id) highlight(id) list() partial_update(id, [title], [code], [linenos], [language], [style]) read(id) update(id, code, [title], [linenos], [language], [style]) } users: { list() read(id) } We're now able to interact with these endpoints. For example, to create a new snippet: $ coreapi action snippets create --param title=\"Example\" --param code=\"print('hello, world')\" { \"url\": \"http://127.0.0.1:8000/snippets/7/\", \"id\": 7, \"highlight\": \"http://127.0.0.1:8000/snippets/7/highlight/\", \"owner\": \"lucy\", \"title\": \"Example\", \"code\": \"print('hello, world')\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } And to delete a snippet: $ coreapi action snippets delete --param id=7 As well as the command line client, developers can also interact with your API using client libraries. The Python client library is the first of these to be available, and a Javascript client library is planned to be released soon. For more details on customizing schema generation and using Core API client libraries you'll need to refer to the full documentation. Reviewing our work With an incredibly small amount of code, we've now got a complete pastebin Web API, which is fully web browsable, includes a schema-driven client library, and comes complete with authentication, per-object permissions, and multiple renderer formats. We've walked through each step of the design process, and seen how if we need to customize anything we can gradually work our way down to simply using regular Django views. You can review the final tutorial code on GitHub, or try out a live example in the sandbox . Onwards and upwards We've reached the end of our tutorial. If you want to get more involved in the REST framework project, here are a few places you can start: Contribute on GitHub by reviewing and submitting issues, and making pull requests. Join the REST framework discussion group , and help build the community. Follow the author on Twitter and say hi. Now go build awesome things.","title":"Tutorial 7: Schemas & client libraries"},{"location":"coreapi/7-schemas-and-client-libraries/#tutorial-7-schemas-client-libraries","text":"A schema is a machine-readable document that describes the available API endpoints, their URLS, and what operations they support. Schemas can be a useful tool for auto-generated documentation, and can also be used to drive dynamic client libraries that can interact with the API.","title":"Tutorial 7: Schemas &amp; client libraries"},{"location":"coreapi/7-schemas-and-client-libraries/#core-api","text":"In order to provide schema support REST framework uses Core API . Core API is a document specification for describing APIs. It is used to provide an internal representation format of the available endpoints and possible interactions that an API exposes. It can either be used server-side, or client-side. When used server-side, Core API allows an API to support rendering to a wide range of schema or hypermedia formats. When used client-side, Core API allows for dynamically driven client libraries that can interact with any API that exposes a supported schema or hypermedia format.","title":"Core API"},{"location":"coreapi/7-schemas-and-client-libraries/#adding-a-schema","text":"REST framework supports either explicitly defined schema views, or automatically generated schemas. Since we're using viewsets and routers, we can simply use the automatic schema generation. You'll need to install the coreapi python package in order to include an API schema, and pyyaml to render the schema into the commonly used YAML-based OpenAPI format. $ pip install coreapi pyyaml We can now include a schema for our API, by including an autogenerated schema view in our URL configuration. from rest_framework.schemas import get_schema_view schema_view = get_schema_view(title='Pastebin API') urlpatterns = [ path('schema/', schema_view), ... ] If you visit the /schema/ endpoint in a browser you should now see corejson representation become available as an option. We can also request the schema from the command line, by specifying the desired content type in the Accept header. $ http http://127.0.0.1:8000/schema/ Accept:application/coreapi+json HTTP/1.0 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/coreapi+json { \"_meta\": { \"title\": \"Pastebin API\" }, \"_type\": \"document\", ... The default output style is to use the Core JSON encoding. Other schema formats, such as Open API (formerly Swagger) are also supported.","title":"Adding a schema"},{"location":"coreapi/7-schemas-and-client-libraries/#using-a-command-line-client","text":"Now that our API is exposing a schema endpoint, we can use a dynamic client library to interact with the API. To demonstrate this, let's use the Core API command line client. The command line client is available as the coreapi-cli package: $ pip install coreapi-cli Now check that it is available on the command line... $ coreapi Usage: coreapi [OPTIONS] COMMAND [ARGS]... Command line client for interacting with CoreAPI services. Visit https://www.coreapi.org/ for more information. Options: --version Display the package version number. --help Show this message and exit. Commands: ... First we'll load the API schema using the command line client. $ coreapi get http://127.0.0.1:8000/schema/ <Pastebin API \"http://127.0.0.1:8000/schema/\"> snippets: { highlight(id) list() read(id) } users: { list() read(id) } We haven't authenticated yet, so right now we're only able to see the read only endpoints, in line with how we've set up the permissions on the API. Let's try listing the existing snippets, using the command line client: $ coreapi action snippets list [ { \"url\": \"http://127.0.0.1:8000/snippets/1/\", \"id\": 1, \"highlight\": \"http://127.0.0.1:8000/snippets/1/highlight/\", \"owner\": \"lucy\", \"title\": \"Example\", \"code\": \"print('hello, world!')\", \"linenos\": true, \"language\": \"python\", \"style\": \"friendly\" }, ... Some of the API endpoints require named parameters. For example, to get back the highlight HTML for a particular snippet we need to provide an id. $ coreapi action snippets highlight --param id=1 <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> <html> <head> <title>Example</title> ...","title":"Using a command line client"},{"location":"coreapi/7-schemas-and-client-libraries/#authenticating-our-client","text":"If we want to be able to create, edit and delete snippets, we'll need to authenticate as a valid user. In this case we'll just use basic auth. Make sure to replace the <username> and <password> below with your actual username and password. $ coreapi credentials add 127.0.0.1 <username>:<password> --auth basic Added credentials 127.0.0.1 \"Basic <...>\" Now if we fetch the schema again, we should be able to see the full set of available interactions. $ coreapi reload Pastebin API \"http://127.0.0.1:8000/schema/\"> snippets: { create(code, [title], [linenos], [language], [style]) delete(id) highlight(id) list() partial_update(id, [title], [code], [linenos], [language], [style]) read(id) update(id, code, [title], [linenos], [language], [style]) } users: { list() read(id) } We're now able to interact with these endpoints. For example, to create a new snippet: $ coreapi action snippets create --param title=\"Example\" --param code=\"print('hello, world')\" { \"url\": \"http://127.0.0.1:8000/snippets/7/\", \"id\": 7, \"highlight\": \"http://127.0.0.1:8000/snippets/7/highlight/\", \"owner\": \"lucy\", \"title\": \"Example\", \"code\": \"print('hello, world')\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } And to delete a snippet: $ coreapi action snippets delete --param id=7 As well as the command line client, developers can also interact with your API using client libraries. The Python client library is the first of these to be available, and a Javascript client library is planned to be released soon. For more details on customizing schema generation and using Core API client libraries you'll need to refer to the full documentation.","title":"Authenticating our client"},{"location":"coreapi/7-schemas-and-client-libraries/#reviewing-our-work","text":"With an incredibly small amount of code, we've now got a complete pastebin Web API, which is fully web browsable, includes a schema-driven client library, and comes complete with authentication, per-object permissions, and multiple renderer formats. We've walked through each step of the design process, and seen how if we need to customize anything we can gradually work our way down to simply using regular Django views. You can review the final tutorial code on GitHub, or try out a live example in the sandbox .","title":"Reviewing our work"},{"location":"coreapi/7-schemas-and-client-libraries/#onwards-and-upwards","text":"We've reached the end of our tutorial. If you want to get more involved in the REST framework project, here are a few places you can start: Contribute on GitHub by reviewing and submitting issues, and making pull requests. Join the REST framework discussion group , and help build the community. Follow the author on Twitter and say hi. Now go build awesome things.","title":"Onwards and upwards"},{"location":"coreapi/from-documenting-your-api/","text":"Built-in API documentation The built-in API documentation includes: Documentation of API endpoints. Automatically generated code samples for each of the available API client libraries. Support for API interaction. Installation The coreapi library is required as a dependency for the API docs. Make sure to install the latest version. The Pygments and Markdown libraries are optional but recommended. To install the API documentation, you'll need to include it in your project's URLconf: from rest_framework.documentation import include_docs_urls urlpatterns = [ ... url(r'^docs/', include_docs_urls(title='My API title')) ] This will include two different views: /docs/ - The documentation page itself. /docs/schema.js - A JavaScript resource that exposes the API schema. Note : By default include_docs_urls configures the underlying SchemaView to generate public schemas. This means that views will not be instantiated with a request instance. i.e. Inside the view self.request will be None . To be compatible with this behaviour, methods (such as get_serializer or get_serializer_class etc.) which inspect self.request or, particularly, self.request.user may need to be adjusted to handle this case. You may ensure views are given a request instance by calling include_docs_urls with public=False : from rest_framework.documentation import include_docs_urls urlpatterns = [ ... # Generate schema with valid `request` instance: url(r'^docs/', include_docs_urls(title='My API title', public=False)) ] Documenting your views You can document your views by including docstrings that describe each of the available actions. For example: class UserList(generics.ListAPIView): \"\"\" Return a list of all the existing users. \"\"\" If a view supports multiple methods, you should split your documentation using method: style delimiters. class UserList(generics.ListCreateAPIView): \"\"\" get: Return a list of all the existing users. post: Create a new user instance. \"\"\" When using viewsets, you should use the relevant action names as delimiters. class UserViewSet(viewsets.ModelViewSet): \"\"\" retrieve: Return the given user. list: Return a list of all the existing users. create: Create a new user instance. \"\"\" Custom actions on viewsets can also be documented in a similar way using the method names as delimiters or by attaching the documentation to action mapping methods. class UserViewSet(viewsets.ModelViewset): ... @action(detail=False, methods=['get', 'post']) def some_action(self, request, *args, **kwargs): \"\"\" get: A description of the get method on the custom action. post: A description of the post method on the custom action. \"\"\" @some_action.mapping.put def put_some_action(): \"\"\" A description of the put method on the custom action. \"\"\" documentation API Reference The rest_framework.documentation module provides three helper functions to help configure the interactive API documentation, include_docs_urls (usage shown above), get_docs_view and get_schemajs_view . include_docs_urls employs get_docs_view and get_schemajs_view to generate the url patterns for the documentation page and JavaScript resource that exposes the API schema respectively. They expose the following options for customisation. ( get_docs_view and get_schemajs_view ultimately call rest_frameworks.schemas.get_schema_view() , see the Schemas docs for more options there.) include_docs_urls title : Default None . May be used to provide a descriptive title for the schema definition. description : Default None . May be used to provide a description for the schema definition. schema_url : Default None . May be used to pass a canonical base URL for the schema. public : Default True . Should the schema be considered public ? If True schema is generated without a request instance being passed to views. patterns : Default None . A list of URLs to inspect when generating the schema. If None project's URL conf will be used. generator_class : Default rest_framework.schemas.SchemaGenerator . May be used to specify a SchemaGenerator subclass to be passed to the SchemaView . authentication_classes : Default api_settings.DEFAULT_AUTHENTICATION_CLASSES . May be used to pass custom authentication classes to the SchemaView . permission_classes : Default api_settings.DEFAULT_PERMISSION_CLASSES May be used to pass custom permission classes to the SchemaView . renderer_classes : Default None . May be used to pass custom renderer classes to the SchemaView . get_docs_view title : Default None . May be used to provide a descriptive title for the schema definition. description : Default None . May be used to provide a description for the schema definition. schema_url : Default None . May be used to pass a canonical base URL for the schema. public : Default True . If True schema is generated without a request instance being passed to views. patterns : Default None . A list of URLs to inspect when generating the schema. If None project's URL conf will be used. generator_class : Default rest_framework.schemas.SchemaGenerator . May be used to specify a SchemaGenerator subclass to be passed to the SchemaView . authentication_classes : Default api_settings.DEFAULT_AUTHENTICATION_CLASSES . May be used to pass custom authentication classes to the SchemaView . permission_classes : Default api_settings.DEFAULT_PERMISSION_CLASSES . May be used to pass custom permission classes to the SchemaView . renderer_classes : Default None . May be used to pass custom renderer classes to the SchemaView . If None the SchemaView will be configured with DocumentationRenderer and CoreJSONRenderer renderers, corresponding to the (default) html and corejson formats. get_schemajs_view title : Default None . May be used to provide a descriptive title for the schema definition. description : Default None . May be used to provide a description for the schema definition. schema_url : Default None . May be used to pass a canonical base URL for the schema. public : Default True . If True schema is generated without a request instance being passed to views. patterns : Default None . A list of URLs to inspect when generating the schema. If None project's URL conf will be used. generator_class : Default rest_framework.schemas.SchemaGenerator . May be used to specify a SchemaGenerator subclass to be passed to the SchemaView . authentication_classes : Default api_settings.DEFAULT_AUTHENTICATION_CLASSES . May be used to pass custom authentication classes to the SchemaView . permission_classes : Default api_settings.DEFAULT_PERMISSION_CLASSES May be used to pass custom permission classes to the SchemaView . Customising code samples The built-in API documentation includes automatically generated code samples for each of the available API client libraries. You may customise these samples by subclassing DocumentationRenderer , setting languages to the list of languages you wish to support: from rest_framework.renderers import DocumentationRenderer class CustomRenderer(DocumentationRenderer): languages = ['ruby', 'go'] For each language you need to provide an intro template, detailing installation instructions and such, plus a generic template for making API requests, that can be filled with individual request details. See the templates for the bundled languages for examples.","title":"From documenting your api"},{"location":"coreapi/from-documenting-your-api/#built-in-api-documentation","text":"The built-in API documentation includes: Documentation of API endpoints. Automatically generated code samples for each of the available API client libraries. Support for API interaction.","title":"Built-in API documentation"},{"location":"coreapi/from-documenting-your-api/#installation","text":"The coreapi library is required as a dependency for the API docs. Make sure to install the latest version. The Pygments and Markdown libraries are optional but recommended. To install the API documentation, you'll need to include it in your project's URLconf: from rest_framework.documentation import include_docs_urls urlpatterns = [ ... url(r'^docs/', include_docs_urls(title='My API title')) ] This will include two different views: /docs/ - The documentation page itself. /docs/schema.js - A JavaScript resource that exposes the API schema. Note : By default include_docs_urls configures the underlying SchemaView to generate public schemas. This means that views will not be instantiated with a request instance. i.e. Inside the view self.request will be None . To be compatible with this behaviour, methods (such as get_serializer or get_serializer_class etc.) which inspect self.request or, particularly, self.request.user may need to be adjusted to handle this case. You may ensure views are given a request instance by calling include_docs_urls with public=False : from rest_framework.documentation import include_docs_urls urlpatterns = [ ... # Generate schema with valid `request` instance: url(r'^docs/', include_docs_urls(title='My API title', public=False)) ]","title":"Installation"},{"location":"coreapi/from-documenting-your-api/#documenting-your-views","text":"You can document your views by including docstrings that describe each of the available actions. For example: class UserList(generics.ListAPIView): \"\"\" Return a list of all the existing users. \"\"\" If a view supports multiple methods, you should split your documentation using method: style delimiters. class UserList(generics.ListCreateAPIView): \"\"\" get: Return a list of all the existing users. post: Create a new user instance. \"\"\" When using viewsets, you should use the relevant action names as delimiters. class UserViewSet(viewsets.ModelViewSet): \"\"\" retrieve: Return the given user. list: Return a list of all the existing users. create: Create a new user instance. \"\"\" Custom actions on viewsets can also be documented in a similar way using the method names as delimiters or by attaching the documentation to action mapping methods. class UserViewSet(viewsets.ModelViewset): ... @action(detail=False, methods=['get', 'post']) def some_action(self, request, *args, **kwargs): \"\"\" get: A description of the get method on the custom action. post: A description of the post method on the custom action. \"\"\" @some_action.mapping.put def put_some_action(): \"\"\" A description of the put method on the custom action. \"\"\"","title":"Documenting your views"},{"location":"coreapi/from-documenting-your-api/#documentation-api-reference","text":"The rest_framework.documentation module provides three helper functions to help configure the interactive API documentation, include_docs_urls (usage shown above), get_docs_view and get_schemajs_view . include_docs_urls employs get_docs_view and get_schemajs_view to generate the url patterns for the documentation page and JavaScript resource that exposes the API schema respectively. They expose the following options for customisation. ( get_docs_view and get_schemajs_view ultimately call rest_frameworks.schemas.get_schema_view() , see the Schemas docs for more options there.)","title":"documentation API Reference"},{"location":"coreapi/from-documenting-your-api/#include_docs_urls","text":"title : Default None . May be used to provide a descriptive title for the schema definition. description : Default None . May be used to provide a description for the schema definition. schema_url : Default None . May be used to pass a canonical base URL for the schema. public : Default True . Should the schema be considered public ? If True schema is generated without a request instance being passed to views. patterns : Default None . A list of URLs to inspect when generating the schema. If None project's URL conf will be used. generator_class : Default rest_framework.schemas.SchemaGenerator . May be used to specify a SchemaGenerator subclass to be passed to the SchemaView . authentication_classes : Default api_settings.DEFAULT_AUTHENTICATION_CLASSES . May be used to pass custom authentication classes to the SchemaView . permission_classes : Default api_settings.DEFAULT_PERMISSION_CLASSES May be used to pass custom permission classes to the SchemaView . renderer_classes : Default None . May be used to pass custom renderer classes to the SchemaView .","title":"include_docs_urls"},{"location":"coreapi/from-documenting-your-api/#get_docs_view","text":"title : Default None . May be used to provide a descriptive title for the schema definition. description : Default None . May be used to provide a description for the schema definition. schema_url : Default None . May be used to pass a canonical base URL for the schema. public : Default True . If True schema is generated without a request instance being passed to views. patterns : Default None . A list of URLs to inspect when generating the schema. If None project's URL conf will be used. generator_class : Default rest_framework.schemas.SchemaGenerator . May be used to specify a SchemaGenerator subclass to be passed to the SchemaView . authentication_classes : Default api_settings.DEFAULT_AUTHENTICATION_CLASSES . May be used to pass custom authentication classes to the SchemaView . permission_classes : Default api_settings.DEFAULT_PERMISSION_CLASSES . May be used to pass custom permission classes to the SchemaView . renderer_classes : Default None . May be used to pass custom renderer classes to the SchemaView . If None the SchemaView will be configured with DocumentationRenderer and CoreJSONRenderer renderers, corresponding to the (default) html and corejson formats.","title":"get_docs_view"},{"location":"coreapi/from-documenting-your-api/#get_schemajs_view","text":"title : Default None . May be used to provide a descriptive title for the schema definition. description : Default None . May be used to provide a description for the schema definition. schema_url : Default None . May be used to pass a canonical base URL for the schema. public : Default True . If True schema is generated without a request instance being passed to views. patterns : Default None . A list of URLs to inspect when generating the schema. If None project's URL conf will be used. generator_class : Default rest_framework.schemas.SchemaGenerator . May be used to specify a SchemaGenerator subclass to be passed to the SchemaView . authentication_classes : Default api_settings.DEFAULT_AUTHENTICATION_CLASSES . May be used to pass custom authentication classes to the SchemaView . permission_classes : Default api_settings.DEFAULT_PERMISSION_CLASSES May be used to pass custom permission classes to the SchemaView .","title":"get_schemajs_view"},{"location":"coreapi/from-documenting-your-api/#customising-code-samples","text":"The built-in API documentation includes automatically generated code samples for each of the available API client libraries. You may customise these samples by subclassing DocumentationRenderer , setting languages to the list of languages you wish to support: from rest_framework.renderers import DocumentationRenderer class CustomRenderer(DocumentationRenderer): languages = ['ruby', 'go'] For each language you need to provide an intro template, detailing installation instructions and such, plus a generic template for making API requests, that can be filled with individual request details. See the templates for the bundled languages for examples.","title":"Customising code samples"},{"location":"coreapi/schemas/","text":"Schemas A machine-readable [schema] describes what resources are available via the API, what their URLs are, how they are represented and what operations they support. \u2014 Heroku, JSON Schema for the Heroku Platform API API schemas are a useful tool that allow for a range of use cases, including generating reference documentation, or driving dynamic client libraries that can interact with your API. Install Core API & PyYAML You'll need to install the coreapi package in order to add schema support for REST framework. You probably also want to install pyyaml , so that you can render the schema into the commonly used YAML-based OpenAPI format. pip install coreapi pyyaml Quickstart There are two different ways you can serve a schema description for your API. Generating a schema with the generateschema management command To generate a static API schema, use the generateschema management command. $ python manage.py generateschema > schema.yml Once you've generated a schema in this way you can annotate it with any additional information that cannot be automatically inferred by the schema generator. You might want to check your API schema into version control and update it with each new release, or serve the API schema from your site's static media. Adding a view with get_schema_view To add a dynamically generated schema view to your API, use get_schema_view . from rest_framework.schemas import get_schema_view schema_view = get_schema_view(title=\"Example API\") urlpatterns = [ url('^schema$', schema_view), ... ] See below for more details on customizing a dynamically generated schema view. Internal schema representation REST framework uses Core API in order to model schema information in a format-independent representation. This information can then be rendered into various different schema formats, or used to generate API documentation. When using Core API, a schema is represented as a Document which is the top-level container object for information about the API. Available API interactions are represented using Link objects. Each link includes a URL, HTTP method, and may include a list of Field instances, which describe any parameters that may be accepted by the API endpoint. The Link and Field instances may also include descriptions, that allow an API schema to be rendered into user documentation. Here's an example of an API description that includes a single search endpoint: coreapi.Document( title='Flight Search API', url='https://api.example.org/', content={ 'search': coreapi.Link( url='/search/', action='get', fields=[ coreapi.Field( name='from', required=True, location='query', description='City name or airport code.' ), coreapi.Field( name='to', required=True, location='query', description='City name or airport code.' ), coreapi.Field( name='date', required=True, location='query', description='Flight date in \"YYYY-MM-DD\" format.' ) ], description='Return flight availability and prices.' ) } ) Schema output formats In order to be presented in an HTTP response, the internal representation has to be rendered into the actual bytes that are used in the response. REST framework includes a few different renderers that you can use for encoding the API schema. renderers.OpenAPIRenderer - Renders into YAML-based OpenAPI , the most widely used API schema format. renderers.JSONOpenAPIRenderer - Renders into JSON-based OpenAPI . renderers.CoreJSONRenderer - Renders into Core JSON , a format designed for use with the coreapi client library. Core JSON is designed as a canonical format for use with Core API. REST framework includes a renderer class for handling this media type, which is available as renderers.CoreJSONRenderer . Schemas vs Hypermedia It's worth pointing out here that Core API can also be used to model hypermedia responses, which present an alternative interaction style to API schemas. With an API schema, the entire available interface is presented up-front as a single endpoint. Responses to individual API endpoints are then typically presented as plain data, without any further interactions contained in each response. With Hypermedia, the client is instead presented with a document containing both data and available interactions. Each interaction results in a new document, detailing both the current state and the available interactions. Further information and support on building Hypermedia APIs with REST framework is planned for a future version. Creating a schema REST framework includes functionality for auto-generating a schema, or allows you to specify one explicitly. Manual Schema Specification To manually specify a schema you create a Core API Document , similar to the example above. schema = coreapi.Document( title='Flight Search API', content={ ... } ) Automatic Schema Generation Automatic schema generation is provided by the SchemaGenerator class. SchemaGenerator processes a list of routed URL patterns and compiles the appropriately structured Core API Document. Basic usage is just to provide the title for your schema and call get_schema() : generator = schemas.SchemaGenerator(title='Flight Search API') schema = generator.get_schema() Per-View Schema Customisation By default, view introspection is performed by an AutoSchema instance accessible via the schema attribute on APIView . This provides the appropriate Core API Link object for the view, request method and path: auto_schema = view.schema coreapi_link = auto_schema.get_link(...) (In compiling the schema, SchemaGenerator calls view.schema.get_link() for each view, allowed method and path.) Note : For basic APIView subclasses, default introspection is essentially limited to the URL kwarg path parameters. For GenericAPIView subclasses, which includes all the provided class based views, AutoSchema will attempt to introspect serializer, pagination and filter fields, as well as provide richer path field descriptions. (The key hooks here are the relevant GenericAPIView attributes and methods: get_serializer , pagination_class , filter_backends and so on.) To customise the Link generation you may: Instantiate AutoSchema on your view with the manual_fields kwarg: from rest_framework.views import APIView from rest_framework.schemas import AutoSchema class CustomView(APIView): ... schema = AutoSchema( manual_fields=[ coreapi.Field(\"extra_field\", ...), ] ) This allows extension for the most common case without subclassing. Provide an AutoSchema subclass with more complex customisation: from rest_framework.views import APIView from rest_framework.schemas import AutoSchema class CustomSchema(AutoSchema): def get_link(...): # Implement custom introspection here (or in other sub-methods) class CustomView(APIView): ... schema = CustomSchema() This provides complete control over view introspection. Instantiate ManualSchema on your view, providing the Core API Fields for the view explicitly: from rest_framework.views import APIView from rest_framework.schemas import ManualSchema class CustomView(APIView): ... schema = ManualSchema(fields=[ coreapi.Field( \"first_field\", required=True, location=\"path\", schema=coreschema.String() ), coreapi.Field( \"second_field\", required=True, location=\"path\", schema=coreschema.String() ), ]) This allows manually specifying the schema for some views whilst maintaining automatic generation elsewhere. You may disable schema generation for a view by setting schema to None : class CustomView(APIView): ... schema = None # Will not appear in schema This also applies to extra actions for ViewSet s: class CustomViewSet(viewsets.ModelViewSet): @action(detail=True, schema=None) def extra_action(self, request, pk=None): ... Note : For full details on SchemaGenerator plus the AutoSchema and ManualSchema descriptors see the API Reference below . Adding a schema view There are a few different ways to add a schema view to your API, depending on exactly what you need. The get_schema_view shortcut The simplest way to include a schema in your project is to use the get_schema_view() function. from rest_framework.schemas import get_schema_view schema_view = get_schema_view(title=\"Server Monitoring API\") urlpatterns = [ url('^$', schema_view), ... ] Once the view has been added, you'll be able to make API requests to retrieve the auto-generated schema definition. $ http http://127.0.0.1:8000/ Accept:application/coreapi+json HTTP/1.0 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/vnd.coreapi+json { \"_meta\": { \"title\": \"Server Monitoring API\" }, \"_type\": \"document\", ... } The arguments to get_schema_view() are: title May be used to provide a descriptive title for the schema definition. url May be used to pass a canonical URL for the schema. schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/' ) urlconf A string representing the import path to the URL conf that you want to generate an API schema for. This defaults to the value of Django's ROOT_URLCONF setting. schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', urlconf='myproject.urls' ) renderer_classes May be used to pass the set of renderer classes that can be used to render the API root endpoint. from rest_framework.schemas import get_schema_view from rest_framework.renderers import JSONOpenAPIRenderer schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', renderer_classes=[JSONOpenAPIRenderer] ) patterns List of url patterns to limit the schema introspection to. If you only want the myproject.api urls to be exposed in the schema: schema_url_patterns = [ url(r'^api/', include('myproject.api.urls')), ] schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', patterns=schema_url_patterns, ) generator_class May be used to specify a SchemaGenerator subclass to be passed to the SchemaView . authentication_classes May be used to specify the list of authentication classes that will apply to the schema endpoint. Defaults to settings.DEFAULT_AUTHENTICATION_CLASSES permission_classes May be used to specify the list of permission classes that will apply to the schema endpoint. Defaults to settings.DEFAULT_PERMISSION_CLASSES Using an explicit schema view If you need a little more control than the get_schema_view() shortcut gives you, then you can use the SchemaGenerator class directly to auto-generate the Document instance, and to return that from a view. This option gives you the flexibility of setting up the schema endpoint with whatever behaviour you want. For example, you can apply different permission, throttling, or authentication policies to the schema endpoint. Here's an example of using SchemaGenerator together with a view to return the schema. views.py: from rest_framework.decorators import api_view, renderer_classes from rest_framework import renderers, response, schemas generator = schemas.SchemaGenerator(title='Bookings API') @api_view() @renderer_classes([renderers.OpenAPIRenderer]) def schema_view(request): schema = generator.get_schema(request) return response.Response(schema) urls.py: urlpatterns = [ url('/', schema_view), ... ] You can also serve different schemas to different users, depending on the permissions they have available. This approach can be used to ensure that unauthenticated requests are presented with a different schema to authenticated requests, or to ensure that different parts of the API are made visible to different users depending on their role. In order to present a schema with endpoints filtered by user permissions, you need to pass the request argument to the get_schema() method, like so: @api_view() @renderer_classes([renderers.OpenAPIRenderer]) def schema_view(request): generator = schemas.SchemaGenerator(title='Bookings API') return response.Response(generator.get_schema(request=request)) Explicit schema definition An alternative to the auto-generated approach is to specify the API schema explicitly, by declaring a Document object in your codebase. Doing so is a little more work, but ensures that you have full control over the schema representation. import coreapi from rest_framework.decorators import api_view, renderer_classes from rest_framework import renderers, response schema = coreapi.Document( title='Bookings API', content={ ... } ) @api_view() @renderer_classes([renderers.OpenAPIRenderer]) def schema_view(request): return response.Response(schema) Schemas as documentation One common usage of API schemas is to use them to build documentation pages. The schema generation in REST framework uses docstrings to automatically populate descriptions in the schema document. These descriptions will be based on: The corresponding method docstring if one exists. A named section within the class docstring, which can be either single line or multi-line. The class docstring. Examples An APIView , with an explicit method docstring. class ListUsernames(APIView): def get(self, request): \"\"\" Return a list of all user names in the system. \"\"\" usernames = [user.username for user in User.objects.all()] return Response(usernames) A ViewSet , with an explicit action docstring. class ListUsernames(ViewSet): def list(self, request): \"\"\" Return a list of all user names in the system. \"\"\" usernames = [user.username for user in User.objects.all()] return Response(usernames) A generic view with sections in the class docstring, using single-line style. class UserList(generics.ListCreateAPIView): \"\"\" get: List all the users. post: Create a new user. \"\"\" queryset = User.objects.all() serializer_class = UserSerializer permission_classes = [IsAdminUser] A generic viewset with sections in the class docstring, using multi-line style. class UserViewSet(viewsets.ModelViewSet): \"\"\" API endpoint that allows users to be viewed or edited. retrieve: Return a user instance. list: Return all users, ordered by most recently joined. \"\"\" queryset = User.objects.all().order_by('-date_joined') serializer_class = UserSerializer API Reference SchemaGenerator A class that walks a list of routed URL patterns, requests the schema for each view, and collates the resulting CoreAPI Document. Typically you'll instantiate SchemaGenerator with a single argument, like so: generator = SchemaGenerator(title='Stock Prices API') Arguments: title required - The name of the API. url - The root URL of the API schema. This option is not required unless the schema is included under path prefix. patterns - A list of URLs to inspect when generating the schema. Defaults to the project's URL conf. urlconf - A URL conf module name to use when generating the schema. Defaults to settings.ROOT_URLCONF . get_schema(self, request) Returns a coreapi.Document instance that represents the API schema. @api_view @renderer_classes([renderers.OpenAPIRenderer]) def schema_view(request): generator = schemas.SchemaGenerator(title='Bookings API') return Response(generator.get_schema()) The request argument is optional, and may be used if you want to apply per-user permissions to the resulting schema generation. get_links(self, request) Return a nested dictionary containing all the links that should be included in the API schema. This is a good point to override if you want to modify the resulting structure of the generated schema, as you can build a new dictionary with a different layout. AutoSchema A class that deals with introspection of individual views for schema generation. AutoSchema is attached to APIView via the schema attribute. The AutoSchema constructor takes a single keyword argument manual_fields . manual_fields : a list of coreapi.Field instances that will be added to the generated fields. Generated fields with a matching name will be overwritten. class CustomView(APIView): schema = AutoSchema(manual_fields=[ coreapi.Field( \"my_extra_field\", required=True, location=\"path\", schema=coreschema.String() ), ]) For more advanced customisation subclass AutoSchema to customise schema generation. class CustomViewSchema(AutoSchema): \"\"\" Overrides `get_link()` to provide Custom Behavior X \"\"\" def get_link(self, path, method, base_url): link = super().get_link(path, method, base_url) # Do something to customize link here... return link class MyView(APIView): schema = CustomViewSchema() The following methods are available to override. get_link(self, path, method, base_url) Returns a coreapi.Link instance corresponding to the given view. This is the main entry point. You can override this if you need to provide custom behaviors for particular views. get_description(self, path, method) Returns a string to use as the link description. By default this is based on the view docstring as described in the \"Schemas as Documentation\" section above. get_encoding(self, path, method) Returns a string to indicate the encoding for any request body, when interacting with the given view. Eg. 'application/json' . May return a blank string for views that do not expect a request body. get_path_fields(self, path, method): Return a list of coreapi.Field() instances. One for each path parameter in the URL. get_serializer_fields(self, path, method) Return a list of coreapi.Field() instances. One for each field in the serializer class used by the view. get_pagination_fields(self, path, method) Return a list of coreapi.Field() instances, as returned by the get_schema_fields() method on any pagination class used by the view. get_filter_fields(self, path, method) Return a list of coreapi.Field() instances, as returned by the get_schema_fields() method of any filter classes used by the view. get_manual_fields(self, path, method) Return a list of coreapi.Field() instances to be added to or replace generated fields. Defaults to (optional) manual_fields passed to AutoSchema constructor. May be overridden to customise manual fields by path or method . For example, a per-method adjustment may look like this: def get_manual_fields(self, path, method): \"\"\"Example adding per-method fields.\"\"\" extra_fields = [] if method=='GET': extra_fields = # ... list of extra fields for GET ... if method=='POST': extra_fields = # ... list of extra fields for POST ... manual_fields = super().get_manual_fields(path, method) return manual_fields + extra_fields update_fields(fields, update_with) Utility staticmethod . Encapsulates logic to add or replace fields from a list by Field.name . May be overridden to adjust replacement criteria. ManualSchema Allows manually providing a list of coreapi.Field instances for the schema, plus an optional description. class MyView(APIView): schema = ManualSchema(fields=[ coreapi.Field( \"first_field\", required=True, location=\"path\", schema=coreschema.String() ), coreapi.Field( \"second_field\", required=True, location=\"path\", schema=coreschema.String() ), ] ) The ManualSchema constructor takes two arguments: fields : A list of coreapi.Field instances. Required. description : A string description. Optional. encoding : Default None . A string encoding, e.g application/json . Optional. Core API This documentation gives a brief overview of the components within the coreapi package that are used to represent an API schema. Note that these classes are imported from the coreapi package, rather than from the rest_framework package. Document Represents a container for the API schema. title A name for the API. url A canonical URL for the API. content A dictionary, containing the Link objects that the schema contains. In order to provide more structure to the schema, the content dictionary may be nested, typically to a second level. For example: content={ \"bookings\": { \"list\": Link(...), \"create\": Link(...), ... }, \"venues\": { \"list\": Link(...), ... }, ... } Link Represents an individual API endpoint. url The URL of the endpoint. May be a URI template, such as /users/{username}/ . action The HTTP method associated with the endpoint. Note that URLs that support more than one HTTP method, should correspond to a single Link for each. fields A list of Field instances, describing the available parameters on the input. description A short description of the meaning and intended usage of the endpoint. Field Represents a single input parameter on a given API endpoint. name A descriptive name for the input. required A boolean, indicated if the client is required to included a value, or if the parameter can be omitted. location Determines how the information is encoded into the request. Should be one of the following strings: \"path\" Included in a templated URI. For example a url value of /products/{product_code}/ could be used together with a \"path\" field, to handle API inputs in a URL path such as /products/slim-fit-jeans/ . These fields will normally correspond with named arguments in the project URL conf . \"query\" Included as a URL query parameter. For example ?search=sale . Typically for GET requests. These fields will normally correspond with pagination and filtering controls on a view. \"form\" Included in the request body, as a single item of a JSON object or HTML form. For example {\"colour\": \"blue\", ...} . Typically for POST , PUT and PATCH requests. Multiple \"form\" fields may be included on a single link. These fields will normally correspond with serializer fields on a view. \"body\" Included as the complete request body. Typically for POST , PUT and PATCH requests. No more than one \"body\" field may exist on a link. May not be used together with \"form\" fields. These fields will normally correspond with views that use ListSerializer to validate the request input, or with file upload views. encoding \"application/json\" JSON encoded request content. Corresponds to views using JSONParser . Valid only if either one or more location=\"form\" fields, or a single location=\"body\" field is included on the Link . \"multipart/form-data\" Multipart encoded request content. Corresponds to views using MultiPartParser . Valid only if one or more location=\"form\" fields is included on the Link . \"application/x-www-form-urlencoded\" URL encoded request content. Corresponds to views using FormParser . Valid only if one or more location=\"form\" fields is included on the Link . \"application/octet-stream\" Binary upload request content. Corresponds to views using FileUploadParser . Valid only if a location=\"body\" field is included on the Link . description A short description of the meaning and intended usage of the input field. Third party packages drf-yasg - Yet Another Swagger Generator drf-yasg generates OpenAPI documents suitable for code generation - nested schemas, named models, response bodies, enum/pattern/min/max validators, form parameters, etc.","title":"Schemas"},{"location":"coreapi/schemas/#schemas","text":"A machine-readable [schema] describes what resources are available via the API, what their URLs are, how they are represented and what operations they support. \u2014 Heroku, JSON Schema for the Heroku Platform API API schemas are a useful tool that allow for a range of use cases, including generating reference documentation, or driving dynamic client libraries that can interact with your API.","title":"Schemas"},{"location":"coreapi/schemas/#install-core-api-pyyaml","text":"You'll need to install the coreapi package in order to add schema support for REST framework. You probably also want to install pyyaml , so that you can render the schema into the commonly used YAML-based OpenAPI format. pip install coreapi pyyaml","title":"Install Core API &amp; PyYAML"},{"location":"coreapi/schemas/#quickstart","text":"There are two different ways you can serve a schema description for your API.","title":"Quickstart"},{"location":"coreapi/schemas/#generating-a-schema-with-the-generateschema-management-command","text":"To generate a static API schema, use the generateschema management command. $ python manage.py generateschema > schema.yml Once you've generated a schema in this way you can annotate it with any additional information that cannot be automatically inferred by the schema generator. You might want to check your API schema into version control and update it with each new release, or serve the API schema from your site's static media.","title":"Generating a schema with the generateschema management command"},{"location":"coreapi/schemas/#adding-a-view-with-get_schema_view","text":"To add a dynamically generated schema view to your API, use get_schema_view . from rest_framework.schemas import get_schema_view schema_view = get_schema_view(title=\"Example API\") urlpatterns = [ url('^schema$', schema_view), ... ] See below for more details on customizing a dynamically generated schema view.","title":"Adding a view with get_schema_view"},{"location":"coreapi/schemas/#internal-schema-representation","text":"REST framework uses Core API in order to model schema information in a format-independent representation. This information can then be rendered into various different schema formats, or used to generate API documentation. When using Core API, a schema is represented as a Document which is the top-level container object for information about the API. Available API interactions are represented using Link objects. Each link includes a URL, HTTP method, and may include a list of Field instances, which describe any parameters that may be accepted by the API endpoint. The Link and Field instances may also include descriptions, that allow an API schema to be rendered into user documentation. Here's an example of an API description that includes a single search endpoint: coreapi.Document( title='Flight Search API', url='https://api.example.org/', content={ 'search': coreapi.Link( url='/search/', action='get', fields=[ coreapi.Field( name='from', required=True, location='query', description='City name or airport code.' ), coreapi.Field( name='to', required=True, location='query', description='City name or airport code.' ), coreapi.Field( name='date', required=True, location='query', description='Flight date in \"YYYY-MM-DD\" format.' ) ], description='Return flight availability and prices.' ) } )","title":"Internal schema representation"},{"location":"coreapi/schemas/#schema-output-formats","text":"In order to be presented in an HTTP response, the internal representation has to be rendered into the actual bytes that are used in the response. REST framework includes a few different renderers that you can use for encoding the API schema. renderers.OpenAPIRenderer - Renders into YAML-based OpenAPI , the most widely used API schema format. renderers.JSONOpenAPIRenderer - Renders into JSON-based OpenAPI . renderers.CoreJSONRenderer - Renders into Core JSON , a format designed for use with the coreapi client library. Core JSON is designed as a canonical format for use with Core API. REST framework includes a renderer class for handling this media type, which is available as renderers.CoreJSONRenderer .","title":"Schema output formats"},{"location":"coreapi/schemas/#schemas-vs-hypermedia","text":"It's worth pointing out here that Core API can also be used to model hypermedia responses, which present an alternative interaction style to API schemas. With an API schema, the entire available interface is presented up-front as a single endpoint. Responses to individual API endpoints are then typically presented as plain data, without any further interactions contained in each response. With Hypermedia, the client is instead presented with a document containing both data and available interactions. Each interaction results in a new document, detailing both the current state and the available interactions. Further information and support on building Hypermedia APIs with REST framework is planned for a future version.","title":"Schemas vs Hypermedia"},{"location":"coreapi/schemas/#creating-a-schema","text":"REST framework includes functionality for auto-generating a schema, or allows you to specify one explicitly.","title":"Creating a schema"},{"location":"coreapi/schemas/#manual-schema-specification","text":"To manually specify a schema you create a Core API Document , similar to the example above. schema = coreapi.Document( title='Flight Search API', content={ ... } )","title":"Manual Schema Specification"},{"location":"coreapi/schemas/#automatic-schema-generation","text":"Automatic schema generation is provided by the SchemaGenerator class. SchemaGenerator processes a list of routed URL patterns and compiles the appropriately structured Core API Document. Basic usage is just to provide the title for your schema and call get_schema() : generator = schemas.SchemaGenerator(title='Flight Search API') schema = generator.get_schema()","title":"Automatic Schema Generation"},{"location":"coreapi/schemas/#per-view-schema-customisation","text":"By default, view introspection is performed by an AutoSchema instance accessible via the schema attribute on APIView . This provides the appropriate Core API Link object for the view, request method and path: auto_schema = view.schema coreapi_link = auto_schema.get_link(...) (In compiling the schema, SchemaGenerator calls view.schema.get_link() for each view, allowed method and path.) Note : For basic APIView subclasses, default introspection is essentially limited to the URL kwarg path parameters. For GenericAPIView subclasses, which includes all the provided class based views, AutoSchema will attempt to introspect serializer, pagination and filter fields, as well as provide richer path field descriptions. (The key hooks here are the relevant GenericAPIView attributes and methods: get_serializer , pagination_class , filter_backends and so on.) To customise the Link generation you may: Instantiate AutoSchema on your view with the manual_fields kwarg: from rest_framework.views import APIView from rest_framework.schemas import AutoSchema class CustomView(APIView): ... schema = AutoSchema( manual_fields=[ coreapi.Field(\"extra_field\", ...), ] ) This allows extension for the most common case without subclassing. Provide an AutoSchema subclass with more complex customisation: from rest_framework.views import APIView from rest_framework.schemas import AutoSchema class CustomSchema(AutoSchema): def get_link(...): # Implement custom introspection here (or in other sub-methods) class CustomView(APIView): ... schema = CustomSchema() This provides complete control over view introspection. Instantiate ManualSchema on your view, providing the Core API Fields for the view explicitly: from rest_framework.views import APIView from rest_framework.schemas import ManualSchema class CustomView(APIView): ... schema = ManualSchema(fields=[ coreapi.Field( \"first_field\", required=True, location=\"path\", schema=coreschema.String() ), coreapi.Field( \"second_field\", required=True, location=\"path\", schema=coreschema.String() ), ]) This allows manually specifying the schema for some views whilst maintaining automatic generation elsewhere. You may disable schema generation for a view by setting schema to None : class CustomView(APIView): ... schema = None # Will not appear in schema This also applies to extra actions for ViewSet s: class CustomViewSet(viewsets.ModelViewSet): @action(detail=True, schema=None) def extra_action(self, request, pk=None): ... Note : For full details on SchemaGenerator plus the AutoSchema and ManualSchema descriptors see the API Reference below .","title":"Per-View Schema Customisation"},{"location":"coreapi/schemas/#adding-a-schema-view","text":"There are a few different ways to add a schema view to your API, depending on exactly what you need.","title":"Adding a schema view"},{"location":"coreapi/schemas/#the-get_schema_view-shortcut","text":"The simplest way to include a schema in your project is to use the get_schema_view() function. from rest_framework.schemas import get_schema_view schema_view = get_schema_view(title=\"Server Monitoring API\") urlpatterns = [ url('^$', schema_view), ... ] Once the view has been added, you'll be able to make API requests to retrieve the auto-generated schema definition. $ http http://127.0.0.1:8000/ Accept:application/coreapi+json HTTP/1.0 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/vnd.coreapi+json { \"_meta\": { \"title\": \"Server Monitoring API\" }, \"_type\": \"document\", ... } The arguments to get_schema_view() are:","title":"The get_schema_view shortcut"},{"location":"coreapi/schemas/#title","text":"May be used to provide a descriptive title for the schema definition.","title":"title"},{"location":"coreapi/schemas/#url","text":"May be used to pass a canonical URL for the schema. schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/' )","title":"url"},{"location":"coreapi/schemas/#urlconf","text":"A string representing the import path to the URL conf that you want to generate an API schema for. This defaults to the value of Django's ROOT_URLCONF setting. schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', urlconf='myproject.urls' )","title":"urlconf"},{"location":"coreapi/schemas/#renderer_classes","text":"May be used to pass the set of renderer classes that can be used to render the API root endpoint. from rest_framework.schemas import get_schema_view from rest_framework.renderers import JSONOpenAPIRenderer schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', renderer_classes=[JSONOpenAPIRenderer] )","title":"renderer_classes"},{"location":"coreapi/schemas/#patterns","text":"List of url patterns to limit the schema introspection to. If you only want the myproject.api urls to be exposed in the schema: schema_url_patterns = [ url(r'^api/', include('myproject.api.urls')), ] schema_view = get_schema_view( title='Server Monitoring API', url='https://www.example.org/api/', patterns=schema_url_patterns, )","title":"patterns"},{"location":"coreapi/schemas/#generator_class","text":"May be used to specify a SchemaGenerator subclass to be passed to the SchemaView .","title":"generator_class"},{"location":"coreapi/schemas/#authentication_classes","text":"May be used to specify the list of authentication classes that will apply to the schema endpoint. Defaults to settings.DEFAULT_AUTHENTICATION_CLASSES","title":"authentication_classes"},{"location":"coreapi/schemas/#permission_classes","text":"May be used to specify the list of permission classes that will apply to the schema endpoint. Defaults to settings.DEFAULT_PERMISSION_CLASSES","title":"permission_classes"},{"location":"coreapi/schemas/#using-an-explicit-schema-view","text":"If you need a little more control than the get_schema_view() shortcut gives you, then you can use the SchemaGenerator class directly to auto-generate the Document instance, and to return that from a view. This option gives you the flexibility of setting up the schema endpoint with whatever behaviour you want. For example, you can apply different permission, throttling, or authentication policies to the schema endpoint. Here's an example of using SchemaGenerator together with a view to return the schema. views.py: from rest_framework.decorators import api_view, renderer_classes from rest_framework import renderers, response, schemas generator = schemas.SchemaGenerator(title='Bookings API') @api_view() @renderer_classes([renderers.OpenAPIRenderer]) def schema_view(request): schema = generator.get_schema(request) return response.Response(schema) urls.py: urlpatterns = [ url('/', schema_view), ... ] You can also serve different schemas to different users, depending on the permissions they have available. This approach can be used to ensure that unauthenticated requests are presented with a different schema to authenticated requests, or to ensure that different parts of the API are made visible to different users depending on their role. In order to present a schema with endpoints filtered by user permissions, you need to pass the request argument to the get_schema() method, like so: @api_view() @renderer_classes([renderers.OpenAPIRenderer]) def schema_view(request): generator = schemas.SchemaGenerator(title='Bookings API') return response.Response(generator.get_schema(request=request))","title":"Using an explicit schema view"},{"location":"coreapi/schemas/#explicit-schema-definition","text":"An alternative to the auto-generated approach is to specify the API schema explicitly, by declaring a Document object in your codebase. Doing so is a little more work, but ensures that you have full control over the schema representation. import coreapi from rest_framework.decorators import api_view, renderer_classes from rest_framework import renderers, response schema = coreapi.Document( title='Bookings API', content={ ... } ) @api_view() @renderer_classes([renderers.OpenAPIRenderer]) def schema_view(request): return response.Response(schema)","title":"Explicit schema definition"},{"location":"coreapi/schemas/#schemas-as-documentation","text":"One common usage of API schemas is to use them to build documentation pages. The schema generation in REST framework uses docstrings to automatically populate descriptions in the schema document. These descriptions will be based on: The corresponding method docstring if one exists. A named section within the class docstring, which can be either single line or multi-line. The class docstring.","title":"Schemas as documentation"},{"location":"coreapi/schemas/#examples","text":"An APIView , with an explicit method docstring. class ListUsernames(APIView): def get(self, request): \"\"\" Return a list of all user names in the system. \"\"\" usernames = [user.username for user in User.objects.all()] return Response(usernames) A ViewSet , with an explicit action docstring. class ListUsernames(ViewSet): def list(self, request): \"\"\" Return a list of all user names in the system. \"\"\" usernames = [user.username for user in User.objects.all()] return Response(usernames) A generic view with sections in the class docstring, using single-line style. class UserList(generics.ListCreateAPIView): \"\"\" get: List all the users. post: Create a new user. \"\"\" queryset = User.objects.all() serializer_class = UserSerializer permission_classes = [IsAdminUser] A generic viewset with sections in the class docstring, using multi-line style. class UserViewSet(viewsets.ModelViewSet): \"\"\" API endpoint that allows users to be viewed or edited. retrieve: Return a user instance. list: Return all users, ordered by most recently joined. \"\"\" queryset = User.objects.all().order_by('-date_joined') serializer_class = UserSerializer","title":"Examples"},{"location":"coreapi/schemas/#api-reference","text":"","title":"API Reference"},{"location":"coreapi/schemas/#schemagenerator","text":"A class that walks a list of routed URL patterns, requests the schema for each view, and collates the resulting CoreAPI Document. Typically you'll instantiate SchemaGenerator with a single argument, like so: generator = SchemaGenerator(title='Stock Prices API') Arguments: title required - The name of the API. url - The root URL of the API schema. This option is not required unless the schema is included under path prefix. patterns - A list of URLs to inspect when generating the schema. Defaults to the project's URL conf. urlconf - A URL conf module name to use when generating the schema. Defaults to settings.ROOT_URLCONF .","title":"SchemaGenerator"},{"location":"coreapi/schemas/#get_schemaself-request","text":"Returns a coreapi.Document instance that represents the API schema. @api_view @renderer_classes([renderers.OpenAPIRenderer]) def schema_view(request): generator = schemas.SchemaGenerator(title='Bookings API') return Response(generator.get_schema()) The request argument is optional, and may be used if you want to apply per-user permissions to the resulting schema generation.","title":"get_schema(self, request)"},{"location":"coreapi/schemas/#get_linksself-request","text":"Return a nested dictionary containing all the links that should be included in the API schema. This is a good point to override if you want to modify the resulting structure of the generated schema, as you can build a new dictionary with a different layout.","title":"get_links(self, request)"},{"location":"coreapi/schemas/#autoschema","text":"A class that deals with introspection of individual views for schema generation. AutoSchema is attached to APIView via the schema attribute. The AutoSchema constructor takes a single keyword argument manual_fields . manual_fields : a list of coreapi.Field instances that will be added to the generated fields. Generated fields with a matching name will be overwritten. class CustomView(APIView): schema = AutoSchema(manual_fields=[ coreapi.Field( \"my_extra_field\", required=True, location=\"path\", schema=coreschema.String() ), ]) For more advanced customisation subclass AutoSchema to customise schema generation. class CustomViewSchema(AutoSchema): \"\"\" Overrides `get_link()` to provide Custom Behavior X \"\"\" def get_link(self, path, method, base_url): link = super().get_link(path, method, base_url) # Do something to customize link here... return link class MyView(APIView): schema = CustomViewSchema() The following methods are available to override.","title":"AutoSchema"},{"location":"coreapi/schemas/#get_linkself-path-method-base_url","text":"Returns a coreapi.Link instance corresponding to the given view. This is the main entry point. You can override this if you need to provide custom behaviors for particular views.","title":"get_link(self, path, method, base_url)"},{"location":"coreapi/schemas/#get_descriptionself-path-method","text":"Returns a string to use as the link description. By default this is based on the view docstring as described in the \"Schemas as Documentation\" section above.","title":"get_description(self, path, method)"},{"location":"coreapi/schemas/#get_encodingself-path-method","text":"Returns a string to indicate the encoding for any request body, when interacting with the given view. Eg. 'application/json' . May return a blank string for views that do not expect a request body.","title":"get_encoding(self, path, method)"},{"location":"coreapi/schemas/#get_path_fieldsself-path-method","text":"Return a list of coreapi.Field() instances. One for each path parameter in the URL.","title":"get_path_fields(self, path, method):"},{"location":"coreapi/schemas/#get_serializer_fieldsself-path-method","text":"Return a list of coreapi.Field() instances. One for each field in the serializer class used by the view.","title":"get_serializer_fields(self, path, method)"},{"location":"coreapi/schemas/#get_pagination_fieldsself-path-method","text":"Return a list of coreapi.Field() instances, as returned by the get_schema_fields() method on any pagination class used by the view.","title":"get_pagination_fields(self, path, method)"},{"location":"coreapi/schemas/#get_filter_fieldsself-path-method","text":"Return a list of coreapi.Field() instances, as returned by the get_schema_fields() method of any filter classes used by the view.","title":"get_filter_fields(self, path, method)"},{"location":"coreapi/schemas/#get_manual_fieldsself-path-method","text":"Return a list of coreapi.Field() instances to be added to or replace generated fields. Defaults to (optional) manual_fields passed to AutoSchema constructor. May be overridden to customise manual fields by path or method . For example, a per-method adjustment may look like this: def get_manual_fields(self, path, method): \"\"\"Example adding per-method fields.\"\"\" extra_fields = [] if method=='GET': extra_fields = # ... list of extra fields for GET ... if method=='POST': extra_fields = # ... list of extra fields for POST ... manual_fields = super().get_manual_fields(path, method) return manual_fields + extra_fields","title":"get_manual_fields(self, path, method)"},{"location":"coreapi/schemas/#update_fieldsfields-update_with","text":"Utility staticmethod . Encapsulates logic to add or replace fields from a list by Field.name . May be overridden to adjust replacement criteria.","title":"update_fields(fields, update_with)"},{"location":"coreapi/schemas/#manualschema","text":"Allows manually providing a list of coreapi.Field instances for the schema, plus an optional description. class MyView(APIView): schema = ManualSchema(fields=[ coreapi.Field( \"first_field\", required=True, location=\"path\", schema=coreschema.String() ), coreapi.Field( \"second_field\", required=True, location=\"path\", schema=coreschema.String() ), ] ) The ManualSchema constructor takes two arguments: fields : A list of coreapi.Field instances. Required. description : A string description. Optional. encoding : Default None . A string encoding, e.g application/json . Optional.","title":"ManualSchema"},{"location":"coreapi/schemas/#core-api","text":"This documentation gives a brief overview of the components within the coreapi package that are used to represent an API schema. Note that these classes are imported from the coreapi package, rather than from the rest_framework package.","title":"Core API"},{"location":"coreapi/schemas/#document","text":"Represents a container for the API schema.","title":"Document"},{"location":"coreapi/schemas/#title_1","text":"A name for the API.","title":"title"},{"location":"coreapi/schemas/#url_1","text":"A canonical URL for the API.","title":"url"},{"location":"coreapi/schemas/#content","text":"A dictionary, containing the Link objects that the schema contains. In order to provide more structure to the schema, the content dictionary may be nested, typically to a second level. For example: content={ \"bookings\": { \"list\": Link(...), \"create\": Link(...), ... }, \"venues\": { \"list\": Link(...), ... }, ... }","title":"content"},{"location":"coreapi/schemas/#link","text":"Represents an individual API endpoint.","title":"Link"},{"location":"coreapi/schemas/#url_2","text":"The URL of the endpoint. May be a URI template, such as /users/{username}/ .","title":"url"},{"location":"coreapi/schemas/#action","text":"The HTTP method associated with the endpoint. Note that URLs that support more than one HTTP method, should correspond to a single Link for each.","title":"action"},{"location":"coreapi/schemas/#fields","text":"A list of Field instances, describing the available parameters on the input.","title":"fields"},{"location":"coreapi/schemas/#description","text":"A short description of the meaning and intended usage of the endpoint.","title":"description"},{"location":"coreapi/schemas/#field","text":"Represents a single input parameter on a given API endpoint.","title":"Field"},{"location":"coreapi/schemas/#name","text":"A descriptive name for the input.","title":"name"},{"location":"coreapi/schemas/#required","text":"A boolean, indicated if the client is required to included a value, or if the parameter can be omitted.","title":"required"},{"location":"coreapi/schemas/#location","text":"Determines how the information is encoded into the request. Should be one of the following strings: \"path\" Included in a templated URI. For example a url value of /products/{product_code}/ could be used together with a \"path\" field, to handle API inputs in a URL path such as /products/slim-fit-jeans/ . These fields will normally correspond with named arguments in the project URL conf . \"query\" Included as a URL query parameter. For example ?search=sale . Typically for GET requests. These fields will normally correspond with pagination and filtering controls on a view. \"form\" Included in the request body, as a single item of a JSON object or HTML form. For example {\"colour\": \"blue\", ...} . Typically for POST , PUT and PATCH requests. Multiple \"form\" fields may be included on a single link. These fields will normally correspond with serializer fields on a view. \"body\" Included as the complete request body. Typically for POST , PUT and PATCH requests. No more than one \"body\" field may exist on a link. May not be used together with \"form\" fields. These fields will normally correspond with views that use ListSerializer to validate the request input, or with file upload views.","title":"location"},{"location":"coreapi/schemas/#encoding","text":"\"application/json\" JSON encoded request content. Corresponds to views using JSONParser . Valid only if either one or more location=\"form\" fields, or a single location=\"body\" field is included on the Link . \"multipart/form-data\" Multipart encoded request content. Corresponds to views using MultiPartParser . Valid only if one or more location=\"form\" fields is included on the Link . \"application/x-www-form-urlencoded\" URL encoded request content. Corresponds to views using FormParser . Valid only if one or more location=\"form\" fields is included on the Link . \"application/octet-stream\" Binary upload request content. Corresponds to views using FileUploadParser . Valid only if a location=\"body\" field is included on the Link .","title":"encoding"},{"location":"coreapi/schemas/#description_1","text":"A short description of the meaning and intended usage of the input field.","title":"description"},{"location":"coreapi/schemas/#third-party-packages","text":"","title":"Third party packages"},{"location":"coreapi/schemas/#drf-yasg-yet-another-swagger-generator","text":"drf-yasg generates OpenAPI documents suitable for code generation - nested schemas, named models, response bodies, enum/pattern/min/max validators, form parameters, etc.","title":"drf-yasg - Yet Another Swagger Generator"},{"location":"topics/ajax-csrf-cors/","text":"Working with AJAX, CSRF & CORS \"Take a close look at possible CSRF / XSRF vulnerabilities on your own websites. They're the worst kind of vulnerability \u2014 very easy to exploit by attackers, yet not so intuitively easy to understand for software developers, at least until you've been bitten by one.\" \u2014 Jeff Atwood Javascript clients If you\u2019re building a JavaScript client to interface with your Web API, you'll need to consider if the client can use the same authentication policy that is used by the rest of the website, and also determine if you need to use CSRF tokens or CORS headers. AJAX requests that are made within the same context as the API they are interacting with will typically use SessionAuthentication . This ensures that once a user has logged in, any AJAX requests made can be authenticated using the same session-based authentication that is used for the rest of the website. AJAX requests that are made on a different site from the API they are communicating with will typically need to use a non-session-based authentication scheme, such as TokenAuthentication . CSRF protection Cross Site Request Forgery protection is a mechanism of guarding against a particular type of attack, which can occur when a user has not logged out of a web site, and continues to have a valid session. In this circumstance a malicious site may be able to perform actions against the target site, within the context of the logged-in session. To guard against these type of attacks, you need to do two things: Ensure that the 'safe' HTTP operations, such as GET , HEAD and OPTIONS cannot be used to alter any server-side state. Ensure that any 'unsafe' HTTP operations, such as POST , PUT , PATCH and DELETE , always require a valid CSRF token. If you're using SessionAuthentication you'll need to include valid CSRF tokens for any POST , PUT , PATCH or DELETE operations. In order to make AJAX requests, you need to include CSRF token in the HTTP header, as described in the Django documentation . CORS Cross-Origin Resource Sharing is a mechanism for allowing clients to interact with APIs that are hosted on a different domain. CORS works by requiring the server to include a specific set of headers that allow a browser to determine if and when cross-domain requests should be allowed. The best way to deal with CORS in REST framework is to add the required response headers in middleware. This ensures that CORS is supported transparently, without having to change any behavior in your views. Otto Yiu maintains the django-cors-headers package, which is known to work correctly with REST framework APIs.","title":"Working with AJAX, CSRF & CORS"},{"location":"topics/ajax-csrf-cors/#working-with-ajax-csrf-cors","text":"\"Take a close look at possible CSRF / XSRF vulnerabilities on your own websites. They're the worst kind of vulnerability \u2014 very easy to exploit by attackers, yet not so intuitively easy to understand for software developers, at least until you've been bitten by one.\" \u2014 Jeff Atwood","title":"Working with AJAX, CSRF &amp; CORS"},{"location":"topics/ajax-csrf-cors/#javascript-clients","text":"If you\u2019re building a JavaScript client to interface with your Web API, you'll need to consider if the client can use the same authentication policy that is used by the rest of the website, and also determine if you need to use CSRF tokens or CORS headers. AJAX requests that are made within the same context as the API they are interacting with will typically use SessionAuthentication . This ensures that once a user has logged in, any AJAX requests made can be authenticated using the same session-based authentication that is used for the rest of the website. AJAX requests that are made on a different site from the API they are communicating with will typically need to use a non-session-based authentication scheme, such as TokenAuthentication .","title":"Javascript clients"},{"location":"topics/ajax-csrf-cors/#csrf-protection","text":"Cross Site Request Forgery protection is a mechanism of guarding against a particular type of attack, which can occur when a user has not logged out of a web site, and continues to have a valid session. In this circumstance a malicious site may be able to perform actions against the target site, within the context of the logged-in session. To guard against these type of attacks, you need to do two things: Ensure that the 'safe' HTTP operations, such as GET , HEAD and OPTIONS cannot be used to alter any server-side state. Ensure that any 'unsafe' HTTP operations, such as POST , PUT , PATCH and DELETE , always require a valid CSRF token. If you're using SessionAuthentication you'll need to include valid CSRF tokens for any POST , PUT , PATCH or DELETE operations. In order to make AJAX requests, you need to include CSRF token in the HTTP header, as described in the Django documentation .","title":"CSRF protection"},{"location":"topics/ajax-csrf-cors/#cors","text":"Cross-Origin Resource Sharing is a mechanism for allowing clients to interact with APIs that are hosted on a different domain. CORS works by requiring the server to include a specific set of headers that allow a browser to determine if and when cross-domain requests should be allowed. The best way to deal with CORS in REST framework is to add the required response headers in middleware. This ensures that CORS is supported transparently, without having to change any behavior in your views. Otto Yiu maintains the django-cors-headers package, which is known to work correctly with REST framework APIs.","title":"CORS"},{"location":"topics/ajax-csrf-cors_zh/","text":"\u4f7f\u7528AJAX\uff0cCSRF\u548cCORS \"\u4ed4\u7ec6\u89c2\u5bdf\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u7684\u53ef\u80fd\u7684CSRF/XSRF\u6f0f\u6d1e\u3002\u5b83\u4eec\u662f\u6700\u7cdf\u7cd5\u7684\u6f0f\u6d1e \u2014 \u975e\u5e38\u5bb9\u6613\u88ab\u653b\u51fb\u8005\u5229\u7528\u3002\u4f46\u5bf9\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u81f3\u5c11\u76f4\u5230\u4f60\u88ab\u653b\u51fb\u4e86\u4f60\u624d\u80fd\u76f4\u89c2\u7684\u7406\u89e3\u3002\" \u2014 Jeff Atwood Javascript\u5ba2\u6237\u7aef \u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4e00\u4e2aJavaScript\u5ba2\u6237\u7aef\u6765\u548cWeb API\u5bf9\u63a5\uff0c\u4f60\u5c06\u9700\u8981\u8003\u8651\u5ba2\u6237\u7aef\u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u7f51\u7ad9\u5176\u4ed6\u90e8\u5206\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\uff0c\u5e76\u786e\u5b9a\u662f\u5426\u9700\u8981\u4f7f\u7528CSRF\u4ee4\u724c\u6216CORS\u6807\u5934\u3002 \u4e0e\u6b63\u5728\u4ea4\u4e92\u7684API\u76f8\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u53d1\u8d77\u7684AJAX\u8bf7\u6c42\u901a\u5e38\u5c06\u4f7f\u7528 SessionAuthentication \u3002 \u8fd9\u786e\u4fdd\u4e00\u65e6\u7528\u6237\u767b\u5f55\uff0c\u4efb\u4f55AJAX\u8bf7\u6c42\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e0e\u7f51\u7ad9\u5176\u4ed6\u90e8\u5206\u76f8\u540c\u7684\u57fa\u4e8e\u4f1a\u8bdd\u7684\u8eab\u4efd\u9a8c\u8bc1\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4e0e\u5176\u901a\u4fe1\u7684API\u5728\u4e0d\u540c\u7ad9\u70b9\u4e0a\u53d1\u8d77\u7684AJAX\u8bf7\u6c42\u901a\u5e38\u9700\u8981\u4f7f\u7528\u57fa\u4e8e\u975e\u4f1a\u8bdd\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u4f8b\u5982 TokenAuthentication \u3002 CSRF\u4fdd\u62a4 Cross Site Request Forgery \u4fdd\u62a4\u662f\u9632\u6b62\u7279\u5b9a\u7c7b\u578b\u7684\u653b\u51fb\u7684\u673a\u5236\uff0c\u5f53\u7528\u6237\u6ca1\u6709\u6ce8\u9500\u767b\u51fa\u7f51\u7ad9\u5e76\u4e14\u5177\u6709\u6709\u6548\u7684\u4f1a\u8bdd\u65f6\uff0c\u8fd9\u79cd\u653b\u51fb\u53ef\u80fd\u53d1\u751f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6076\u610f\u7ad9\u70b9\u53ef\u80fd\u4f1a\u5728\u767b\u5f55\u4f1a\u8bdd\u7684\u4e0a\u4e0b\u6587\u4e2d\u9488\u5bf9\u76ee\u6807\u7ad9\u70b9\u6267\u884c\u653b\u51fb\u64cd\u4f5c\u3002 \u4e3a\u4e86\u9632\u8303\u8fd9\u4e9b\u7c7b\u578b\u7684\u653b\u51fb\uff0c\u4f60\u9700\u8981\u505a\u4e24\u4ef6\u4e8b\u60c5\uff1a \u786e\u4fdd\u201c\u5b89\u5168\u201d\u7684HTTP\u64cd\u4f5c\uff08\u5982\uff1a GET \uff0c HEAD \u548c OPTIONS \uff09\u4e0d\u80fd\u7528\u4e8e\u66f4\u6539\u4efb\u4f55\u670d\u52a1\u5668\u7aef\u72b6\u6001\u3002 \u786e\u4fdd\u201c\u4e0d\u5b89\u5168\u201d\u7684HTTP\u64cd\u4f5c\uff08\u5982\uff1a POST \uff0c PUT \uff0c PATCH \u548c DELETE \uff09\u59cb\u7ec8\u9700\u8981\u6709\u6548\u7684CSRF\u4ee4\u724c\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f SessionAuthentication \u5219\u9700\u8981\u4e3a\u4efb\u4f55 POST \uff0c PUT \uff0c PATCH \u6216 DELETE \u64cd\u4f5c\u5305\u542b\u6709\u6548\u7684CSRF\u4ee4\u724c\u3002 \u4e3a\u4e86\u4f7f\u7528AJAX\u8bf7\u6c42\uff0c\u4f60\u9700\u8981\u5728HTTP\u6807\u5934\u4e2d\u5305\u542bCSRF\u4ee4\u724c\uff0c\u5982 Django\u6587\u6863\u4e2d\u6240\u8ff0 \u3002 CORS Cross-Origin Resource Sharing \u662f\u5141\u8bb8\u5ba2\u6237\u7aef\u4e0e\u6258\u7ba1\u5728\u4e0d\u540c\u57df\u4e0a\u7684API\u4ea4\u4e92\u7684\u673a\u5236\u3002CORS\u7684\u5de5\u4f5c\u539f\u7406\u662f\u8981\u6c42\u670d\u52a1\u5668\u5305\u542b\u4e00\u7ec4\u7279\u5b9a\u7684\u6807\u5934\u4fe1\u606f\uff0c\u5141\u8bb8\u6d4f\u89c8\u5668\u786e\u5b9a\u662f\u5426\u548c\u4f55\u65f6\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u3002 \u5728REST\u6846\u67b6\u4e2d\u5904\u7406CORS\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u5728\u4e2d\u95f4\u4ef6\u4e2d\u6dfb\u52a0\u6240\u9700\u7684\u54cd\u5e94\u5934\u4fe1\u606f\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fddCORS\u5f97\u5230\u900f\u660e\u652f\u6301\uff0c\u800c\u65e0\u9700\u66f4\u6539\u89c6\u56fe\u4e2d\u7684\u4efb\u4f55\u884c\u4e3a\u3002 Otto Yiu \u7ef4\u62a4\u7740\u80fd\u5728REST\u6846\u67b6\u642d\u5efa\u7684API\u4e0b\u6b63\u5e38\u4f7f\u7528\u7684 django-cors-headers \u5305\u3002","title":"AJAX, CSRF & CORS"},{"location":"topics/ajax-csrf-cors_zh/#ajaxcsrfcors","text":"\"\u4ed4\u7ec6\u89c2\u5bdf\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u7684\u53ef\u80fd\u7684CSRF/XSRF\u6f0f\u6d1e\u3002\u5b83\u4eec\u662f\u6700\u7cdf\u7cd5\u7684\u6f0f\u6d1e \u2014 \u975e\u5e38\u5bb9\u6613\u88ab\u653b\u51fb\u8005\u5229\u7528\u3002\u4f46\u5bf9\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u81f3\u5c11\u76f4\u5230\u4f60\u88ab\u653b\u51fb\u4e86\u4f60\u624d\u80fd\u76f4\u89c2\u7684\u7406\u89e3\u3002\" \u2014 Jeff Atwood","title":"\u4f7f\u7528AJAX\uff0cCSRF\u548cCORS"},{"location":"topics/ajax-csrf-cors_zh/#javascript","text":"\u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4e00\u4e2aJavaScript\u5ba2\u6237\u7aef\u6765\u548cWeb API\u5bf9\u63a5\uff0c\u4f60\u5c06\u9700\u8981\u8003\u8651\u5ba2\u6237\u7aef\u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u7f51\u7ad9\u5176\u4ed6\u90e8\u5206\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\uff0c\u5e76\u786e\u5b9a\u662f\u5426\u9700\u8981\u4f7f\u7528CSRF\u4ee4\u724c\u6216CORS\u6807\u5934\u3002 \u4e0e\u6b63\u5728\u4ea4\u4e92\u7684API\u76f8\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u53d1\u8d77\u7684AJAX\u8bf7\u6c42\u901a\u5e38\u5c06\u4f7f\u7528 SessionAuthentication \u3002 \u8fd9\u786e\u4fdd\u4e00\u65e6\u7528\u6237\u767b\u5f55\uff0c\u4efb\u4f55AJAX\u8bf7\u6c42\u90fd\u53ef\u4ee5\u4f7f\u7528\u4e0e\u7f51\u7ad9\u5176\u4ed6\u90e8\u5206\u76f8\u540c\u7684\u57fa\u4e8e\u4f1a\u8bdd\u7684\u8eab\u4efd\u9a8c\u8bc1\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4e0e\u5176\u901a\u4fe1\u7684API\u5728\u4e0d\u540c\u7ad9\u70b9\u4e0a\u53d1\u8d77\u7684AJAX\u8bf7\u6c42\u901a\u5e38\u9700\u8981\u4f7f\u7528\u57fa\u4e8e\u975e\u4f1a\u8bdd\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\uff0c\u4f8b\u5982 TokenAuthentication \u3002","title":"Javascript\u5ba2\u6237\u7aef"},{"location":"topics/ajax-csrf-cors_zh/#csrf","text":"Cross Site Request Forgery \u4fdd\u62a4\u662f\u9632\u6b62\u7279\u5b9a\u7c7b\u578b\u7684\u653b\u51fb\u7684\u673a\u5236\uff0c\u5f53\u7528\u6237\u6ca1\u6709\u6ce8\u9500\u767b\u51fa\u7f51\u7ad9\u5e76\u4e14\u5177\u6709\u6709\u6548\u7684\u4f1a\u8bdd\u65f6\uff0c\u8fd9\u79cd\u653b\u51fb\u53ef\u80fd\u53d1\u751f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6076\u610f\u7ad9\u70b9\u53ef\u80fd\u4f1a\u5728\u767b\u5f55\u4f1a\u8bdd\u7684\u4e0a\u4e0b\u6587\u4e2d\u9488\u5bf9\u76ee\u6807\u7ad9\u70b9\u6267\u884c\u653b\u51fb\u64cd\u4f5c\u3002 \u4e3a\u4e86\u9632\u8303\u8fd9\u4e9b\u7c7b\u578b\u7684\u653b\u51fb\uff0c\u4f60\u9700\u8981\u505a\u4e24\u4ef6\u4e8b\u60c5\uff1a \u786e\u4fdd\u201c\u5b89\u5168\u201d\u7684HTTP\u64cd\u4f5c\uff08\u5982\uff1a GET \uff0c HEAD \u548c OPTIONS \uff09\u4e0d\u80fd\u7528\u4e8e\u66f4\u6539\u4efb\u4f55\u670d\u52a1\u5668\u7aef\u72b6\u6001\u3002 \u786e\u4fdd\u201c\u4e0d\u5b89\u5168\u201d\u7684HTTP\u64cd\u4f5c\uff08\u5982\uff1a POST \uff0c PUT \uff0c PATCH \u548c DELETE \uff09\u59cb\u7ec8\u9700\u8981\u6709\u6548\u7684CSRF\u4ee4\u724c\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f SessionAuthentication \u5219\u9700\u8981\u4e3a\u4efb\u4f55 POST \uff0c PUT \uff0c PATCH \u6216 DELETE \u64cd\u4f5c\u5305\u542b\u6709\u6548\u7684CSRF\u4ee4\u724c\u3002 \u4e3a\u4e86\u4f7f\u7528AJAX\u8bf7\u6c42\uff0c\u4f60\u9700\u8981\u5728HTTP\u6807\u5934\u4e2d\u5305\u542bCSRF\u4ee4\u724c\uff0c\u5982 Django\u6587\u6863\u4e2d\u6240\u8ff0 \u3002","title":"CSRF\u4fdd\u62a4"},{"location":"topics/ajax-csrf-cors_zh/#cors","text":"Cross-Origin Resource Sharing \u662f\u5141\u8bb8\u5ba2\u6237\u7aef\u4e0e\u6258\u7ba1\u5728\u4e0d\u540c\u57df\u4e0a\u7684API\u4ea4\u4e92\u7684\u673a\u5236\u3002CORS\u7684\u5de5\u4f5c\u539f\u7406\u662f\u8981\u6c42\u670d\u52a1\u5668\u5305\u542b\u4e00\u7ec4\u7279\u5b9a\u7684\u6807\u5934\u4fe1\u606f\uff0c\u5141\u8bb8\u6d4f\u89c8\u5668\u786e\u5b9a\u662f\u5426\u548c\u4f55\u65f6\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u3002 \u5728REST\u6846\u67b6\u4e2d\u5904\u7406CORS\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u5728\u4e2d\u95f4\u4ef6\u4e2d\u6dfb\u52a0\u6240\u9700\u7684\u54cd\u5e94\u5934\u4fe1\u606f\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fddCORS\u5f97\u5230\u900f\u660e\u652f\u6301\uff0c\u800c\u65e0\u9700\u66f4\u6539\u89c6\u56fe\u4e2d\u7684\u4efb\u4f55\u884c\u4e3a\u3002 Otto Yiu \u7ef4\u62a4\u7740\u80fd\u5728REST\u6846\u67b6\u642d\u5efa\u7684API\u4e0b\u6b63\u5e38\u4f7f\u7528\u7684 django-cors-headers \u5305\u3002","title":"CORS"},{"location":"topics/api-clients/","text":"API Clients An API client handles the underlying details of how network requests are made and how responses are decoded. They present the developer with an application interface to work against, rather than working directly with the network interface. The API clients documented here are not restricted to APIs built with Django REST framework. They can be used with any API that exposes a supported schema format. For example, the Heroku platform API exposes a schema in the JSON Hyperschema format. As a result, the Core API command line client and Python client library can be used to interact with the Heroku API . Client-side Core API Core API is a document specification that can be used to describe APIs. It can be used either server-side, as is done with REST framework's schema generation , or used client-side, as described here. When used client-side, Core API allows for dynamically driven client libraries that can interact with any API that exposes a supported schema or hypermedia format. Using a dynamically driven client has a number of advantages over interacting with an API by building HTTP requests directly. More meaningful interaction API interactions are presented in a more meaningful way. You're working at the application interface layer, rather than the network interface layer. Resilience & evolvability The client determines what endpoints are available, what parameters exist against each particular endpoint, and how HTTP requests are formed. This also allows for a degree of API evolvability. URLs can be modified without breaking existing clients, or more efficient encodings can be used on-the-wire, with clients transparently upgrading. Self-descriptive APIs A dynamically driven client is able to present documentation on the API to the end user. This documentation allows the user to discover the available endpoints and parameters, and better understand the API they are working with. Because this documentation is driven by the API schema it will always be fully up to date with the most recently deployed version of the service. Command line client The command line client allows you to inspect and interact with any API that exposes a supported schema format. Getting started To install the Core API command line client, use pip . Note that the command-line client is a separate package to the python client library. Make sure to install coreapi-cli . $ pip install coreapi-cli To start inspecting and interacting with an API the schema must first be loaded from the network. $ coreapi get http://api.example.org/ <Pastebin API \"http://127.0.0.1:8000/\"> snippets: { create(code, [title], [linenos], [language], [style]) destroy(pk) highlight(pk) list([page]) partial_update(pk, [title], [code], [linenos], [language], [style]) retrieve(pk) update(pk, code, [title], [linenos], [language], [style]) } users: { list([page]) retrieve(pk) } This will then load the schema, displaying the resulting Document . This Document includes all the available interactions that may be made against the API. To interact with the API, use the action command. This command requires a list of keys that are used to index into the link. $ coreapi action users list [ { \"url\": \"http://127.0.0.1:8000/users/2/\", \"id\": 2, \"username\": \"aziz\", \"snippets\": [] }, ... ] To inspect the underlying HTTP request and response, use the --debug flag. $ coreapi action users list --debug > GET /users/ HTTP/1.1 > Accept: application/vnd.coreapi+json, */* > Authorization: Basic bWF4Om1heA== > Host: 127.0.0.1 > User-Agent: coreapi < 200 OK < Allow: GET, HEAD, OPTIONS < Content-Type: application/json < Date: Thu, 30 Jun 2016 10:51:46 GMT < Server: WSGIServer/0.1 Python/2.7.10 < Vary: Accept, Cookie < < [{\"url\":\"http://127.0.0.1/users/2/\",\"id\":2,\"username\":\"aziz\",\"snippets\":[]},{\"url\":\"http://127.0.0.1/users/3/\",\"id\":3,\"username\":\"amy\",\"snippets\":[\"http://127.0.0.1/snippets/3/\"]},{\"url\":\"http://127.0.0.1/users/4/\",\"id\":4,\"username\":\"max\",\"snippets\":[\"http://127.0.0.1/snippets/4/\",\"http://127.0.0.1/snippets/5/\",\"http://127.0.0.1/snippets/6/\",\"http://127.0.0.1/snippets/7/\"]},{\"url\":\"http://127.0.0.1/users/5/\",\"id\":5,\"username\":\"jose\",\"snippets\":[]},{\"url\":\"http://127.0.0.1/users/6/\",\"id\":6,\"username\":\"admin\",\"snippets\":[\"http://127.0.0.1/snippets/1/\",\"http://127.0.0.1/snippets/2/\"]}] [ ... ] Some actions may include optional or required parameters. $ coreapi action users create --param username=example When using --param , the type of the input will be determined automatically. If you want to be more explicit about the parameter type then use --data for any null, numeric, boolean, list, or object inputs, and use --string for string inputs. $ coreapi action users edit --string username=tomchristie --data is_admin=true Authentication & headers The credentials command is used to manage the request Authentication: header. Any credentials added are always linked to a particular domain, so as to ensure that credentials are not leaked across differing APIs. The format for adding a new credential is: $ coreapi credentials add <domain> <credentials string> For instance: $ coreapi credentials add api.example.org \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" The optional --auth flag also allows you to add specific types of authentication, handling the encoding for you. Currently only \"basic\" is supported as an option here. For example: $ coreapi credentials add api.example.org tomchristie:foobar --auth basic You can also add specific request headers, using the headers command: $ coreapi headers add api.example.org x-api-version 2 For more information and a listing of the available subcommands use coreapi credentials --help or coreapi headers --help . Codecs By default the command line client only includes support for reading Core JSON schemas, however it includes a plugin system for installing additional codecs. $ pip install openapi-codec jsonhyperschema-codec hal-codec $ coreapi codecs show Codecs corejson application/vnd.coreapi+json encoding, decoding hal application/hal+json encoding, decoding openapi application/openapi+json encoding, decoding jsonhyperschema application/schema+json decoding json application/json data text text/* data Utilities The command line client includes functionality for bookmarking API URLs under a memorable name. For example, you can add a bookmark for the existing API, like so... $ coreapi bookmarks add accountmanagement There is also functionality for navigating forward or backward through the history of which API URLs have been accessed. $ coreapi history show $ coreapi history back For more information and a listing of the available subcommands use coreapi bookmarks --help or coreapi history --help . Other commands To display the current Document : $ coreapi show To reload the current Document from the network: $ coreapi reload To load a schema file from disk: $ coreapi load my-api-schema.json --format corejson To dump the current document to console in a given format: $ coreapi dump --format openapi To remove the current document, along with all currently saved history, credentials, headers and bookmarks: $ coreapi clear Python client library The coreapi Python package allows you to programmatically interact with any API that exposes a supported schema format. Getting started You'll need to install the coreapi package using pip before you can get started. $ pip install coreapi In order to start working with an API, we first need a Client instance. The client holds any configuration around which codecs and transports are supported when interacting with an API, which allows you to provide for more advanced kinds of behaviour. import coreapi client = coreapi.Client() Once we have a Client instance, we can fetch an API schema from the network. schema = client.get('https://api.example.org/') The object returned from this call will be a Document instance, which is a representation of the API schema. Authentication Typically you'll also want to provide some authentication credentials when instantiating the client. Token authentication The TokenAuthentication class can be used to support REST framework's built-in TokenAuthentication , as well as OAuth and JWT schemes. auth = coreapi.auth.TokenAuthentication( scheme='JWT', token='<token>' ) client = coreapi.Client(auth=auth) When using TokenAuthentication you'll probably need to implement a login flow using the CoreAPI client. A suggested pattern for this would be to initially make an unauthenticated client request to an \"obtain token\" endpoint For example, using the \"Django REST framework JWT\" package client = coreapi.Client() schema = client.get('https://api.example.org/') action = ['api-token-auth', 'create'] params = {\"username\": \"example\", \"password\": \"secret\"} result = client.action(schema, action, params) auth = coreapi.auth.TokenAuthentication( scheme='JWT', token=result['token'] ) client = coreapi.Client(auth=auth) Basic authentication The BasicAuthentication class can be used to support HTTP Basic Authentication. auth = coreapi.auth.BasicAuthentication( username='<username>', password='<password>' ) client = coreapi.Client(auth=auth) Interacting with the API Now that we have a client and have fetched our schema Document , we can now start to interact with the API: users = client.action(schema, ['users', 'list']) Some endpoints may include named parameters, which might be either optional or required: new_user = client.action(schema, ['users', 'create'], params={\"username\": \"max\"}) Codecs Codecs are responsible for encoding or decoding Documents. The decoding process is used by a client to take a bytestring of an API schema definition, and returning the Core API Document that represents that interface. A codec should be associated with a particular media type, such as 'application/coreapi+json' . This media type is used by the server in the response Content-Type header, in order to indicate what kind of data is being returned in the response. Configuring codecs The codecs that are available can be configured when instantiating a client. The keyword argument used here is decoders , because in the context of a client the codecs are only for decoding responses. In the following example we'll configure a client to only accept Core JSON and JSON responses. This will allow us to receive and decode a Core JSON schema, and subsequently to receive JSON responses made against the API. from coreapi import codecs, Client decoders = [codecs.CoreJSONCodec(), codecs.JSONCodec()] client = Client(decoders=decoders) Loading and saving schemas You can use a codec directly, in order to load an existing schema definition, and return the resulting Document . input_file = open('my-api-schema.json', 'rb') schema_definition = input_file.read() codec = codecs.CoreJSONCodec() schema = codec.load(schema_definition) You can also use a codec directly to generate a schema definition given a Document instance: schema_definition = codec.dump(schema) output_file = open('my-api-schema.json', 'rb') output_file.write(schema_definition) Transports Transports are responsible for making network requests. The set of transports that a client has installed determines which network protocols it is able to support. Currently the coreapi library only includes an HTTP/HTTPS transport, but other protocols can also be supported. Configuring transports The behavior of the network layer can be customized by configuring the transports that the client is instantiated with. import requests from coreapi import transports, Client credentials = {'api.example.org': 'Token 3bd44a009d16ff'} transports = transports.HTTPTransport(credentials=credentials) client = Client(transports=transports) More complex customizations can also be achieved, for example modifying the underlying requests.Session instance to attach transport adaptors that modify the outgoing requests. JavaScript Client Library The JavaScript client library allows you to interact with your API either from a browser, or using node. Installing the JavaScript client There are two separate JavaScript resources that you need to include in your HTML pages in order to use the JavaScript client library. These are a static coreapi.js file, which contains the code for the dynamic client library, and a templated schema.js resource, which exposes your API schema. First, install the API documentation views. These will include the schema resource that'll allow you to load the schema directly from an HTML page, without having to make an asynchronous AJAX call. from rest_framework.documentation import include_docs_urls urlpatterns = [ ... url(r'^docs/', include_docs_urls(title='My API service'), name='api-docs'), ] Once the API documentation URLs are installed, you'll be able to include both the required JavaScript resources. Note that the ordering of these two lines is important, as the schema loading requires CoreAPI to already be installed. <!-- Load the CoreAPI library and the API schema. /static/rest_framework/js/coreapi-0.1.1.js /docs/schema.js --> {% load static %} <script src=\"{% static 'rest_framework/js/coreapi-0.1.1.js' %}\"></script> <script src=\"{% url 'api-docs:schema-js' %}\"></script> The coreapi library, and the schema object will now both be available on the window instance. const coreapi = window.coreapi; const schema = window.schema; Instantiating a client In order to interact with the API you'll need a client instance. var client = new coreapi.Client(); Typically you'll also want to provide some authentication credentials when instantiating the client. Session authentication The SessionAuthentication class allows session cookies to provide the user authentication. You'll want to provide a standard HTML login flow, to allow the user to login, and then instantiate a client using session authentication: let auth = new coreapi.auth.SessionAuthentication({ csrfCookieName: 'csrftoken', csrfHeaderName: 'X-CSRFToken', }); let client = new coreapi.Client({auth: auth}); The authentication scheme will handle including a CSRF header in any outgoing requests for unsafe HTTP methods. Token authentication The TokenAuthentication class can be used to support REST framework's built-in TokenAuthentication , as well as OAuth and JWT schemes. let auth = new coreapi.auth.TokenAuthentication({ scheme: 'JWT', token: '<token>', }); let client = new coreapi.Client({auth: auth}); When using TokenAuthentication you'll probably need to implement a login flow using the CoreAPI client. A suggested pattern for this would be to initially make an unauthenticated client request to an \"obtain token\" endpoint For example, using the \"Django REST framework JWT\" package // Setup some globally accessible state window.client = new coreapi.Client(); window.loggedIn = false; function loginUser(username, password) { let action = [\"api-token-auth\", \"obtain-token\"]; let params = {username: \"example\", email: \"example@example.com\"}; client.action(schema, action, params).then(function(result) { // On success, instantiate an authenticated client. let auth = window.coreapi.auth.TokenAuthentication({ scheme: 'JWT', token: result['token'], }) window.client = coreapi.Client({auth: auth}); window.loggedIn = true; }).catch(function (error) { // Handle error case where eg. user provides incorrect credentials. }) } Basic authentication The BasicAuthentication class can be used to support HTTP Basic Authentication. let auth = new coreapi.auth.BasicAuthentication({ username: '<username>', password: '<password>', }) let client = new coreapi.Client({auth: auth}); Using the client Making requests: let action = [\"users\", \"list\"]; client.action(schema, action).then(function(result) { // Return value is in 'result' }) Including parameters: let action = [\"users\", \"create\"]; let params = {username: \"example\", email: \"example@example.com\"}; client.action(schema, action, params).then(function(result) { // Return value is in 'result' }) Handling errors: client.action(schema, action, params).then(function(result) { // Return value is in 'result' }).catch(function (error) { // Error value is in 'error' }) Installation with node The coreapi package is available on NPM. $ npm install coreapi $ node const coreapi = require('coreapi') You'll either want to include the API schema in your codebase directly, by copying it from the schema.js resource, or else load the schema asynchronously. For example: let client = new coreapi.Client(); let schema = null; client.get(\"https://api.example.org/\").then(function(data) { // Load a CoreJSON API schema. schema = data; console.log('schema loaded'); })","title":"API Clients"},{"location":"topics/api-clients/#api-clients","text":"An API client handles the underlying details of how network requests are made and how responses are decoded. They present the developer with an application interface to work against, rather than working directly with the network interface. The API clients documented here are not restricted to APIs built with Django REST framework. They can be used with any API that exposes a supported schema format. For example, the Heroku platform API exposes a schema in the JSON Hyperschema format. As a result, the Core API command line client and Python client library can be used to interact with the Heroku API .","title":"API Clients"},{"location":"topics/api-clients/#client-side-core-api","text":"Core API is a document specification that can be used to describe APIs. It can be used either server-side, as is done with REST framework's schema generation , or used client-side, as described here. When used client-side, Core API allows for dynamically driven client libraries that can interact with any API that exposes a supported schema or hypermedia format. Using a dynamically driven client has a number of advantages over interacting with an API by building HTTP requests directly.","title":"Client-side Core API"},{"location":"topics/api-clients/#more-meaningful-interaction","text":"API interactions are presented in a more meaningful way. You're working at the application interface layer, rather than the network interface layer.","title":"More meaningful interaction"},{"location":"topics/api-clients/#resilience-evolvability","text":"The client determines what endpoints are available, what parameters exist against each particular endpoint, and how HTTP requests are formed. This also allows for a degree of API evolvability. URLs can be modified without breaking existing clients, or more efficient encodings can be used on-the-wire, with clients transparently upgrading.","title":"Resilience &amp; evolvability"},{"location":"topics/api-clients/#self-descriptive-apis","text":"A dynamically driven client is able to present documentation on the API to the end user. This documentation allows the user to discover the available endpoints and parameters, and better understand the API they are working with. Because this documentation is driven by the API schema it will always be fully up to date with the most recently deployed version of the service.","title":"Self-descriptive APIs"},{"location":"topics/api-clients/#command-line-client","text":"The command line client allows you to inspect and interact with any API that exposes a supported schema format.","title":"Command line client"},{"location":"topics/api-clients/#getting-started","text":"To install the Core API command line client, use pip . Note that the command-line client is a separate package to the python client library. Make sure to install coreapi-cli . $ pip install coreapi-cli To start inspecting and interacting with an API the schema must first be loaded from the network. $ coreapi get http://api.example.org/ <Pastebin API \"http://127.0.0.1:8000/\"> snippets: { create(code, [title], [linenos], [language], [style]) destroy(pk) highlight(pk) list([page]) partial_update(pk, [title], [code], [linenos], [language], [style]) retrieve(pk) update(pk, code, [title], [linenos], [language], [style]) } users: { list([page]) retrieve(pk) } This will then load the schema, displaying the resulting Document . This Document includes all the available interactions that may be made against the API. To interact with the API, use the action command. This command requires a list of keys that are used to index into the link. $ coreapi action users list [ { \"url\": \"http://127.0.0.1:8000/users/2/\", \"id\": 2, \"username\": \"aziz\", \"snippets\": [] }, ... ] To inspect the underlying HTTP request and response, use the --debug flag. $ coreapi action users list --debug > GET /users/ HTTP/1.1 > Accept: application/vnd.coreapi+json, */* > Authorization: Basic bWF4Om1heA== > Host: 127.0.0.1 > User-Agent: coreapi < 200 OK < Allow: GET, HEAD, OPTIONS < Content-Type: application/json < Date: Thu, 30 Jun 2016 10:51:46 GMT < Server: WSGIServer/0.1 Python/2.7.10 < Vary: Accept, Cookie < < [{\"url\":\"http://127.0.0.1/users/2/\",\"id\":2,\"username\":\"aziz\",\"snippets\":[]},{\"url\":\"http://127.0.0.1/users/3/\",\"id\":3,\"username\":\"amy\",\"snippets\":[\"http://127.0.0.1/snippets/3/\"]},{\"url\":\"http://127.0.0.1/users/4/\",\"id\":4,\"username\":\"max\",\"snippets\":[\"http://127.0.0.1/snippets/4/\",\"http://127.0.0.1/snippets/5/\",\"http://127.0.0.1/snippets/6/\",\"http://127.0.0.1/snippets/7/\"]},{\"url\":\"http://127.0.0.1/users/5/\",\"id\":5,\"username\":\"jose\",\"snippets\":[]},{\"url\":\"http://127.0.0.1/users/6/\",\"id\":6,\"username\":\"admin\",\"snippets\":[\"http://127.0.0.1/snippets/1/\",\"http://127.0.0.1/snippets/2/\"]}] [ ... ] Some actions may include optional or required parameters. $ coreapi action users create --param username=example When using --param , the type of the input will be determined automatically. If you want to be more explicit about the parameter type then use --data for any null, numeric, boolean, list, or object inputs, and use --string for string inputs. $ coreapi action users edit --string username=tomchristie --data is_admin=true","title":"Getting started"},{"location":"topics/api-clients/#authentication-headers","text":"The credentials command is used to manage the request Authentication: header. Any credentials added are always linked to a particular domain, so as to ensure that credentials are not leaked across differing APIs. The format for adding a new credential is: $ coreapi credentials add <domain> <credentials string> For instance: $ coreapi credentials add api.example.org \"Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" The optional --auth flag also allows you to add specific types of authentication, handling the encoding for you. Currently only \"basic\" is supported as an option here. For example: $ coreapi credentials add api.example.org tomchristie:foobar --auth basic You can also add specific request headers, using the headers command: $ coreapi headers add api.example.org x-api-version 2 For more information and a listing of the available subcommands use coreapi credentials --help or coreapi headers --help .","title":"Authentication &amp; headers"},{"location":"topics/api-clients/#codecs","text":"By default the command line client only includes support for reading Core JSON schemas, however it includes a plugin system for installing additional codecs. $ pip install openapi-codec jsonhyperschema-codec hal-codec $ coreapi codecs show Codecs corejson application/vnd.coreapi+json encoding, decoding hal application/hal+json encoding, decoding openapi application/openapi+json encoding, decoding jsonhyperschema application/schema+json decoding json application/json data text text/* data","title":"Codecs"},{"location":"topics/api-clients/#utilities","text":"The command line client includes functionality for bookmarking API URLs under a memorable name. For example, you can add a bookmark for the existing API, like so... $ coreapi bookmarks add accountmanagement There is also functionality for navigating forward or backward through the history of which API URLs have been accessed. $ coreapi history show $ coreapi history back For more information and a listing of the available subcommands use coreapi bookmarks --help or coreapi history --help .","title":"Utilities"},{"location":"topics/api-clients/#other-commands","text":"To display the current Document : $ coreapi show To reload the current Document from the network: $ coreapi reload To load a schema file from disk: $ coreapi load my-api-schema.json --format corejson To dump the current document to console in a given format: $ coreapi dump --format openapi To remove the current document, along with all currently saved history, credentials, headers and bookmarks: $ coreapi clear","title":"Other commands"},{"location":"topics/api-clients/#python-client-library","text":"The coreapi Python package allows you to programmatically interact with any API that exposes a supported schema format.","title":"Python client library"},{"location":"topics/api-clients/#getting-started_1","text":"You'll need to install the coreapi package using pip before you can get started. $ pip install coreapi In order to start working with an API, we first need a Client instance. The client holds any configuration around which codecs and transports are supported when interacting with an API, which allows you to provide for more advanced kinds of behaviour. import coreapi client = coreapi.Client() Once we have a Client instance, we can fetch an API schema from the network. schema = client.get('https://api.example.org/') The object returned from this call will be a Document instance, which is a representation of the API schema.","title":"Getting started"},{"location":"topics/api-clients/#authentication","text":"Typically you'll also want to provide some authentication credentials when instantiating the client.","title":"Authentication"},{"location":"topics/api-clients/#token-authentication","text":"The TokenAuthentication class can be used to support REST framework's built-in TokenAuthentication , as well as OAuth and JWT schemes. auth = coreapi.auth.TokenAuthentication( scheme='JWT', token='<token>' ) client = coreapi.Client(auth=auth) When using TokenAuthentication you'll probably need to implement a login flow using the CoreAPI client. A suggested pattern for this would be to initially make an unauthenticated client request to an \"obtain token\" endpoint For example, using the \"Django REST framework JWT\" package client = coreapi.Client() schema = client.get('https://api.example.org/') action = ['api-token-auth', 'create'] params = {\"username\": \"example\", \"password\": \"secret\"} result = client.action(schema, action, params) auth = coreapi.auth.TokenAuthentication( scheme='JWT', token=result['token'] ) client = coreapi.Client(auth=auth)","title":"Token authentication"},{"location":"topics/api-clients/#basic-authentication","text":"The BasicAuthentication class can be used to support HTTP Basic Authentication. auth = coreapi.auth.BasicAuthentication( username='<username>', password='<password>' ) client = coreapi.Client(auth=auth)","title":"Basic authentication"},{"location":"topics/api-clients/#interacting-with-the-api","text":"Now that we have a client and have fetched our schema Document , we can now start to interact with the API: users = client.action(schema, ['users', 'list']) Some endpoints may include named parameters, which might be either optional or required: new_user = client.action(schema, ['users', 'create'], params={\"username\": \"max\"})","title":"Interacting with the API"},{"location":"topics/api-clients/#codecs_1","text":"Codecs are responsible for encoding or decoding Documents. The decoding process is used by a client to take a bytestring of an API schema definition, and returning the Core API Document that represents that interface. A codec should be associated with a particular media type, such as 'application/coreapi+json' . This media type is used by the server in the response Content-Type header, in order to indicate what kind of data is being returned in the response.","title":"Codecs"},{"location":"topics/api-clients/#configuring-codecs","text":"The codecs that are available can be configured when instantiating a client. The keyword argument used here is decoders , because in the context of a client the codecs are only for decoding responses. In the following example we'll configure a client to only accept Core JSON and JSON responses. This will allow us to receive and decode a Core JSON schema, and subsequently to receive JSON responses made against the API. from coreapi import codecs, Client decoders = [codecs.CoreJSONCodec(), codecs.JSONCodec()] client = Client(decoders=decoders)","title":"Configuring codecs"},{"location":"topics/api-clients/#loading-and-saving-schemas","text":"You can use a codec directly, in order to load an existing schema definition, and return the resulting Document . input_file = open('my-api-schema.json', 'rb') schema_definition = input_file.read() codec = codecs.CoreJSONCodec() schema = codec.load(schema_definition) You can also use a codec directly to generate a schema definition given a Document instance: schema_definition = codec.dump(schema) output_file = open('my-api-schema.json', 'rb') output_file.write(schema_definition)","title":"Loading and saving schemas"},{"location":"topics/api-clients/#transports","text":"Transports are responsible for making network requests. The set of transports that a client has installed determines which network protocols it is able to support. Currently the coreapi library only includes an HTTP/HTTPS transport, but other protocols can also be supported.","title":"Transports"},{"location":"topics/api-clients/#configuring-transports","text":"The behavior of the network layer can be customized by configuring the transports that the client is instantiated with. import requests from coreapi import transports, Client credentials = {'api.example.org': 'Token 3bd44a009d16ff'} transports = transports.HTTPTransport(credentials=credentials) client = Client(transports=transports) More complex customizations can also be achieved, for example modifying the underlying requests.Session instance to attach transport adaptors that modify the outgoing requests.","title":"Configuring transports"},{"location":"topics/api-clients/#javascript-client-library","text":"The JavaScript client library allows you to interact with your API either from a browser, or using node.","title":"JavaScript Client Library"},{"location":"topics/api-clients/#installing-the-javascript-client","text":"There are two separate JavaScript resources that you need to include in your HTML pages in order to use the JavaScript client library. These are a static coreapi.js file, which contains the code for the dynamic client library, and a templated schema.js resource, which exposes your API schema. First, install the API documentation views. These will include the schema resource that'll allow you to load the schema directly from an HTML page, without having to make an asynchronous AJAX call. from rest_framework.documentation import include_docs_urls urlpatterns = [ ... url(r'^docs/', include_docs_urls(title='My API service'), name='api-docs'), ] Once the API documentation URLs are installed, you'll be able to include both the required JavaScript resources. Note that the ordering of these two lines is important, as the schema loading requires CoreAPI to already be installed. <!-- Load the CoreAPI library and the API schema. /static/rest_framework/js/coreapi-0.1.1.js /docs/schema.js --> {% load static %} <script src=\"{% static 'rest_framework/js/coreapi-0.1.1.js' %}\"></script> <script src=\"{% url 'api-docs:schema-js' %}\"></script> The coreapi library, and the schema object will now both be available on the window instance. const coreapi = window.coreapi; const schema = window.schema;","title":"Installing the JavaScript client"},{"location":"topics/api-clients/#instantiating-a-client","text":"In order to interact with the API you'll need a client instance. var client = new coreapi.Client(); Typically you'll also want to provide some authentication credentials when instantiating the client.","title":"Instantiating a client"},{"location":"topics/api-clients/#session-authentication","text":"The SessionAuthentication class allows session cookies to provide the user authentication. You'll want to provide a standard HTML login flow, to allow the user to login, and then instantiate a client using session authentication: let auth = new coreapi.auth.SessionAuthentication({ csrfCookieName: 'csrftoken', csrfHeaderName: 'X-CSRFToken', }); let client = new coreapi.Client({auth: auth}); The authentication scheme will handle including a CSRF header in any outgoing requests for unsafe HTTP methods.","title":"Session authentication"},{"location":"topics/api-clients/#token-authentication_1","text":"The TokenAuthentication class can be used to support REST framework's built-in TokenAuthentication , as well as OAuth and JWT schemes. let auth = new coreapi.auth.TokenAuthentication({ scheme: 'JWT', token: '<token>', }); let client = new coreapi.Client({auth: auth}); When using TokenAuthentication you'll probably need to implement a login flow using the CoreAPI client. A suggested pattern for this would be to initially make an unauthenticated client request to an \"obtain token\" endpoint For example, using the \"Django REST framework JWT\" package // Setup some globally accessible state window.client = new coreapi.Client(); window.loggedIn = false; function loginUser(username, password) { let action = [\"api-token-auth\", \"obtain-token\"]; let params = {username: \"example\", email: \"example@example.com\"}; client.action(schema, action, params).then(function(result) { // On success, instantiate an authenticated client. let auth = window.coreapi.auth.TokenAuthentication({ scheme: 'JWT', token: result['token'], }) window.client = coreapi.Client({auth: auth}); window.loggedIn = true; }).catch(function (error) { // Handle error case where eg. user provides incorrect credentials. }) }","title":"Token authentication"},{"location":"topics/api-clients/#basic-authentication_1","text":"The BasicAuthentication class can be used to support HTTP Basic Authentication. let auth = new coreapi.auth.BasicAuthentication({ username: '<username>', password: '<password>', }) let client = new coreapi.Client({auth: auth});","title":"Basic authentication"},{"location":"topics/api-clients/#using-the-client","text":"Making requests: let action = [\"users\", \"list\"]; client.action(schema, action).then(function(result) { // Return value is in 'result' }) Including parameters: let action = [\"users\", \"create\"]; let params = {username: \"example\", email: \"example@example.com\"}; client.action(schema, action, params).then(function(result) { // Return value is in 'result' }) Handling errors: client.action(schema, action, params).then(function(result) { // Return value is in 'result' }).catch(function (error) { // Error value is in 'error' })","title":"Using the client"},{"location":"topics/api-clients/#installation-with-node","text":"The coreapi package is available on NPM. $ npm install coreapi $ node const coreapi = require('coreapi') You'll either want to include the API schema in your codebase directly, by copying it from the schema.js resource, or else load the schema asynchronously. For example: let client = new coreapi.Client(); let schema = null; client.get(\"https://api.example.org/\").then(function(data) { // Load a CoreJSON API schema. schema = data; console.log('schema loaded'); })","title":"Installation with node"},{"location":"topics/browsable-api/","text":"The Browsable API It is a profoundly erroneous truism... that we should cultivate the habit of thinking of what we are doing. The precise opposite is the case. Civilization advances by extending the number of important operations which we can perform without thinking about them. \u2014 Alfred North Whitehead , An Introduction to Mathematics (1911) API may stand for Application Programming Interface, but humans have to be able to read the APIs, too; someone has to do the programming. Django REST Framework supports generating human-friendly HTML output for each resource when the HTML format is requested. These pages allow for easy browsing of resources, as well as forms for submitting data to the resources using POST , PUT , and DELETE . URLs If you include fully-qualified URLs in your resource output, they will be 'urlized' and made clickable for easy browsing by humans. The rest_framework package includes a reverse helper for this purpose. Formats By default, the API will return the format specified by the headers, which in the case of the browser is HTML. The format can be specified using ?format= in the request, so you can look at the raw JSON response in a browser by adding ?format=json to the URL. There are helpful extensions for viewing JSON in Firefox and Chrome . Customizing The browsable API is built with Twitter's Bootstrap (v 3.3.5), making it easy to customize the look-and-feel. To customize the default style, create a template called rest_framework/api.html that extends from rest_framework/base.html . For example: templates/rest_framework/api.html {% extends \"rest_framework/base.html\" %} ... # Override blocks with required customizations Overriding the default theme To replace the default theme, add a bootstrap_theme block to your api.html and insert a link to the desired Bootstrap theme css file. This will completely replace the included theme. {% block bootstrap_theme %} <link rel=\"stylesheet\" href=\"/path/to/my/bootstrap.css\" type=\"text/css\"> {% endblock %} Suitable pre-made replacement themes are available at Bootswatch . To use any of the Bootswatch themes, simply download the theme's bootstrap.min.css file, add it to your project, and replace the default one as described above. You can also change the navbar variant, which by default is navbar-inverse , using the bootstrap_navbar_variant block. The empty {% block bootstrap_navbar_variant %}{% endblock %} will use the original Bootstrap navbar style. Full example: {% extends \"rest_framework/base.html\" %} {% block bootstrap_theme %} <link rel=\"stylesheet\" href=\"https://bootswatch.com/flatly/bootstrap.min.css\" type=\"text/css\"> {% endblock %} {% block bootstrap_navbar_variant %}{% endblock %} For more specific CSS tweaks than simply overriding the default bootstrap theme you can override the style block. Screenshot of the bootswatch 'Cerulean' theme Screenshot of the bootswatch 'Slate' theme Blocks All of the blocks available in the browsable API base template that can be used in your api.html . body - The entire html <body> . bodyclass - Class attribute for the <body> tag, empty by default. bootstrap_theme - CSS for the Bootstrap theme. bootstrap_navbar_variant - CSS class for the navbar. branding - Branding section of the navbar, see Bootstrap components . breadcrumbs - Links showing resource nesting, allowing the user to go back up the resources. It's recommended to preserve these, but they can be overridden using the breadcrumbs block. script - JavaScript files for the page. style - CSS stylesheets for the page. title - Title of the page. userlinks - This is a list of links on the right of the header, by default containing login/logout links. To add links instead of replace, use {{ block.super }} to preserve the authentication links. Components All of the standard Bootstrap components are available. Tooltips The browsable API makes use of the Bootstrap tooltips component. Any element with the js-tooltip class and a title attribute has that title content will display a tooltip on hover events. Login Template To add branding and customize the look-and-feel of the login template, create a template called login.html and add it to your project, eg: templates/rest_framework/login.html . The template should extend from rest_framework/login_base.html . You can add your site name or branding by including the branding block: {% extends \"rest_framework/login_base.html\" %} {% block branding %} <h3 style=\"margin: 0 0 20px;\">My Site Name</h3> {% endblock %} You can also customize the style by adding the bootstrap_theme or style block similar to api.html . Advanced Customization Context The context that's available to the template: allowed_methods : A list of methods allowed by the resource api_settings : The API settings available_formats : A list of formats allowed by the resource breadcrumblist : The list of links following the chain of nested resources content : The content of the API response description : The description of the resource, generated from its docstring name : The name of the resource post_form : A form instance for use by the POST form (if allowed) put_form : A form instance for use by the PUT form (if allowed) display_edit_forms : A boolean indicating whether or not POST, PUT and PATCH forms will be displayed request : The request object response : The response object version : The version of Django REST Framework view : The view handling the request FORMAT_PARAM : The view can accept a format override METHOD_PARAM : The view can accept a method override You can override the BrowsableAPIRenderer.get_context() method to customise the context that gets passed to the template. Not using base.html For more advanced customization, such as not having a Bootstrap basis or tighter integration with the rest of your site, you can simply choose not to have api.html extend base.html . Then the page content and capabilities are entirely up to you. Handling ChoiceField with large numbers of items. When a relationship or ChoiceField has too many items, rendering the widget containing all the options can become very slow, and cause the browsable API rendering to perform poorly. The simplest option in this case is to replace the select input with a standard text input. For example: author = serializers.HyperlinkedRelatedField( queryset=User.objects.all(), style={'base_template': 'input.html'} ) Autocomplete An alternative, but more complex option would be to replace the input with an autocomplete widget, that only loads and renders a subset of the available options as needed. If you need to do this you'll need to do some work to build a custom autocomplete HTML template yourself. There are a variety of packages for autocomplete widgets , such as django-autocomplete-light , that you may want to refer to. Note that you will not be able to simply include these components as standard widgets, but will need to write the HTML template explicitly. This is because REST framework 3.0 no longer supports the widget keyword argument since it now uses templated HTML generation.","title":"The Browsable API"},{"location":"topics/browsable-api/#the-browsable-api","text":"It is a profoundly erroneous truism... that we should cultivate the habit of thinking of what we are doing. The precise opposite is the case. Civilization advances by extending the number of important operations which we can perform without thinking about them. \u2014 Alfred North Whitehead , An Introduction to Mathematics (1911) API may stand for Application Programming Interface, but humans have to be able to read the APIs, too; someone has to do the programming. Django REST Framework supports generating human-friendly HTML output for each resource when the HTML format is requested. These pages allow for easy browsing of resources, as well as forms for submitting data to the resources using POST , PUT , and DELETE .","title":"The Browsable API"},{"location":"topics/browsable-api/#urls","text":"If you include fully-qualified URLs in your resource output, they will be 'urlized' and made clickable for easy browsing by humans. The rest_framework package includes a reverse helper for this purpose.","title":"URLs"},{"location":"topics/browsable-api/#formats","text":"By default, the API will return the format specified by the headers, which in the case of the browser is HTML. The format can be specified using ?format= in the request, so you can look at the raw JSON response in a browser by adding ?format=json to the URL. There are helpful extensions for viewing JSON in Firefox and Chrome .","title":"Formats"},{"location":"topics/browsable-api/#customizing","text":"The browsable API is built with Twitter's Bootstrap (v 3.3.5), making it easy to customize the look-and-feel. To customize the default style, create a template called rest_framework/api.html that extends from rest_framework/base.html . For example: templates/rest_framework/api.html {% extends \"rest_framework/base.html\" %} ... # Override blocks with required customizations","title":"Customizing"},{"location":"topics/browsable-api/#overriding-the-default-theme","text":"To replace the default theme, add a bootstrap_theme block to your api.html and insert a link to the desired Bootstrap theme css file. This will completely replace the included theme. {% block bootstrap_theme %} <link rel=\"stylesheet\" href=\"/path/to/my/bootstrap.css\" type=\"text/css\"> {% endblock %} Suitable pre-made replacement themes are available at Bootswatch . To use any of the Bootswatch themes, simply download the theme's bootstrap.min.css file, add it to your project, and replace the default one as described above. You can also change the navbar variant, which by default is navbar-inverse , using the bootstrap_navbar_variant block. The empty {% block bootstrap_navbar_variant %}{% endblock %} will use the original Bootstrap navbar style. Full example: {% extends \"rest_framework/base.html\" %} {% block bootstrap_theme %} <link rel=\"stylesheet\" href=\"https://bootswatch.com/flatly/bootstrap.min.css\" type=\"text/css\"> {% endblock %} {% block bootstrap_navbar_variant %}{% endblock %} For more specific CSS tweaks than simply overriding the default bootstrap theme you can override the style block. Screenshot of the bootswatch 'Cerulean' theme Screenshot of the bootswatch 'Slate' theme","title":"Overriding the default theme"},{"location":"topics/browsable-api/#blocks","text":"All of the blocks available in the browsable API base template that can be used in your api.html . body - The entire html <body> . bodyclass - Class attribute for the <body> tag, empty by default. bootstrap_theme - CSS for the Bootstrap theme. bootstrap_navbar_variant - CSS class for the navbar. branding - Branding section of the navbar, see Bootstrap components . breadcrumbs - Links showing resource nesting, allowing the user to go back up the resources. It's recommended to preserve these, but they can be overridden using the breadcrumbs block. script - JavaScript files for the page. style - CSS stylesheets for the page. title - Title of the page. userlinks - This is a list of links on the right of the header, by default containing login/logout links. To add links instead of replace, use {{ block.super }} to preserve the authentication links.","title":"Blocks"},{"location":"topics/browsable-api/#components","text":"All of the standard Bootstrap components are available.","title":"Components"},{"location":"topics/browsable-api/#tooltips","text":"The browsable API makes use of the Bootstrap tooltips component. Any element with the js-tooltip class and a title attribute has that title content will display a tooltip on hover events.","title":"Tooltips"},{"location":"topics/browsable-api/#login-template","text":"To add branding and customize the look-and-feel of the login template, create a template called login.html and add it to your project, eg: templates/rest_framework/login.html . The template should extend from rest_framework/login_base.html . You can add your site name or branding by including the branding block: {% extends \"rest_framework/login_base.html\" %} {% block branding %} <h3 style=\"margin: 0 0 20px;\">My Site Name</h3> {% endblock %} You can also customize the style by adding the bootstrap_theme or style block similar to api.html .","title":"Login Template"},{"location":"topics/browsable-api/#advanced-customization","text":"","title":"Advanced Customization"},{"location":"topics/browsable-api/#context","text":"The context that's available to the template: allowed_methods : A list of methods allowed by the resource api_settings : The API settings available_formats : A list of formats allowed by the resource breadcrumblist : The list of links following the chain of nested resources content : The content of the API response description : The description of the resource, generated from its docstring name : The name of the resource post_form : A form instance for use by the POST form (if allowed) put_form : A form instance for use by the PUT form (if allowed) display_edit_forms : A boolean indicating whether or not POST, PUT and PATCH forms will be displayed request : The request object response : The response object version : The version of Django REST Framework view : The view handling the request FORMAT_PARAM : The view can accept a format override METHOD_PARAM : The view can accept a method override You can override the BrowsableAPIRenderer.get_context() method to customise the context that gets passed to the template.","title":"Context"},{"location":"topics/browsable-api/#not-using-basehtml","text":"For more advanced customization, such as not having a Bootstrap basis or tighter integration with the rest of your site, you can simply choose not to have api.html extend base.html . Then the page content and capabilities are entirely up to you.","title":"Not using base.html"},{"location":"topics/browsable-api/#handling-choicefield-with-large-numbers-of-items","text":"When a relationship or ChoiceField has too many items, rendering the widget containing all the options can become very slow, and cause the browsable API rendering to perform poorly. The simplest option in this case is to replace the select input with a standard text input. For example: author = serializers.HyperlinkedRelatedField( queryset=User.objects.all(), style={'base_template': 'input.html'} )","title":"Handling ChoiceField with large numbers of items."},{"location":"topics/browsable-api/#autocomplete","text":"An alternative, but more complex option would be to replace the input with an autocomplete widget, that only loads and renders a subset of the available options as needed. If you need to do this you'll need to do some work to build a custom autocomplete HTML template yourself. There are a variety of packages for autocomplete widgets , such as django-autocomplete-light , that you may want to refer to. Note that you will not be able to simply include these components as standard widgets, but will need to write the HTML template explicitly. This is because REST framework 3.0 no longer supports the widget keyword argument since it now uses templated HTML generation.","title":"Autocomplete"},{"location":"topics/browser-enhancements/","text":"Browser enhancements \"There are two noncontroversial uses for overloaded POST. The first is to simulate HTTP's uniform interface for clients like web browsers that don't support PUT or DELETE\" \u2014 RESTful Web Services , Leonard Richardson & Sam Ruby. In order to allow the browsable API to function, there are a couple of browser enhancements that REST framework needs to provide. As of version 3.3.0 onwards these are enabled with javascript, using the ajax-form library. Browser based PUT, DELETE, etc... The AJAX form library supports browser-based PUT , DELETE and other methods on HTML forms. After including the library, use the data-method attribute on the form, like so: <form action=\"/\" data-method=\"PUT\"> <input name='foo'/> ... </form> Note that prior to 3.3.0, this support was server-side rather than javascript based. The method overloading style (as used in Ruby on Rails ) is no longer supported due to subtle issues that it introduces in request parsing. Browser based submission of non-form content Browser-based submission of content types such as JSON are supported by the AJAX form library , using form fields with data-override='content-type' and data-override='content' attributes. For example: <form action=\"/\"> <input data-override='content-type' value='application/json' type='hidden'/> <textarea data-override='content'>{}</textarea> <input type=\"submit\"/> </form> Note that prior to 3.3.0, this support was server-side rather than javascript based. URL based format suffixes REST framework can take ?format=json style URL parameters, which can be a useful shortcut for determining which content type should be returned from the view. This behavior is controlled using the URL_FORMAT_OVERRIDE setting. HTTP header based method overriding Prior to version 3.3.0 the semi extension header X-HTTP-Method-Override was supported for overriding the request method. This behavior is no longer in core, but can be adding if needed using middleware. For example: METHOD_OVERRIDE_HEADER = 'HTTP_X_HTTP_METHOD_OVERRIDE' class MethodOverrideMiddleware: def __init__(self, get_response): self.get_response = get_response def __call__(self, request): if request.method == 'POST' and METHOD_OVERRIDE_HEADER in request.META: request.method = request.META[METHOD_OVERRIDE_HEADER] return self.get_response(request) URL based accept headers Until version 3.3.0 REST framework included built-in support for ?accept=application/json style URL parameters, which would allow the Accept header to be overridden. Since the introduction of the content negotiation API this behavior is no longer included in core, but may be added using a custom content negotiation class, if needed. For example: class AcceptQueryParamOverride() def get_accept_list(self, request): header = request.META.get('HTTP_ACCEPT', '*/*') header = request.query_params.get('_accept', header) return [token.strip() for token in header.split(',')] Doesn't HTML5 support PUT and DELETE forms? Nope. It was at one point intended to support PUT and DELETE forms, but was later dropped from the spec . There remains ongoing discussion about adding support for PUT and DELETE , as well as how to support content types other than form-encoded data.","title":"Browser Enhancements"},{"location":"topics/browser-enhancements/#browser-enhancements","text":"\"There are two noncontroversial uses for overloaded POST. The first is to simulate HTTP's uniform interface for clients like web browsers that don't support PUT or DELETE\" \u2014 RESTful Web Services , Leonard Richardson & Sam Ruby. In order to allow the browsable API to function, there are a couple of browser enhancements that REST framework needs to provide. As of version 3.3.0 onwards these are enabled with javascript, using the ajax-form library.","title":"Browser enhancements"},{"location":"topics/browser-enhancements/#browser-based-put-delete-etc","text":"The AJAX form library supports browser-based PUT , DELETE and other methods on HTML forms. After including the library, use the data-method attribute on the form, like so: <form action=\"/\" data-method=\"PUT\"> <input name='foo'/> ... </form> Note that prior to 3.3.0, this support was server-side rather than javascript based. The method overloading style (as used in Ruby on Rails ) is no longer supported due to subtle issues that it introduces in request parsing.","title":"Browser based PUT, DELETE, etc..."},{"location":"topics/browser-enhancements/#browser-based-submission-of-non-form-content","text":"Browser-based submission of content types such as JSON are supported by the AJAX form library , using form fields with data-override='content-type' and data-override='content' attributes. For example: <form action=\"/\"> <input data-override='content-type' value='application/json' type='hidden'/> <textarea data-override='content'>{}</textarea> <input type=\"submit\"/> </form> Note that prior to 3.3.0, this support was server-side rather than javascript based.","title":"Browser based submission of non-form content"},{"location":"topics/browser-enhancements/#url-based-format-suffixes","text":"REST framework can take ?format=json style URL parameters, which can be a useful shortcut for determining which content type should be returned from the view. This behavior is controlled using the URL_FORMAT_OVERRIDE setting.","title":"URL based format suffixes"},{"location":"topics/browser-enhancements/#http-header-based-method-overriding","text":"Prior to version 3.3.0 the semi extension header X-HTTP-Method-Override was supported for overriding the request method. This behavior is no longer in core, but can be adding if needed using middleware. For example: METHOD_OVERRIDE_HEADER = 'HTTP_X_HTTP_METHOD_OVERRIDE' class MethodOverrideMiddleware: def __init__(self, get_response): self.get_response = get_response def __call__(self, request): if request.method == 'POST' and METHOD_OVERRIDE_HEADER in request.META: request.method = request.META[METHOD_OVERRIDE_HEADER] return self.get_response(request)","title":"HTTP header based method overriding"},{"location":"topics/browser-enhancements/#url-based-accept-headers","text":"Until version 3.3.0 REST framework included built-in support for ?accept=application/json style URL parameters, which would allow the Accept header to be overridden. Since the introduction of the content negotiation API this behavior is no longer included in core, but may be added using a custom content negotiation class, if needed. For example: class AcceptQueryParamOverride() def get_accept_list(self, request): header = request.META.get('HTTP_ACCEPT', '*/*') header = request.query_params.get('_accept', header) return [token.strip() for token in header.split(',')]","title":"URL based accept headers"},{"location":"topics/browser-enhancements/#doesnt-html5-support-put-and-delete-forms","text":"Nope. It was at one point intended to support PUT and DELETE forms, but was later dropped from the spec . There remains ongoing discussion about adding support for PUT and DELETE , as well as how to support content types other than form-encoded data.","title":"Doesn't HTML5 support PUT and DELETE forms?"},{"location":"topics/documenting-your-api/","text":"Documenting your API A REST API should spend almost all of its descriptive effort in defining the media type(s) used for representing resources and driving application state. \u2014 Roy Fielding, REST APIs must be hypertext driven REST framework provides built-in support for generating OpenAPI schemas, which can be used with tools that allow you to build API documentation. There are also a number of great third-party documentation packages available. Generating documentation from OpenAPI schemas There are a number of packages available that allow you to generate HTML documentation pages from OpenAPI schemas. Two popular options are Swagger UI and ReDoc . Both require little more than the location of your static schema file or dynamic SchemaView endpoint. A minimal example with Swagger UI Assuming you've followed the example from the schemas documentation for routing a dynamic SchemaView , a minimal Django template for using Swagger UI might be this: <!DOCTYPE html> <html> <head> <title>Swagger</title> <meta charset=\"utf-8\"/> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"stylesheet\" type=\"text/css\" href=\"//unpkg.com/swagger-ui-dist@3/swagger-ui.css\" /> </head> <body> <div id=\"swagger-ui\"></div> <script src=\"//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js\"></script> <script> const ui = SwaggerUIBundle({ url: \"{% url schema_url %}\", dom_id: '#swagger-ui', presets: [ SwaggerUIBundle.presets.apis, SwaggerUIBundle.SwaggerUIStandalonePreset ], layout: \"BaseLayout\", requestInterceptor: (request) => { request.headers['X-CSRFToken'] = \"{{ csrf_token }}\" return request; } }) </script> </body> </html> Save this in your templates folder as swagger-ui.html . Then route a TemplateView in your project's URL conf: from django.views.generic import TemplateView urlpatterns = [ # ... # Route TemplateView to serve Swagger UI template. # * Provide `extra_context` with view name of `SchemaView`. path('swagger-ui/', TemplateView.as_view( template_name='swagger-ui.html', extra_context={'schema_url':'openapi-schema'} ), name='swagger-ui'), ] See the Swagger UI documentation for advanced usage. A minimal example with ReDoc. Assuming you've followed the example from the schemas documentation for routing a dynamic SchemaView , a minimal Django template for using ReDoc might be this: <!DOCTYPE html> <html> <head> <title>ReDoc</title> <!-- needed for adaptive design --> <meta charset=\"utf-8\"/> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"> <!-- ReDoc doesn't change outer page styles --> <style> body { margin: 0; padding: 0; } </style> </head> <body> <redoc spec-url='{% url schema_url %}'></redoc> <script src=\"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\"> </script> </body> </html> Save this in your templates folder as redoc.html . Then route a TemplateView in your project's URL conf: from django.views.generic import TemplateView urlpatterns = [ # ... # Route TemplateView to serve the ReDoc template. # * Provide `extra_context` with view name of `SchemaView`. path('redoc/', TemplateView.as_view( template_name='redoc.html', extra_context={'schema_url':'openapi-schema'} ), name='redoc'), ] See the ReDoc documentation for advanced usage. Third party packages There are a number of mature third-party packages for providing API documentation. drf-yasg - Yet Another Swagger Generator drf-yasg is a Swagger generation tool implemented without using the schema generation provided by Django Rest Framework. It aims to implement as much of the OpenAPI specification as possible - nested schemas, named models, response bodies, enum/pattern/min/max validators, form parameters, etc. - and to generate documents usable with code generation tools like swagger-codegen . This also translates into a very useful interactive documentation viewer in the form of swagger-ui : Self describing APIs The browsable API that REST framework provides makes it possible for your API to be entirely self describing. The documentation for each API endpoint can be provided simply by visiting the URL in your browser. Setting the title The title that is used in the browsable API is generated from the view class name or function name. Any trailing View or ViewSet suffix is stripped, and the string is whitespace separated on uppercase/lowercase boundaries or underscores. For example, the view UserListView , will be named User List when presented in the browsable API. When working with viewsets, an appropriate suffix is appended to each generated view. For example, the view set UserViewSet will generate views named User List and User Instance . Setting the description The description in the browsable API is generated from the docstring of the view or viewset. If the python Markdown library is installed, then markdown syntax may be used in the docstring, and will be converted to HTML in the browsable API. For example: class AccountListView(views.APIView): \"\"\" Returns a list of all **active** accounts in the system. For more details on how accounts are activated please [see here][ref]. [ref]: http://example.com/activating-accounts \"\"\" Note that when using viewsets the basic docstring is used for all generated views. To provide descriptions for each view, such as for the list and retrieve views, use docstring sections as described in Schemas as documentation: Examples . The OPTIONS method REST framework APIs also support programmatically accessible descriptions, using the OPTIONS HTTP method. A view will respond to an OPTIONS request with metadata including the name, description, and the various media types it accepts and responds with. When using the generic views, any OPTIONS requests will additionally respond with metadata regarding any POST or PUT actions available, describing which fields are on the serializer. You can modify the response behavior to OPTIONS requests by overriding the options view method and/or by providing a custom Metadata class. For example: def options(self, request, *args, **kwargs): \"\"\" Don't include the view description in OPTIONS responses. \"\"\" meta = self.metadata_class() data = meta.determine_metadata(request, self) data.pop('description') return data See the Metadata docs for more details. The hypermedia approach To be fully RESTful an API should present its available actions as hypermedia controls in the responses that it sends. In this approach, rather than documenting the available API endpoints up front, the description instead concentrates on the media types that are used. The available actions that may be taken on any given URL are not strictly fixed, but are instead made available by the presence of link and form controls in the returned document. To implement a hypermedia API you'll need to decide on an appropriate media type for the API, and implement a custom renderer and parser for that media type. The REST, Hypermedia & HATEOAS section of the documentation includes pointers to background reading, as well as links to various hypermedia formats.","title":"Documenting your API"},{"location":"topics/documenting-your-api/#documenting-your-api","text":"A REST API should spend almost all of its descriptive effort in defining the media type(s) used for representing resources and driving application state. \u2014 Roy Fielding, REST APIs must be hypertext driven REST framework provides built-in support for generating OpenAPI schemas, which can be used with tools that allow you to build API documentation. There are also a number of great third-party documentation packages available.","title":"Documenting your API"},{"location":"topics/documenting-your-api/#generating-documentation-from-openapi-schemas","text":"There are a number of packages available that allow you to generate HTML documentation pages from OpenAPI schemas. Two popular options are Swagger UI and ReDoc . Both require little more than the location of your static schema file or dynamic SchemaView endpoint.","title":"Generating documentation from OpenAPI schemas"},{"location":"topics/documenting-your-api/#a-minimal-example-with-swagger-ui","text":"Assuming you've followed the example from the schemas documentation for routing a dynamic SchemaView , a minimal Django template for using Swagger UI might be this: <!DOCTYPE html> <html> <head> <title>Swagger</title> <meta charset=\"utf-8\"/> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"stylesheet\" type=\"text/css\" href=\"//unpkg.com/swagger-ui-dist@3/swagger-ui.css\" /> </head> <body> <div id=\"swagger-ui\"></div> <script src=\"//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js\"></script> <script> const ui = SwaggerUIBundle({ url: \"{% url schema_url %}\", dom_id: '#swagger-ui', presets: [ SwaggerUIBundle.presets.apis, SwaggerUIBundle.SwaggerUIStandalonePreset ], layout: \"BaseLayout\", requestInterceptor: (request) => { request.headers['X-CSRFToken'] = \"{{ csrf_token }}\" return request; } }) </script> </body> </html> Save this in your templates folder as swagger-ui.html . Then route a TemplateView in your project's URL conf: from django.views.generic import TemplateView urlpatterns = [ # ... # Route TemplateView to serve Swagger UI template. # * Provide `extra_context` with view name of `SchemaView`. path('swagger-ui/', TemplateView.as_view( template_name='swagger-ui.html', extra_context={'schema_url':'openapi-schema'} ), name='swagger-ui'), ] See the Swagger UI documentation for advanced usage.","title":"A minimal example with Swagger UI"},{"location":"topics/documenting-your-api/#a-minimal-example-with-redoc","text":"Assuming you've followed the example from the schemas documentation for routing a dynamic SchemaView , a minimal Django template for using ReDoc might be this: <!DOCTYPE html> <html> <head> <title>ReDoc</title> <!-- needed for adaptive design --> <meta charset=\"utf-8\"/> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\"> <!-- ReDoc doesn't change outer page styles --> <style> body { margin: 0; padding: 0; } </style> </head> <body> <redoc spec-url='{% url schema_url %}'></redoc> <script src=\"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\"> </script> </body> </html> Save this in your templates folder as redoc.html . Then route a TemplateView in your project's URL conf: from django.views.generic import TemplateView urlpatterns = [ # ... # Route TemplateView to serve the ReDoc template. # * Provide `extra_context` with view name of `SchemaView`. path('redoc/', TemplateView.as_view( template_name='redoc.html', extra_context={'schema_url':'openapi-schema'} ), name='redoc'), ] See the ReDoc documentation for advanced usage.","title":"A minimal example with ReDoc."},{"location":"topics/documenting-your-api/#third-party-packages","text":"There are a number of mature third-party packages for providing API documentation.","title":"Third party packages"},{"location":"topics/documenting-your-api/#drf-yasg-yet-another-swagger-generator","text":"drf-yasg is a Swagger generation tool implemented without using the schema generation provided by Django Rest Framework. It aims to implement as much of the OpenAPI specification as possible - nested schemas, named models, response bodies, enum/pattern/min/max validators, form parameters, etc. - and to generate documents usable with code generation tools like swagger-codegen . This also translates into a very useful interactive documentation viewer in the form of swagger-ui :","title":"drf-yasg - Yet Another Swagger Generator"},{"location":"topics/documenting-your-api/#self-describing-apis","text":"The browsable API that REST framework provides makes it possible for your API to be entirely self describing. The documentation for each API endpoint can be provided simply by visiting the URL in your browser.","title":"Self describing APIs"},{"location":"topics/documenting-your-api/#setting-the-title","text":"The title that is used in the browsable API is generated from the view class name or function name. Any trailing View or ViewSet suffix is stripped, and the string is whitespace separated on uppercase/lowercase boundaries or underscores. For example, the view UserListView , will be named User List when presented in the browsable API. When working with viewsets, an appropriate suffix is appended to each generated view. For example, the view set UserViewSet will generate views named User List and User Instance .","title":"Setting the title"},{"location":"topics/documenting-your-api/#setting-the-description","text":"The description in the browsable API is generated from the docstring of the view or viewset. If the python Markdown library is installed, then markdown syntax may be used in the docstring, and will be converted to HTML in the browsable API. For example: class AccountListView(views.APIView): \"\"\" Returns a list of all **active** accounts in the system. For more details on how accounts are activated please [see here][ref]. [ref]: http://example.com/activating-accounts \"\"\" Note that when using viewsets the basic docstring is used for all generated views. To provide descriptions for each view, such as for the list and retrieve views, use docstring sections as described in Schemas as documentation: Examples .","title":"Setting the description"},{"location":"topics/documenting-your-api/#the-options-method","text":"REST framework APIs also support programmatically accessible descriptions, using the OPTIONS HTTP method. A view will respond to an OPTIONS request with metadata including the name, description, and the various media types it accepts and responds with. When using the generic views, any OPTIONS requests will additionally respond with metadata regarding any POST or PUT actions available, describing which fields are on the serializer. You can modify the response behavior to OPTIONS requests by overriding the options view method and/or by providing a custom Metadata class. For example: def options(self, request, *args, **kwargs): \"\"\" Don't include the view description in OPTIONS responses. \"\"\" meta = self.metadata_class() data = meta.determine_metadata(request, self) data.pop('description') return data See the Metadata docs for more details.","title":"The OPTIONS method"},{"location":"topics/documenting-your-api/#the-hypermedia-approach","text":"To be fully RESTful an API should present its available actions as hypermedia controls in the responses that it sends. In this approach, rather than documenting the available API endpoints up front, the description instead concentrates on the media types that are used. The available actions that may be taken on any given URL are not strictly fixed, but are instead made available by the presence of link and form controls in the returned document. To implement a hypermedia API you'll need to decide on an appropriate media type for the API, and implement a custom renderer and parser for that media type. The REST, Hypermedia & HATEOAS section of the documentation includes pointers to background reading, as well as links to various hypermedia formats.","title":"The hypermedia approach"},{"location":"topics/html-and-forms/","text":"HTML & Forms REST framework is suitable for returning both API style responses, and regular HTML pages. Additionally, serializers can be used as HTML forms and rendered in templates. Rendering HTML In order to return HTML responses you'll need to use either TemplateHTMLRenderer , or StaticHTMLRenderer . The TemplateHTMLRenderer class expects the response to contain a dictionary of context data, and renders an HTML page based on a template that must be specified either in the view or on the response. The StaticHTMLRender class expects the response to contain a string of the pre-rendered HTML content. Because static HTML pages typically have different behavior from API responses you'll probably need to write any HTML views explicitly, rather than relying on the built-in generic views. Here's an example of a view that returns a list of \"Profile\" instances, rendered in an HTML template: views.py : from my_project.example.models import Profile from rest_framework.renderers import TemplateHTMLRenderer from rest_framework.response import Response from rest_framework.views import APIView class ProfileList(APIView): renderer_classes = [TemplateHTMLRenderer] template_name = 'profile_list.html' def get(self, request): queryset = Profile.objects.all() return Response({'profiles': queryset}) profile_list.html : <html><body> <h1>Profiles</h1> <ul> {% for profile in profiles %} <li>{{ profile.name }}</li> {% endfor %} </ul> </body></html> Rendering Forms Serializers may be rendered as forms by using the render_form template tag, and including the serializer instance as context to the template. The following view demonstrates an example of using a serializer in a template for viewing and updating a model instance: views.py : from django.shortcuts import get_object_or_404 from my_project.example.models import Profile from rest_framework.renderers import TemplateHTMLRenderer from rest_framework.views import APIView class ProfileDetail(APIView): renderer_classes = [TemplateHTMLRenderer] template_name = 'profile_detail.html' def get(self, request, pk): profile = get_object_or_404(Profile, pk=pk) serializer = ProfileSerializer(profile) return Response({'serializer': serializer, 'profile': profile}) def post(self, request, pk): profile = get_object_or_404(Profile, pk=pk) serializer = ProfileSerializer(profile, data=request.data) if not serializer.is_valid(): return Response({'serializer': serializer, 'profile': profile}) serializer.save() return redirect('profile-list') profile_detail.html : {% load rest_framework %} <html><body> <h1>Profile - {{ profile.name }}</h1> <form action=\"{% url 'profile-detail' pk=profile.pk %}\" method=\"POST\"> {% csrf_token %} {% render_form serializer %} <input type=\"submit\" value=\"Save\"> </form> </body></html> Using template packs The render_form tag takes an optional template_pack argument, that specifies which template directory should be used for rendering the form and form fields. REST framework includes three built-in template packs, all based on Bootstrap 3. The built-in styles are horizontal , vertical , and inline . The default style is horizontal . To use any of these template packs you'll want to also include the Bootstrap 3 CSS. The following HTML will link to a CDN hosted version of the Bootstrap 3 CSS: <head> \u2026 <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\"> </head> Third party packages may include alternate template packs, by bundling a template directory containing the necessary form and field templates. Let's take a look at how to render each of the three available template packs. For these examples we'll use a single serializer class to present a \"Login\" form. class LoginSerializer(serializers.Serializer): email = serializers.EmailField( max_length=100, style={'placeholder': 'Email', 'autofocus': True} ) password = serializers.CharField( max_length=100, style={'input_type': 'password', 'placeholder': 'Password'} ) remember_me = serializers.BooleanField() rest_framework/vertical Presents form labels above their corresponding control inputs, using the standard Bootstrap layout. This is the default template pack. {% load rest_framework %} ... <form action=\"{% url 'login' %}\" method=\"post\" novalidate> {% csrf_token %} {% render_form serializer template_pack='rest_framework/vertical' %} <button type=\"submit\" class=\"btn btn-default\">Sign in</button> </form> rest_framework/horizontal Presents labels and controls alongside each other, using a 2/10 column split. This is the form style used in the browsable API and admin renderers. {% load rest_framework %} ... <form class=\"form-horizontal\" action=\"{% url 'login' %}\" method=\"post\" novalidate> {% csrf_token %} {% render_form serializer %} <div class=\"form-group\"> <div class=\"col-sm-offset-2 col-sm-10\"> <button type=\"submit\" class=\"btn btn-default\">Sign in</button> </div> </div> </form> rest_framework/inline A compact form style that presents all the controls inline. {% load rest_framework %} ... <form class=\"form-inline\" action=\"{% url 'login' %}\" method=\"post\" novalidate> {% csrf_token %} {% render_form serializer template_pack='rest_framework/inline' %} <button type=\"submit\" class=\"btn btn-default\">Sign in</button> </form> Field styles Serializer fields can have their rendering style customized by using the style keyword argument. This argument is a dictionary of options that control the template and layout used. The most common way to customize the field style is to use the base_template style keyword argument to select which template in the template pack should be use. For example, to render a CharField as an HTML textarea rather than the default HTML input, you would use something like this: details = serializers.CharField( max_length=1000, style={'base_template': 'textarea.html'} ) If you instead want a field to be rendered using a custom template that is not part of an included template pack , you can instead use the template style option, to fully specify a template name: details = serializers.CharField( max_length=1000, style={'template': 'my-field-templates/custom-input.html'} ) Field templates can also use additional style properties, depending on their type. For example, the textarea.html template also accepts a rows property that can be used to affect the sizing of the control. details = serializers.CharField( max_length=1000, style={'base_template': 'textarea.html', 'rows': 10} ) The complete list of base_template options and their associated style options is listed below. base_template Valid field types Additional style options input.html Any string, numeric or date/time field input_type, placeholder, hide_label, autofocus textarea.html CharField rows, placeholder, hide_label select.html ChoiceField or relational field types hide_label radio.html ChoiceField or relational field types inline, hide_label select_multiple.html MultipleChoiceField or relational fields with many=True hide_label checkbox_multiple.html MultipleChoiceField or relational fields with many=True inline, hide_label checkbox.html BooleanField hide_label fieldset.html Nested serializer hide_label list_fieldset.html ListField or nested serializer with many=True hide_label","title":"HTML & Forms"},{"location":"topics/html-and-forms/#html-forms","text":"REST framework is suitable for returning both API style responses, and regular HTML pages. Additionally, serializers can be used as HTML forms and rendered in templates.","title":"HTML &amp; Forms"},{"location":"topics/html-and-forms/#rendering-html","text":"In order to return HTML responses you'll need to use either TemplateHTMLRenderer , or StaticHTMLRenderer . The TemplateHTMLRenderer class expects the response to contain a dictionary of context data, and renders an HTML page based on a template that must be specified either in the view or on the response. The StaticHTMLRender class expects the response to contain a string of the pre-rendered HTML content. Because static HTML pages typically have different behavior from API responses you'll probably need to write any HTML views explicitly, rather than relying on the built-in generic views. Here's an example of a view that returns a list of \"Profile\" instances, rendered in an HTML template: views.py : from my_project.example.models import Profile from rest_framework.renderers import TemplateHTMLRenderer from rest_framework.response import Response from rest_framework.views import APIView class ProfileList(APIView): renderer_classes = [TemplateHTMLRenderer] template_name = 'profile_list.html' def get(self, request): queryset = Profile.objects.all() return Response({'profiles': queryset}) profile_list.html : <html><body> <h1>Profiles</h1> <ul> {% for profile in profiles %} <li>{{ profile.name }}</li> {% endfor %} </ul> </body></html>","title":"Rendering HTML"},{"location":"topics/html-and-forms/#rendering-forms","text":"Serializers may be rendered as forms by using the render_form template tag, and including the serializer instance as context to the template. The following view demonstrates an example of using a serializer in a template for viewing and updating a model instance: views.py : from django.shortcuts import get_object_or_404 from my_project.example.models import Profile from rest_framework.renderers import TemplateHTMLRenderer from rest_framework.views import APIView class ProfileDetail(APIView): renderer_classes = [TemplateHTMLRenderer] template_name = 'profile_detail.html' def get(self, request, pk): profile = get_object_or_404(Profile, pk=pk) serializer = ProfileSerializer(profile) return Response({'serializer': serializer, 'profile': profile}) def post(self, request, pk): profile = get_object_or_404(Profile, pk=pk) serializer = ProfileSerializer(profile, data=request.data) if not serializer.is_valid(): return Response({'serializer': serializer, 'profile': profile}) serializer.save() return redirect('profile-list') profile_detail.html : {% load rest_framework %} <html><body> <h1>Profile - {{ profile.name }}</h1> <form action=\"{% url 'profile-detail' pk=profile.pk %}\" method=\"POST\"> {% csrf_token %} {% render_form serializer %} <input type=\"submit\" value=\"Save\"> </form> </body></html>","title":"Rendering Forms"},{"location":"topics/html-and-forms/#using-template-packs","text":"The render_form tag takes an optional template_pack argument, that specifies which template directory should be used for rendering the form and form fields. REST framework includes three built-in template packs, all based on Bootstrap 3. The built-in styles are horizontal , vertical , and inline . The default style is horizontal . To use any of these template packs you'll want to also include the Bootstrap 3 CSS. The following HTML will link to a CDN hosted version of the Bootstrap 3 CSS: <head> \u2026 <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\"> </head> Third party packages may include alternate template packs, by bundling a template directory containing the necessary form and field templates. Let's take a look at how to render each of the three available template packs. For these examples we'll use a single serializer class to present a \"Login\" form. class LoginSerializer(serializers.Serializer): email = serializers.EmailField( max_length=100, style={'placeholder': 'Email', 'autofocus': True} ) password = serializers.CharField( max_length=100, style={'input_type': 'password', 'placeholder': 'Password'} ) remember_me = serializers.BooleanField()","title":"Using template packs"},{"location":"topics/html-and-forms/#rest_frameworkvertical","text":"Presents form labels above their corresponding control inputs, using the standard Bootstrap layout. This is the default template pack. {% load rest_framework %} ... <form action=\"{% url 'login' %}\" method=\"post\" novalidate> {% csrf_token %} {% render_form serializer template_pack='rest_framework/vertical' %} <button type=\"submit\" class=\"btn btn-default\">Sign in</button> </form>","title":"rest_framework/vertical"},{"location":"topics/html-and-forms/#rest_frameworkhorizontal","text":"Presents labels and controls alongside each other, using a 2/10 column split. This is the form style used in the browsable API and admin renderers. {% load rest_framework %} ... <form class=\"form-horizontal\" action=\"{% url 'login' %}\" method=\"post\" novalidate> {% csrf_token %} {% render_form serializer %} <div class=\"form-group\"> <div class=\"col-sm-offset-2 col-sm-10\"> <button type=\"submit\" class=\"btn btn-default\">Sign in</button> </div> </div> </form>","title":"rest_framework/horizontal"},{"location":"topics/html-and-forms/#rest_frameworkinline","text":"A compact form style that presents all the controls inline. {% load rest_framework %} ... <form class=\"form-inline\" action=\"{% url 'login' %}\" method=\"post\" novalidate> {% csrf_token %} {% render_form serializer template_pack='rest_framework/inline' %} <button type=\"submit\" class=\"btn btn-default\">Sign in</button> </form>","title":"rest_framework/inline"},{"location":"topics/html-and-forms/#field-styles","text":"Serializer fields can have their rendering style customized by using the style keyword argument. This argument is a dictionary of options that control the template and layout used. The most common way to customize the field style is to use the base_template style keyword argument to select which template in the template pack should be use. For example, to render a CharField as an HTML textarea rather than the default HTML input, you would use something like this: details = serializers.CharField( max_length=1000, style={'base_template': 'textarea.html'} ) If you instead want a field to be rendered using a custom template that is not part of an included template pack , you can instead use the template style option, to fully specify a template name: details = serializers.CharField( max_length=1000, style={'template': 'my-field-templates/custom-input.html'} ) Field templates can also use additional style properties, depending on their type. For example, the textarea.html template also accepts a rows property that can be used to affect the sizing of the control. details = serializers.CharField( max_length=1000, style={'base_template': 'textarea.html', 'rows': 10} ) The complete list of base_template options and their associated style options is listed below. base_template Valid field types Additional style options input.html Any string, numeric or date/time field input_type, placeholder, hide_label, autofocus textarea.html CharField rows, placeholder, hide_label select.html ChoiceField or relational field types hide_label radio.html ChoiceField or relational field types inline, hide_label select_multiple.html MultipleChoiceField or relational fields with many=True hide_label checkbox_multiple.html MultipleChoiceField or relational fields with many=True inline, hide_label checkbox.html BooleanField hide_label fieldset.html Nested serializer hide_label list_fieldset.html ListField or nested serializer with many=True hide_label","title":"Field styles"},{"location":"topics/internationalization/","text":"Internationalization Supporting internationalization is not optional. It must be a core feature. \u2014 Jannis Leidel, speaking at Django Under the Hood, 2015 . REST framework ships with translatable error messages. You can make these appear in your language enabling Django's standard translation mechanisms . Doing so will allow you to: Select a language other than English as the default, using the standard LANGUAGE_CODE Django setting. Allow clients to choose a language themselves, using the LocaleMiddleware included with Django. A typical usage for API clients would be to include an Accept-Language request header. Enabling internationalized APIs You can change the default language by using the standard Django LANGUAGE_CODE setting: LANGUAGE_CODE = \"es-es\" You can turn on per-request language requests by adding LocalMiddleware to your MIDDLEWARE_CLASSES setting: MIDDLEWARE_CLASSES = [ ... 'django.middleware.locale.LocaleMiddleware' ] When per-request internationalization is enabled, client requests will respect the Accept-Language header where possible. For example, let's make a request for an unsupported media type: Request GET /api/users HTTP/1.1 Accept: application/xml Accept-Language: es-es Host: example.org Response HTTP/1.0 406 NOT ACCEPTABLE {\"detail\": \"No se ha podido satisfacer la solicitud de cabecera de Accept.\"} REST framework includes these built-in translations both for standard exception cases, and for serializer validation errors. Note that the translations only apply to the error strings themselves. The format of error messages, and the keys of field names will remain the same. An example 400 Bad Request response body might look like this: {\"detail\": {\"username\": [\"Esse campo deve ser \u00fanico.\"]}} If you want to use different string for parts of the response such as detail and non_field_errors then you can modify this behavior by using a custom exception handler . Specifying the set of supported languages. By default all available languages will be supported. If you only wish to support a subset of the available languages, use Django's standard LANGUAGES setting: LANGUAGES = [ ('de', _('German')), ('en', _('English')), ] Adding new translations REST framework translations are managed online using Transifex . You can use the Transifex service to add new translation languages. The maintenance team will then ensure that these translation strings are included in the REST framework package. Sometimes you may need to add translation strings to your project locally. You may need to do this if: You want to use REST Framework in a language which has not been translated yet on Transifex. Your project includes custom error messages, which are not part of REST framework's default translation strings. Translating a new language locally This guide assumes you are already familiar with how to translate a Django app. If you're not, start by reading Django's translation docs . If you're translating a new language you'll need to translate the existing REST framework error messages: Make a new folder where you want to store the internationalization resources. Add this path to your LOCALE_PATHS setting. Now create a subfolder for the language you want to translate. The folder should be named using locale name notation. For example: de , pt_BR , es_AR . Now copy the base translations file from the REST framework source code into your translations folder. Edit the django.po file you've just copied, translating all the error messages. Run manage.py compilemessages -l pt_BR to make the translations available for Django to use. You should see a message like processing file django.po in <...>/locale/pt_BR/LC_MESSAGES . Restart your development server to see the changes take effect. If you're only translating custom error messages that exist inside your project codebase you don't need to copy the REST framework source django.po file into a LOCALE_PATHS folder, and can instead simply run Django's standard makemessages process. How the language is determined If you want to allow per-request language preferences you'll need to include django.middleware.locale.LocaleMiddleware in your MIDDLEWARE_CLASSES setting. You can find more information on how the language preference is determined in the Django documentation . For reference, the method is: First, it looks for the language prefix in the requested URL. Failing that, it looks for the LANGUAGE_SESSION_KEY key in the current user\u2019s session. Failing that, it looks for a cookie. Failing that, it looks at the Accept-Language HTTP header. Failing that, it uses the global LANGUAGE_CODE setting. For API clients the most appropriate of these will typically be to use the Accept-Language header; Sessions and cookies will not be available unless using session authentication, and generally better practice to prefer an Accept-Language header for API clients rather than using language URL prefixes.","title":"Internationalization"},{"location":"topics/internationalization/#internationalization","text":"Supporting internationalization is not optional. It must be a core feature. \u2014 Jannis Leidel, speaking at Django Under the Hood, 2015 . REST framework ships with translatable error messages. You can make these appear in your language enabling Django's standard translation mechanisms . Doing so will allow you to: Select a language other than English as the default, using the standard LANGUAGE_CODE Django setting. Allow clients to choose a language themselves, using the LocaleMiddleware included with Django. A typical usage for API clients would be to include an Accept-Language request header.","title":"Internationalization"},{"location":"topics/internationalization/#enabling-internationalized-apis","text":"You can change the default language by using the standard Django LANGUAGE_CODE setting: LANGUAGE_CODE = \"es-es\" You can turn on per-request language requests by adding LocalMiddleware to your MIDDLEWARE_CLASSES setting: MIDDLEWARE_CLASSES = [ ... 'django.middleware.locale.LocaleMiddleware' ] When per-request internationalization is enabled, client requests will respect the Accept-Language header where possible. For example, let's make a request for an unsupported media type: Request GET /api/users HTTP/1.1 Accept: application/xml Accept-Language: es-es Host: example.org Response HTTP/1.0 406 NOT ACCEPTABLE {\"detail\": \"No se ha podido satisfacer la solicitud de cabecera de Accept.\"} REST framework includes these built-in translations both for standard exception cases, and for serializer validation errors. Note that the translations only apply to the error strings themselves. The format of error messages, and the keys of field names will remain the same. An example 400 Bad Request response body might look like this: {\"detail\": {\"username\": [\"Esse campo deve ser \u00fanico.\"]}} If you want to use different string for parts of the response such as detail and non_field_errors then you can modify this behavior by using a custom exception handler .","title":"Enabling internationalized APIs"},{"location":"topics/internationalization/#specifying-the-set-of-supported-languages","text":"By default all available languages will be supported. If you only wish to support a subset of the available languages, use Django's standard LANGUAGES setting: LANGUAGES = [ ('de', _('German')), ('en', _('English')), ]","title":"Specifying the set of supported languages."},{"location":"topics/internationalization/#adding-new-translations","text":"REST framework translations are managed online using Transifex . You can use the Transifex service to add new translation languages. The maintenance team will then ensure that these translation strings are included in the REST framework package. Sometimes you may need to add translation strings to your project locally. You may need to do this if: You want to use REST Framework in a language which has not been translated yet on Transifex. Your project includes custom error messages, which are not part of REST framework's default translation strings.","title":"Adding new translations"},{"location":"topics/internationalization/#translating-a-new-language-locally","text":"This guide assumes you are already familiar with how to translate a Django app. If you're not, start by reading Django's translation docs . If you're translating a new language you'll need to translate the existing REST framework error messages: Make a new folder where you want to store the internationalization resources. Add this path to your LOCALE_PATHS setting. Now create a subfolder for the language you want to translate. The folder should be named using locale name notation. For example: de , pt_BR , es_AR . Now copy the base translations file from the REST framework source code into your translations folder. Edit the django.po file you've just copied, translating all the error messages. Run manage.py compilemessages -l pt_BR to make the translations available for Django to use. You should see a message like processing file django.po in <...>/locale/pt_BR/LC_MESSAGES . Restart your development server to see the changes take effect. If you're only translating custom error messages that exist inside your project codebase you don't need to copy the REST framework source django.po file into a LOCALE_PATHS folder, and can instead simply run Django's standard makemessages process.","title":"Translating a new language locally"},{"location":"topics/internationalization/#how-the-language-is-determined","text":"If you want to allow per-request language preferences you'll need to include django.middleware.locale.LocaleMiddleware in your MIDDLEWARE_CLASSES setting. You can find more information on how the language preference is determined in the Django documentation . For reference, the method is: First, it looks for the language prefix in the requested URL. Failing that, it looks for the LANGUAGE_SESSION_KEY key in the current user\u2019s session. Failing that, it looks for a cookie. Failing that, it looks at the Accept-Language HTTP header. Failing that, it uses the global LANGUAGE_CODE setting. For API clients the most appropriate of these will typically be to use the Accept-Language header; Sessions and cookies will not be available unless using session authentication, and generally better practice to prefer an Accept-Language header for API clients rather than using language URL prefixes.","title":"How the language is determined"},{"location":"topics/rest-hypermedia-hateoas/","text":"REST, Hypermedia & HATEOAS You keep using that word \"REST\". I do not think it means what you think it means. \u2014 Mike Amundsen, REST fest 2012 keynote . First off, the disclaimer. The name \"Django REST framework\" was decided back in early 2011 and was chosen simply to sure the project would be easily found by developers. Throughout the documentation we try to use the more simple and technically correct terminology of \"Web APIs\". If you are serious about designing a Hypermedia API, you should look to resources outside of this documentation to help inform your design choices. The following fall into the \"required reading\" category. Roy Fielding's dissertation - Architectural Styles and the Design of Network-based Software Architectures . Roy Fielding's \" REST APIs must be hypertext-driven \" blog post. Leonard Richardson & Mike Amundsen's RESTful Web APIs . Mike Amundsen's Building Hypermedia APIs with HTML5 and Node . Steve Klabnik's Designing Hypermedia APIs . The Richardson Maturity Model . For a more thorough background, check out Klabnik's Hypermedia API reading list . Building Hypermedia APIs with REST framework REST framework is an agnostic Web API toolkit. It does help guide you towards building well-connected APIs, and makes it easy to design appropriate media types, but it does not strictly enforce any particular design style. What REST framework provides. It is self evident that REST framework makes it possible to build Hypermedia APIs. The browsable API that it offers is built on HTML - the hypermedia language of the web. REST framework also includes serialization and parser / renderer components that make it easy to build appropriate media types, hyperlinked relations for building well-connected systems, and great support for content negotiation . What REST framework doesn't provide. What REST framework doesn't do is give you machine readable hypermedia formats such as HAL , Collection+JSON , JSON API or HTML microformats by default, or the ability to auto-magically create fully HATEOAS style APIs that include hypermedia-based form descriptions and semantically labelled hyperlinks. Doing so would involve making opinionated choices about API design that should really remain outside of the framework's scope.","title":"REST, Hypermedia & HATEOAS"},{"location":"topics/rest-hypermedia-hateoas/#rest-hypermedia-hateoas","text":"You keep using that word \"REST\". I do not think it means what you think it means. \u2014 Mike Amundsen, REST fest 2012 keynote . First off, the disclaimer. The name \"Django REST framework\" was decided back in early 2011 and was chosen simply to sure the project would be easily found by developers. Throughout the documentation we try to use the more simple and technically correct terminology of \"Web APIs\". If you are serious about designing a Hypermedia API, you should look to resources outside of this documentation to help inform your design choices. The following fall into the \"required reading\" category. Roy Fielding's dissertation - Architectural Styles and the Design of Network-based Software Architectures . Roy Fielding's \" REST APIs must be hypertext-driven \" blog post. Leonard Richardson & Mike Amundsen's RESTful Web APIs . Mike Amundsen's Building Hypermedia APIs with HTML5 and Node . Steve Klabnik's Designing Hypermedia APIs . The Richardson Maturity Model . For a more thorough background, check out Klabnik's Hypermedia API reading list .","title":"REST, Hypermedia &amp; HATEOAS"},{"location":"topics/rest-hypermedia-hateoas/#building-hypermedia-apis-with-rest-framework","text":"REST framework is an agnostic Web API toolkit. It does help guide you towards building well-connected APIs, and makes it easy to design appropriate media types, but it does not strictly enforce any particular design style.","title":"Building Hypermedia APIs with REST framework"},{"location":"topics/rest-hypermedia-hateoas/#what-rest-framework-provides","text":"It is self evident that REST framework makes it possible to build Hypermedia APIs. The browsable API that it offers is built on HTML - the hypermedia language of the web. REST framework also includes serialization and parser / renderer components that make it easy to build appropriate media types, hyperlinked relations for building well-connected systems, and great support for content negotiation .","title":"What REST framework provides."},{"location":"topics/rest-hypermedia-hateoas/#what-rest-framework-doesnt-provide","text":"What REST framework doesn't do is give you machine readable hypermedia formats such as HAL , Collection+JSON , JSON API or HTML microformats by default, or the ability to auto-magically create fully HATEOAS style APIs that include hypermedia-based form descriptions and semantically labelled hyperlinks. Doing so would involve making opinionated choices about API design that should really remain outside of the framework's scope.","title":"What REST framework doesn't provide."},{"location":"topics/writable-nested-serializers/","text":"To save HTTP requests, it may be convenient to send related documents along with the request. \u2014 JSON API specification for Ember Data . Writable nested serializers Although flat data structures serve to properly delineate between the individual entities in your service, there are cases where it may be more appropriate or convenient to use nested data structures. Nested data structures are easy enough to work with if they're read-only - simply nest your serializer classes and you're good to go. However, there are a few more subtleties to using writable nested serializers, due to the dependencies between the various model instances, and the need to save or delete multiple instances in a single action. One-to-many data structures Example of a read-only nested serializer. Nothing complex to worry about here. class ToDoItemSerializer(serializers.ModelSerializer): class Meta: model = ToDoItem fields = ['text', 'is_completed'] class ToDoListSerializer(serializers.ModelSerializer): items = ToDoItemSerializer(many=True, read_only=True) class Meta: model = ToDoList fields = ['title', 'items'] Some example output from our serializer. { 'title': 'Leaving party preparations', 'items': [ {'text': 'Compile playlist', 'is_completed': True}, {'text': 'Send invites', 'is_completed': False}, {'text': 'Clean house', 'is_completed': False} ] } Let's take a look at updating our nested one-to-many data structure. Validation errors Adding and removing items Making PATCH requests","title":"Writable nested serializers"},{"location":"topics/writable-nested-serializers/#writable-nested-serializers","text":"Although flat data structures serve to properly delineate between the individual entities in your service, there are cases where it may be more appropriate or convenient to use nested data structures. Nested data structures are easy enough to work with if they're read-only - simply nest your serializer classes and you're good to go. However, there are a few more subtleties to using writable nested serializers, due to the dependencies between the various model instances, and the need to save or delete multiple instances in a single action.","title":"Writable nested serializers"},{"location":"topics/writable-nested-serializers/#one-to-many-data-structures","text":"Example of a read-only nested serializer. Nothing complex to worry about here. class ToDoItemSerializer(serializers.ModelSerializer): class Meta: model = ToDoItem fields = ['text', 'is_completed'] class ToDoListSerializer(serializers.ModelSerializer): items = ToDoItemSerializer(many=True, read_only=True) class Meta: model = ToDoList fields = ['title', 'items'] Some example output from our serializer. { 'title': 'Leaving party preparations', 'items': [ {'text': 'Compile playlist', 'is_completed': True}, {'text': 'Send invites', 'is_completed': False}, {'text': 'Clean house', 'is_completed': False} ] } Let's take a look at updating our nested one-to-many data structure.","title":"One-to-many data structures"},{"location":"topics/writable-nested-serializers/#validation-errors","text":"","title":"Validation errors"},{"location":"topics/writable-nested-serializers/#adding-and-removing-items","text":"","title":"Adding and removing items"},{"location":"topics/writable-nested-serializers/#making-patch-requests","text":"","title":"Making PATCH requests"},{"location":"tutorial/1-serialization/","text":"Tutorial 1: Serialization Introduction This tutorial will cover creating a simple pastebin code highlighting Web API. Along the way it will introduce the various components that make up REST framework, and give you a comprehensive understanding of how everything fits together. The tutorial is fairly in-depth, so you should probably get a cookie and a cup of your favorite brew before getting started. If you just want a quick overview, you should head over to the quickstart documentation instead. Note : The code for this tutorial is available in the encode/rest-framework-tutorial repository on GitHub. The completed implementation is also online as a sandbox version for testing, available here . Setting up a new environment Before we do anything else we'll create a new virtual environment, using venv . This will make sure our package configuration is kept nicely isolated from any other projects we're working on. python3 -m venv env source env/bin/activate Now that we're inside a virtual environment, we can install our package requirements. pip install django pip install djangorestframework pip install pygments # We'll be using this for the code highlighting Note: To exit the virtual environment at any time, just type deactivate . For more information see the venv documentation . Getting started Okay, we're ready to get coding. To get started, let's create a new project to work with. cd ~ django-admin startproject tutorial cd tutorial Once that's done we can create an app that we'll use to create a simple Web API. python manage.py startapp snippets We'll need to add our new snippets app and the rest_framework app to INSTALLED_APPS . Let's edit the tutorial/settings.py file: INSTALLED_APPS = [ ... 'rest_framework', 'snippets.apps.SnippetsConfig', ] Okay, we're ready to roll. Creating a model to work with For the purposes of this tutorial we're going to start by creating a simple Snippet model that is used to store code snippets. Go ahead and edit the snippets/models.py file. Note: Good programming practices include comments. Although you will find them in our repository version of this tutorial code, we have omitted them here to focus on the code itself. from django.db import models from pygments.lexers import get_all_lexers from pygments.styles import get_all_styles LEXERS = [item for item in get_all_lexers() if item[1]] LANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS]) STYLE_CHOICES = sorted([(item, item) for item in get_all_styles()]) class Snippet(models.Model): created = models.DateTimeField(auto_now_add=True) title = models.CharField(max_length=100, blank=True, default='') code = models.TextField() linenos = models.BooleanField(default=False) language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100) style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100) class Meta: ordering = ['created'] We'll also need to create an initial migration for our snippet model, and sync the database for the first time. python manage.py makemigrations snippets python manage.py migrate Creating a Serializer class The first thing we need to get started on our Web API is to provide a way of serializing and deserializing the snippet instances into representations such as json . We can do this by declaring serializers that work very similar to Django's forms. Create a file in the snippets directory named serializers.py and add the following. from rest_framework import serializers from snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES class SnippetSerializer(serializers.Serializer): id = serializers.IntegerField(read_only=True) title = serializers.CharField(required=False, allow_blank=True, max_length=100) code = serializers.CharField(style={'base_template': 'textarea.html'}) linenos = serializers.BooleanField(required=False) language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python') style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly') def create(self, validated_data): \"\"\" Create and return a new `Snippet` instance, given the validated data. \"\"\" return Snippet.objects.create(**validated_data) def update(self, instance, validated_data): \"\"\" Update and return an existing `Snippet` instance, given the validated data. \"\"\" instance.title = validated_data.get('title', instance.title) instance.code = validated_data.get('code', instance.code) instance.linenos = validated_data.get('linenos', instance.linenos) instance.language = validated_data.get('language', instance.language) instance.style = validated_data.get('style', instance.style) instance.save() return instance The first part of the serializer class defines the fields that get serialized/deserialized. The create() and update() methods define how fully fledged instances are created or modified when calling serializer.save() A serializer class is very similar to a Django Form class, and includes similar validation flags on the various fields, such as required , max_length and default . The field flags can also control how the serializer should be displayed in certain circumstances, such as when rendering to HTML. The {'base_template': 'textarea.html'} flag above is equivalent to using widget=widgets.Textarea on a Django Form class. This is particularly useful for controlling how the browsable API should be displayed, as we'll see later in the tutorial. We can actually also save ourselves some time by using the ModelSerializer class, as we'll see later, but for now we'll keep our serializer definition explicit. Working with Serializers Before we go any further we'll familiarize ourselves with using our new Serializer class. Let's drop into the Django shell. python manage.py shell Okay, once we've got a few imports out of the way, let's create a couple of code snippets to work with. from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser snippet = Snippet(code='foo = \"bar\"\\n') snippet.save() snippet = Snippet(code='print(\"hello, world\")\\n') snippet.save() We've now got a few snippet instances to play with. Let's take a look at serializing one of those instances. serializer = SnippetSerializer(snippet) serializer.data # {'id': 2, 'title': '', 'code': 'print(\"hello, world\")\\n', 'linenos': False, 'language': 'python', 'style': 'friendly'} At this point we've translated the model instance into Python native datatypes. To finalize the serialization process we render the data into json . content = JSONRenderer().render(serializer.data) content # b'{\"id\": 2, \"title\": \"\", \"code\": \"print(\\\\\"hello, world\\\\\")\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"}' Deserialization is similar. First we parse a stream into Python native datatypes... import io stream = io.BytesIO(content) data = JSONParser().parse(stream) ...then we restore those native datatypes into a fully populated object instance. serializer = SnippetSerializer(data=data) serializer.is_valid() # True serializer.validated_data # OrderedDict([('title', ''), ('code', 'print(\"hello, world\")\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]) serializer.save() # <Snippet: Snippet object> Notice how similar the API is to working with forms. The similarity should become even more apparent when we start writing views that use our serializer. We can also serialize querysets instead of model instances. To do so we simply add a many=True flag to the serializer arguments. serializer = SnippetSerializer(Snippet.objects.all(), many=True) serializer.data # [OrderedDict([('id', 1), ('title', ''), ('code', 'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', ''), ('code', 'print(\"hello, world\")\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', ''), ('code', 'print(\"hello, world\")'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])] Using ModelSerializers Our SnippetSerializer class is replicating a lot of information that's also contained in the Snippet model. It would be nice if we could keep our code a bit more concise. In the same way that Django provides both Form classes and ModelForm classes, REST framework includes both Serializer classes, and ModelSerializer classes. Let's look at refactoring our serializer using the ModelSerializer class. Open the file snippets/serializers.py again, and replace the SnippetSerializer class with the following. class SnippetSerializer(serializers.ModelSerializer): class Meta: model = Snippet fields = ['id', 'title', 'code', 'linenos', 'language', 'style'] One nice property that serializers have is that you can inspect all the fields in a serializer instance, by printing its representation. Open the Django shell with python manage.py shell , then try the following: from snippets.serializers import SnippetSerializer serializer = SnippetSerializer() print(repr(serializer)) # SnippetSerializer(): # id = IntegerField(label='ID', read_only=True) # title = CharField(allow_blank=True, max_length=100, required=False) # code = CharField(style={'base_template': 'textarea.html'}) # linenos = BooleanField(required=False) # language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')... # style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')... It's important to remember that ModelSerializer classes don't do anything particularly magical, they are simply a shortcut for creating serializer classes: An automatically determined set of fields. Simple default implementations for the create() and update() methods. Writing regular Django views using our Serializer Let's see how we can write some API views using our new Serializer class. For the moment we won't use any of REST framework's other features, we'll just write the views as regular Django views. Edit the snippets/views.py file, and add the following. from django.http import HttpResponse, JsonResponse from django.views.decorators.csrf import csrf_exempt from rest_framework.parsers import JSONParser from snippets.models import Snippet from snippets.serializers import SnippetSerializer The root of our API is going to be a view that supports listing all the existing snippets, or creating a new snippet. @csrf_exempt def snippet_list(request): \"\"\" List all code snippets, or create a new snippet. \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return JsonResponse(serializer.data, safe=False) elif request.method == 'POST': data = JSONParser().parse(request) serializer = SnippetSerializer(data=data) if serializer.is_valid(): serializer.save() return JsonResponse(serializer.data, status=201) return JsonResponse(serializer.errors, status=400) Note that because we want to be able to POST to this view from clients that won't have a CSRF token we need to mark the view as csrf_exempt . This isn't something that you'd normally want to do, and REST framework views actually use more sensible behavior than this, but it'll do for our purposes right now. We'll also need a view which corresponds to an individual snippet, and can be used to retrieve, update or delete the snippet. @csrf_exempt def snippet_detail(request, pk): \"\"\" Retrieve, update or delete a code snippet. \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return HttpResponse(status=404) if request.method == 'GET': serializer = SnippetSerializer(snippet) return JsonResponse(serializer.data) elif request.method == 'PUT': data = JSONParser().parse(request) serializer = SnippetSerializer(snippet, data=data) if serializer.is_valid(): serializer.save() return JsonResponse(serializer.data) return JsonResponse(serializer.errors, status=400) elif request.method == 'DELETE': snippet.delete() return HttpResponse(status=204) Finally we need to wire these views up. Create the snippets/urls.py file: from django.urls import path from snippets import views urlpatterns = [ path('snippets/', views.snippet_list), path('snippets/<int:pk>/', views.snippet_detail), ] We also need to wire up the root urlconf, in the tutorial/urls.py file, to include our snippet app's URLs. from django.urls import path, include urlpatterns = [ path('', include('snippets.urls')), ] It's worth noting that there are a couple of edge cases we're not dealing with properly at the moment. If we send malformed json , or if a request is made with a method that the view doesn't handle, then we'll end up with a 500 \"server error\" response. Still, this'll do for now. Testing our first attempt at a Web API Now we can start up a sample server that serves our snippets. Quit out of the shell... quit() ...and start up Django's development server. python manage.py runserver Validating models... 0 errors found Django version 1.11, using settings 'tutorial.settings' Development server is running at http://127.0.0.1:8000/ Quit the server with CONTROL-C. In another terminal window, we can test the server. We can test our API using curl or httpie . Httpie is a user friendly http client that's written in Python. Let's install that. You can install httpie using pip: pip install httpie Finally, we can get a list of all of the snippets: http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { \"id\": 1, \"title\": \"\", \"code\": \"foo = \\\"bar\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }, { \"id\": 2, \"title\": \"\", \"code\": \"print(\\\"hello, world\\\")\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } ] Or we can get a particular snippet by referencing its id: http http://127.0.0.1:8000/snippets/2/ HTTP/1.1 200 OK ... { \"id\": 2, \"title\": \"\", \"code\": \"print(\\\"hello, world\\\")\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } Similarly, you can have the same json displayed by visiting these URLs in a web browser. Where are we now We're doing okay so far, we've got a serialization API that feels pretty similar to Django's Forms API, and some regular Django views. Our API views don't do anything particularly special at the moment, beyond serving json responses, and there are some error handling edge cases we'd still like to clean up, but it's a functioning Web API. We'll see how we can start to improve things in part 2 of the tutorial .","title":"Tutorial 1: Serialization"},{"location":"tutorial/1-serialization/#tutorial-1-serialization","text":"","title":"Tutorial 1: Serialization"},{"location":"tutorial/1-serialization/#introduction","text":"This tutorial will cover creating a simple pastebin code highlighting Web API. Along the way it will introduce the various components that make up REST framework, and give you a comprehensive understanding of how everything fits together. The tutorial is fairly in-depth, so you should probably get a cookie and a cup of your favorite brew before getting started. If you just want a quick overview, you should head over to the quickstart documentation instead. Note : The code for this tutorial is available in the encode/rest-framework-tutorial repository on GitHub. The completed implementation is also online as a sandbox version for testing, available here .","title":"Introduction"},{"location":"tutorial/1-serialization/#setting-up-a-new-environment","text":"Before we do anything else we'll create a new virtual environment, using venv . This will make sure our package configuration is kept nicely isolated from any other projects we're working on. python3 -m venv env source env/bin/activate Now that we're inside a virtual environment, we can install our package requirements. pip install django pip install djangorestframework pip install pygments # We'll be using this for the code highlighting Note: To exit the virtual environment at any time, just type deactivate . For more information see the venv documentation .","title":"Setting up a new environment"},{"location":"tutorial/1-serialization/#getting-started","text":"Okay, we're ready to get coding. To get started, let's create a new project to work with. cd ~ django-admin startproject tutorial cd tutorial Once that's done we can create an app that we'll use to create a simple Web API. python manage.py startapp snippets We'll need to add our new snippets app and the rest_framework app to INSTALLED_APPS . Let's edit the tutorial/settings.py file: INSTALLED_APPS = [ ... 'rest_framework', 'snippets.apps.SnippetsConfig', ] Okay, we're ready to roll.","title":"Getting started"},{"location":"tutorial/1-serialization/#creating-a-model-to-work-with","text":"For the purposes of this tutorial we're going to start by creating a simple Snippet model that is used to store code snippets. Go ahead and edit the snippets/models.py file. Note: Good programming practices include comments. Although you will find them in our repository version of this tutorial code, we have omitted them here to focus on the code itself. from django.db import models from pygments.lexers import get_all_lexers from pygments.styles import get_all_styles LEXERS = [item for item in get_all_lexers() if item[1]] LANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS]) STYLE_CHOICES = sorted([(item, item) for item in get_all_styles()]) class Snippet(models.Model): created = models.DateTimeField(auto_now_add=True) title = models.CharField(max_length=100, blank=True, default='') code = models.TextField() linenos = models.BooleanField(default=False) language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100) style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100) class Meta: ordering = ['created'] We'll also need to create an initial migration for our snippet model, and sync the database for the first time. python manage.py makemigrations snippets python manage.py migrate","title":"Creating a model to work with"},{"location":"tutorial/1-serialization/#creating-a-serializer-class","text":"The first thing we need to get started on our Web API is to provide a way of serializing and deserializing the snippet instances into representations such as json . We can do this by declaring serializers that work very similar to Django's forms. Create a file in the snippets directory named serializers.py and add the following. from rest_framework import serializers from snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES class SnippetSerializer(serializers.Serializer): id = serializers.IntegerField(read_only=True) title = serializers.CharField(required=False, allow_blank=True, max_length=100) code = serializers.CharField(style={'base_template': 'textarea.html'}) linenos = serializers.BooleanField(required=False) language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python') style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly') def create(self, validated_data): \"\"\" Create and return a new `Snippet` instance, given the validated data. \"\"\" return Snippet.objects.create(**validated_data) def update(self, instance, validated_data): \"\"\" Update and return an existing `Snippet` instance, given the validated data. \"\"\" instance.title = validated_data.get('title', instance.title) instance.code = validated_data.get('code', instance.code) instance.linenos = validated_data.get('linenos', instance.linenos) instance.language = validated_data.get('language', instance.language) instance.style = validated_data.get('style', instance.style) instance.save() return instance The first part of the serializer class defines the fields that get serialized/deserialized. The create() and update() methods define how fully fledged instances are created or modified when calling serializer.save() A serializer class is very similar to a Django Form class, and includes similar validation flags on the various fields, such as required , max_length and default . The field flags can also control how the serializer should be displayed in certain circumstances, such as when rendering to HTML. The {'base_template': 'textarea.html'} flag above is equivalent to using widget=widgets.Textarea on a Django Form class. This is particularly useful for controlling how the browsable API should be displayed, as we'll see later in the tutorial. We can actually also save ourselves some time by using the ModelSerializer class, as we'll see later, but for now we'll keep our serializer definition explicit.","title":"Creating a Serializer class"},{"location":"tutorial/1-serialization/#working-with-serializers","text":"Before we go any further we'll familiarize ourselves with using our new Serializer class. Let's drop into the Django shell. python manage.py shell Okay, once we've got a few imports out of the way, let's create a couple of code snippets to work with. from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser snippet = Snippet(code='foo = \"bar\"\\n') snippet.save() snippet = Snippet(code='print(\"hello, world\")\\n') snippet.save() We've now got a few snippet instances to play with. Let's take a look at serializing one of those instances. serializer = SnippetSerializer(snippet) serializer.data # {'id': 2, 'title': '', 'code': 'print(\"hello, world\")\\n', 'linenos': False, 'language': 'python', 'style': 'friendly'} At this point we've translated the model instance into Python native datatypes. To finalize the serialization process we render the data into json . content = JSONRenderer().render(serializer.data) content # b'{\"id\": 2, \"title\": \"\", \"code\": \"print(\\\\\"hello, world\\\\\")\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"}' Deserialization is similar. First we parse a stream into Python native datatypes... import io stream = io.BytesIO(content) data = JSONParser().parse(stream) ...then we restore those native datatypes into a fully populated object instance. serializer = SnippetSerializer(data=data) serializer.is_valid() # True serializer.validated_data # OrderedDict([('title', ''), ('code', 'print(\"hello, world\")\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]) serializer.save() # <Snippet: Snippet object> Notice how similar the API is to working with forms. The similarity should become even more apparent when we start writing views that use our serializer. We can also serialize querysets instead of model instances. To do so we simply add a many=True flag to the serializer arguments. serializer = SnippetSerializer(Snippet.objects.all(), many=True) serializer.data # [OrderedDict([('id', 1), ('title', ''), ('code', 'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', ''), ('code', 'print(\"hello, world\")\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', ''), ('code', 'print(\"hello, world\")'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]","title":"Working with Serializers"},{"location":"tutorial/1-serialization/#using-modelserializers","text":"Our SnippetSerializer class is replicating a lot of information that's also contained in the Snippet model. It would be nice if we could keep our code a bit more concise. In the same way that Django provides both Form classes and ModelForm classes, REST framework includes both Serializer classes, and ModelSerializer classes. Let's look at refactoring our serializer using the ModelSerializer class. Open the file snippets/serializers.py again, and replace the SnippetSerializer class with the following. class SnippetSerializer(serializers.ModelSerializer): class Meta: model = Snippet fields = ['id', 'title', 'code', 'linenos', 'language', 'style'] One nice property that serializers have is that you can inspect all the fields in a serializer instance, by printing its representation. Open the Django shell with python manage.py shell , then try the following: from snippets.serializers import SnippetSerializer serializer = SnippetSerializer() print(repr(serializer)) # SnippetSerializer(): # id = IntegerField(label='ID', read_only=True) # title = CharField(allow_blank=True, max_length=100, required=False) # code = CharField(style={'base_template': 'textarea.html'}) # linenos = BooleanField(required=False) # language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')... # style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')... It's important to remember that ModelSerializer classes don't do anything particularly magical, they are simply a shortcut for creating serializer classes: An automatically determined set of fields. Simple default implementations for the create() and update() methods.","title":"Using ModelSerializers"},{"location":"tutorial/1-serialization/#writing-regular-django-views-using-our-serializer","text":"Let's see how we can write some API views using our new Serializer class. For the moment we won't use any of REST framework's other features, we'll just write the views as regular Django views. Edit the snippets/views.py file, and add the following. from django.http import HttpResponse, JsonResponse from django.views.decorators.csrf import csrf_exempt from rest_framework.parsers import JSONParser from snippets.models import Snippet from snippets.serializers import SnippetSerializer The root of our API is going to be a view that supports listing all the existing snippets, or creating a new snippet. @csrf_exempt def snippet_list(request): \"\"\" List all code snippets, or create a new snippet. \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return JsonResponse(serializer.data, safe=False) elif request.method == 'POST': data = JSONParser().parse(request) serializer = SnippetSerializer(data=data) if serializer.is_valid(): serializer.save() return JsonResponse(serializer.data, status=201) return JsonResponse(serializer.errors, status=400) Note that because we want to be able to POST to this view from clients that won't have a CSRF token we need to mark the view as csrf_exempt . This isn't something that you'd normally want to do, and REST framework views actually use more sensible behavior than this, but it'll do for our purposes right now. We'll also need a view which corresponds to an individual snippet, and can be used to retrieve, update or delete the snippet. @csrf_exempt def snippet_detail(request, pk): \"\"\" Retrieve, update or delete a code snippet. \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return HttpResponse(status=404) if request.method == 'GET': serializer = SnippetSerializer(snippet) return JsonResponse(serializer.data) elif request.method == 'PUT': data = JSONParser().parse(request) serializer = SnippetSerializer(snippet, data=data) if serializer.is_valid(): serializer.save() return JsonResponse(serializer.data) return JsonResponse(serializer.errors, status=400) elif request.method == 'DELETE': snippet.delete() return HttpResponse(status=204) Finally we need to wire these views up. Create the snippets/urls.py file: from django.urls import path from snippets import views urlpatterns = [ path('snippets/', views.snippet_list), path('snippets/<int:pk>/', views.snippet_detail), ] We also need to wire up the root urlconf, in the tutorial/urls.py file, to include our snippet app's URLs. from django.urls import path, include urlpatterns = [ path('', include('snippets.urls')), ] It's worth noting that there are a couple of edge cases we're not dealing with properly at the moment. If we send malformed json , or if a request is made with a method that the view doesn't handle, then we'll end up with a 500 \"server error\" response. Still, this'll do for now.","title":"Writing regular Django views using our Serializer"},{"location":"tutorial/1-serialization/#testing-our-first-attempt-at-a-web-api","text":"Now we can start up a sample server that serves our snippets. Quit out of the shell... quit() ...and start up Django's development server. python manage.py runserver Validating models... 0 errors found Django version 1.11, using settings 'tutorial.settings' Development server is running at http://127.0.0.1:8000/ Quit the server with CONTROL-C. In another terminal window, we can test the server. We can test our API using curl or httpie . Httpie is a user friendly http client that's written in Python. Let's install that. You can install httpie using pip: pip install httpie Finally, we can get a list of all of the snippets: http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { \"id\": 1, \"title\": \"\", \"code\": \"foo = \\\"bar\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }, { \"id\": 2, \"title\": \"\", \"code\": \"print(\\\"hello, world\\\")\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } ] Or we can get a particular snippet by referencing its id: http http://127.0.0.1:8000/snippets/2/ HTTP/1.1 200 OK ... { \"id\": 2, \"title\": \"\", \"code\": \"print(\\\"hello, world\\\")\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } Similarly, you can have the same json displayed by visiting these URLs in a web browser.","title":"Testing our first attempt at a Web API"},{"location":"tutorial/1-serialization/#where-are-we-now","text":"We're doing okay so far, we've got a serialization API that feels pretty similar to Django's Forms API, and some regular Django views. Our API views don't do anything particularly special at the moment, beyond serving json responses, and there are some error handling edge cases we'd still like to clean up, but it's a functioning Web API. We'll see how we can start to improve things in part 2 of the tutorial .","title":"Where are we now"},{"location":"tutorial/1-serialization_zh/","text":"Tutorial 1: \u5e8f\u5217\u5316 \u4ecb\u7ecd \u672c\u6559\u7a0b\u5c06\u4ecb\u7ecd\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u6536\u5f55\u4ee3\u7801\u9ad8\u4eae\u5c55\u793a\u7684Web API\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d, \u5c06\u4f1a\u4ecb\u7ecd\u7ec4\u6210Rest\u6846\u67b6\u7684\u5404\u4e2a\u7ec4\u4ef6\uff0c\u5e76\u8ba9\u4f60\u5168\u9762\u4e86\u89e3\u5404\u4e2a\u7ec4\u4ef6\u662f\u5982\u4f55\u4e00\u8d77\u5de5\u4f5c\u7684\u3002 \u8fd9\u4e2a\u6559\u7a0b\u662f\u76f8\u5f53\u6df1\u5165\u7684\uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u5728\u5f00\u59cb\u4e4b\u524d\u51c6\u5907\u4e9b\u5564\u9152\u548c\u82b1\u751f\u6bdb\u8c46\u4ec0\u4e48\u7684\u3002\u5982\u679c\u4f60\u53ea\u662f\u60f3\u6765\u4e2a\u5feb\u901f\u9884\u89c8\uff0c\u90a3\u4f60\u5e94\u8be5\u67e5\u770b quickstart \u6587\u6863\u3002 \u6ce8\u610f \uff1a\u672c\u6559\u7a0b\u7684\u4ee3\u7801\u53ef\u4ee5\u5728Github\u7684 tomchristie/rest-framework-tutorial \u5e93\u4e2d\u627e\u5230\u3002\u5b8c\u6574\u7684\u5b9e\u73b0\u7248\u672c\u53ef\u4ee5 \u5728\u7ebf \u67e5\u770b\u4f5c\u4e3a\u4e00\u4e2a\u6c99\u76d2\u7248\u672c\u8fdb\u884c\u6d4b\u8bd5\u3002 \u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883 \u5728\u505a\u5176\u4ed6\u4e8b\u60c5\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u7528 virtualenv \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u73af\u5883\u3002\u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u6211\u4eec\u7684\u5305\u914d\u7f6e\u4e0e\u6211\u4eec\u6b63\u5728\u5f00\u5c55\u7684\u4efb\u4f55\u5176\u4ed6\u9879\u76ee\u4fdd\u6301\u826f\u597d\u7684\u9694\u79bb\u3002 virtualenv env source env/bin/activate \u73b0\u5728\u6211\u4eec\u5728\u4e00\u4e2avirtualenv\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u88c5\u6211\u4eec\u9700\u8981\u7684\u5305\u4e86\u3002 pip install django pip install djangorestframework pip install pygments # \u4ee3\u7801\u9ad8\u4eae\u63d2\u4ef6 \u6ce8\u610f\uff1a \u8981\u968f\u65f6\u9000\u51favirtualenv\u73af\u5883\uff0c\u53ea\u9700\u8f93\u5165 deactivate \u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 virtualenv documentation \u6587\u6863\u3002 \u6b63\u5f0f\u5f00\u59cb \u597d\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u8981\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\u3002 cd ~ django-admin.py startproject tutorial cd tutorial \u5b8c\u6210\u4e0a\u9762\u7684\u6b65\u9aa4\u4ee5\u540e\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u7b80\u5355Web API\u7684app\u3002 python manage.py startapp snippets \u6211\u4eec\u9700\u8981\u5c06\u65b0\u5efa\u7684 snippets app\u548c rest_framework app\u6dfb\u52a0\u5230 INSTALLED_APPS \u3002\u8ba9\u6211\u4eec\u7f16\u8f91 tutorial/settings.py \u6587\u4ef6\uff1a INSTALLED_APPS = ( ... 'rest_framework', 'snippets.apps.SnippetsConfig', ) \u8bf7\u6ce8\u610f\u5982\u679c\u4f60\u4f7f\u7528\u7684Django\u7248\u672c\u4f4e\u4e8e1.9\uff0c\u4f60\u9700\u8981\u4f7f\u7528 snippets.apps.SnippetsConfig \u66ff\u6362 snippets \u3002 \u597d\u4e86\uff0c\u6211\u4eec\u7684\u51c6\u5907\u5de5\u4f5c\u505a\u5b8c\u4e86\u3002 \u521b\u5efa\u4e00\u4e2amodel \u4e3a\u4e86\u5b9e\u73b0\u672c\u6559\u7a0b\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7247\u6bb5\u7684\u7b80\u5355\u7684 Snippet model\u3002\u7136\u540e\u7ee7\u7eed\u7f16\u8f91 snippets/models.py \u6587\u4ef6\u3002\u6ce8\u610f\uff1a\u4f18\u79c0\u7684\u7f16\u7a0b\u5b9e\u8df5\u90fd\u4f1a\u6dfb\u52a0\u6ce8\u91ca\u3002\u867d\u7136\u4f60\u5c06\u5728\u672c\u6559\u7a0b\u4ee3\u7801\u7684\u5b58\u50a8\u5e93\u7248\u672c\u4e2d\u627e\u5230\u5b83\u4eec\uff0c\u4f46\u6211\u4eec\u5728\u6b64\u5ffd\u7565\u4e86\u5b83\u4eec\uff0c\u4e13\u6ce8\u4e8e\u4ee3\u7801\u672c\u8eab\u3002 from django.db import models from pygments.lexers import get_all_lexers from pygments.styles import get_all_styles LEXERS = [item for item in get_all_lexers() if item[1]] LANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS]) STYLE_CHOICES = sorted((item, item) for item in get_all_styles()) class Snippet(models.Model): created = models.DateTimeField(auto_now_add=True) title = models.CharField(max_length=100, blank=True, default='') code = models.TextField() linenos = models.BooleanField(default=False) language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100) style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100) class Meta: ordering = ('created',) \u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u6211\u4eec\u7684\u4ee3\u7801\u6bb5\u6a21\u578b\u521b\u5efa\u521d\u59cb\u8fc1\u79fb\uff08initial migration\uff09\uff0c\u5e76\u9996\u6b21\u540c\u6b65\u6570\u636e\u5e93\uff08migrate\uff09\u3002 python manage.py makemigrations snippets python manage.py migrate \u521b\u5efa\u4e00\u4e2a\u5e8f\u5217\u5316\u7c7b \u5f00\u53d1\u6211\u4eec\u7684Web API\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u4e3a\u6211\u4eec\u7684Web API\u63d0\u4f9b\u4e00\u79cd\u5c06\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e3a\u8bf8\u5982 json \u4e4b\u7c7b\u7684\u8868\u793a\u5f62\u5f0f\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e0eDjango forms\u975e\u5e38\u76f8\u4f3c\u7684\u5e8f\u5217\u5316\u5668\uff08serializers\uff09\u6765\u5b9e\u73b0\u3002 \u5728 snippets \u7684\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a serializers.py \u6587\u4ef6\uff0c\u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 from rest_framework import serializers from snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES class SnippetSerializer(serializers.Serializer): id = serializers.IntegerField(read_only=True) title = serializers.CharField(required=False, allow_blank=True, max_length=100) code = serializers.CharField(style={'base_template': 'textarea.html'}) linenos = serializers.BooleanField(required=False) language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python') style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly') def create(self, validated_data): \"\"\" \u6839\u636e\u63d0\u4f9b\u7684\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684`Snippet`\u5b9e\u4f8b\u3002 \"\"\" return Snippet.objects.create(**validated_data) def update(self, instance, validated_data): \"\"\" \u6839\u636e\u63d0\u4f9b\u7684\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u66f4\u65b0\u548c\u8fd4\u56de\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684`Snippet`\u5b9e\u4f8b\u3002 \"\"\" instance.title = validated_data.get('title', instance.title) instance.code = validated_data.get('code', instance.code) instance.linenos = validated_data.get('linenos', instance.linenos) instance.language = validated_data.get('language', instance.language) instance.style = validated_data.get('style', instance.style) instance.save() return instance \u5e8f\u5217\u5316\u5668\u7c7b\u7684\u7b2c\u4e00\u90e8\u5206\u5b9a\u4e49\u4e86\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002 create() \u548c update() \u65b9\u6cd5\u5b9a\u4e49\u4e86\u5728\u8c03\u7528 serializer.save() \u65f6\u5982\u4f55\u521b\u5efa\u548c\u4fee\u6539\u5b8c\u6574\u7684\u5b9e\u4f8b\u3002 \u5e8f\u5217\u5316\u5668\u7c7b\u4e0eDjango Form \u7c7b\u975e\u5e38\u76f8\u4f3c\uff0c\u5e76\u5728\u5404\u79cd\u5b57\u6bb5\u4e2d\u5305\u542b\u7c7b\u4f3c\u7684\u9a8c\u8bc1\u6807\u5fd7\uff0c\u4f8b\u5982 required \uff0c max_length \u548c default \u3002 \u5b57\u6bb5\u6807\u5fd7\u8fd8\u53ef\u4ee5\u63a7\u5236serializer\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5982\u4f55\u663e\u793a\uff0c\u6bd4\u5982\u6e32\u67d3HTML\u7684\u65f6\u5019\u3002\u4e0a\u9762\u7684 {'base_template': 'textarea.html'} \u6807\u5fd7\u7b49\u540c\u4e8e\u5728Django Form \u7c7b\u4e2d\u4f7f\u7528 widget=widgets.Textarea \u3002\u8fd9\u5bf9\u4e8e\u63a7\u5236\u5982\u4f55\u663e\u793a\u53ef\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\u7279\u522b\u6709\u7528\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u540e\u9762\u770b\u5230\u3002 \u6211\u4eec\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ModelSerializer \u7c7b\u6765\u8282\u7701\u65f6\u95f4\uff0c\u5c31\u50cf\u6211\u4eec\u540e\u9762\u4f1a\u7528\u5230\u7684\u90a3\u6837\u3002\u4f46\u662f\u73b0\u5728\u6211\u4eec\u8fd8\u7ee7\u7eed\u4f7f\u7528\u6211\u4eec\u660e\u786e\u5b9a\u4e49\u7684serializer\u3002 \u4f7f\u7528\u5e8f\u5217\u5316\u7c7b \u5728\u6211\u4eec\u8fdb\u4e00\u6b65\u4e86\u89e3\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u719f\u6089\u4f7f\u7528\u6211\u4eec\u65b0\u7684Serializer\u7c7b\u3002\u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\u8fdb\u5165Django shell\u3002 python manage.py shell \u597d\u7684\uff0c\u50cf\u4e0b\u9762\u4e00\u6837\u5bfc\u5165\u51e0\u4e2a\u6a21\u5757\uff0c\u7136\u540e\u5f00\u59cb\u521b\u5efa\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\u6765\u5904\u7406\u3002 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser snippet = Snippet(code='foo = \"bar\"\\n') snippet.save() snippet = Snippet(code='print \"hello, world\"\\n') snippet.save() \u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u6709\u51e0\u4e2a\u7247\u6bb5\u5b9e\u4f8b\u4e86\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5c06\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u5e8f\u5217\u5316\u3002 serializer = SnippetSerializer(snippet) serializer.data # {'id': 2, 'title': u'', 'code': u'print \"hello, world\"\\n', 'linenos': False, 'language': u'python', 'style': u'friendly'} \u6b64\u65f6\uff0c\u6211\u4eec\u5c06\u6a21\u578b\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u539f\u751f\u6570\u636e\u7c7b\u578b\u3002\u8981\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8f6c\u6362\u6210 json \u3002 content = JSONRenderer().render(serializer.data) content # b'{\"id\": 2, \"title\": \"\", \"code\": \"print(\\\\\"hello, world\\\\\")\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"}' \u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\u6211\u4eec\u5c06\u4e00\u4e2a\u6d41\uff08stream\uff09\u89e3\u6790\u4e3aPython\u539f\u751f\u6570\u636e\u7c7b\u578b... import io stream = io.BytesIO(content) data = JSONParser().parse(stream) ...\u7136\u540e\u6211\u4eec\u8981\u5c06Python\u539f\u751f\u6570\u636e\u7c7b\u578b\u6062\u590d\u6210\u6b63\u5e38\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002 serializer = SnippetSerializer(data=data) serializer.is_valid() # True serializer.validated_data # OrderedDict([('title', ''), ('code', 'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]) serializer.save() # <Snippet: Snippet object> \u53ef\u4ee5\u770b\u5230API\u548c\u8868\u5355(forms)\u662f\u591a\u4e48\u76f8\u4f3c\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7c7b\u7f16\u5199\u89c6\u56fe\u7684\u65f6\u5019\uff0c\u76f8\u4f3c\u6027\u4f1a\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5e8f\u5217\u5316\u67e5\u8be2\u7ed3\u679c\u96c6\uff08querysets\uff09\u800c\u4e0d\u662f\u6a21\u578b\u5b9e\u4f8b\u3002\u6211\u4eec\u53ea\u9700\u8981\u4e3aserializer\u6dfb\u52a0\u4e00\u4e2a many=True \u6807\u5fd7\u3002 serializer = SnippetSerializer(Snippet.objects.all(), many=True) serializer.data # [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print \"hello, world\"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])] \u4f7f\u7528ModelSerializers \u6211\u4eec\u7684 SnippetSerializer \u7c7b\u4e2d\u91cd\u590d\u4e86\u5f88\u591a\u5305\u542b\u5728 Snippet \u6a21\u578b\u7c7b\uff08model\uff09\u4e2d\u7684\u4fe1\u606f\u3002\u5982\u679c\u80fd\u4fdd\u8bc1\u6211\u4eec\u7684\u4ee3\u7801\u6574\u6d01\uff0c\u90a3\u5c31\u66f4\u597d\u4e86\u3002 \u5c31\u50cfDjango\u63d0\u4f9b\u4e86 Form \u7c7b\u548c ModelForm \u7c7b\u4e00\u6837\uff0cREST framework\u5305\u62ec Serializer \u7c7b\u548c ModelSerializer \u7c7b\u3002 \u6211\u4eec\u6765\u770b\u770b\u4f7f\u7528 ModelSerializer \u7c7b\u91cd\u6784\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7c7b\u3002\u518d\u6b21\u6253\u5f00 snippets/serializers.py \u6587\u4ef6\uff0c\u5e76\u5c06 SnippetSerializer \u7c7b\u66ff\u6362\u4e3a\u4ee5\u4e0b\u5185\u5bb9\u3002 class SnippetSerializer(serializers.ModelSerializer): class Meta: model = Snippet fields = ('id', 'title', 'code', 'linenos', 'language', 'style') \u5e8f\u5217\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u5c5e\u6027\u5c31\u662f\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u5e8f\u5217\u5316\u5668\u7c7b\u5b9e\u4f8b\u7684\u7ed3\u6784(representation)\u67e5\u770b\u5b83\u7684\u6240\u6709\u5b57\u6bb5\u3002 from snippets.serializers import SnippetSerializer serializer = SnippetSerializer() print(repr(serializer)) # SnippetSerializer(): # id = IntegerField(label='ID', read_only=True) # title = CharField(allow_blank=True, max_length=100, required=False) # code = CharField(style={'base_template': 'textarea.html'}) # linenos = BooleanField(required=False) # language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')... # style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')... \u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\uff0c ModelSerializer \u7c7b\u5e76\u4e0d\u4f1a\u505a\u4efb\u4f55\u7279\u522b\u795e\u5947\u7684\u4e8b\u60c5\uff0c\u5b83\u4eec\u53ea\u662f\u521b\u5efa\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u5feb\u6377\u65b9\u5f0f\uff1a \u4e00\u7ec4\u81ea\u52a8\u786e\u5b9a\u7684\u5b57\u6bb5\u3002 \u9ed8\u8ba4\u7b80\u5355\u5b9e\u73b0\u7684 create() \u548c update() \u65b9\u6cd5\u3002 \u4f7f\u7528\u6211\u4eec\u7684\u5e8f\u5217\u5316\uff08Serializer\uff09\u6765\u7f16\u5199\u5e38\u89c4\u7684Django\u89c6\u56fe\uff08views\uff09 \u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u65b0\u7684Serializer\u7c7b\u7f16\u5199\u4e00\u4e9bAPI\u89c6\u56fe\u3002\u76ee\u524d\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55REST\u6846\u67b6\u7684\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u89c6\u56fe\u4f5c\u4e3a\u5e38\u89c4Django\u89c6\u56fe\u7f16\u5199\u3002 \u7f16\u8f91 snippets/views.py \u6587\u4ef6\uff0c\u5e76\u4e14\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 from django.http import HttpResponse from django.views.decorators.csrf import csrf_exempt from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser from snippets.models import Snippet from snippets.serializers import SnippetSerializer class JSONResponse(HttpResponse): \"\"\" An HttpResponse that renders its content into JSON. \"\"\" def __init__(self, data, **kwargs): content = JSONRenderer().render(data) kwargs['content_type'] = 'application/json' super(JSONResponse, self).__init__(content, **kwargs) \u6211\u4eecAPI\u7684\u6839\u89c6\u56fe\u652f\u6301\u5217\u51fa\u6240\u6709\u73b0\u6709\u7684snippet\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002 @csrf_exempt def snippet_list(request): \"\"\" \u5217\u51fa\u6240\u6709\u7684code snippet\uff0c\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002 \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return JSONResponse(serializer.data) elif request.method == 'POST': data = JSONParser().parse(request) serializer = SnippetSerializer(data=data) if serializer.is_valid(): serializer.save() return JSONResponse(serializer.data, status=201) return JSONResponse(serializer.errors, status=400) \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4ece\u4e0d\u5177\u6709CSRF\u4ee4\u724c\u7684\u5ba2\u6237\u7aef\u5bf9\u6b64\u89c6\u56fe\u8fdb\u884cPOST\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u89c6\u56fe\u6807\u8bb0\u4e3a csrf_exempt \u3002\u8fd9\u4e0d\u662f\u4f60\u901a\u5e38\u60f3\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u5e76\u4e14REST\u6846\u67b6\u89c6\u56fe\u5b9e\u9645\u4e0a\u6bd4\u8fd9\u66f4\u5b9e\u7528\u7684\u884c\u4e3a\uff0c\u4f46\u5b83\u73b0\u5728\u8db3\u591f\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\u3002 \u6211\u4eec\u4e5f\u9700\u8981\u4e00\u4e2a\u4e0e\u5355\u4e2asnippet\u5bf9\u8c61\u76f8\u5e94\u7684\u89c6\u56fe\uff0c\u5e76\u4e14\u7528\u4e8e\u83b7\u53d6\uff0c\u66f4\u65b0\u548c\u5220\u9664\u8fd9\u4e2asnippet\u3002 @csrf_exempt def snippet_detail(request, pk): \"\"\" \u83b7\u53d6\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2a code snippet\u3002 \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return HttpResponse(status=404) if request.method == 'GET': serializer = SnippetSerializer(snippet) return JSONResponse(serializer.data) elif request.method == 'PUT': data = JSONParser().parse(request) serializer = SnippetSerializer(snippet, data=data) if serializer.is_valid(): serializer.save() return JSONResponse(serializer.data) return JSONResponse(serializer.errors, status=400) elif request.method == 'DELETE': snippet.delete() return HttpResponse(status=204) \u6700\u7ec8\uff0c\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e9b\u89c6\u56fe\u8fde\u8d77\u6765\u3002\u521b\u5efa\u4e00\u4e2a snippets/urls.py \u6587\u4ef6\uff1a from django.conf.urls import url from snippets import views urlpatterns = [ url(r'^snippets/$', views.snippet_list), url(r'^snippets/(?P<pk>[0-9]+)/$', views.snippet_detail), ] \u6211\u4eec\u4e5f\u9700\u8981\u5728\u6839URL\u914d\u7f6e tutorial/urls.py \u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u6211\u4eec\u7684snippet\u5e94\u7528\u7684URL\u3002 from django.conf.urls import url, include urlpatterns = [ url(r'^', include('snippets.urls')), ] \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u76ee\u524d\u6211\u4eec\u8fd8\u6ca1\u6709\u6b63\u786e\u5904\u7406\u597d\u51e0\u4e2a\u8fb9\u7f18\u4e8b\u9879\u3002\u5982\u679c\u6211\u4eec\u53d1\u9001\u683c\u5f0f\u9519\u8bef\u7684 json \uff0c\u6216\u8005\u5982\u679c\u4f7f\u7528\u89c6\u56fe\u4e0d\u5904\u7406\u7684\u65b9\u6cd5\u53d1\u51fa\u8bf7\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u4f1a\u51fa\u73b0\u4e00\u4e2a500\u201c\u670d\u52a1\u5668\u9519\u8bef\u201d\u54cd\u5e94\u3002\u4e0d\u8fc7\uff0c\u73b0\u5728\u8fd9\u6837\u505a\u3002 \u6d4b\u8bd5\u5728\u6211\u4eecWeb API\u8fdb\u884c\u7b2c\u4e00\u6b21\u5c1d\u8bd5 \u73b0\u5728\u4e3a\u6211\u4eec\u7684snippets\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u3002 \u9000\u51fa\u6240\u6709\u7684shell... quit() ...\u542f\u52a8Django\u7684\u5f00\u53d1\u670d\u52a1\u5668\u3002 python manage.py runserver Validating models... 0 errors found Django version 1.8.3, using settings 'tutorial.settings' Development server is running at http://127.0.0.1:8000/ Quit the server with CONTROL-C. \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u670d\u52a1\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 curl \u6216 httpie \u6d4b\u8bd5\u6211\u4eec\u7684\u670d\u52a1\u5668\u3002Httpie\u662f\u7528Python\u7f16\u5199\u7684\u7528\u6237\u53cb\u597d\u7684http\u5ba2\u6237\u7aef\uff0c\u6211\u4eec\u5b89\u88c5\u5b83\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528pip\u6765\u5b89\u88c5httpie\uff1a pip install httpie \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6240\u6709snippet\u7684\u5217\u8868\uff1a http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { \"id\": 1, \"title\": \"\", \"code\": \"foo = \\\"bar\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }, { \"id\": 2, \"title\": \"\", \"code\": \"print \\\"hello, world\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } ] \u6216\u8005\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5176id\u6765\u83b7\u53d6\u7279\u5b9a\u7684snippet\uff1a http http://127.0.0.1:8000/snippets/2/ HTTP/1.1 200 OK ... { \"id\": 2, \"title\": \"\", \"code\": \"print \\\"hello, world\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } \u540c\u6837\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u8fd9\u4e9bURL\u6765\u663e\u793a\u76f8\u540c\u200b\u200b\u7684json\u3002 \u6211\u4eec\u73b0\u5728\u7684\u4f4d\u7f6e \u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u505a\u5f97\u4e0d\u9519\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u4e0eDjango\u7684Forms API\u975e\u5e38\u76f8\u4f3c\u5e8f\u5217\u5316API\uff0c\u548c\u4e00\u4e9b\u5e38\u89c4\u7684Django\u89c6\u56fe\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u7684API\u89c6\u56fe\u9664\u4e86\u670d\u52a1 json \u54cd\u5e94\u5916\uff0c\u4e0d\u4f1a\u505a\u4efb\u4f55\u5176\u4ed6\u7279\u522b\u7684\u4e1c\u897f\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u9519\u8bef\u6211\u4eec\u4ecd\u7136\u9700\u8981\u6e05\u5904\u7406\uff0c\u4f46\u662f\u5b83\u4ecd\u662f\u4e00\u4e2a\u53ef\u7528\u7684Web API\u3002 \u6211\u4eec\u5c06\u5728 \u672c\u6559\u7a0b\u7684\u7b2c2\u90e8\u5206 \u6765\u5b8c\u5584\u8fd9\u4e9b\u4e1c\u897f\u3002","title":"1 - Serialization"},{"location":"tutorial/1-serialization_zh/#tutorial-1","text":"","title":"Tutorial 1: \u5e8f\u5217\u5316"},{"location":"tutorial/1-serialization_zh/#_1","text":"\u672c\u6559\u7a0b\u5c06\u4ecb\u7ecd\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u6536\u5f55\u4ee3\u7801\u9ad8\u4eae\u5c55\u793a\u7684Web API\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d, \u5c06\u4f1a\u4ecb\u7ecd\u7ec4\u6210Rest\u6846\u67b6\u7684\u5404\u4e2a\u7ec4\u4ef6\uff0c\u5e76\u8ba9\u4f60\u5168\u9762\u4e86\u89e3\u5404\u4e2a\u7ec4\u4ef6\u662f\u5982\u4f55\u4e00\u8d77\u5de5\u4f5c\u7684\u3002 \u8fd9\u4e2a\u6559\u7a0b\u662f\u76f8\u5f53\u6df1\u5165\u7684\uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u5728\u5f00\u59cb\u4e4b\u524d\u51c6\u5907\u4e9b\u5564\u9152\u548c\u82b1\u751f\u6bdb\u8c46\u4ec0\u4e48\u7684\u3002\u5982\u679c\u4f60\u53ea\u662f\u60f3\u6765\u4e2a\u5feb\u901f\u9884\u89c8\uff0c\u90a3\u4f60\u5e94\u8be5\u67e5\u770b quickstart \u6587\u6863\u3002 \u6ce8\u610f \uff1a\u672c\u6559\u7a0b\u7684\u4ee3\u7801\u53ef\u4ee5\u5728Github\u7684 tomchristie/rest-framework-tutorial \u5e93\u4e2d\u627e\u5230\u3002\u5b8c\u6574\u7684\u5b9e\u73b0\u7248\u672c\u53ef\u4ee5 \u5728\u7ebf \u67e5\u770b\u4f5c\u4e3a\u4e00\u4e2a\u6c99\u76d2\u7248\u672c\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"\u4ecb\u7ecd"},{"location":"tutorial/1-serialization_zh/#_2","text":"\u5728\u505a\u5176\u4ed6\u4e8b\u60c5\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u7528 virtualenv \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u73af\u5883\u3002\u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u6211\u4eec\u7684\u5305\u914d\u7f6e\u4e0e\u6211\u4eec\u6b63\u5728\u5f00\u5c55\u7684\u4efb\u4f55\u5176\u4ed6\u9879\u76ee\u4fdd\u6301\u826f\u597d\u7684\u9694\u79bb\u3002 virtualenv env source env/bin/activate \u73b0\u5728\u6211\u4eec\u5728\u4e00\u4e2avirtualenv\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u88c5\u6211\u4eec\u9700\u8981\u7684\u5305\u4e86\u3002 pip install django pip install djangorestframework pip install pygments # \u4ee3\u7801\u9ad8\u4eae\u63d2\u4ef6 \u6ce8\u610f\uff1a \u8981\u968f\u65f6\u9000\u51favirtualenv\u73af\u5883\uff0c\u53ea\u9700\u8f93\u5165 deactivate \u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 virtualenv documentation \u6587\u6863\u3002","title":"\u521b\u5efa\u4e00\u4e2a\u65b0\u73af\u5883"},{"location":"tutorial/1-serialization_zh/#_3","text":"\u597d\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u8981\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\u3002 cd ~ django-admin.py startproject tutorial cd tutorial \u5b8c\u6210\u4e0a\u9762\u7684\u6b65\u9aa4\u4ee5\u540e\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u7b80\u5355Web API\u7684app\u3002 python manage.py startapp snippets \u6211\u4eec\u9700\u8981\u5c06\u65b0\u5efa\u7684 snippets app\u548c rest_framework app\u6dfb\u52a0\u5230 INSTALLED_APPS \u3002\u8ba9\u6211\u4eec\u7f16\u8f91 tutorial/settings.py \u6587\u4ef6\uff1a INSTALLED_APPS = ( ... 'rest_framework', 'snippets.apps.SnippetsConfig', ) \u8bf7\u6ce8\u610f\u5982\u679c\u4f60\u4f7f\u7528\u7684Django\u7248\u672c\u4f4e\u4e8e1.9\uff0c\u4f60\u9700\u8981\u4f7f\u7528 snippets.apps.SnippetsConfig \u66ff\u6362 snippets \u3002 \u597d\u4e86\uff0c\u6211\u4eec\u7684\u51c6\u5907\u5de5\u4f5c\u505a\u5b8c\u4e86\u3002","title":"\u6b63\u5f0f\u5f00\u59cb"},{"location":"tutorial/1-serialization_zh/#model","text":"\u4e3a\u4e86\u5b9e\u73b0\u672c\u6559\u7a0b\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7247\u6bb5\u7684\u7b80\u5355\u7684 Snippet model\u3002\u7136\u540e\u7ee7\u7eed\u7f16\u8f91 snippets/models.py \u6587\u4ef6\u3002\u6ce8\u610f\uff1a\u4f18\u79c0\u7684\u7f16\u7a0b\u5b9e\u8df5\u90fd\u4f1a\u6dfb\u52a0\u6ce8\u91ca\u3002\u867d\u7136\u4f60\u5c06\u5728\u672c\u6559\u7a0b\u4ee3\u7801\u7684\u5b58\u50a8\u5e93\u7248\u672c\u4e2d\u627e\u5230\u5b83\u4eec\uff0c\u4f46\u6211\u4eec\u5728\u6b64\u5ffd\u7565\u4e86\u5b83\u4eec\uff0c\u4e13\u6ce8\u4e8e\u4ee3\u7801\u672c\u8eab\u3002 from django.db import models from pygments.lexers import get_all_lexers from pygments.styles import get_all_styles LEXERS = [item for item in get_all_lexers() if item[1]] LANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS]) STYLE_CHOICES = sorted((item, item) for item in get_all_styles()) class Snippet(models.Model): created = models.DateTimeField(auto_now_add=True) title = models.CharField(max_length=100, blank=True, default='') code = models.TextField() linenos = models.BooleanField(default=False) language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100) style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100) class Meta: ordering = ('created',) \u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u6211\u4eec\u7684\u4ee3\u7801\u6bb5\u6a21\u578b\u521b\u5efa\u521d\u59cb\u8fc1\u79fb\uff08initial migration\uff09\uff0c\u5e76\u9996\u6b21\u540c\u6b65\u6570\u636e\u5e93\uff08migrate\uff09\u3002 python manage.py makemigrations snippets python manage.py migrate","title":"\u521b\u5efa\u4e00\u4e2amodel"},{"location":"tutorial/1-serialization_zh/#_4","text":"\u5f00\u53d1\u6211\u4eec\u7684Web API\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u4e3a\u6211\u4eec\u7684Web API\u63d0\u4f9b\u4e00\u79cd\u5c06\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e3a\u8bf8\u5982 json \u4e4b\u7c7b\u7684\u8868\u793a\u5f62\u5f0f\u7684\u65b9\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e0eDjango forms\u975e\u5e38\u76f8\u4f3c\u7684\u5e8f\u5217\u5316\u5668\uff08serializers\uff09\u6765\u5b9e\u73b0\u3002 \u5728 snippets \u7684\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a serializers.py \u6587\u4ef6\uff0c\u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 from rest_framework import serializers from snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES class SnippetSerializer(serializers.Serializer): id = serializers.IntegerField(read_only=True) title = serializers.CharField(required=False, allow_blank=True, max_length=100) code = serializers.CharField(style={'base_template': 'textarea.html'}) linenos = serializers.BooleanField(required=False) language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python') style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly') def create(self, validated_data): \"\"\" \u6839\u636e\u63d0\u4f9b\u7684\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684`Snippet`\u5b9e\u4f8b\u3002 \"\"\" return Snippet.objects.create(**validated_data) def update(self, instance, validated_data): \"\"\" \u6839\u636e\u63d0\u4f9b\u7684\u9a8c\u8bc1\u8fc7\u7684\u6570\u636e\u66f4\u65b0\u548c\u8fd4\u56de\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684`Snippet`\u5b9e\u4f8b\u3002 \"\"\" instance.title = validated_data.get('title', instance.title) instance.code = validated_data.get('code', instance.code) instance.linenos = validated_data.get('linenos', instance.linenos) instance.language = validated_data.get('language', instance.language) instance.style = validated_data.get('style', instance.style) instance.save() return instance \u5e8f\u5217\u5316\u5668\u7c7b\u7684\u7b2c\u4e00\u90e8\u5206\u5b9a\u4e49\u4e86\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002 create() \u548c update() \u65b9\u6cd5\u5b9a\u4e49\u4e86\u5728\u8c03\u7528 serializer.save() \u65f6\u5982\u4f55\u521b\u5efa\u548c\u4fee\u6539\u5b8c\u6574\u7684\u5b9e\u4f8b\u3002 \u5e8f\u5217\u5316\u5668\u7c7b\u4e0eDjango Form \u7c7b\u975e\u5e38\u76f8\u4f3c\uff0c\u5e76\u5728\u5404\u79cd\u5b57\u6bb5\u4e2d\u5305\u542b\u7c7b\u4f3c\u7684\u9a8c\u8bc1\u6807\u5fd7\uff0c\u4f8b\u5982 required \uff0c max_length \u548c default \u3002 \u5b57\u6bb5\u6807\u5fd7\u8fd8\u53ef\u4ee5\u63a7\u5236serializer\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5982\u4f55\u663e\u793a\uff0c\u6bd4\u5982\u6e32\u67d3HTML\u7684\u65f6\u5019\u3002\u4e0a\u9762\u7684 {'base_template': 'textarea.html'} \u6807\u5fd7\u7b49\u540c\u4e8e\u5728Django Form \u7c7b\u4e2d\u4f7f\u7528 widget=widgets.Textarea \u3002\u8fd9\u5bf9\u4e8e\u63a7\u5236\u5982\u4f55\u663e\u793a\u53ef\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\u7279\u522b\u6709\u7528\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u540e\u9762\u770b\u5230\u3002 \u6211\u4eec\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ModelSerializer \u7c7b\u6765\u8282\u7701\u65f6\u95f4\uff0c\u5c31\u50cf\u6211\u4eec\u540e\u9762\u4f1a\u7528\u5230\u7684\u90a3\u6837\u3002\u4f46\u662f\u73b0\u5728\u6211\u4eec\u8fd8\u7ee7\u7eed\u4f7f\u7528\u6211\u4eec\u660e\u786e\u5b9a\u4e49\u7684serializer\u3002","title":"\u521b\u5efa\u4e00\u4e2a\u5e8f\u5217\u5316\u7c7b"},{"location":"tutorial/1-serialization_zh/#_5","text":"\u5728\u6211\u4eec\u8fdb\u4e00\u6b65\u4e86\u89e3\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u719f\u6089\u4f7f\u7528\u6211\u4eec\u65b0\u7684Serializer\u7c7b\u3002\u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\u8fdb\u5165Django shell\u3002 python manage.py shell \u597d\u7684\uff0c\u50cf\u4e0b\u9762\u4e00\u6837\u5bfc\u5165\u51e0\u4e2a\u6a21\u5757\uff0c\u7136\u540e\u5f00\u59cb\u521b\u5efa\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\u6765\u5904\u7406\u3002 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser snippet = Snippet(code='foo = \"bar\"\\n') snippet.save() snippet = Snippet(code='print \"hello, world\"\\n') snippet.save() \u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u6709\u51e0\u4e2a\u7247\u6bb5\u5b9e\u4f8b\u4e86\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5c06\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u5e8f\u5217\u5316\u3002 serializer = SnippetSerializer(snippet) serializer.data # {'id': 2, 'title': u'', 'code': u'print \"hello, world\"\\n', 'linenos': False, 'language': u'python', 'style': u'friendly'} \u6b64\u65f6\uff0c\u6211\u4eec\u5c06\u6a21\u578b\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u539f\u751f\u6570\u636e\u7c7b\u578b\u3002\u8981\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8f6c\u6362\u6210 json \u3002 content = JSONRenderer().render(serializer.data) content # b'{\"id\": 2, \"title\": \"\", \"code\": \"print(\\\\\"hello, world\\\\\")\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"}' \u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\u6211\u4eec\u5c06\u4e00\u4e2a\u6d41\uff08stream\uff09\u89e3\u6790\u4e3aPython\u539f\u751f\u6570\u636e\u7c7b\u578b... import io stream = io.BytesIO(content) data = JSONParser().parse(stream) ...\u7136\u540e\u6211\u4eec\u8981\u5c06Python\u539f\u751f\u6570\u636e\u7c7b\u578b\u6062\u590d\u6210\u6b63\u5e38\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002 serializer = SnippetSerializer(data=data) serializer.is_valid() # True serializer.validated_data # OrderedDict([('title', ''), ('code', 'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]) serializer.save() # <Snippet: Snippet object> \u53ef\u4ee5\u770b\u5230API\u548c\u8868\u5355(forms)\u662f\u591a\u4e48\u76f8\u4f3c\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7c7b\u7f16\u5199\u89c6\u56fe\u7684\u65f6\u5019\uff0c\u76f8\u4f3c\u6027\u4f1a\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5e8f\u5217\u5316\u67e5\u8be2\u7ed3\u679c\u96c6\uff08querysets\uff09\u800c\u4e0d\u662f\u6a21\u578b\u5b9e\u4f8b\u3002\u6211\u4eec\u53ea\u9700\u8981\u4e3aserializer\u6dfb\u52a0\u4e00\u4e2a many=True \u6807\u5fd7\u3002 serializer = SnippetSerializer(Snippet.objects.all(), many=True) serializer.data # [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print \"hello, world\"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]","title":"\u4f7f\u7528\u5e8f\u5217\u5316\u7c7b"},{"location":"tutorial/1-serialization_zh/#modelserializers","text":"\u6211\u4eec\u7684 SnippetSerializer \u7c7b\u4e2d\u91cd\u590d\u4e86\u5f88\u591a\u5305\u542b\u5728 Snippet \u6a21\u578b\u7c7b\uff08model\uff09\u4e2d\u7684\u4fe1\u606f\u3002\u5982\u679c\u80fd\u4fdd\u8bc1\u6211\u4eec\u7684\u4ee3\u7801\u6574\u6d01\uff0c\u90a3\u5c31\u66f4\u597d\u4e86\u3002 \u5c31\u50cfDjango\u63d0\u4f9b\u4e86 Form \u7c7b\u548c ModelForm \u7c7b\u4e00\u6837\uff0cREST framework\u5305\u62ec Serializer \u7c7b\u548c ModelSerializer \u7c7b\u3002 \u6211\u4eec\u6765\u770b\u770b\u4f7f\u7528 ModelSerializer \u7c7b\u91cd\u6784\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7c7b\u3002\u518d\u6b21\u6253\u5f00 snippets/serializers.py \u6587\u4ef6\uff0c\u5e76\u5c06 SnippetSerializer \u7c7b\u66ff\u6362\u4e3a\u4ee5\u4e0b\u5185\u5bb9\u3002 class SnippetSerializer(serializers.ModelSerializer): class Meta: model = Snippet fields = ('id', 'title', 'code', 'linenos', 'language', 'style') \u5e8f\u5217\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u5c5e\u6027\u5c31\u662f\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u5e8f\u5217\u5316\u5668\u7c7b\u5b9e\u4f8b\u7684\u7ed3\u6784(representation)\u67e5\u770b\u5b83\u7684\u6240\u6709\u5b57\u6bb5\u3002 from snippets.serializers import SnippetSerializer serializer = SnippetSerializer() print(repr(serializer)) # SnippetSerializer(): # id = IntegerField(label='ID', read_only=True) # title = CharField(allow_blank=True, max_length=100, required=False) # code = CharField(style={'base_template': 'textarea.html'}) # linenos = BooleanField(required=False) # language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')... # style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')... \u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\uff0c ModelSerializer \u7c7b\u5e76\u4e0d\u4f1a\u505a\u4efb\u4f55\u7279\u522b\u795e\u5947\u7684\u4e8b\u60c5\uff0c\u5b83\u4eec\u53ea\u662f\u521b\u5efa\u5e8f\u5217\u5316\u5668\u7c7b\u7684\u5feb\u6377\u65b9\u5f0f\uff1a \u4e00\u7ec4\u81ea\u52a8\u786e\u5b9a\u7684\u5b57\u6bb5\u3002 \u9ed8\u8ba4\u7b80\u5355\u5b9e\u73b0\u7684 create() \u548c update() \u65b9\u6cd5\u3002","title":"\u4f7f\u7528ModelSerializers"},{"location":"tutorial/1-serialization_zh/#serializerdjangoviews","text":"\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u65b0\u7684Serializer\u7c7b\u7f16\u5199\u4e00\u4e9bAPI\u89c6\u56fe\u3002\u76ee\u524d\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55REST\u6846\u67b6\u7684\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u89c6\u56fe\u4f5c\u4e3a\u5e38\u89c4Django\u89c6\u56fe\u7f16\u5199\u3002 \u7f16\u8f91 snippets/views.py \u6587\u4ef6\uff0c\u5e76\u4e14\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 from django.http import HttpResponse from django.views.decorators.csrf import csrf_exempt from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser from snippets.models import Snippet from snippets.serializers import SnippetSerializer class JSONResponse(HttpResponse): \"\"\" An HttpResponse that renders its content into JSON. \"\"\" def __init__(self, data, **kwargs): content = JSONRenderer().render(data) kwargs['content_type'] = 'application/json' super(JSONResponse, self).__init__(content, **kwargs) \u6211\u4eecAPI\u7684\u6839\u89c6\u56fe\u652f\u6301\u5217\u51fa\u6240\u6709\u73b0\u6709\u7684snippet\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002 @csrf_exempt def snippet_list(request): \"\"\" \u5217\u51fa\u6240\u6709\u7684code snippet\uff0c\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002 \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return JSONResponse(serializer.data) elif request.method == 'POST': data = JSONParser().parse(request) serializer = SnippetSerializer(data=data) if serializer.is_valid(): serializer.save() return JSONResponse(serializer.data, status=201) return JSONResponse(serializer.errors, status=400) \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4ece\u4e0d\u5177\u6709CSRF\u4ee4\u724c\u7684\u5ba2\u6237\u7aef\u5bf9\u6b64\u89c6\u56fe\u8fdb\u884cPOST\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u89c6\u56fe\u6807\u8bb0\u4e3a csrf_exempt \u3002\u8fd9\u4e0d\u662f\u4f60\u901a\u5e38\u60f3\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u5e76\u4e14REST\u6846\u67b6\u89c6\u56fe\u5b9e\u9645\u4e0a\u6bd4\u8fd9\u66f4\u5b9e\u7528\u7684\u884c\u4e3a\uff0c\u4f46\u5b83\u73b0\u5728\u8db3\u591f\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\u3002 \u6211\u4eec\u4e5f\u9700\u8981\u4e00\u4e2a\u4e0e\u5355\u4e2asnippet\u5bf9\u8c61\u76f8\u5e94\u7684\u89c6\u56fe\uff0c\u5e76\u4e14\u7528\u4e8e\u83b7\u53d6\uff0c\u66f4\u65b0\u548c\u5220\u9664\u8fd9\u4e2asnippet\u3002 @csrf_exempt def snippet_detail(request, pk): \"\"\" \u83b7\u53d6\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2a code snippet\u3002 \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return HttpResponse(status=404) if request.method == 'GET': serializer = SnippetSerializer(snippet) return JSONResponse(serializer.data) elif request.method == 'PUT': data = JSONParser().parse(request) serializer = SnippetSerializer(snippet, data=data) if serializer.is_valid(): serializer.save() return JSONResponse(serializer.data) return JSONResponse(serializer.errors, status=400) elif request.method == 'DELETE': snippet.delete() return HttpResponse(status=204) \u6700\u7ec8\uff0c\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e9b\u89c6\u56fe\u8fde\u8d77\u6765\u3002\u521b\u5efa\u4e00\u4e2a snippets/urls.py \u6587\u4ef6\uff1a from django.conf.urls import url from snippets import views urlpatterns = [ url(r'^snippets/$', views.snippet_list), url(r'^snippets/(?P<pk>[0-9]+)/$', views.snippet_detail), ] \u6211\u4eec\u4e5f\u9700\u8981\u5728\u6839URL\u914d\u7f6e tutorial/urls.py \u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u6211\u4eec\u7684snippet\u5e94\u7528\u7684URL\u3002 from django.conf.urls import url, include urlpatterns = [ url(r'^', include('snippets.urls')), ] \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u76ee\u524d\u6211\u4eec\u8fd8\u6ca1\u6709\u6b63\u786e\u5904\u7406\u597d\u51e0\u4e2a\u8fb9\u7f18\u4e8b\u9879\u3002\u5982\u679c\u6211\u4eec\u53d1\u9001\u683c\u5f0f\u9519\u8bef\u7684 json \uff0c\u6216\u8005\u5982\u679c\u4f7f\u7528\u89c6\u56fe\u4e0d\u5904\u7406\u7684\u65b9\u6cd5\u53d1\u51fa\u8bf7\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u4f1a\u51fa\u73b0\u4e00\u4e2a500\u201c\u670d\u52a1\u5668\u9519\u8bef\u201d\u54cd\u5e94\u3002\u4e0d\u8fc7\uff0c\u73b0\u5728\u8fd9\u6837\u505a\u3002","title":"\u4f7f\u7528\u6211\u4eec\u7684\u5e8f\u5217\u5316\uff08Serializer\uff09\u6765\u7f16\u5199\u5e38\u89c4\u7684Django\u89c6\u56fe\uff08views\uff09"},{"location":"tutorial/1-serialization_zh/#web-api","text":"\u73b0\u5728\u4e3a\u6211\u4eec\u7684snippets\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u3002 \u9000\u51fa\u6240\u6709\u7684shell... quit() ...\u542f\u52a8Django\u7684\u5f00\u53d1\u670d\u52a1\u5668\u3002 python manage.py runserver Validating models... 0 errors found Django version 1.8.3, using settings 'tutorial.settings' Development server is running at http://127.0.0.1:8000/ Quit the server with CONTROL-C. \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u670d\u52a1\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 curl \u6216 httpie \u6d4b\u8bd5\u6211\u4eec\u7684\u670d\u52a1\u5668\u3002Httpie\u662f\u7528Python\u7f16\u5199\u7684\u7528\u6237\u53cb\u597d\u7684http\u5ba2\u6237\u7aef\uff0c\u6211\u4eec\u5b89\u88c5\u5b83\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528pip\u6765\u5b89\u88c5httpie\uff1a pip install httpie \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6240\u6709snippet\u7684\u5217\u8868\uff1a http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { \"id\": 1, \"title\": \"\", \"code\": \"foo = \\\"bar\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }, { \"id\": 2, \"title\": \"\", \"code\": \"print \\\"hello, world\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } ] \u6216\u8005\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5176id\u6765\u83b7\u53d6\u7279\u5b9a\u7684snippet\uff1a http http://127.0.0.1:8000/snippets/2/ HTTP/1.1 200 OK ... { \"id\": 2, \"title\": \"\", \"code\": \"print \\\"hello, world\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } \u540c\u6837\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u8fd9\u4e9bURL\u6765\u663e\u793a\u76f8\u540c\u200b\u200b\u7684json\u3002","title":"\u6d4b\u8bd5\u5728\u6211\u4eecWeb API\u8fdb\u884c\u7b2c\u4e00\u6b21\u5c1d\u8bd5"},{"location":"tutorial/1-serialization_zh/#_6","text":"\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u505a\u5f97\u4e0d\u9519\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u4e0eDjango\u7684Forms API\u975e\u5e38\u76f8\u4f3c\u5e8f\u5217\u5316API\uff0c\u548c\u4e00\u4e9b\u5e38\u89c4\u7684Django\u89c6\u56fe\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u7684API\u89c6\u56fe\u9664\u4e86\u670d\u52a1 json \u54cd\u5e94\u5916\uff0c\u4e0d\u4f1a\u505a\u4efb\u4f55\u5176\u4ed6\u7279\u522b\u7684\u4e1c\u897f\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u9519\u8bef\u6211\u4eec\u4ecd\u7136\u9700\u8981\u6e05\u5904\u7406\uff0c\u4f46\u662f\u5b83\u4ecd\u662f\u4e00\u4e2a\u53ef\u7528\u7684Web API\u3002 \u6211\u4eec\u5c06\u5728 \u672c\u6559\u7a0b\u7684\u7b2c2\u90e8\u5206 \u6765\u5b8c\u5584\u8fd9\u4e9b\u4e1c\u897f\u3002","title":"\u6211\u4eec\u73b0\u5728\u7684\u4f4d\u7f6e"},{"location":"tutorial/2-requests-and-responses/","text":"Tutorial 2: Requests and Responses From this point we're going to really start covering the core of REST framework. Let's introduce a couple of essential building blocks. Request objects REST framework introduces a Request object that extends the regular HttpRequest , and provides more flexible request parsing. The core functionality of the Request object is the request.data attribute, which is similar to request.POST , but more useful for working with Web APIs. request.POST # Only handles form data. Only works for 'POST' method. request.data # Handles arbitrary data. Works for 'POST', 'PUT' and 'PATCH' methods. Response objects REST framework also introduces a Response object, which is a type of TemplateResponse that takes unrendered content and uses content negotiation to determine the correct content type to return to the client. return Response(data) # Renders to content type as requested by the client. Status codes Using numeric HTTP status codes in your views doesn't always make for obvious reading, and it's easy to not notice if you get an error code wrong. REST framework provides more explicit identifiers for each status code, such as HTTP_400_BAD_REQUEST in the status module. It's a good idea to use these throughout rather than using numeric identifiers. Wrapping API views REST framework provides two wrappers you can use to write API views. The @api_view decorator for working with function based views. The APIView class for working with class-based views. These wrappers provide a few bits of functionality such as making sure you receive Request instances in your view, and adding context to Response objects so that content negotiation can be performed. The wrappers also provide behaviour such as returning 405 Method Not Allowed responses when appropriate, and handling any ParseError exceptions that occur when accessing request.data with malformed input. Pulling it all together Okay, let's go ahead and start using these new components to refactor our views slightly. from rest_framework import status from rest_framework.decorators import api_view from rest_framework.response import Response from snippets.models import Snippet from snippets.serializers import SnippetSerializer @api_view(['GET', 'POST']) def snippet_list(request): \"\"\" List all code snippets, or create a new snippet. \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return Response(serializer.data) elif request.method == 'POST': serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) Our instance view is an improvement over the previous example. It's a little more concise, and the code now feels very similar to if we were working with the Forms API. We're also using named status codes, which makes the response meanings more obvious. Here is the view for an individual snippet, in the views.py module. @api_view(['GET', 'PUT', 'DELETE']) def snippet_detail(request, pk): \"\"\" Retrieve, update or delete a code snippet. \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return Response(status=status.HTTP_404_NOT_FOUND) if request.method == 'GET': serializer = SnippetSerializer(snippet) return Response(serializer.data) elif request.method == 'PUT': serializer = SnippetSerializer(snippet, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) elif request.method == 'DELETE': snippet.delete() return Response(status=status.HTTP_204_NO_CONTENT) This should all feel very familiar - it is not a lot different from working with regular Django views. Notice that we're no longer explicitly tying our requests or responses to a given content type. request.data can handle incoming json requests, but it can also handle other formats. Similarly we're returning response objects with data, but allowing REST framework to render the response into the correct content type for us. Adding optional format suffixes to our URLs To take advantage of the fact that our responses are no longer hardwired to a single content type let's add support for format suffixes to our API endpoints. Using format suffixes gives us URLs that explicitly refer to a given format, and means our API will be able to handle URLs such as http://example.com/api/items/4.json . Start by adding a format keyword argument to both of the views, like so. def snippet_list(request, format=None): and def snippet_detail(request, pk, format=None): Now update the snippets/urls.py file slightly, to append a set of format_suffix_patterns in addition to the existing URLs. from django.urls import path from rest_framework.urlpatterns import format_suffix_patterns from snippets import views urlpatterns = [ path('snippets/', views.snippet_list), path('snippets/<int:pk>', views.snippet_detail), ] urlpatterns = format_suffix_patterns(urlpatterns) We don't necessarily need to add these extra url patterns in, but it gives us a simple, clean way of referring to a specific format. How's it looking? Go ahead and test the API from the command line, as we did in tutorial part 1 . Everything is working pretty similarly, although we've got some nicer error handling if we send invalid requests. We can get a list of all of the snippets, as before. http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { \"id\": 1, \"title\": \"\", \"code\": \"foo = \\\"bar\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }, { \"id\": 2, \"title\": \"\", \"code\": \"print(\\\"hello, world\\\")\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } ] We can control the format of the response that we get back, either by using the Accept header: http http://127.0.0.1:8000/snippets/ Accept:application/json # Request JSON http http://127.0.0.1:8000/snippets/ Accept:text/html # Request HTML Or by appending a format suffix: http http://127.0.0.1:8000/snippets.json # JSON suffix http http://127.0.0.1:8000/snippets.api # Browsable API suffix Similarly, we can control the format of the request that we send, using the Content-Type header. # POST using form data http --form POST http://127.0.0.1:8000/snippets/ code=\"print(123)\" { \"id\": 3, \"title\": \"\", \"code\": \"print(123)\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } # POST using JSON http --json POST http://127.0.0.1:8000/snippets/ code=\"print(456)\" { \"id\": 4, \"title\": \"\", \"code\": \"print(456)\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } If you add a --debug switch to the http requests above, you will be able to see the request type in request headers. Now go and open the API in a web browser, by visiting http://127.0.0.1:8000/snippets/ . Browsability Because the API chooses the content type of the response based on the client request, it will, by default, return an HTML-formatted representation of the resource when that resource is requested by a web browser. This allows for the API to return a fully web-browsable HTML representation. Having a web-browsable API is a huge usability win, and makes developing and using your API much easier. It also dramatically lowers the barrier-to-entry for other developers wanting to inspect and work with your API. See the browsable api topic for more information about the browsable API feature and how to customize it. What's next? In tutorial part 3 , we'll start using class-based views, and see how generic views reduce the amount of code we need to write.","title":"Tutorial 2: Requests and Responses"},{"location":"tutorial/2-requests-and-responses/#tutorial-2-requests-and-responses","text":"From this point we're going to really start covering the core of REST framework. Let's introduce a couple of essential building blocks.","title":"Tutorial 2: Requests and Responses"},{"location":"tutorial/2-requests-and-responses/#request-objects","text":"REST framework introduces a Request object that extends the regular HttpRequest , and provides more flexible request parsing. The core functionality of the Request object is the request.data attribute, which is similar to request.POST , but more useful for working with Web APIs. request.POST # Only handles form data. Only works for 'POST' method. request.data # Handles arbitrary data. Works for 'POST', 'PUT' and 'PATCH' methods.","title":"Request objects"},{"location":"tutorial/2-requests-and-responses/#response-objects","text":"REST framework also introduces a Response object, which is a type of TemplateResponse that takes unrendered content and uses content negotiation to determine the correct content type to return to the client. return Response(data) # Renders to content type as requested by the client.","title":"Response objects"},{"location":"tutorial/2-requests-and-responses/#status-codes","text":"Using numeric HTTP status codes in your views doesn't always make for obvious reading, and it's easy to not notice if you get an error code wrong. REST framework provides more explicit identifiers for each status code, such as HTTP_400_BAD_REQUEST in the status module. It's a good idea to use these throughout rather than using numeric identifiers.","title":"Status codes"},{"location":"tutorial/2-requests-and-responses/#wrapping-api-views","text":"REST framework provides two wrappers you can use to write API views. The @api_view decorator for working with function based views. The APIView class for working with class-based views. These wrappers provide a few bits of functionality such as making sure you receive Request instances in your view, and adding context to Response objects so that content negotiation can be performed. The wrappers also provide behaviour such as returning 405 Method Not Allowed responses when appropriate, and handling any ParseError exceptions that occur when accessing request.data with malformed input.","title":"Wrapping API views"},{"location":"tutorial/2-requests-and-responses/#pulling-it-all-together","text":"Okay, let's go ahead and start using these new components to refactor our views slightly. from rest_framework import status from rest_framework.decorators import api_view from rest_framework.response import Response from snippets.models import Snippet from snippets.serializers import SnippetSerializer @api_view(['GET', 'POST']) def snippet_list(request): \"\"\" List all code snippets, or create a new snippet. \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return Response(serializer.data) elif request.method == 'POST': serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) Our instance view is an improvement over the previous example. It's a little more concise, and the code now feels very similar to if we were working with the Forms API. We're also using named status codes, which makes the response meanings more obvious. Here is the view for an individual snippet, in the views.py module. @api_view(['GET', 'PUT', 'DELETE']) def snippet_detail(request, pk): \"\"\" Retrieve, update or delete a code snippet. \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return Response(status=status.HTTP_404_NOT_FOUND) if request.method == 'GET': serializer = SnippetSerializer(snippet) return Response(serializer.data) elif request.method == 'PUT': serializer = SnippetSerializer(snippet, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) elif request.method == 'DELETE': snippet.delete() return Response(status=status.HTTP_204_NO_CONTENT) This should all feel very familiar - it is not a lot different from working with regular Django views. Notice that we're no longer explicitly tying our requests or responses to a given content type. request.data can handle incoming json requests, but it can also handle other formats. Similarly we're returning response objects with data, but allowing REST framework to render the response into the correct content type for us.","title":"Pulling it all together"},{"location":"tutorial/2-requests-and-responses/#adding-optional-format-suffixes-to-our-urls","text":"To take advantage of the fact that our responses are no longer hardwired to a single content type let's add support for format suffixes to our API endpoints. Using format suffixes gives us URLs that explicitly refer to a given format, and means our API will be able to handle URLs such as http://example.com/api/items/4.json . Start by adding a format keyword argument to both of the views, like so. def snippet_list(request, format=None): and def snippet_detail(request, pk, format=None): Now update the snippets/urls.py file slightly, to append a set of format_suffix_patterns in addition to the existing URLs. from django.urls import path from rest_framework.urlpatterns import format_suffix_patterns from snippets import views urlpatterns = [ path('snippets/', views.snippet_list), path('snippets/<int:pk>', views.snippet_detail), ] urlpatterns = format_suffix_patterns(urlpatterns) We don't necessarily need to add these extra url patterns in, but it gives us a simple, clean way of referring to a specific format.","title":"Adding optional format suffixes to our URLs"},{"location":"tutorial/2-requests-and-responses/#hows-it-looking","text":"Go ahead and test the API from the command line, as we did in tutorial part 1 . Everything is working pretty similarly, although we've got some nicer error handling if we send invalid requests. We can get a list of all of the snippets, as before. http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { \"id\": 1, \"title\": \"\", \"code\": \"foo = \\\"bar\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }, { \"id\": 2, \"title\": \"\", \"code\": \"print(\\\"hello, world\\\")\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } ] We can control the format of the response that we get back, either by using the Accept header: http http://127.0.0.1:8000/snippets/ Accept:application/json # Request JSON http http://127.0.0.1:8000/snippets/ Accept:text/html # Request HTML Or by appending a format suffix: http http://127.0.0.1:8000/snippets.json # JSON suffix http http://127.0.0.1:8000/snippets.api # Browsable API suffix Similarly, we can control the format of the request that we send, using the Content-Type header. # POST using form data http --form POST http://127.0.0.1:8000/snippets/ code=\"print(123)\" { \"id\": 3, \"title\": \"\", \"code\": \"print(123)\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } # POST using JSON http --json POST http://127.0.0.1:8000/snippets/ code=\"print(456)\" { \"id\": 4, \"title\": \"\", \"code\": \"print(456)\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } If you add a --debug switch to the http requests above, you will be able to see the request type in request headers. Now go and open the API in a web browser, by visiting http://127.0.0.1:8000/snippets/ .","title":"How's it looking?"},{"location":"tutorial/2-requests-and-responses/#browsability","text":"Because the API chooses the content type of the response based on the client request, it will, by default, return an HTML-formatted representation of the resource when that resource is requested by a web browser. This allows for the API to return a fully web-browsable HTML representation. Having a web-browsable API is a huge usability win, and makes developing and using your API much easier. It also dramatically lowers the barrier-to-entry for other developers wanting to inspect and work with your API. See the browsable api topic for more information about the browsable API feature and how to customize it.","title":"Browsability"},{"location":"tutorial/2-requests-and-responses/#whats-next","text":"In tutorial part 3 , we'll start using class-based views, and see how generic views reduce the amount of code we need to write.","title":"What's next?"},{"location":"tutorial/2-requests-and-responses_zh/","text":"Tutorial 2: \u8bf7\u6c42\u548c\u54cd\u5e94 \u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u771f\u6b63\u5f00\u59cb\u63a5\u89e6REST\u6846\u67b6\u7684\u6838\u5fc3\u3002 \u6211\u4eec\u6765\u4ecb\u7ecd\u51e0\u4e2a\u57fa\u672c\u7684\u6784\u5efa\u6a21\u5757\u3002 \u8bf7\u6c42\u5bf9\u8c61\uff08Request objects\uff09 REST\u6846\u67b6\u5f15\u5165\u4e86\u4e00\u4e2a\u6269\u5c55\u4e86\u5e38\u89c4 HttpRequest \u7684 Request \u5bf9\u8c61\uff0c\u5e76\u63d0\u4f9b\u4e86\u66f4\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\u3002 Request \u5bf9\u8c61\u7684\u6838\u5fc3\u529f\u80fd\u662f request.data \u5c5e\u6027\uff0c\u5b83\u4e0e request.POST \u7c7b\u4f3c\uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528Web API\u66f4\u4e3a\u6709\u7528\u3002 request.POST # \u53ea\u5904\u7406\u8868\u5355\u6570\u636e \u53ea\u9002\u7528\u4e8e'POST'\u65b9\u6cd5 request.data # \u5904\u7406\u4efb\u610f\u6570\u636e \u9002\u7528\u4e8e'POST'\uff0c'PUT'\u548c'PATCH'\u65b9\u6cd5 \u54cd\u5e94\u5bf9\u8c61\uff08Response objects\uff09 REST\u6846\u67b6\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a Response \u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u79cd\u83b7\u53d6\u672a\u6e32\u67d3\uff08unrendered\uff09\u5185\u5bb9\u7684 TemplateResponse \u7c7b\u578b\uff0c\u5e76\u4f7f\u7528\u5185\u5bb9\u534f\u5546\u6765\u786e\u5b9a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002 return Response(data) # \u6e32\u67d3\u6210\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\u3002 \u72b6\u6001\u7801\uff08Status codes\uff09 \u5728\u4f60\u7684\u89c6\u56fe\uff08views\uff09\u4e2d\u4f7f\u7528\u7eaf\u6570\u5b57\u7684HTTP \u72b6\u6001\u7801\u5e76\u4e0d\u603b\u662f\u90a3\u4e48\u5bb9\u6613\u88ab\u7406\u89e3\u3002\u800c\u4e14\u5982\u679c\u9519\u8bef\u4ee3\u7801\u51fa\u9519\uff0c\u5f88\u5bb9\u6613\u88ab\u5ffd\u7565\u3002REST\u6846\u67b6\u4e3a status \u6a21\u5757\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u4ee3\u7801\uff08\u5982 HTTP_400_BAD_REQUEST \uff09\u63d0\u4f9b\u66f4\u660e\u786e\u7684\u6807\u8bc6\u7b26\u3002\u4f7f\u7528\u5b83\u4eec\u6765\u4ee3\u66ff\u7eaf\u6570\u5b57\u7684HTTP\u72b6\u6001\u7801\u662f\u4e2a\u5f88\u597d\u7684\u4e3b\u610f\u3002 \u5305\u88c5\uff08wrapping\uff09API\u89c6\u56fe REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u7528\u4e8e\u7f16\u5199API\u89c6\u56fe\u7684\u5305\u88c5\u5668\uff08wrappers\uff09\u3002 \u7528\u4e8e\u57fa\u4e8e\u51fd\u6570\u89c6\u56fe\u7684 @api_view \u88c5\u9970\u5668\u3002 \u7528\u4e8e\u57fa\u4e8e\u7c7b\u89c6\u56fe\u7684 APIView \u7c7b\u3002 \u8fd9\u4e9b\u5305\u88c5\u5668\u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u4f8b\u5982\u786e\u4fdd\u4f60\u5728\u89c6\u56fe\u4e2d\u63a5\u6536\u5230 Request \u5b9e\u4f8b\uff0c\u5e76\u5c06\u4e0a\u4e0b\u6587\u6dfb\u52a0\u5230 Response \uff0c\u4ee5\u4fbf\u53ef\u4ee5\u6267\u884c\u5185\u5bb9\u534f\u5546\u3002 \u5305\u88c5\u5668\u8fd8\u63d0\u4f9b\u4e86\u8bf8\u5982\u5728\u9002\u5f53\u65f6\u5019\u8fd4\u56de 405 Method Not Allowed \u54cd\u5e94\uff0c\u5e76\u5904\u7406\u5728\u4f7f\u7528\u683c\u5f0f\u9519\u8bef\u7684\u8f93\u5165\u6765\u8bbf\u95ee request.data \u65f6\u53d1\u751f\u7684\u4efb\u4f55 ParseError \u5f02\u5e38\u3002 \u7ec4\u5408\u5728\u4e00\u8d77 \u597d\u7684\uff0c\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7684\u7ec4\u4ef6\u6765\u5199\u51e0\u4e2a\u89c6\u56fe\u3002 \u6211\u4eec\u5728 views.py \u4e2d\u4e0d\u518d\u9700\u8981 JSONResponse \u7c7b\u4e86\uff0c\u6240\u4ee5\u628a\u5b83\u5220\u9664\u6389\u3002\u5220\u9664\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u91cd\u6784\u6211\u4eec\u7684\u89c6\u56fe\u4e86\u3002 from rest_framework import status from rest_framework.decorators import api_view from rest_framework.response import Response from snippets.models import Snippet from snippets.serializers import SnippetSerializer @api_view(['GET', 'POST']) def snippet_list(request): \"\"\" \u5217\u51fa\u6240\u6709\u7684snippets\uff0c\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002 \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return Response(serializer.data) elif request.method == 'POST': serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u6211\u4eec\u7684\u5b9e\u4f8b\u89c6\u56fe\u6bd4\u524d\u9762\u7684\u793a\u4f8b\u6709\u6240\u6539\u8fdb\u3002\u5b83\u7a0d\u5fae\u7b80\u6d01\u4e00\u70b9\uff0c\u73b0\u5728\u7684\u4ee3\u7801\u4e0e\u6211\u4eec\u4f7f\u7528Forms API\u65f6\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u4e86\u547d\u540d\u72b6\u6001\u4ee3\u7801\uff0c\u8fd9\u4f7f\u5f97\u54cd\u5e94\u610f\u4e49\u66f4\u52a0\u660e\u663e\u3002 \u4ee5\u4e0b\u662f views.py \u6a21\u5757\u4e2d\u5355\u4e2asnippet\u7684\u89c6\u56fe\u3002 @api_view(['GET', 'PUT', 'DELETE']) def snippet_detail(request, pk): \"\"\" \u83b7\u53d6\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2asnippet\u5b9e\u4f8b\u3002 \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return Response(status=status.HTTP_404_NOT_FOUND) if request.method == 'GET': serializer = SnippetSerializer(snippet) return Response(serializer.data) elif request.method == 'PUT': serializer = SnippetSerializer(snippet, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) elif request.method == 'DELETE': snippet.delete() return Response(status=status.HTTP_204_NO_CONTENT) \u8fd9\u5bf9\u6211\u4eec\u6765\u8bf4\u5e94\u8be5\u90fd\u662f\u975e\u5e38\u719f\u6089\u7684\uff0c-\u5b83\u548c\u6b63\u5e38Django\u89c6\u56fe\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u518d\u663e\u5f0f\u5730\u5c06\u8bf7\u6c42\u6216\u54cd\u5e94\u7ed1\u5b9a\u5230\u7ed9\u5b9a\u7684\u5185\u5bb9\u7c7b\u578b\u3002 request.data \u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684 json \u8bf7\u6c42\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u5904\u7406\u5176\u4ed6\u683c\u5f0f\u3002\u540c\u6837\uff0c\u6211\u4eec\u8fd4\u56de\u5e26\u6709\u6570\u636e\u7684\u54cd\u5e94\u5bf9\u8c61\uff0c\u4f46\u5141\u8bb8REST\u6846\u67b6\u5c06\u54cd\u5e94\u7ed9\u6211\u4eec\u6e32\u67d3\u6210\u6b63\u786e\u7684\u5185\u5bb9\u7c7b\u578b\u3002 \u7ed9\u6211\u4eec\u7684\u7f51\u5740\u6dfb\u52a0\u53ef\u9009\u7684\u683c\u5f0f\u540e\u7f00 \u4e3a\u4e86\u5145\u5206\u5229\u7528\u6211\u4eec\u7684\u54cd\u5e94\u4e0d\u518d\u4e0e\u5355\u4e00\u5185\u5bb9\u7c7b\u578b\u8fde\u63a5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3aAPI\u8def\u5f84\u6dfb\u52a0\u5bf9\u683c\u5f0f\u540e\u7f00\u7684\u652f\u6301\u3002\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\u7ed9\u6211\u4eec\u660e\u786e\u6307\u5b9a\u4e86\u7ed9\u5b9a\u683c\u5f0f\u7684URL\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684API\u5c06\u80fd\u591f\u5904\u7406\u8bf8\u5982 http://example.com/api/items/4.json \u4e4b\u7c7b\u7684URL\u3002 \u50cf\u4e0b\u9762\u8fd9\u6837\u5728\u8fd9\u4e24\u4e2a\u89c6\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a format \u5173\u952e\u5b57\u53c2\u6570\u3002 def snippet_list(request, format=None): \u548c def snippet_detail(request, pk, format=None): \u73b0\u5728\u66f4\u65b0 urls.py \u6587\u4ef6\uff0c\u7ed9\u73b0\u6709\u7684URL\u540e\u9762\u6dfb\u52a0\u4e00\u7ec4 format_suffix_patterns \u3002 from django.conf.urls import url from rest_framework.urlpatterns import format_suffix_patterns from snippets import views urlpatterns = [ url(r'^snippets/$', views.snippet_list), url(r'^snippets/(?P<pk>[0-9]+)$', views.snippet_detail), ] urlpatterns = format_suffix_patterns(urlpatterns) \u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u6dfb\u52a0\u8fd9\u4e9b\u989d\u5916\u7684url\u6a21\u5f0f\uff0c\u4f46\u5b83\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u7b80\u5355\uff0c\u6e05\u6670\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u7279\u5b9a\u7684\u683c\u5f0f\u3002 \u600e\u4e48\u67e5\u770b\u7ed3\u679c\uff1f \u4ece\u547d\u4ee4\u884c\u5f00\u59cb\u6d4b\u8bd5API\uff0c\u5c31\u50cf\u6211\u4eec\u5728 \u6559\u7a0b\u7b2c\u4e00\u90e8\u5206 \u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\u4e00\u5207\u64cd\u4f5c\u90fd\u5f88\u76f8\u4f3c\uff0c\u5c3d\u7ba1\u6211\u4eec\u53d1\u9001\u65e0\u6548\u7684\u8bf7\u6c42\u4e5f\u4f1a\u6709\u4e00\u4e9b\u66f4\u597d\u7684\u9519\u8bef\u5904\u7406\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u50cf\u4ee5\u524d\u4e00\u6837\u83b7\u53d6\u6240\u6709snippet\u7684\u5217\u8868\u3002 http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { \"id\": 1, \"title\": \"\", \"code\": \"foo = \\\"bar\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }, { \"id\": 2, \"title\": \"\", \"code\": \"print \\\"hello, world\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } ] \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 Accept \u6807\u5934\u6765\u63a7\u5236\u6211\u4eec\u56de\u590d\u7684\u54cd\u5e94\u683c\u5f0f\uff1a http http://127.0.0.1:8000/snippets/ Accept:application/json # \u8bf7\u6c42JSON http http://127.0.0.1:8000/snippets/ Accept:text/html # \u8bf7\u6c42HTML \u6216\u8005\u901a\u8fc7\u9644\u52a0\u683c\u5f0f\u540e\u7f00\uff1a http http://127.0.0.1:8000/snippets.json # JSON\u540e\u7f00 http http://127.0.0.1:8000/snippets.api # \u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8API\u540e\u7f00 \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Content-Type \u5934\u63a7\u5236\u6211\u4eec\u53d1\u9001\u7684\u8bf7\u6c42\u7684\u683c\u5f0f\u3002 # POST\u8868\u5355\u6570\u636e http --form POST http://127.0.0.1:8000/snippets/ code=\"print 123\" { \"id\": 3, \"title\": \"\", \"code\": \"print 123\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } # POST JSON\u6570\u636e http --json POST http://127.0.0.1:8000/snippets/ code=\"print 456\" { \"id\": 4, \"title\": \"\", \"code\": \"print 456\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } \u5982\u679c\u4f60\u5411\u4e0a\u8ff0 http \u8bf7\u6c42\u6dfb\u52a0\u4e86 --debug \uff0c\u5219\u53ef\u4ee5\u5728\u8bf7\u6c42\u6807\u5934\u4e2d\u67e5\u770b\u8bf7\u6c42\u7c7b\u578b\u3002 \u73b0\u5728\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee http://127.0.0.1:8000/snippets/ \u67e5\u770bAPI\u3002 \u6d4f\u89c8\u529f\u80fd \u7531\u4e8eAPI\u6839\u636e\u5ba2\u6237\u7aef\u8bf7\u6c42\u9009\u62e9\u54cd\u5e94\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53Web\u6d4f\u89c8\u5668\u8bf7\u6c42\u8be5\u8d44\u6e90\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u8d44\u6e90\u7684HTML\u683c\u5f0f\u8868\u793a\u3002\u8fd9\u5141\u8bb8API\u8fd4\u56de\u5b8c\u5168\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\uff08web-browsable\uff09\u7684HTML\u8868\u793a\u3002 \u62e5\u6709\u652f\u6301\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684API\u5728\u53ef\u7528\u6027\u65b9\u9762\u5b8c\u80dc\u5e76\u4f7f\u5f00\u53d1\u548c\u4f7f\u7528\u4f60\u7684API\u66f4\u5bb9\u6613\u3002\u5b83\u4e5f\u5927\u5927\u964d\u4f4e\u4e86\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u8981\u68c0\u67e5\u548c\u4f7f\u7528API\u200b\u200b\u7684\u969c\u788d\u3002 \u6709\u5173\u652f\u6301\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684API\u529f\u80fd\u4ee5\u53ca\u5982\u4f55\u81ea\u5b9a\u4e49API\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u53ef\u6d4f\u89c8\u7684api \u4e3b\u9898\u3002 \u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\uff1f \u5728 \u6559\u7a0b\u7684\u7b2c3\u90e8\u5206 \uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5e76\u67e5\u770b\u901a\u7528\u89c6\u56fe\u5982\u4f55\u51cf\u5c11\u9700\u8981\u7f16\u5199\u7684\u4ee3\u7801\u91cf\u3002","title":"2 - Requests and responses"},{"location":"tutorial/2-requests-and-responses_zh/#tutorial-2","text":"\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u771f\u6b63\u5f00\u59cb\u63a5\u89e6REST\u6846\u67b6\u7684\u6838\u5fc3\u3002 \u6211\u4eec\u6765\u4ecb\u7ecd\u51e0\u4e2a\u57fa\u672c\u7684\u6784\u5efa\u6a21\u5757\u3002","title":"Tutorial 2: \u8bf7\u6c42\u548c\u54cd\u5e94"},{"location":"tutorial/2-requests-and-responses_zh/#request-objects","text":"REST\u6846\u67b6\u5f15\u5165\u4e86\u4e00\u4e2a\u6269\u5c55\u4e86\u5e38\u89c4 HttpRequest \u7684 Request \u5bf9\u8c61\uff0c\u5e76\u63d0\u4f9b\u4e86\u66f4\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\u3002 Request \u5bf9\u8c61\u7684\u6838\u5fc3\u529f\u80fd\u662f request.data \u5c5e\u6027\uff0c\u5b83\u4e0e request.POST \u7c7b\u4f3c\uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528Web API\u66f4\u4e3a\u6709\u7528\u3002 request.POST # \u53ea\u5904\u7406\u8868\u5355\u6570\u636e \u53ea\u9002\u7528\u4e8e'POST'\u65b9\u6cd5 request.data # \u5904\u7406\u4efb\u610f\u6570\u636e \u9002\u7528\u4e8e'POST'\uff0c'PUT'\u548c'PATCH'\u65b9\u6cd5","title":"\u8bf7\u6c42\u5bf9\u8c61\uff08Request objects\uff09"},{"location":"tutorial/2-requests-and-responses_zh/#response-objects","text":"REST\u6846\u67b6\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a Response \u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u79cd\u83b7\u53d6\u672a\u6e32\u67d3\uff08unrendered\uff09\u5185\u5bb9\u7684 TemplateResponse \u7c7b\u578b\uff0c\u5e76\u4f7f\u7528\u5185\u5bb9\u534f\u5546\u6765\u786e\u5b9a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002 return Response(data) # \u6e32\u67d3\u6210\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\u3002","title":"\u54cd\u5e94\u5bf9\u8c61\uff08Response objects\uff09"},{"location":"tutorial/2-requests-and-responses_zh/#status-codes","text":"\u5728\u4f60\u7684\u89c6\u56fe\uff08views\uff09\u4e2d\u4f7f\u7528\u7eaf\u6570\u5b57\u7684HTTP \u72b6\u6001\u7801\u5e76\u4e0d\u603b\u662f\u90a3\u4e48\u5bb9\u6613\u88ab\u7406\u89e3\u3002\u800c\u4e14\u5982\u679c\u9519\u8bef\u4ee3\u7801\u51fa\u9519\uff0c\u5f88\u5bb9\u6613\u88ab\u5ffd\u7565\u3002REST\u6846\u67b6\u4e3a status \u6a21\u5757\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u4ee3\u7801\uff08\u5982 HTTP_400_BAD_REQUEST \uff09\u63d0\u4f9b\u66f4\u660e\u786e\u7684\u6807\u8bc6\u7b26\u3002\u4f7f\u7528\u5b83\u4eec\u6765\u4ee3\u66ff\u7eaf\u6570\u5b57\u7684HTTP\u72b6\u6001\u7801\u662f\u4e2a\u5f88\u597d\u7684\u4e3b\u610f\u3002","title":"\u72b6\u6001\u7801\uff08Status codes\uff09"},{"location":"tutorial/2-requests-and-responses_zh/#wrappingapi","text":"REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u7528\u4e8e\u7f16\u5199API\u89c6\u56fe\u7684\u5305\u88c5\u5668\uff08wrappers\uff09\u3002 \u7528\u4e8e\u57fa\u4e8e\u51fd\u6570\u89c6\u56fe\u7684 @api_view \u88c5\u9970\u5668\u3002 \u7528\u4e8e\u57fa\u4e8e\u7c7b\u89c6\u56fe\u7684 APIView \u7c7b\u3002 \u8fd9\u4e9b\u5305\u88c5\u5668\u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u4f8b\u5982\u786e\u4fdd\u4f60\u5728\u89c6\u56fe\u4e2d\u63a5\u6536\u5230 Request \u5b9e\u4f8b\uff0c\u5e76\u5c06\u4e0a\u4e0b\u6587\u6dfb\u52a0\u5230 Response \uff0c\u4ee5\u4fbf\u53ef\u4ee5\u6267\u884c\u5185\u5bb9\u534f\u5546\u3002 \u5305\u88c5\u5668\u8fd8\u63d0\u4f9b\u4e86\u8bf8\u5982\u5728\u9002\u5f53\u65f6\u5019\u8fd4\u56de 405 Method Not Allowed \u54cd\u5e94\uff0c\u5e76\u5904\u7406\u5728\u4f7f\u7528\u683c\u5f0f\u9519\u8bef\u7684\u8f93\u5165\u6765\u8bbf\u95ee request.data \u65f6\u53d1\u751f\u7684\u4efb\u4f55 ParseError \u5f02\u5e38\u3002","title":"\u5305\u88c5\uff08wrapping\uff09API\u89c6\u56fe"},{"location":"tutorial/2-requests-and-responses_zh/#_1","text":"\u597d\u7684\uff0c\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7684\u7ec4\u4ef6\u6765\u5199\u51e0\u4e2a\u89c6\u56fe\u3002 \u6211\u4eec\u5728 views.py \u4e2d\u4e0d\u518d\u9700\u8981 JSONResponse \u7c7b\u4e86\uff0c\u6240\u4ee5\u628a\u5b83\u5220\u9664\u6389\u3002\u5220\u9664\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u91cd\u6784\u6211\u4eec\u7684\u89c6\u56fe\u4e86\u3002 from rest_framework import status from rest_framework.decorators import api_view from rest_framework.response import Response from snippets.models import Snippet from snippets.serializers import SnippetSerializer @api_view(['GET', 'POST']) def snippet_list(request): \"\"\" \u5217\u51fa\u6240\u6709\u7684snippets\uff0c\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002 \"\"\" if request.method == 'GET': snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return Response(serializer.data) elif request.method == 'POST': serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u6211\u4eec\u7684\u5b9e\u4f8b\u89c6\u56fe\u6bd4\u524d\u9762\u7684\u793a\u4f8b\u6709\u6240\u6539\u8fdb\u3002\u5b83\u7a0d\u5fae\u7b80\u6d01\u4e00\u70b9\uff0c\u73b0\u5728\u7684\u4ee3\u7801\u4e0e\u6211\u4eec\u4f7f\u7528Forms API\u65f6\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u4e86\u547d\u540d\u72b6\u6001\u4ee3\u7801\uff0c\u8fd9\u4f7f\u5f97\u54cd\u5e94\u610f\u4e49\u66f4\u52a0\u660e\u663e\u3002 \u4ee5\u4e0b\u662f views.py \u6a21\u5757\u4e2d\u5355\u4e2asnippet\u7684\u89c6\u56fe\u3002 @api_view(['GET', 'PUT', 'DELETE']) def snippet_detail(request, pk): \"\"\" \u83b7\u53d6\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2asnippet\u5b9e\u4f8b\u3002 \"\"\" try: snippet = Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: return Response(status=status.HTTP_404_NOT_FOUND) if request.method == 'GET': serializer = SnippetSerializer(snippet) return Response(serializer.data) elif request.method == 'PUT': serializer = SnippetSerializer(snippet, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) elif request.method == 'DELETE': snippet.delete() return Response(status=status.HTTP_204_NO_CONTENT) \u8fd9\u5bf9\u6211\u4eec\u6765\u8bf4\u5e94\u8be5\u90fd\u662f\u975e\u5e38\u719f\u6089\u7684\uff0c-\u5b83\u548c\u6b63\u5e38Django\u89c6\u56fe\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u518d\u663e\u5f0f\u5730\u5c06\u8bf7\u6c42\u6216\u54cd\u5e94\u7ed1\u5b9a\u5230\u7ed9\u5b9a\u7684\u5185\u5bb9\u7c7b\u578b\u3002 request.data \u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684 json \u8bf7\u6c42\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u5904\u7406\u5176\u4ed6\u683c\u5f0f\u3002\u540c\u6837\uff0c\u6211\u4eec\u8fd4\u56de\u5e26\u6709\u6570\u636e\u7684\u54cd\u5e94\u5bf9\u8c61\uff0c\u4f46\u5141\u8bb8REST\u6846\u67b6\u5c06\u54cd\u5e94\u7ed9\u6211\u4eec\u6e32\u67d3\u6210\u6b63\u786e\u7684\u5185\u5bb9\u7c7b\u578b\u3002","title":"\u7ec4\u5408\u5728\u4e00\u8d77"},{"location":"tutorial/2-requests-and-responses_zh/#_2","text":"\u4e3a\u4e86\u5145\u5206\u5229\u7528\u6211\u4eec\u7684\u54cd\u5e94\u4e0d\u518d\u4e0e\u5355\u4e00\u5185\u5bb9\u7c7b\u578b\u8fde\u63a5\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3aAPI\u8def\u5f84\u6dfb\u52a0\u5bf9\u683c\u5f0f\u540e\u7f00\u7684\u652f\u6301\u3002\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\u7ed9\u6211\u4eec\u660e\u786e\u6307\u5b9a\u4e86\u7ed9\u5b9a\u683c\u5f0f\u7684URL\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684API\u5c06\u80fd\u591f\u5904\u7406\u8bf8\u5982 http://example.com/api/items/4.json \u4e4b\u7c7b\u7684URL\u3002 \u50cf\u4e0b\u9762\u8fd9\u6837\u5728\u8fd9\u4e24\u4e2a\u89c6\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a format \u5173\u952e\u5b57\u53c2\u6570\u3002 def snippet_list(request, format=None): \u548c def snippet_detail(request, pk, format=None): \u73b0\u5728\u66f4\u65b0 urls.py \u6587\u4ef6\uff0c\u7ed9\u73b0\u6709\u7684URL\u540e\u9762\u6dfb\u52a0\u4e00\u7ec4 format_suffix_patterns \u3002 from django.conf.urls import url from rest_framework.urlpatterns import format_suffix_patterns from snippets import views urlpatterns = [ url(r'^snippets/$', views.snippet_list), url(r'^snippets/(?P<pk>[0-9]+)$', views.snippet_detail), ] urlpatterns = format_suffix_patterns(urlpatterns) \u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u6dfb\u52a0\u8fd9\u4e9b\u989d\u5916\u7684url\u6a21\u5f0f\uff0c\u4f46\u5b83\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u7b80\u5355\uff0c\u6e05\u6670\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u7279\u5b9a\u7684\u683c\u5f0f\u3002","title":"\u7ed9\u6211\u4eec\u7684\u7f51\u5740\u6dfb\u52a0\u53ef\u9009\u7684\u683c\u5f0f\u540e\u7f00"},{"location":"tutorial/2-requests-and-responses_zh/#_3","text":"\u4ece\u547d\u4ee4\u884c\u5f00\u59cb\u6d4b\u8bd5API\uff0c\u5c31\u50cf\u6211\u4eec\u5728 \u6559\u7a0b\u7b2c\u4e00\u90e8\u5206 \u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\u4e00\u5207\u64cd\u4f5c\u90fd\u5f88\u76f8\u4f3c\uff0c\u5c3d\u7ba1\u6211\u4eec\u53d1\u9001\u65e0\u6548\u7684\u8bf7\u6c42\u4e5f\u4f1a\u6709\u4e00\u4e9b\u66f4\u597d\u7684\u9519\u8bef\u5904\u7406\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u50cf\u4ee5\u524d\u4e00\u6837\u83b7\u53d6\u6240\u6709snippet\u7684\u5217\u8868\u3002 http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { \"id\": 1, \"title\": \"\", \"code\": \"foo = \\\"bar\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }, { \"id\": 2, \"title\": \"\", \"code\": \"print \\\"hello, world\\\"\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } ] \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 Accept \u6807\u5934\u6765\u63a7\u5236\u6211\u4eec\u56de\u590d\u7684\u54cd\u5e94\u683c\u5f0f\uff1a http http://127.0.0.1:8000/snippets/ Accept:application/json # \u8bf7\u6c42JSON http http://127.0.0.1:8000/snippets/ Accept:text/html # \u8bf7\u6c42HTML \u6216\u8005\u901a\u8fc7\u9644\u52a0\u683c\u5f0f\u540e\u7f00\uff1a http http://127.0.0.1:8000/snippets.json # JSON\u540e\u7f00 http http://127.0.0.1:8000/snippets.api # \u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8API\u540e\u7f00 \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Content-Type \u5934\u63a7\u5236\u6211\u4eec\u53d1\u9001\u7684\u8bf7\u6c42\u7684\u683c\u5f0f\u3002 # POST\u8868\u5355\u6570\u636e http --form POST http://127.0.0.1:8000/snippets/ code=\"print 123\" { \"id\": 3, \"title\": \"\", \"code\": \"print 123\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } # POST JSON\u6570\u636e http --json POST http://127.0.0.1:8000/snippets/ code=\"print 456\" { \"id\": 4, \"title\": \"\", \"code\": \"print 456\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } \u5982\u679c\u4f60\u5411\u4e0a\u8ff0 http \u8bf7\u6c42\u6dfb\u52a0\u4e86 --debug \uff0c\u5219\u53ef\u4ee5\u5728\u8bf7\u6c42\u6807\u5934\u4e2d\u67e5\u770b\u8bf7\u6c42\u7c7b\u578b\u3002 \u73b0\u5728\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee http://127.0.0.1:8000/snippets/ \u67e5\u770bAPI\u3002","title":"\u600e\u4e48\u67e5\u770b\u7ed3\u679c\uff1f"},{"location":"tutorial/2-requests-and-responses_zh/#_4","text":"\u7531\u4e8eAPI\u6839\u636e\u5ba2\u6237\u7aef\u8bf7\u6c42\u9009\u62e9\u54cd\u5e94\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53Web\u6d4f\u89c8\u5668\u8bf7\u6c42\u8be5\u8d44\u6e90\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u8d44\u6e90\u7684HTML\u683c\u5f0f\u8868\u793a\u3002\u8fd9\u5141\u8bb8API\u8fd4\u56de\u5b8c\u5168\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\uff08web-browsable\uff09\u7684HTML\u8868\u793a\u3002 \u62e5\u6709\u652f\u6301\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684API\u5728\u53ef\u7528\u6027\u65b9\u9762\u5b8c\u80dc\u5e76\u4f7f\u5f00\u53d1\u548c\u4f7f\u7528\u4f60\u7684API\u66f4\u5bb9\u6613\u3002\u5b83\u4e5f\u5927\u5927\u964d\u4f4e\u4e86\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u8981\u68c0\u67e5\u548c\u4f7f\u7528API\u200b\u200b\u7684\u969c\u788d\u3002 \u6709\u5173\u652f\u6301\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684API\u529f\u80fd\u4ee5\u53ca\u5982\u4f55\u81ea\u5b9a\u4e49API\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u53ef\u6d4f\u89c8\u7684api \u4e3b\u9898\u3002","title":"\u6d4f\u89c8\u529f\u80fd"},{"location":"tutorial/2-requests-and-responses_zh/#_5","text":"\u5728 \u6559\u7a0b\u7684\u7b2c3\u90e8\u5206 \uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5e76\u67e5\u770b\u901a\u7528\u89c6\u56fe\u5982\u4f55\u51cf\u5c11\u9700\u8981\u7f16\u5199\u7684\u4ee3\u7801\u91cf\u3002","title":"\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\uff1f"},{"location":"tutorial/3-class-based-views/","text":"Tutorial 3: Class-based Views We can also write our API views using class-based views, rather than function based views. As we'll see this is a powerful pattern that allows us to reuse common functionality, and helps us keep our code DRY . Rewriting our API using class-based views We'll start by rewriting the root view as a class-based view. All this involves is a little bit of refactoring of views.py . from snippets.models import Snippet from snippets.serializers import SnippetSerializer from django.http import Http404 from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status class SnippetList(APIView): \"\"\" List all snippets, or create a new snippet. \"\"\" def get(self, request, format=None): snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return Response(serializer.data) def post(self, request, format=None): serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) So far, so good. It looks pretty similar to the previous case, but we've got better separation between the different HTTP methods. We'll also need to update the instance view in views.py . class SnippetDetail(APIView): \"\"\" Retrieve, update or delete a snippet instance. \"\"\" def get_object(self, pk): try: return Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: raise Http404 def get(self, request, pk, format=None): snippet = self.get_object(pk) serializer = SnippetSerializer(snippet) return Response(serializer.data) def put(self, request, pk, format=None): snippet = self.get_object(pk) serializer = SnippetSerializer(snippet, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) def delete(self, request, pk, format=None): snippet = self.get_object(pk) snippet.delete() return Response(status=status.HTTP_204_NO_CONTENT) That's looking good. Again, it's still pretty similar to the function based view right now. We'll also need to refactor our snippets/urls.py slightly now that we're using class-based views. from django.urls import path from rest_framework.urlpatterns import format_suffix_patterns from snippets import views urlpatterns = [ path('snippets/', views.SnippetList.as_view()), path('snippets/<int:pk>/', views.SnippetDetail.as_view()), ] urlpatterns = format_suffix_patterns(urlpatterns) Okay, we're done. If you run the development server everything should be working just as before. Using mixins One of the big wins of using class-based views is that it allows us to easily compose reusable bits of behaviour. The create/retrieve/update/delete operations that we've been using so far are going to be pretty similar for any model-backed API views we create. Those bits of common behaviour are implemented in REST framework's mixin classes. Let's take a look at how we can compose the views by using the mixin classes. Here's our views.py module again. from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework import mixins from rest_framework import generics class SnippetList(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer def get(self, request, *args, **kwargs): return self.list(request, *args, **kwargs) def post(self, request, *args, **kwargs): return self.create(request, *args, **kwargs) We'll take a moment to examine exactly what's happening here. We're building our view using GenericAPIView , and adding in ListModelMixin and CreateModelMixin . The base class provides the core functionality, and the mixin classes provide the .list() and .create() actions. We're then explicitly binding the get and post methods to the appropriate actions. Simple enough stuff so far. class SnippetDetail(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, generics.GenericAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer def get(self, request, *args, **kwargs): return self.retrieve(request, *args, **kwargs) def put(self, request, *args, **kwargs): return self.update(request, *args, **kwargs) def delete(self, request, *args, **kwargs): return self.destroy(request, *args, **kwargs) Pretty similar. Again we're using the GenericAPIView class to provide the core functionality, and adding in mixins to provide the .retrieve() , .update() and .destroy() actions. Using generic class-based views Using the mixin classes we've rewritten the views to use slightly less code than before, but we can go one step further. REST framework provides a set of already mixed-in generic views that we can use to trim down our views.py module even more. from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework import generics class SnippetList(generics.ListCreateAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer class SnippetDetail(generics.RetrieveUpdateDestroyAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer Wow, that's pretty concise. We've gotten a huge amount for free, and our code looks like good, clean, idiomatic Django. Next we'll move onto part 4 of the tutorial , where we'll take a look at how we can deal with authentication and permissions for our API.","title":"Tutorial 3: Class-based Views"},{"location":"tutorial/3-class-based-views/#tutorial-3-class-based-views","text":"We can also write our API views using class-based views, rather than function based views. As we'll see this is a powerful pattern that allows us to reuse common functionality, and helps us keep our code DRY .","title":"Tutorial 3: Class-based Views"},{"location":"tutorial/3-class-based-views/#rewriting-our-api-using-class-based-views","text":"We'll start by rewriting the root view as a class-based view. All this involves is a little bit of refactoring of views.py . from snippets.models import Snippet from snippets.serializers import SnippetSerializer from django.http import Http404 from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status class SnippetList(APIView): \"\"\" List all snippets, or create a new snippet. \"\"\" def get(self, request, format=None): snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return Response(serializer.data) def post(self, request, format=None): serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) So far, so good. It looks pretty similar to the previous case, but we've got better separation between the different HTTP methods. We'll also need to update the instance view in views.py . class SnippetDetail(APIView): \"\"\" Retrieve, update or delete a snippet instance. \"\"\" def get_object(self, pk): try: return Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: raise Http404 def get(self, request, pk, format=None): snippet = self.get_object(pk) serializer = SnippetSerializer(snippet) return Response(serializer.data) def put(self, request, pk, format=None): snippet = self.get_object(pk) serializer = SnippetSerializer(snippet, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) def delete(self, request, pk, format=None): snippet = self.get_object(pk) snippet.delete() return Response(status=status.HTTP_204_NO_CONTENT) That's looking good. Again, it's still pretty similar to the function based view right now. We'll also need to refactor our snippets/urls.py slightly now that we're using class-based views. from django.urls import path from rest_framework.urlpatterns import format_suffix_patterns from snippets import views urlpatterns = [ path('snippets/', views.SnippetList.as_view()), path('snippets/<int:pk>/', views.SnippetDetail.as_view()), ] urlpatterns = format_suffix_patterns(urlpatterns) Okay, we're done. If you run the development server everything should be working just as before.","title":"Rewriting our API using class-based views"},{"location":"tutorial/3-class-based-views/#using-mixins","text":"One of the big wins of using class-based views is that it allows us to easily compose reusable bits of behaviour. The create/retrieve/update/delete operations that we've been using so far are going to be pretty similar for any model-backed API views we create. Those bits of common behaviour are implemented in REST framework's mixin classes. Let's take a look at how we can compose the views by using the mixin classes. Here's our views.py module again. from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework import mixins from rest_framework import generics class SnippetList(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer def get(self, request, *args, **kwargs): return self.list(request, *args, **kwargs) def post(self, request, *args, **kwargs): return self.create(request, *args, **kwargs) We'll take a moment to examine exactly what's happening here. We're building our view using GenericAPIView , and adding in ListModelMixin and CreateModelMixin . The base class provides the core functionality, and the mixin classes provide the .list() and .create() actions. We're then explicitly binding the get and post methods to the appropriate actions. Simple enough stuff so far. class SnippetDetail(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, generics.GenericAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer def get(self, request, *args, **kwargs): return self.retrieve(request, *args, **kwargs) def put(self, request, *args, **kwargs): return self.update(request, *args, **kwargs) def delete(self, request, *args, **kwargs): return self.destroy(request, *args, **kwargs) Pretty similar. Again we're using the GenericAPIView class to provide the core functionality, and adding in mixins to provide the .retrieve() , .update() and .destroy() actions.","title":"Using mixins"},{"location":"tutorial/3-class-based-views/#using-generic-class-based-views","text":"Using the mixin classes we've rewritten the views to use slightly less code than before, but we can go one step further. REST framework provides a set of already mixed-in generic views that we can use to trim down our views.py module even more. from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework import generics class SnippetList(generics.ListCreateAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer class SnippetDetail(generics.RetrieveUpdateDestroyAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer Wow, that's pretty concise. We've gotten a huge amount for free, and our code looks like good, clean, idiomatic Django. Next we'll move onto part 4 of the tutorial , where we'll take a look at how we can deal with authentication and permissions for our API.","title":"Using generic class-based views"},{"location":"tutorial/3-class-based-views_zh/","text":"Tutorial 3: \u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff08CBV\uff09 \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u7f16\u5199\u6211\u4eec\u7684API\u89c6\u56fe\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\u6211\u4eec\u5c06\u770b\u5230\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u6a21\u5f0f\uff0c\u5141\u8bb8\u6211\u4eec\u91cd\u7528\u5e38\u7528\u529f\u80fd\uff0c\u5e76\u5e2e\u52a9\u6211\u4eec\u4fdd\u6301\u4ee3\u7801 DRY \u3002 \u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u91cd\u5199\u6211\u4eec\u7684API \u6211\u4eec\u5c06\u9996\u5148\u5c06\u6839\u89c6\u56fe\u91cd\u5199\u4e3a\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5bf9 views.py \u6587\u4ef6\u7684\u91cd\u6784\u3002 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from django.http import Http404 from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status class SnippetList(APIView): \"\"\" \u5217\u51fa\u6240\u6709\u7684snippets\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002 \"\"\" def get(self, request, format=None): snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return Response(serializer.data) def post(self, request, format=None): serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u5230\u73b0\u5728\u4e3a\u6b62\u8fd8\u633a\u597d\u3002\u5b83\u770b\u8d77\u6765\u4e0e\u4ee5\u524d\u7684\u60c5\u51b5\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u6211\u4eec\u5728\u4e0d\u540c\u7684HTTP\u65b9\u6cd5\u4e4b\u95f4\u6709\u66f4\u597d\u7684\u5206\u79bb\u3002\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u65b0 views.py \u4e2d\u7684\u5b9e\u4f8b\u89c6\u56fe\u3002 class SnippetDetail(APIView): \"\"\" \u68c0\u7d22\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2asnippet\u793a\u4f8b\u3002 \"\"\" def get_object(self, pk): try: return Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: raise Http404 def get(self, request, pk, format=None): snippet = self.get_object(pk) serializer = SnippetSerializer(snippet) return Response(serializer.data) def put(self, request, pk, format=None): snippet = self.get_object(pk) serializer = SnippetSerializer(snippet, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) def delete(self, request, pk, format=None): snippet = self.get_object(pk) snippet.delete() return Response(status=status.HTTP_204_NO_CONTENT) \u770b\u8d77\u6765\u4e0d\u9519\uff0c\u5b83\u73b0\u5728\u4ecd\u7136\u975e\u5e38\u7c7b\u4f3c\u4e8e\u57fa\u4e8e\u529f\u80fd\u7684\u89c6\u56fe\u3002 \u6211\u4eec\u8fd8\u9700\u8981\u91cd\u6784\u6211\u4eec\u7684 urls.py \uff0c\u73b0\u5728\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002 from django.conf.urls import url from rest_framework.urlpatterns import format_suffix_patterns from snippets import views urlpatterns = [ url(r'^snippets/$', views.SnippetList.as_view()), url(r'^snippets/(?P<pk>[0-9]+)/$', views.SnippetDetail.as_view()), ] urlpatterns = format_suffix_patterns(urlpatterns) \u597d\u4e86\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\u3002\u5982\u679c\u4f60\u542f\u52a8\u670d\u52a1\uff0c\u90a3\u4e48\u5b83\u5e94\u200b\u200b\u8be5\u50cf\u4e4b\u524d\u4e00\u6837\u53ef\u4ee5\u8fd0\u884c\u3002 \u4f7f\u7528\u6df7\u5408\uff08mixins\uff09 \u4f7f\u7528\u57fa\u4e8e\u7c7b\u89c6\u56fe\u7684\u6700\u5927\u4f18\u52bf\u4e4b\u4e00\u662f\u5b83\u53ef\u4ee5\u8f7b\u677e\u5730\u521b\u5efa\u53ef\u590d\u7528\u7684\u884c\u4e3a\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u521b\u5efa/\u83b7\u53d6/\u66f4\u65b0/\u5220\u9664\u64cd\u4f5c\u548c\u6211\u4eec\u521b\u5efa\u7684\u4efb\u4f55\u57fa\u4e8e\u6a21\u578b\u7684API\u89c6\u56fe\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e9b\u5e38\u89c1\u7684\u884c\u4e3a\u662f\u5728REST\u6846\u67b6\u7684mixin\u7c7b\u4e2d\u5b9e\u73b0\u7684\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7\u4f7f\u7528mixin\u7c7b\u7f16\u5199\u89c6\u56fe\u7684\u3002\u8fd9\u662f\u6211\u4eec\u7684 views.py \u6a21\u5757\u3002 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework import mixins from rest_framework import generics class SnippetList(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer def get(self, request, *args, **kwargs): return self.list(request, *args, **kwargs) def post(self, request, *args, **kwargs): return self.create(request, *args, **kwargs) \u6211\u4eec\u5c06\u82b1\u70b9\u65f6\u95f4\u597d\u597d\u770b\u4e0b\u8fd9\u91cc\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u3002\u6211\u4eec\u4f7f\u7528 GenericAPIView \u6784\u5efa\u4e86\u6211\u4eec\u7684\u89c6\u56fe\uff0c\u5e76\u4e14\u7528\u4e0a\u4e86 ListModelMixin \u548c CreateModelMixin \u3002 \u57fa\u7c7b\u63d0\u4f9b\u6838\u5fc3\u529f\u80fd\uff0c\u800cmixin\u7c7b\u63d0\u4f9b .list() \u548c .create() \u64cd\u4f5c\u3002\u7136\u540e\u6211\u4eec\u660e\u786e\u5730\u5c06 get \u548c post \u65b9\u6cd5\u7ed1\u5b9a\u5230\u9002\u5f53\u7684\u64cd\u4f5c\u3002\u90fd\u76ee\u524d\u4e3a\u6b62\u90fd\u662f\u663e\u800c\u6613\u89c1\u7684\u3002 class SnippetDetail(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, generics.GenericAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer def get(self, request, *args, **kwargs): return self.retrieve(request, *args, **kwargs) def put(self, request, *args, **kwargs): return self.update(request, *args, **kwargs) def delete(self, request, *args, **kwargs): return self.destroy(request, *args, **kwargs) \u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e00\u6b21\u6211\u4eec\u4f7f\u7528 GenericAPIView \u7c7b\u6765\u63d0\u4f9b\u6838\u5fc3\u529f\u80fd\uff0c\u5e76\u6dfb\u52a0mixins\u6765\u63d0\u4f9b .retrieve() \uff09\uff0c .update() \u548c .destroy() \u64cd\u4f5c\u3002 \u4f7f\u7528\u901a\u7528\u7684\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe \u901a\u8fc7\u4f7f\u7528mixin\u7c7b\uff0c\u6211\u4eec\u4f7f\u7528\u66f4\u5c11\u7684\u4ee3\u7801\u91cd\u5199\u4e86\u8fd9\u4e9b\u89c6\u56fe\uff0c\u4f46\u6211\u4eec\u8fd8\u53ef\u4ee5\u518d\u8fdb\u4e00\u6b65\u3002REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u7ec4\u5df2\u7ecf\u6df7\u5408\u597d\uff08mixed-in\uff09\u7684\u901a\u7528\u89c6\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u7b80\u5316\u6211\u4eec\u7684 views.py \u6a21\u5757\u3002 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework import generics class SnippetList(generics.ListCreateAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer class SnippetDetail(generics.RetrieveUpdateDestroyAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer \u54c7\uff0c\u5982\u6b64\u7b80\u6d01\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u73b0\u6210\u7684\u4ee3\u7801\uff0c\u8ba9\u6211\u4eec\u7684\u4ee3\u7801\u770b\u8d77\u6765\u975e\u5e38\u6e05\u6670\u3001\u7b80\u6d01\uff0c\u5730\u9053\u7684Django\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u79fb\u6b65 \u6559\u7a0b\u7684\u7b2c4\u90e8\u5206 \uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u5904\u7406API\u7684\u8eab\u4efd\u9a8c\u8bc1\u548c\u6743\u9650\u3002","title":"3 - Class based views"},{"location":"tutorial/3-class-based-views_zh/#tutorial-3-cbv","text":"\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u7f16\u5199\u6211\u4eec\u7684API\u89c6\u56fe\uff0c\u800c\u4e0d\u662f\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\u6211\u4eec\u5c06\u770b\u5230\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u6a21\u5f0f\uff0c\u5141\u8bb8\u6211\u4eec\u91cd\u7528\u5e38\u7528\u529f\u80fd\uff0c\u5e76\u5e2e\u52a9\u6211\u4eec\u4fdd\u6301\u4ee3\u7801 DRY \u3002","title":"Tutorial 3: \u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff08CBV\uff09"},{"location":"tutorial/3-class-based-views_zh/#api","text":"\u6211\u4eec\u5c06\u9996\u5148\u5c06\u6839\u89c6\u56fe\u91cd\u5199\u4e3a\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5bf9 views.py \u6587\u4ef6\u7684\u91cd\u6784\u3002 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from django.http import Http404 from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status class SnippetList(APIView): \"\"\" \u5217\u51fa\u6240\u6709\u7684snippets\u6216\u8005\u521b\u5efa\u4e00\u4e2a\u65b0\u7684snippet\u3002 \"\"\" def get(self, request, format=None): snippets = Snippet.objects.all() serializer = SnippetSerializer(snippets, many=True) return Response(serializer.data) def post(self, request, format=None): serializer = SnippetSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) \u5230\u73b0\u5728\u4e3a\u6b62\u8fd8\u633a\u597d\u3002\u5b83\u770b\u8d77\u6765\u4e0e\u4ee5\u524d\u7684\u60c5\u51b5\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u6211\u4eec\u5728\u4e0d\u540c\u7684HTTP\u65b9\u6cd5\u4e4b\u95f4\u6709\u66f4\u597d\u7684\u5206\u79bb\u3002\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u65b0 views.py \u4e2d\u7684\u5b9e\u4f8b\u89c6\u56fe\u3002 class SnippetDetail(APIView): \"\"\" \u68c0\u7d22\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4e00\u4e2asnippet\u793a\u4f8b\u3002 \"\"\" def get_object(self, pk): try: return Snippet.objects.get(pk=pk) except Snippet.DoesNotExist: raise Http404 def get(self, request, pk, format=None): snippet = self.get_object(pk) serializer = SnippetSerializer(snippet) return Response(serializer.data) def put(self, request, pk, format=None): snippet = self.get_object(pk) serializer = SnippetSerializer(snippet, data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) def delete(self, request, pk, format=None): snippet = self.get_object(pk) snippet.delete() return Response(status=status.HTTP_204_NO_CONTENT) \u770b\u8d77\u6765\u4e0d\u9519\uff0c\u5b83\u73b0\u5728\u4ecd\u7136\u975e\u5e38\u7c7b\u4f3c\u4e8e\u57fa\u4e8e\u529f\u80fd\u7684\u89c6\u56fe\u3002 \u6211\u4eec\u8fd8\u9700\u8981\u91cd\u6784\u6211\u4eec\u7684 urls.py \uff0c\u73b0\u5728\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002 from django.conf.urls import url from rest_framework.urlpatterns import format_suffix_patterns from snippets import views urlpatterns = [ url(r'^snippets/$', views.SnippetList.as_view()), url(r'^snippets/(?P<pk>[0-9]+)/$', views.SnippetDetail.as_view()), ] urlpatterns = format_suffix_patterns(urlpatterns) \u597d\u4e86\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\u3002\u5982\u679c\u4f60\u542f\u52a8\u670d\u52a1\uff0c\u90a3\u4e48\u5b83\u5e94\u200b\u200b\u8be5\u50cf\u4e4b\u524d\u4e00\u6837\u53ef\u4ee5\u8fd0\u884c\u3002","title":"\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u91cd\u5199\u6211\u4eec\u7684API"},{"location":"tutorial/3-class-based-views_zh/#mixins","text":"\u4f7f\u7528\u57fa\u4e8e\u7c7b\u89c6\u56fe\u7684\u6700\u5927\u4f18\u52bf\u4e4b\u4e00\u662f\u5b83\u53ef\u4ee5\u8f7b\u677e\u5730\u521b\u5efa\u53ef\u590d\u7528\u7684\u884c\u4e3a\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u521b\u5efa/\u83b7\u53d6/\u66f4\u65b0/\u5220\u9664\u64cd\u4f5c\u548c\u6211\u4eec\u521b\u5efa\u7684\u4efb\u4f55\u57fa\u4e8e\u6a21\u578b\u7684API\u89c6\u56fe\u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e9b\u5e38\u89c1\u7684\u884c\u4e3a\u662f\u5728REST\u6846\u67b6\u7684mixin\u7c7b\u4e2d\u5b9e\u73b0\u7684\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7\u4f7f\u7528mixin\u7c7b\u7f16\u5199\u89c6\u56fe\u7684\u3002\u8fd9\u662f\u6211\u4eec\u7684 views.py \u6a21\u5757\u3002 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework import mixins from rest_framework import generics class SnippetList(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer def get(self, request, *args, **kwargs): return self.list(request, *args, **kwargs) def post(self, request, *args, **kwargs): return self.create(request, *args, **kwargs) \u6211\u4eec\u5c06\u82b1\u70b9\u65f6\u95f4\u597d\u597d\u770b\u4e0b\u8fd9\u91cc\u7684\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u3002\u6211\u4eec\u4f7f\u7528 GenericAPIView \u6784\u5efa\u4e86\u6211\u4eec\u7684\u89c6\u56fe\uff0c\u5e76\u4e14\u7528\u4e0a\u4e86 ListModelMixin \u548c CreateModelMixin \u3002 \u57fa\u7c7b\u63d0\u4f9b\u6838\u5fc3\u529f\u80fd\uff0c\u800cmixin\u7c7b\u63d0\u4f9b .list() \u548c .create() \u64cd\u4f5c\u3002\u7136\u540e\u6211\u4eec\u660e\u786e\u5730\u5c06 get \u548c post \u65b9\u6cd5\u7ed1\u5b9a\u5230\u9002\u5f53\u7684\u64cd\u4f5c\u3002\u90fd\u76ee\u524d\u4e3a\u6b62\u90fd\u662f\u663e\u800c\u6613\u89c1\u7684\u3002 class SnippetDetail(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, generics.GenericAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer def get(self, request, *args, **kwargs): return self.retrieve(request, *args, **kwargs) def put(self, request, *args, **kwargs): return self.update(request, *args, **kwargs) def delete(self, request, *args, **kwargs): return self.destroy(request, *args, **kwargs) \u975e\u5e38\u76f8\u4f3c\u3002\u8fd9\u4e00\u6b21\u6211\u4eec\u4f7f\u7528 GenericAPIView \u7c7b\u6765\u63d0\u4f9b\u6838\u5fc3\u529f\u80fd\uff0c\u5e76\u6dfb\u52a0mixins\u6765\u63d0\u4f9b .retrieve() \uff09\uff0c .update() \u548c .destroy() \u64cd\u4f5c\u3002","title":"\u4f7f\u7528\u6df7\u5408\uff08mixins\uff09"},{"location":"tutorial/3-class-based-views_zh/#_1","text":"\u901a\u8fc7\u4f7f\u7528mixin\u7c7b\uff0c\u6211\u4eec\u4f7f\u7528\u66f4\u5c11\u7684\u4ee3\u7801\u91cd\u5199\u4e86\u8fd9\u4e9b\u89c6\u56fe\uff0c\u4f46\u6211\u4eec\u8fd8\u53ef\u4ee5\u518d\u8fdb\u4e00\u6b65\u3002REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u7ec4\u5df2\u7ecf\u6df7\u5408\u597d\uff08mixed-in\uff09\u7684\u901a\u7528\u89c6\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u7b80\u5316\u6211\u4eec\u7684 views.py \u6a21\u5757\u3002 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework import generics class SnippetList(generics.ListCreateAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer class SnippetDetail(generics.RetrieveUpdateDestroyAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer \u54c7\uff0c\u5982\u6b64\u7b80\u6d01\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f88\u591a\u73b0\u6210\u7684\u4ee3\u7801\uff0c\u8ba9\u6211\u4eec\u7684\u4ee3\u7801\u770b\u8d77\u6765\u975e\u5e38\u6e05\u6670\u3001\u7b80\u6d01\uff0c\u5730\u9053\u7684Django\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u79fb\u6b65 \u6559\u7a0b\u7684\u7b2c4\u90e8\u5206 \uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u5904\u7406API\u7684\u8eab\u4efd\u9a8c\u8bc1\u548c\u6743\u9650\u3002","title":"\u4f7f\u7528\u901a\u7528\u7684\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe"},{"location":"tutorial/4-authentication-and-permissions/","text":"Tutorial 4: Authentication & Permissions Currently our API doesn't have any restrictions on who can edit or delete code snippets. We'd like to have some more advanced behavior in order to make sure that: Code snippets are always associated with a creator. Only authenticated users may create snippets. Only the creator of a snippet may update or delete it. Unauthenticated requests should have full read-only access. Adding information to our model We're going to make a couple of changes to our Snippet model class. First, let's add a couple of fields. One of those fields will be used to represent the user who created the code snippet. The other field will be used to store the highlighted HTML representation of the code. Add the following two fields to the Snippet model in models.py . owner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE) highlighted = models.TextField() We'd also need to make sure that when the model is saved, that we populate the highlighted field, using the pygments code highlighting library. We'll need some extra imports: from pygments.lexers import get_lexer_by_name from pygments.formatters.html import HtmlFormatter from pygments import highlight And now we can add a .save() method to our model class: def save(self, *args, **kwargs): \"\"\" Use the `pygments` library to create a highlighted HTML representation of the code snippet. \"\"\" lexer = get_lexer_by_name(self.language) linenos = 'table' if self.linenos else False options = {'title': self.title} if self.title else {} formatter = HtmlFormatter(style=self.style, linenos=linenos, full=True, **options) self.highlighted = highlight(self.code, lexer, formatter) super(Snippet, self).save(*args, **kwargs) When that's all done we'll need to update our database tables. Normally we'd create a database migration in order to do that, but for the purposes of this tutorial, let's just delete the database and start again. rm -f db.sqlite3 rm -r snippets/migrations python manage.py makemigrations snippets python manage.py migrate You might also want to create a few different users, to use for testing the API. The quickest way to do this will be with the createsuperuser command. python manage.py createsuperuser Adding endpoints for our User models Now that we've got some users to work with, we'd better add representations of those users to our API. Creating a new serializer is easy. In serializers.py add: from django.contrib.auth.models import User class UserSerializer(serializers.ModelSerializer): snippets = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all()) class Meta: model = User fields = ['id', 'username', 'snippets'] Because 'snippets' is a reverse relationship on the User model, it will not be included by default when using the ModelSerializer class, so we needed to add an explicit field for it. We'll also add a couple of views to views.py . We'd like to just use read-only views for the user representations, so we'll use the ListAPIView and RetrieveAPIView generic class-based views. from django.contrib.auth.models import User class UserList(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer class UserDetail(generics.RetrieveAPIView): queryset = User.objects.all() serializer_class = UserSerializer Make sure to also import the UserSerializer class from snippets.serializers import UserSerializer Finally we need to add those views into the API, by referencing them from the URL conf. Add the following to the patterns in snippets/urls.py . path('users/', views.UserList.as_view()), path('users/<int:pk>/', views.UserDetail.as_view()), Associating Snippets with Users Right now, if we created a code snippet, there'd be no way of associating the user that created the snippet, with the snippet instance. The user isn't sent as part of the serialized representation, but is instead a property of the incoming request. The way we deal with that is by overriding a .perform_create() method on our snippet views, that allows us to modify how the instance save is managed, and handle any information that is implicit in the incoming request or requested URL. On the SnippetList view class, add the following method: def perform_create(self, serializer): serializer.save(owner=self.request.user) The create() method of our serializer will now be passed an additional 'owner' field, along with the validated data from the request. Updating our serializer Now that snippets are associated with the user that created them, let's update our SnippetSerializer to reflect that. Add the following field to the serializer definition in serializers.py : owner = serializers.ReadOnlyField(source='owner.username') Note : Make sure you also add 'owner', to the list of fields in the inner Meta class. This field is doing something quite interesting. The source argument controls which attribute is used to populate a field, and can point at any attribute on the serialized instance. It can also take the dotted notation shown above, in which case it will traverse the given attributes, in a similar way as it is used with Django's template language. The field we've added is the untyped ReadOnlyField class, in contrast to the other typed fields, such as CharField , BooleanField etc... The untyped ReadOnlyField is always read-only, and will be used for serialized representations, but will not be used for updating model instances when they are deserialized. We could have also used CharField(read_only=True) here. Adding required permissions to views Now that code snippets are associated with users, we want to make sure that only authenticated users are able to create, update and delete code snippets. REST framework includes a number of permission classes that we can use to restrict who can access a given view. In this case the one we're looking for is IsAuthenticatedOrReadOnly , which will ensure that authenticated requests get read-write access, and unauthenticated requests get read-only access. First add the following import in the views module from rest_framework import permissions Then, add the following property to both the SnippetList and SnippetDetail view classes. permission_classes = [permissions.IsAuthenticatedOrReadOnly] Adding login to the Browsable API If you open a browser and navigate to the browsable API at the moment, you'll find that you're no longer able to create new code snippets. In order to do so we'd need to be able to login as a user. We can add a login view for use with the browsable API, by editing the URLconf in our project-level urls.py file. Add the following import at the top of the file: from django.conf.urls import include And, at the end of the file, add a pattern to include the login and logout views for the browsable API. urlpatterns += [ path('api-auth/', include('rest_framework.urls')), ] The 'api-auth/' part of pattern can actually be whatever URL you want to use. Now if you open up the browser again and refresh the page you'll see a 'Login' link in the top right of the page. If you log in as one of the users you created earlier, you'll be able to create code snippets again. Once you've created a few code snippets, navigate to the '/users/' endpoint, and notice that the representation includes a list of the snippet ids that are associated with each user, in each user's 'snippets' field. Object level permissions Really we'd like all code snippets to be visible to anyone, but also make sure that only the user that created a code snippet is able to update or delete it. To do that we're going to need to create a custom permission. In the snippets app, create a new file, permissions.py from rest_framework import permissions class IsOwnerOrReadOnly(permissions.BasePermission): \"\"\" Custom permission to only allow owners of an object to edit it. \"\"\" def has_object_permission(self, request, view, obj): # Read permissions are allowed to any request, # so we'll always allow GET, HEAD or OPTIONS requests. if request.method in permissions.SAFE_METHODS: return True # Write permissions are only allowed to the owner of the snippet. return obj.owner == request.user Now we can add that custom permission to our snippet instance endpoint, by editing the permission_classes property on the SnippetDetail view class: permission_classes = [permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly] Make sure to also import the IsOwnerOrReadOnly class. from snippets.permissions import IsOwnerOrReadOnly Now, if you open a browser again, you find that the 'DELETE' and 'PUT' actions only appear on a snippet instance endpoint if you're logged in as the same user that created the code snippet. Authenticating with the API Because we now have a set of permissions on the API, we need to authenticate our requests to it if we want to edit any snippets. We haven't set up any authentication classes , so the defaults are currently applied, which are SessionAuthentication and BasicAuthentication . When we interact with the API through the web browser, we can login, and the browser session will then provide the required authentication for the requests. If we're interacting with the API programmatically we need to explicitly provide the authentication credentials on each request. If we try to create a snippet without authenticating, we'll get an error: http POST http://127.0.0.1:8000/snippets/ code=\"print(123)\" { \"detail\": \"Authentication credentials were not provided.\" } We can make a successful request by including the username and password of one of the users we created earlier. http -a admin:password123 POST http://127.0.0.1:8000/snippets/ code=\"print(789)\" { \"id\": 1, \"owner\": \"admin\", \"title\": \"foo\", \"code\": \"print(789)\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } Summary We've now got a fairly fine-grained set of permissions on our Web API, and end points for users of the system and for the code snippets that they have created. In part 5 of the tutorial we'll look at how we can tie everything together by creating an HTML endpoint for our highlighted snippets, and improve the cohesion of our API by using hyperlinking for the relationships within the system.","title":"Tutorial 4: Authentication & Permissions"},{"location":"tutorial/4-authentication-and-permissions/#tutorial-4-authentication-permissions","text":"Currently our API doesn't have any restrictions on who can edit or delete code snippets. We'd like to have some more advanced behavior in order to make sure that: Code snippets are always associated with a creator. Only authenticated users may create snippets. Only the creator of a snippet may update or delete it. Unauthenticated requests should have full read-only access.","title":"Tutorial 4: Authentication &amp; Permissions"},{"location":"tutorial/4-authentication-and-permissions/#adding-information-to-our-model","text":"We're going to make a couple of changes to our Snippet model class. First, let's add a couple of fields. One of those fields will be used to represent the user who created the code snippet. The other field will be used to store the highlighted HTML representation of the code. Add the following two fields to the Snippet model in models.py . owner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE) highlighted = models.TextField() We'd also need to make sure that when the model is saved, that we populate the highlighted field, using the pygments code highlighting library. We'll need some extra imports: from pygments.lexers import get_lexer_by_name from pygments.formatters.html import HtmlFormatter from pygments import highlight And now we can add a .save() method to our model class: def save(self, *args, **kwargs): \"\"\" Use the `pygments` library to create a highlighted HTML representation of the code snippet. \"\"\" lexer = get_lexer_by_name(self.language) linenos = 'table' if self.linenos else False options = {'title': self.title} if self.title else {} formatter = HtmlFormatter(style=self.style, linenos=linenos, full=True, **options) self.highlighted = highlight(self.code, lexer, formatter) super(Snippet, self).save(*args, **kwargs) When that's all done we'll need to update our database tables. Normally we'd create a database migration in order to do that, but for the purposes of this tutorial, let's just delete the database and start again. rm -f db.sqlite3 rm -r snippets/migrations python manage.py makemigrations snippets python manage.py migrate You might also want to create a few different users, to use for testing the API. The quickest way to do this will be with the createsuperuser command. python manage.py createsuperuser","title":"Adding information to our model"},{"location":"tutorial/4-authentication-and-permissions/#adding-endpoints-for-our-user-models","text":"Now that we've got some users to work with, we'd better add representations of those users to our API. Creating a new serializer is easy. In serializers.py add: from django.contrib.auth.models import User class UserSerializer(serializers.ModelSerializer): snippets = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all()) class Meta: model = User fields = ['id', 'username', 'snippets'] Because 'snippets' is a reverse relationship on the User model, it will not be included by default when using the ModelSerializer class, so we needed to add an explicit field for it. We'll also add a couple of views to views.py . We'd like to just use read-only views for the user representations, so we'll use the ListAPIView and RetrieveAPIView generic class-based views. from django.contrib.auth.models import User class UserList(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer class UserDetail(generics.RetrieveAPIView): queryset = User.objects.all() serializer_class = UserSerializer Make sure to also import the UserSerializer class from snippets.serializers import UserSerializer Finally we need to add those views into the API, by referencing them from the URL conf. Add the following to the patterns in snippets/urls.py . path('users/', views.UserList.as_view()), path('users/<int:pk>/', views.UserDetail.as_view()),","title":"Adding endpoints for our User models"},{"location":"tutorial/4-authentication-and-permissions/#associating-snippets-with-users","text":"Right now, if we created a code snippet, there'd be no way of associating the user that created the snippet, with the snippet instance. The user isn't sent as part of the serialized representation, but is instead a property of the incoming request. The way we deal with that is by overriding a .perform_create() method on our snippet views, that allows us to modify how the instance save is managed, and handle any information that is implicit in the incoming request or requested URL. On the SnippetList view class, add the following method: def perform_create(self, serializer): serializer.save(owner=self.request.user) The create() method of our serializer will now be passed an additional 'owner' field, along with the validated data from the request.","title":"Associating Snippets with Users"},{"location":"tutorial/4-authentication-and-permissions/#updating-our-serializer","text":"Now that snippets are associated with the user that created them, let's update our SnippetSerializer to reflect that. Add the following field to the serializer definition in serializers.py : owner = serializers.ReadOnlyField(source='owner.username') Note : Make sure you also add 'owner', to the list of fields in the inner Meta class. This field is doing something quite interesting. The source argument controls which attribute is used to populate a field, and can point at any attribute on the serialized instance. It can also take the dotted notation shown above, in which case it will traverse the given attributes, in a similar way as it is used with Django's template language. The field we've added is the untyped ReadOnlyField class, in contrast to the other typed fields, such as CharField , BooleanField etc... The untyped ReadOnlyField is always read-only, and will be used for serialized representations, but will not be used for updating model instances when they are deserialized. We could have also used CharField(read_only=True) here.","title":"Updating our serializer"},{"location":"tutorial/4-authentication-and-permissions/#adding-required-permissions-to-views","text":"Now that code snippets are associated with users, we want to make sure that only authenticated users are able to create, update and delete code snippets. REST framework includes a number of permission classes that we can use to restrict who can access a given view. In this case the one we're looking for is IsAuthenticatedOrReadOnly , which will ensure that authenticated requests get read-write access, and unauthenticated requests get read-only access. First add the following import in the views module from rest_framework import permissions Then, add the following property to both the SnippetList and SnippetDetail view classes. permission_classes = [permissions.IsAuthenticatedOrReadOnly]","title":"Adding required permissions to views"},{"location":"tutorial/4-authentication-and-permissions/#adding-login-to-the-browsable-api","text":"If you open a browser and navigate to the browsable API at the moment, you'll find that you're no longer able to create new code snippets. In order to do so we'd need to be able to login as a user. We can add a login view for use with the browsable API, by editing the URLconf in our project-level urls.py file. Add the following import at the top of the file: from django.conf.urls import include And, at the end of the file, add a pattern to include the login and logout views for the browsable API. urlpatterns += [ path('api-auth/', include('rest_framework.urls')), ] The 'api-auth/' part of pattern can actually be whatever URL you want to use. Now if you open up the browser again and refresh the page you'll see a 'Login' link in the top right of the page. If you log in as one of the users you created earlier, you'll be able to create code snippets again. Once you've created a few code snippets, navigate to the '/users/' endpoint, and notice that the representation includes a list of the snippet ids that are associated with each user, in each user's 'snippets' field.","title":"Adding login to the Browsable API"},{"location":"tutorial/4-authentication-and-permissions/#object-level-permissions","text":"Really we'd like all code snippets to be visible to anyone, but also make sure that only the user that created a code snippet is able to update or delete it. To do that we're going to need to create a custom permission. In the snippets app, create a new file, permissions.py from rest_framework import permissions class IsOwnerOrReadOnly(permissions.BasePermission): \"\"\" Custom permission to only allow owners of an object to edit it. \"\"\" def has_object_permission(self, request, view, obj): # Read permissions are allowed to any request, # so we'll always allow GET, HEAD or OPTIONS requests. if request.method in permissions.SAFE_METHODS: return True # Write permissions are only allowed to the owner of the snippet. return obj.owner == request.user Now we can add that custom permission to our snippet instance endpoint, by editing the permission_classes property on the SnippetDetail view class: permission_classes = [permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly] Make sure to also import the IsOwnerOrReadOnly class. from snippets.permissions import IsOwnerOrReadOnly Now, if you open a browser again, you find that the 'DELETE' and 'PUT' actions only appear on a snippet instance endpoint if you're logged in as the same user that created the code snippet.","title":"Object level permissions"},{"location":"tutorial/4-authentication-and-permissions/#authenticating-with-the-api","text":"Because we now have a set of permissions on the API, we need to authenticate our requests to it if we want to edit any snippets. We haven't set up any authentication classes , so the defaults are currently applied, which are SessionAuthentication and BasicAuthentication . When we interact with the API through the web browser, we can login, and the browser session will then provide the required authentication for the requests. If we're interacting with the API programmatically we need to explicitly provide the authentication credentials on each request. If we try to create a snippet without authenticating, we'll get an error: http POST http://127.0.0.1:8000/snippets/ code=\"print(123)\" { \"detail\": \"Authentication credentials were not provided.\" } We can make a successful request by including the username and password of one of the users we created earlier. http -a admin:password123 POST http://127.0.0.1:8000/snippets/ code=\"print(789)\" { \"id\": 1, \"owner\": \"admin\", \"title\": \"foo\", \"code\": \"print(789)\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }","title":"Authenticating with the API"},{"location":"tutorial/4-authentication-and-permissions/#summary","text":"We've now got a fairly fine-grained set of permissions on our Web API, and end points for users of the system and for the code snippets that they have created. In part 5 of the tutorial we'll look at how we can tie everything together by creating an HTML endpoint for our highlighted snippets, and improve the cohesion of our API by using hyperlinking for the relationships within the system.","title":"Summary"},{"location":"tutorial/4-authentication-and-permissions_zh/","text":"Tutorial 4: \u8ba4\u8bc1\u548c\u6743\u9650 \u76ee\u524d\uff0c\u6211\u4eec\u7684API\u5bf9\u8c01\u53ef\u4ee5\u7f16\u8f91\u6216\u5220\u9664\u4ee3\u7801\u6bb5\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u3002\u6211\u4eec\u5e0c\u671b\u6709\u66f4\u9ad8\u7ea7\u7684\u884c\u4e3a\uff0c\u4ee5\u786e\u4fdd\uff1a \u4ee3\u7801\u7247\u6bb5\u59cb\u7ec8\u4e0e\u521b\u5efa\u8005\u76f8\u5173\u8054\u3002 \u53ea\u6709\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u53ef\u4ee5\u521b\u5efa\u7247\u6bb5\u3002 \u53ea\u6709\u4ee3\u7801\u7247\u6bb5\u7684\u521b\u5efa\u8005\u53ef\u4ee5\u66f4\u65b0\u6216\u5220\u9664\u5b83\u3002 \u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u5e94\u5177\u6709\u5b8c\u5168\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002 \u5728\u6211\u4eec\u7684\u6a21\u578b\uff08model\uff09\u4e2d\u6dfb\u52a0\u4fe1\u606f \u6211\u4eec\u5c06\u5bf9\u6211\u4eec\u7684 Snippet \u6a21\u578b\u7c7b\u8fdb\u884c\u51e0\u6b21\u66f4\u6539\u3002\u9996\u5148\uff0c\u6211\u4eec\u6dfb\u52a0\u51e0\u4e2a\u5b57\u6bb5\u3002\u5176\u4e2d\u4e00\u4e2a\u5b57\u6bb5\u5c06\u7528\u4e8e\u8868\u793a\u521b\u5efa\u4ee3\u7801\u6bb5\u7684\u7528\u6237\uff0c\u53e6\u4e00\u4e2a\u5b57\u6bb5\u5c06\u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7684\u9ad8\u4eae\u663e\u793a\u7684HTML\u5185\u5bb9\u3002 \u5c06\u4ee5\u4e0b\u4e24\u4e2a\u5b57\u6bb5\u6dfb\u52a0\u5230 models.py \u6587\u4ef6\u4e2d\u7684 Snippet \u6a21\u578b\u4e2d\u3002 owner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE) highlighted = models.TextField() \u6211\u4eec\u8fd8\u9700\u8981\u786e\u4fdd\u5728\u4fdd\u5b58\u6a21\u578b\u65f6\uff0c\u4f7f\u7528 pygments \u4ee3\u7801\u9ad8\u4eae\u663e\u793a\u5e93\u586b\u5145\u8981\u9ad8\u4eae\u663e\u793a\u7684\u5b57\u6bb5\u3002 \u6211\u4eec\u9700\u8981\u5bfc\u5165\u989d\u5916\u7684\u6a21\u5757\uff1a from pygments.lexers import get_lexer_by_name from pygments.formatters.html import HtmlFormatter from pygments import highlight \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6a21\u578b\u7c7b\u4e2d\u6dfb\u52a0\u4e00\u4e2a .save() \u65b9\u6cd5\uff1a def save(self, *args, **kwargs): \"\"\" \u4f7f\u7528`pygments`\u5e93\u521b\u5efa\u4e00\u4e2a\u9ad8\u4eae\u663e\u793a\u7684HTML\u8868\u793a\u4ee3\u7801\u6bb5\u3002 \"\"\" lexer = get_lexer_by_name(self.language) linenos = self.linenos and 'table' or False options = self.title and {'title': self.title} or {} formatter = HtmlFormatter(style=self.style, linenos=linenos, full=True, **options) self.highlighted = highlight(self.code, lexer, formatter) super(Snippet, self).save(*args, **kwargs) \u5b8c\u6210\u8fd9\u4e9b\u5de5\u4f5c\u540e\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u6211\u4eec\u7684\u6570\u636e\u5e93\u8868\u3002 \u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u8fc1\u79fb\uff08migration\uff09\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u53ea\u662f\u4e2a\u6559\u7a0b\u793a\u4f8b\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u76f4\u63a5\u5220\u9664\u6570\u636e\u5e93\u5e76\u91cd\u65b0\u5f00\u59cb\u3002 rm -f tmp.db db.sqlite3 rm -r snippets/migrations python manage.py makemigrations snippets python manage.py migrate \u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u521b\u5efa\u51e0\u4e2a\u4e0d\u540c\u7684\u7528\u6237\uff0c\u4ee5\u7528\u4e8e\u6d4b\u8bd5API\u3002\u6700\u5feb\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 createsuperuser \u547d\u4ee4\u3002 python manage.py createsuperuser \u4e3a\u6211\u4eec\u7684\u7528\u6237\u6a21\u578b\u6dfb\u52a0\u8def\u5f84 \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e9b\u7528\u6237\uff0c\u6211\u4eec\u6700\u597d\u5728API\u4e2d\u6dfb\u52a0\u8fd9\u4e9b\u7528\u6237\u7684\u8868\u793a\u3002\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\u5316\u5668\u975e\u5e38\u7b80\u5355\uff0c\u5728 serializers.py \u6587\u4ef6\u4e2d\u6dfb\u52a0\uff1a from django.contrib.auth.models import User class UserSerializer(serializers.ModelSerializer): snippets = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all()) class Meta: model = User fields = ('id', 'username', 'snippets') \u56e0\u4e3a 'snippets' \u5728\u7528\u6237\u6a21\u578b\u4e2d\u662f\u4e00\u4e2a \u53cd\u5411 \u5173\u8054\u5173\u7cfb\u3002\u5728\u4f7f\u7528 ModelSerializer \u7c7b\u65f6\u5b83\u9ed8\u8ba4\u4e0d\u4f1a\u88ab\u5305\u542b\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u5b83\u6dfb\u52a0\u4e00\u4e2a\u663e\u5f0f\u5b57\u6bb5\u3002 \u6211\u4eec\u8fd8\u4f1a\u5728 views.py \u4e2d\u6dfb\u52a0\u51e0\u4e2a\u89c6\u56fe\u3002\u6211\u4eec\u53ea\u60f3\u5c06\u7528\u6237\u5c55\u793a\u4e3a\u53ea\u8bfb\u89c6\u56fe\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4f7f\u7528 ListAPIView \u548c RetrieveAPIView \u901a\u7528\u7684\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002 from django.contrib.auth.models import User class UserList(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer class UserDetail(generics.RetrieveAPIView): queryset = User.objects.all() serializer_class = UserSerializer \u786e\u4fdd\u5bfc\u5165\u4e86 UserSerializer \u7c7b from snippets.serializers import UserSerializer \u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u5728URL conf\u4e2d\u5f15\u7528\u5b83\u4eec\u6765\u5c06\u8fd9\u4e9b\u89c6\u56fe\u6dfb\u52a0\u5230API\u4e2d\u3002\u5c06\u4ee5\u4e0b\u5185\u5bb9\u6dfb\u52a0\u5230 urls.py \u6587\u4ef6\u7684patterns\u4e2d\u3002 url(r'^users/$', views.UserList.as_view()), url(r'^users/(?P<pk>[0-9]+)/$', views.UserDetail.as_view()), \u5c06Snippet\u548c\u7528\u6237\u5173\u8054 \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u4e0d\u80fd\u5c06\u521b\u5efa\u8be5\u4ee3\u7801\u7247\u6bb5\u7684\u7528\u6237\u4e0e\u4ee3\u7801\u6bb5\u5b9e\u4f8b\u76f8\u5173\u8054\u3002\u7528\u6237\u4e0d\u662f\u4f5c\u4e3a\u5e8f\u5217\u5316\u8868\u793a\u7684\u4e00\u90e8\u5206\u53d1\u9001\u7684\uff0c\u800c\u662f\u4f5c\u4e3a\u4f20\u5165\u8bf7\u6c42\u7684\u5c5e\u6027\u3002\uff08\u8bd1\u8005\u6ce8\uff1auser\u4e0d\u5728\u4f20\u8fc7\u6765\u7684\u6570\u636e\u4e2d\uff0c\u800c\u662f\u901a\u8fc7request.user\u83b7\u5f97\uff09 \u6211\u4eec\u5904\u7406\u7684\u65b9\u5f0f\u662f\u5728\u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u89c6\u56fe\u4e2d\u91cd\u5199\u4e00\u4e2a .perform_create() \u65b9\u6cd5\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5b9e\u4f8b\u4fdd\u5b58\u7684\u65b9\u6cd5\uff0c\u5e76\u5904\u7406\u4f20\u5165\u8bf7\u6c42\u6216\u8bf7\u6c42URL\u4e2d\u9690\u542b\u7684\u4efb\u4f55\u4fe1\u606f\u3002 \u5728 SnippetList \u89c6\u56fe\u7c7b\u4e2d\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u65b9\u6cd5\uff1a def perform_create(self, serializer): serializer.save(owner=self.request.user) \u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668\u7684 create() \u65b9\u6cd5\u73b0\u5728\u5c06\u88ab\u4f20\u9012\u4e00\u4e2a\u9644\u52a0\u7684 'owner' \u5b57\u6bb5\u4ee5\u53ca\u6765\u81ea\u8bf7\u6c42\u7684\u9a8c\u8bc1\u6570\u636e\u3002 \u66f4\u65b0\u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668 \u73b0\u5728\uff0c\u8fd9\u4e9b\u4ee3\u7801\u7247\u6bb5\u548c\u521b\u5efa\u5b83\u4eec\u7684\u7528\u6237\u76f8\u5173\u8054\uff0c\u8ba9\u6211\u4eec\u66f4\u65b0\u6211\u4eec\u7684 SnippetSerializer \u6765\u4f53\u73b0\u8fd9\u4e2a\u5173\u8054\u5173\u7cfb\u3002\u5c06\u4ee5\u4e0b\u5b57\u6bb5\u6dfb\u52a0\u5230 serializers.py \u4e2d\u7684\u5e8f\u5217\u5316\u5668\u5b9a\u4e49\uff1a Add the following field to the serializer definition in serializers.py : owner = serializers.ReadOnlyField(source='owner.username') \u6ce8\u610f \uff1a\u786e\u4fdd\u4f60\u8fd8\u5c06 'owner', \u6dfb\u52a0\u5230\u5185\u90e8 Meta \u7c7b\u7684\u5b57\u6bb5\u5217\u8868\u4e2d\u3002 \u8fd9\u4e2a\u5b57\u6bb5\u975e\u5e38\u6709\u8da3\u3002 source \u53c2\u6570\u63a7\u5236\u54ea\u4e2a\u5c5e\u6027\u7528\u4e8e\u586b\u5145\u5b57\u6bb5\uff0c\u5e76\u4e14\u53ef\u4ee5\u6307\u5411\u5e8f\u5217\u5316\u5b9e\u4f8b\u4e0a\u7684\u4efb\u4f55\u5c5e\u6027\u3002\u5b83\u4e5f\u53ef\u4ee5\u91c7\u7528\u5982\u4e0a\u6240\u793a\u70b9\u52a0\u4e0b\u5212\u7ebf\u7684\u65b9\u5f0f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u4ee5\u4e0eDjango\u6a21\u677f\u8bed\u8a00\u4e00\u8d77\u4f7f\u7528\u7684\u76f8\u4f3c\u65b9\u5f0f\u904d\u5386\u7ed9\u5b9a\u7684\u5c5e\u6027\u3002 \u6211\u4eec\u6dfb\u52a0\u7684\u5b57\u6bb5\u662f\u65e0\u7c7b\u578b\u7684 ReadOnlyField \u7c7b\uff0c\u533a\u522b\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u5b57\u6bb5\uff08\u5982 CharField \uff0c BooleanField \u7b49\uff09\u3002\u65e0\u7c7b\u578b\u7684 ReadOnlyField \u59cb\u7ec8\u662f\u53ea\u8bfb\u7684\uff0c\u53ea\u80fd\u7528\u4e8e\u5e8f\u5217\u5316\u8868\u793a\uff0c\u4e0d\u80fd\u7528\u4e8e\u5728\u53cd\u5e8f\u5217\u5316\u65f6\u66f4\u65b0\u6a21\u578b\u5b9e\u4f8b\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528 CharField(read_only=True) \u3002 \u6dfb\u52a0\u89c6\u56fe\u6240\u9700\u7684\u6743\u9650 \u73b0\u5728\uff0c\u4ee3\u7801\u7247\u6bb5\u4e0e\u7528\u6237\u662f\u76f8\u5173\u8054\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u53ea\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u624d\u80fd\u521b\u5efa\uff0c\u66f4\u65b0\u548c\u5220\u9664\u4ee3\u7801\u7247\u6bb5\u3002 REST\u6846\u67b6\u5305\u62ec\u8bb8\u591a\u6743\u9650\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6743\u9650\u7c7b\u6765\u9650\u5236\u8c01\u53ef\u4ee5\u8bbf\u95ee\u7ed9\u5b9a\u7684\u89c6\u56fe\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f IsAuthenticatedOrReadOnly \u7c7b\uff0c\u8fd9\u5c06\u786e\u4fdd\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u83b7\u5f97\u8bfb\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u5c06\u83b7\u5f97\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002 \u9996\u5148\u8981\u5728\u89c6\u56fe\u6a21\u5757\u4e2d\u5bfc\u5165\u4ee5\u4e0b\u5185\u5bb9 from rest_framework import permissions \u7136\u540e\uff0c\u5c06\u4ee5\u4e0b\u5c5e\u6027\u6dfb\u52a0\u5230 SnippetList \u548c SnippetDetail \u89c6\u56fe\u7c7b\u4e2d\u3002 permission_classes = (permissions.IsAuthenticatedOrReadOnly,) \u7ed9Browsable API\u6dfb\u52a0\u767b\u9646 \u5982\u679c\u4f60\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6d4f\u89c8\u6211\u4eec\u7684API\uff0c\u90a3\u4e48\u4f60\u4f1a\u53d1\u73b0\u4e0d\u80fd\u521b\u5efa\u65b0\u7684\u4ee3\u7801\u7247\u6bb5\u3002\u53ea\u6709\u767b\u9646\u7528\u6237\u624d\u80fd\u521b\u5efa\u65b0\u7684\u4ee3\u7801\u7247\u6bb5\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f16\u8f91\u9879\u76ee\u7ea7\u522b\u7684 urls.py \u6587\u4ef6\u4e2d\u7684URLconf\u6765\u6dfb\u52a0\u53ef\u6d4f\u89c8\u7684API\u4f7f\u7528\u7684\u767b\u5f55\u89c6\u56fe\u3002 \u5728\u6587\u4ef6\u9876\u90e8\u6dfb\u52a0\u4ee5\u4e0b\u5bfc\u5165\uff1a from django.conf.urls import include \u800c\u4e14\uff0c\u5728\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6a21\u5f0f\uff08pattern\uff09\u4ee5\u5305\u62ec\u53ef\u6d4f\u89c8\u7684API\u7684\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe\u3002 urlpatterns += [ url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')), ] \u6a21\u5f0f\u7684 r'^api-auth/' \u90e8\u5206\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u4f60\u8981\u4f7f\u7528\u7684\u4efb\u4f55URL\u3002\u552f\u4e00\u7684\u9650\u5236\u662f\u5305\u542b\u7684URL\u5fc5\u987b\u4f7f\u7528 'rest_framework' \u547d\u540d\u7a7a\u95f4\u3002\u5728Django 1.9\u4ee5\u4e0a\u7684\u7248\u672c\u4e2d\uff0cREST\u6846\u67b6\u5c06\u8bbe\u7f6e\u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u5c06\u5176\u5220\u9664\u3002 \u73b0\u5728\uff0c\u5982\u679c\u4f60\u518d\u6b21\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5237\u65b0\u9875\u9762\uff0c\u4f60\u5c06\u5728\u9875\u9762\u53f3\u4e0a\u89d2\u770b\u5230\u4e00\u4e2a\u201c\u767b\u5f55\u201d\u94fe\u63a5\u3002\u5982\u679c\u4f60\u7528\u65e9\u671f\u521b\u5efa\u7684\u7528\u6237\u767b\u5f55\uff0c\u5c31\u53ef\u4ee5\u518d\u6b21\u521b\u5efa\u4ee3\u7801\u7247\u6bb5\u3002 \u4e00\u65e6\u4f60\u521b\u5efa\u4e86\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\u540e\uff0c\u5728'/users/'\u8def\u5f84\u4e0b\u4f60\u4f1a\u6ce8\u610f\u5230\u6bcf\u4e2a\u7528\u6237\u7684'snippets'\u5b57\u6bb5\u90fd\u5305\u542b\u4e0e\u6bcf\u4e2a\u7528\u6237\u76f8\u5173\u8054\u7684\u4ee3\u7801\u7247\u6bb5\u7684\u5217\u8868\u3002 \u5bf9\u8c61\u7ea7\u522b\u7684\u6743\u9650 \u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u4ee3\u7801\u7247\u6bb5\u90fd\u53ef\u4ee5\u88ab\u4efb\u4f55\u4eba\u770b\u5230\uff0c\u4f46\u4e5f\u8981\u786e\u4fdd\u53ea\u6709\u521b\u5efa\u4ee3\u7801\u7247\u6bb5\u7684\u7528\u6237\u624d\u80fd\u66f4\u65b0\u6216\u5220\u9664\u5b83\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6743\u9650\u3002 \u5728snippets app\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6 permissions.py \u3002 from rest_framework import permissions class IsOwnerOrReadOnly(permissions.BasePermission): \"\"\" \u81ea\u5b9a\u4e49\u6743\u9650\u53ea\u5141\u8bb8\u5bf9\u8c61\u7684\u6240\u6709\u8005\u7f16\u8f91\u5b83\u3002 \"\"\" def has_object_permission(self, request, view, obj): # \u8bfb\u53d6\u6743\u9650\u5141\u8bb8\u4efb\u4f55\u8bf7\u6c42\uff0c # \u6240\u4ee5\u6211\u4eec\u603b\u662f\u5141\u8bb8GET\uff0cHEAD\u6216OPTIONS\u8bf7\u6c42\u3002 if request.method in permissions.SAFE_METHODS: return True # \u53ea\u6709\u8be5snippet\u7684\u6240\u6709\u8005\u624d\u5141\u8bb8\u5199\u6743\u9650\u3002 return obj.owner == request.user \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728 SnippetDetail \u89c6\u56fe\u7c7b\u4e2d\u7f16\u8f91 permission_classes \u5c5e\u6027\u5c06\u8be5\u81ea\u5b9a\u4e49\u6743\u9650\u6dfb\u52a0\u5230\u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u8def\u5f84\uff1a permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly,) \u786e\u4fdd\u8981\u5148\u5bfc\u5165 IsOwnerOrReadOnly \u7c7b\u3002 from snippets.permissions import IsOwnerOrReadOnly \u73b0\u5728\uff0c\u5982\u679c\u518d\u6b21\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u4f60\u4f1a\u53d1\u73b0\u5982\u679c\u4f60\u4ee5\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u8005\u7684\u8eab\u4efd\u767b\u5f55\u7684\u8bdd\uff0c\u201cDELETE\u201d\u548c\u201cPUT\u201d\u64cd\u4f5c\u624d\u4f1a\u663e\u793a\u5728\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u8def\u5f84\u4e0a\u3002 \u4f7f\u7528API\u200b\u200b\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1 \u73b0\u5728\u56e0\u4e3a\u6211\u4eec\u5728API\u4e0a\u6709\u4e00\u7ec4\u6743\u9650\uff0c\u5982\u679c\u6211\u4eec\u8981\u7f16\u8f91\u4efb\u4f55\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u90fd\u9700\u8981\u9a8c\u8bc1\u6211\u4eec\u7684\u8bf7\u6c42\u3002\u6211\u4eec\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u4efb\u4f55 \u8eab\u4efd\u9a8c\u8bc1\u7c7b \uff0c\u6240\u4ee5\u5e94\u7528\u7684\u662f\u9ed8\u8ba4\u7684 SessionAuthentication \u548c BasicAuthentication \u3002 \u5f53\u6211\u4eec\u901a\u8fc7Web\u6d4f\u89c8\u5668\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u767b\u5f55\uff0c\u7136\u540e\u6d4f\u89c8\u5668\u4f1a\u8bdd\u5c06\u4e3a\u8bf7\u6c42\u63d0\u4f9b\u6240\u9700\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002 \u5982\u679c\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u4e0eAPI\u4ea4\u4e92\uff0c\u6211\u4eec\u9700\u8981\u5728\u6bcf\u6b21\u8bf7\u6c42\u4e0a\u663e\u5f0f\u63d0\u4f9b\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u3002 \u5982\u679c\u6211\u4eec\u901a\u8fc7\u6ca1\u6709\u9a8c\u8bc1\u5c31\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u4f1a\u50cf\u4e0b\u9762\u5c55\u793a\u7684\u90a3\u6837\u6536\u5230\u62a5\u9519\uff1a http POST http://127.0.0.1:8000/snippets/ code=\"print 123\" { \"detail\": \"Authentication credentials were not provided.\" } \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u52a0\u4e0a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684\u4e00\u4e2a\u7528\u6237\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u6765\u6210\u529f\u521b\u5efa\uff1a http -a tom:password123 POST http://127.0.0.1:8000/snippets/ code=\"print 789\" { \"id\": 5, \"owner\": \"tom\", \"title\": \"foo\", \"code\": \"print 789\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } \u603b\u7ed3 \u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5728\u6211\u4eec\u7684Web API\u4e0a\u83b7\u5f97\u4e86\u76f8\u5f53\u7cbe\u7ec6\u7684\u4e00\u7ec4\u6743\u9650\u63a7\u5236\uff0c\u5e76\u4e3a\u7cfb\u7edf\u7684\u7528\u6237\u548c\u4ed6\u4eec\u521b\u5efa\u7684\u4ee3\u7801\u7247\u6bb5\u63d0\u4f9b\u4e86API\u8def\u5f84\u3002 \u5728 \u672c\u6559\u7a0b\u7684\u7b2c5\u90e8\u5206 \u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7\u4e3a\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u4e00\u4e2aHTML\u8def\u5f84\u6765\u5c06\u6240\u6709\u5185\u5bb9\u8054\u7cfb\u8d77\u6765\uff0c\u5e76\u5728\u7cfb\u7edf\u5185\u90e8\u901a\u8fc7\u4f7f\u7528\u8d85\u94fe\u63a5\u5c06API\u8054\u7cfb\u8d77\u6765\u3002","title":"4 - Authentication and permissions"},{"location":"tutorial/4-authentication-and-permissions_zh/#tutorial-4","text":"\u76ee\u524d\uff0c\u6211\u4eec\u7684API\u5bf9\u8c01\u53ef\u4ee5\u7f16\u8f91\u6216\u5220\u9664\u4ee3\u7801\u6bb5\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u3002\u6211\u4eec\u5e0c\u671b\u6709\u66f4\u9ad8\u7ea7\u7684\u884c\u4e3a\uff0c\u4ee5\u786e\u4fdd\uff1a \u4ee3\u7801\u7247\u6bb5\u59cb\u7ec8\u4e0e\u521b\u5efa\u8005\u76f8\u5173\u8054\u3002 \u53ea\u6709\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u53ef\u4ee5\u521b\u5efa\u7247\u6bb5\u3002 \u53ea\u6709\u4ee3\u7801\u7247\u6bb5\u7684\u521b\u5efa\u8005\u53ef\u4ee5\u66f4\u65b0\u6216\u5220\u9664\u5b83\u3002 \u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u5e94\u5177\u6709\u5b8c\u5168\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002","title":"Tutorial 4: \u8ba4\u8bc1\u548c\u6743\u9650"},{"location":"tutorial/4-authentication-and-permissions_zh/#model","text":"\u6211\u4eec\u5c06\u5bf9\u6211\u4eec\u7684 Snippet \u6a21\u578b\u7c7b\u8fdb\u884c\u51e0\u6b21\u66f4\u6539\u3002\u9996\u5148\uff0c\u6211\u4eec\u6dfb\u52a0\u51e0\u4e2a\u5b57\u6bb5\u3002\u5176\u4e2d\u4e00\u4e2a\u5b57\u6bb5\u5c06\u7528\u4e8e\u8868\u793a\u521b\u5efa\u4ee3\u7801\u6bb5\u7684\u7528\u6237\uff0c\u53e6\u4e00\u4e2a\u5b57\u6bb5\u5c06\u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7684\u9ad8\u4eae\u663e\u793a\u7684HTML\u5185\u5bb9\u3002 \u5c06\u4ee5\u4e0b\u4e24\u4e2a\u5b57\u6bb5\u6dfb\u52a0\u5230 models.py \u6587\u4ef6\u4e2d\u7684 Snippet \u6a21\u578b\u4e2d\u3002 owner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE) highlighted = models.TextField() \u6211\u4eec\u8fd8\u9700\u8981\u786e\u4fdd\u5728\u4fdd\u5b58\u6a21\u578b\u65f6\uff0c\u4f7f\u7528 pygments \u4ee3\u7801\u9ad8\u4eae\u663e\u793a\u5e93\u586b\u5145\u8981\u9ad8\u4eae\u663e\u793a\u7684\u5b57\u6bb5\u3002 \u6211\u4eec\u9700\u8981\u5bfc\u5165\u989d\u5916\u7684\u6a21\u5757\uff1a from pygments.lexers import get_lexer_by_name from pygments.formatters.html import HtmlFormatter from pygments import highlight \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6a21\u578b\u7c7b\u4e2d\u6dfb\u52a0\u4e00\u4e2a .save() \u65b9\u6cd5\uff1a def save(self, *args, **kwargs): \"\"\" \u4f7f\u7528`pygments`\u5e93\u521b\u5efa\u4e00\u4e2a\u9ad8\u4eae\u663e\u793a\u7684HTML\u8868\u793a\u4ee3\u7801\u6bb5\u3002 \"\"\" lexer = get_lexer_by_name(self.language) linenos = self.linenos and 'table' or False options = self.title and {'title': self.title} or {} formatter = HtmlFormatter(style=self.style, linenos=linenos, full=True, **options) self.highlighted = highlight(self.code, lexer, formatter) super(Snippet, self).save(*args, **kwargs) \u5b8c\u6210\u8fd9\u4e9b\u5de5\u4f5c\u540e\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u6211\u4eec\u7684\u6570\u636e\u5e93\u8868\u3002 \u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u8fc1\u79fb\uff08migration\uff09\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u53ea\u662f\u4e2a\u6559\u7a0b\u793a\u4f8b\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u76f4\u63a5\u5220\u9664\u6570\u636e\u5e93\u5e76\u91cd\u65b0\u5f00\u59cb\u3002 rm -f tmp.db db.sqlite3 rm -r snippets/migrations python manage.py makemigrations snippets python manage.py migrate \u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u521b\u5efa\u51e0\u4e2a\u4e0d\u540c\u7684\u7528\u6237\uff0c\u4ee5\u7528\u4e8e\u6d4b\u8bd5API\u3002\u6700\u5feb\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 createsuperuser \u547d\u4ee4\u3002 python manage.py createsuperuser","title":"\u5728\u6211\u4eec\u7684\u6a21\u578b\uff08model\uff09\u4e2d\u6dfb\u52a0\u4fe1\u606f"},{"location":"tutorial/4-authentication-and-permissions_zh/#_1","text":"\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e9b\u7528\u6237\uff0c\u6211\u4eec\u6700\u597d\u5728API\u4e2d\u6dfb\u52a0\u8fd9\u4e9b\u7528\u6237\u7684\u8868\u793a\u3002\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217\u5316\u5668\u975e\u5e38\u7b80\u5355\uff0c\u5728 serializers.py \u6587\u4ef6\u4e2d\u6dfb\u52a0\uff1a from django.contrib.auth.models import User class UserSerializer(serializers.ModelSerializer): snippets = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all()) class Meta: model = User fields = ('id', 'username', 'snippets') \u56e0\u4e3a 'snippets' \u5728\u7528\u6237\u6a21\u578b\u4e2d\u662f\u4e00\u4e2a \u53cd\u5411 \u5173\u8054\u5173\u7cfb\u3002\u5728\u4f7f\u7528 ModelSerializer \u7c7b\u65f6\u5b83\u9ed8\u8ba4\u4e0d\u4f1a\u88ab\u5305\u542b\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u5b83\u6dfb\u52a0\u4e00\u4e2a\u663e\u5f0f\u5b57\u6bb5\u3002 \u6211\u4eec\u8fd8\u4f1a\u5728 views.py \u4e2d\u6dfb\u52a0\u51e0\u4e2a\u89c6\u56fe\u3002\u6211\u4eec\u53ea\u60f3\u5c06\u7528\u6237\u5c55\u793a\u4e3a\u53ea\u8bfb\u89c6\u56fe\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4f7f\u7528 ListAPIView \u548c RetrieveAPIView \u901a\u7528\u7684\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002 from django.contrib.auth.models import User class UserList(generics.ListAPIView): queryset = User.objects.all() serializer_class = UserSerializer class UserDetail(generics.RetrieveAPIView): queryset = User.objects.all() serializer_class = UserSerializer \u786e\u4fdd\u5bfc\u5165\u4e86 UserSerializer \u7c7b from snippets.serializers import UserSerializer \u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u5728URL conf\u4e2d\u5f15\u7528\u5b83\u4eec\u6765\u5c06\u8fd9\u4e9b\u89c6\u56fe\u6dfb\u52a0\u5230API\u4e2d\u3002\u5c06\u4ee5\u4e0b\u5185\u5bb9\u6dfb\u52a0\u5230 urls.py \u6587\u4ef6\u7684patterns\u4e2d\u3002 url(r'^users/$', views.UserList.as_view()), url(r'^users/(?P<pk>[0-9]+)/$', views.UserDetail.as_view()),","title":"\u4e3a\u6211\u4eec\u7684\u7528\u6237\u6a21\u578b\u6dfb\u52a0\u8def\u5f84"},{"location":"tutorial/4-authentication-and-permissions_zh/#snippet","text":"\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u4e0d\u80fd\u5c06\u521b\u5efa\u8be5\u4ee3\u7801\u7247\u6bb5\u7684\u7528\u6237\u4e0e\u4ee3\u7801\u6bb5\u5b9e\u4f8b\u76f8\u5173\u8054\u3002\u7528\u6237\u4e0d\u662f\u4f5c\u4e3a\u5e8f\u5217\u5316\u8868\u793a\u7684\u4e00\u90e8\u5206\u53d1\u9001\u7684\uff0c\u800c\u662f\u4f5c\u4e3a\u4f20\u5165\u8bf7\u6c42\u7684\u5c5e\u6027\u3002\uff08\u8bd1\u8005\u6ce8\uff1auser\u4e0d\u5728\u4f20\u8fc7\u6765\u7684\u6570\u636e\u4e2d\uff0c\u800c\u662f\u901a\u8fc7request.user\u83b7\u5f97\uff09 \u6211\u4eec\u5904\u7406\u7684\u65b9\u5f0f\u662f\u5728\u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u89c6\u56fe\u4e2d\u91cd\u5199\u4e00\u4e2a .perform_create() \u65b9\u6cd5\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5b9e\u4f8b\u4fdd\u5b58\u7684\u65b9\u6cd5\uff0c\u5e76\u5904\u7406\u4f20\u5165\u8bf7\u6c42\u6216\u8bf7\u6c42URL\u4e2d\u9690\u542b\u7684\u4efb\u4f55\u4fe1\u606f\u3002 \u5728 SnippetList \u89c6\u56fe\u7c7b\u4e2d\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u65b9\u6cd5\uff1a def perform_create(self, serializer): serializer.save(owner=self.request.user) \u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668\u7684 create() \u65b9\u6cd5\u73b0\u5728\u5c06\u88ab\u4f20\u9012\u4e00\u4e2a\u9644\u52a0\u7684 'owner' \u5b57\u6bb5\u4ee5\u53ca\u6765\u81ea\u8bf7\u6c42\u7684\u9a8c\u8bc1\u6570\u636e\u3002","title":"\u5c06Snippet\u548c\u7528\u6237\u5173\u8054"},{"location":"tutorial/4-authentication-and-permissions_zh/#_2","text":"\u73b0\u5728\uff0c\u8fd9\u4e9b\u4ee3\u7801\u7247\u6bb5\u548c\u521b\u5efa\u5b83\u4eec\u7684\u7528\u6237\u76f8\u5173\u8054\uff0c\u8ba9\u6211\u4eec\u66f4\u65b0\u6211\u4eec\u7684 SnippetSerializer \u6765\u4f53\u73b0\u8fd9\u4e2a\u5173\u8054\u5173\u7cfb\u3002\u5c06\u4ee5\u4e0b\u5b57\u6bb5\u6dfb\u52a0\u5230 serializers.py \u4e2d\u7684\u5e8f\u5217\u5316\u5668\u5b9a\u4e49\uff1a Add the following field to the serializer definition in serializers.py : owner = serializers.ReadOnlyField(source='owner.username') \u6ce8\u610f \uff1a\u786e\u4fdd\u4f60\u8fd8\u5c06 'owner', \u6dfb\u52a0\u5230\u5185\u90e8 Meta \u7c7b\u7684\u5b57\u6bb5\u5217\u8868\u4e2d\u3002 \u8fd9\u4e2a\u5b57\u6bb5\u975e\u5e38\u6709\u8da3\u3002 source \u53c2\u6570\u63a7\u5236\u54ea\u4e2a\u5c5e\u6027\u7528\u4e8e\u586b\u5145\u5b57\u6bb5\uff0c\u5e76\u4e14\u53ef\u4ee5\u6307\u5411\u5e8f\u5217\u5316\u5b9e\u4f8b\u4e0a\u7684\u4efb\u4f55\u5c5e\u6027\u3002\u5b83\u4e5f\u53ef\u4ee5\u91c7\u7528\u5982\u4e0a\u6240\u793a\u70b9\u52a0\u4e0b\u5212\u7ebf\u7684\u65b9\u5f0f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u4ee5\u4e0eDjango\u6a21\u677f\u8bed\u8a00\u4e00\u8d77\u4f7f\u7528\u7684\u76f8\u4f3c\u65b9\u5f0f\u904d\u5386\u7ed9\u5b9a\u7684\u5c5e\u6027\u3002 \u6211\u4eec\u6dfb\u52a0\u7684\u5b57\u6bb5\u662f\u65e0\u7c7b\u578b\u7684 ReadOnlyField \u7c7b\uff0c\u533a\u522b\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u5b57\u6bb5\uff08\u5982 CharField \uff0c BooleanField \u7b49\uff09\u3002\u65e0\u7c7b\u578b\u7684 ReadOnlyField \u59cb\u7ec8\u662f\u53ea\u8bfb\u7684\uff0c\u53ea\u80fd\u7528\u4e8e\u5e8f\u5217\u5316\u8868\u793a\uff0c\u4e0d\u80fd\u7528\u4e8e\u5728\u53cd\u5e8f\u5217\u5316\u65f6\u66f4\u65b0\u6a21\u578b\u5b9e\u4f8b\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528 CharField(read_only=True) \u3002","title":"\u66f4\u65b0\u6211\u4eec\u7684\u5e8f\u5217\u5316\u5668"},{"location":"tutorial/4-authentication-and-permissions_zh/#_3","text":"\u73b0\u5728\uff0c\u4ee3\u7801\u7247\u6bb5\u4e0e\u7528\u6237\u662f\u76f8\u5173\u8054\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u53ea\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u624d\u80fd\u521b\u5efa\uff0c\u66f4\u65b0\u548c\u5220\u9664\u4ee3\u7801\u7247\u6bb5\u3002 REST\u6846\u67b6\u5305\u62ec\u8bb8\u591a\u6743\u9650\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6743\u9650\u7c7b\u6765\u9650\u5236\u8c01\u53ef\u4ee5\u8bbf\u95ee\u7ed9\u5b9a\u7684\u89c6\u56fe\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u7684\u662f IsAuthenticatedOrReadOnly \u7c7b\uff0c\u8fd9\u5c06\u786e\u4fdd\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u83b7\u5f97\u8bfb\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u672a\u7ecf\u8eab\u4efd\u9a8c\u8bc1\u7684\u8bf7\u6c42\u5c06\u83b7\u5f97\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650\u3002 \u9996\u5148\u8981\u5728\u89c6\u56fe\u6a21\u5757\u4e2d\u5bfc\u5165\u4ee5\u4e0b\u5185\u5bb9 from rest_framework import permissions \u7136\u540e\uff0c\u5c06\u4ee5\u4e0b\u5c5e\u6027\u6dfb\u52a0\u5230 SnippetList \u548c SnippetDetail \u89c6\u56fe\u7c7b\u4e2d\u3002 permission_classes = (permissions.IsAuthenticatedOrReadOnly,)","title":"\u6dfb\u52a0\u89c6\u56fe\u6240\u9700\u7684\u6743\u9650"},{"location":"tutorial/4-authentication-and-permissions_zh/#browsable-api","text":"\u5982\u679c\u4f60\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6d4f\u89c8\u6211\u4eec\u7684API\uff0c\u90a3\u4e48\u4f60\u4f1a\u53d1\u73b0\u4e0d\u80fd\u521b\u5efa\u65b0\u7684\u4ee3\u7801\u7247\u6bb5\u3002\u53ea\u6709\u767b\u9646\u7528\u6237\u624d\u80fd\u521b\u5efa\u65b0\u7684\u4ee3\u7801\u7247\u6bb5\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f16\u8f91\u9879\u76ee\u7ea7\u522b\u7684 urls.py \u6587\u4ef6\u4e2d\u7684URLconf\u6765\u6dfb\u52a0\u53ef\u6d4f\u89c8\u7684API\u4f7f\u7528\u7684\u767b\u5f55\u89c6\u56fe\u3002 \u5728\u6587\u4ef6\u9876\u90e8\u6dfb\u52a0\u4ee5\u4e0b\u5bfc\u5165\uff1a from django.conf.urls import include \u800c\u4e14\uff0c\u5728\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6a21\u5f0f\uff08pattern\uff09\u4ee5\u5305\u62ec\u53ef\u6d4f\u89c8\u7684API\u7684\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe\u3002 urlpatterns += [ url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')), ] \u6a21\u5f0f\u7684 r'^api-auth/' \u90e8\u5206\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u4f60\u8981\u4f7f\u7528\u7684\u4efb\u4f55URL\u3002\u552f\u4e00\u7684\u9650\u5236\u662f\u5305\u542b\u7684URL\u5fc5\u987b\u4f7f\u7528 'rest_framework' \u547d\u540d\u7a7a\u95f4\u3002\u5728Django 1.9\u4ee5\u4e0a\u7684\u7248\u672c\u4e2d\uff0cREST\u6846\u67b6\u5c06\u8bbe\u7f6e\u547d\u540d\u7a7a\u95f4\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u5c06\u5176\u5220\u9664\u3002 \u73b0\u5728\uff0c\u5982\u679c\u4f60\u518d\u6b21\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5237\u65b0\u9875\u9762\uff0c\u4f60\u5c06\u5728\u9875\u9762\u53f3\u4e0a\u89d2\u770b\u5230\u4e00\u4e2a\u201c\u767b\u5f55\u201d\u94fe\u63a5\u3002\u5982\u679c\u4f60\u7528\u65e9\u671f\u521b\u5efa\u7684\u7528\u6237\u767b\u5f55\uff0c\u5c31\u53ef\u4ee5\u518d\u6b21\u521b\u5efa\u4ee3\u7801\u7247\u6bb5\u3002 \u4e00\u65e6\u4f60\u521b\u5efa\u4e86\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\u540e\uff0c\u5728'/users/'\u8def\u5f84\u4e0b\u4f60\u4f1a\u6ce8\u610f\u5230\u6bcf\u4e2a\u7528\u6237\u7684'snippets'\u5b57\u6bb5\u90fd\u5305\u542b\u4e0e\u6bcf\u4e2a\u7528\u6237\u76f8\u5173\u8054\u7684\u4ee3\u7801\u7247\u6bb5\u7684\u5217\u8868\u3002","title":"\u7ed9Browsable API\u6dfb\u52a0\u767b\u9646"},{"location":"tutorial/4-authentication-and-permissions_zh/#_4","text":"\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u4ee3\u7801\u7247\u6bb5\u90fd\u53ef\u4ee5\u88ab\u4efb\u4f55\u4eba\u770b\u5230\uff0c\u4f46\u4e5f\u8981\u786e\u4fdd\u53ea\u6709\u521b\u5efa\u4ee3\u7801\u7247\u6bb5\u7684\u7528\u6237\u624d\u80fd\u66f4\u65b0\u6216\u5220\u9664\u5b83\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6743\u9650\u3002 \u5728snippets app\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6 permissions.py \u3002 from rest_framework import permissions class IsOwnerOrReadOnly(permissions.BasePermission): \"\"\" \u81ea\u5b9a\u4e49\u6743\u9650\u53ea\u5141\u8bb8\u5bf9\u8c61\u7684\u6240\u6709\u8005\u7f16\u8f91\u5b83\u3002 \"\"\" def has_object_permission(self, request, view, obj): # \u8bfb\u53d6\u6743\u9650\u5141\u8bb8\u4efb\u4f55\u8bf7\u6c42\uff0c # \u6240\u4ee5\u6211\u4eec\u603b\u662f\u5141\u8bb8GET\uff0cHEAD\u6216OPTIONS\u8bf7\u6c42\u3002 if request.method in permissions.SAFE_METHODS: return True # \u53ea\u6709\u8be5snippet\u7684\u6240\u6709\u8005\u624d\u5141\u8bb8\u5199\u6743\u9650\u3002 return obj.owner == request.user \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728 SnippetDetail \u89c6\u56fe\u7c7b\u4e2d\u7f16\u8f91 permission_classes \u5c5e\u6027\u5c06\u8be5\u81ea\u5b9a\u4e49\u6743\u9650\u6dfb\u52a0\u5230\u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u8def\u5f84\uff1a permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly,) \u786e\u4fdd\u8981\u5148\u5bfc\u5165 IsOwnerOrReadOnly \u7c7b\u3002 from snippets.permissions import IsOwnerOrReadOnly \u73b0\u5728\uff0c\u5982\u679c\u518d\u6b21\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u4f60\u4f1a\u53d1\u73b0\u5982\u679c\u4f60\u4ee5\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u8005\u7684\u8eab\u4efd\u767b\u5f55\u7684\u8bdd\uff0c\u201cDELETE\u201d\u548c\u201cPUT\u201d\u64cd\u4f5c\u624d\u4f1a\u663e\u793a\u5728\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u8def\u5f84\u4e0a\u3002","title":"\u5bf9\u8c61\u7ea7\u522b\u7684\u6743\u9650"},{"location":"tutorial/4-authentication-and-permissions_zh/#api","text":"\u73b0\u5728\u56e0\u4e3a\u6211\u4eec\u5728API\u4e0a\u6709\u4e00\u7ec4\u6743\u9650\uff0c\u5982\u679c\u6211\u4eec\u8981\u7f16\u8f91\u4efb\u4f55\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u90fd\u9700\u8981\u9a8c\u8bc1\u6211\u4eec\u7684\u8bf7\u6c42\u3002\u6211\u4eec\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u4efb\u4f55 \u8eab\u4efd\u9a8c\u8bc1\u7c7b \uff0c\u6240\u4ee5\u5e94\u7528\u7684\u662f\u9ed8\u8ba4\u7684 SessionAuthentication \u548c BasicAuthentication \u3002 \u5f53\u6211\u4eec\u901a\u8fc7Web\u6d4f\u89c8\u5668\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u767b\u5f55\uff0c\u7136\u540e\u6d4f\u89c8\u5668\u4f1a\u8bdd\u5c06\u4e3a\u8bf7\u6c42\u63d0\u4f9b\u6240\u9700\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002 \u5982\u679c\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u4e0eAPI\u4ea4\u4e92\uff0c\u6211\u4eec\u9700\u8981\u5728\u6bcf\u6b21\u8bf7\u6c42\u4e0a\u663e\u5f0f\u63d0\u4f9b\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u3002 \u5982\u679c\u6211\u4eec\u901a\u8fc7\u6ca1\u6709\u9a8c\u8bc1\u5c31\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u4f1a\u50cf\u4e0b\u9762\u5c55\u793a\u7684\u90a3\u6837\u6536\u5230\u62a5\u9519\uff1a http POST http://127.0.0.1:8000/snippets/ code=\"print 123\" { \"detail\": \"Authentication credentials were not provided.\" } \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u52a0\u4e0a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684\u4e00\u4e2a\u7528\u6237\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u6765\u6210\u529f\u521b\u5efa\uff1a http -a tom:password123 POST http://127.0.0.1:8000/snippets/ code=\"print 789\" { \"id\": 5, \"owner\": \"tom\", \"title\": \"foo\", \"code\": \"print 789\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" }","title":"\u4f7f\u7528API\u200b\u200b\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1"},{"location":"tutorial/4-authentication-and-permissions_zh/#_5","text":"\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5728\u6211\u4eec\u7684Web API\u4e0a\u83b7\u5f97\u4e86\u76f8\u5f53\u7cbe\u7ec6\u7684\u4e00\u7ec4\u6743\u9650\u63a7\u5236\uff0c\u5e76\u4e3a\u7cfb\u7edf\u7684\u7528\u6237\u548c\u4ed6\u4eec\u521b\u5efa\u7684\u4ee3\u7801\u7247\u6bb5\u63d0\u4f9b\u4e86API\u8def\u5f84\u3002 \u5728 \u672c\u6559\u7a0b\u7684\u7b2c5\u90e8\u5206 \u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7\u4e3a\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u4e00\u4e2aHTML\u8def\u5f84\u6765\u5c06\u6240\u6709\u5185\u5bb9\u8054\u7cfb\u8d77\u6765\uff0c\u5e76\u5728\u7cfb\u7edf\u5185\u90e8\u901a\u8fc7\u4f7f\u7528\u8d85\u94fe\u63a5\u5c06API\u8054\u7cfb\u8d77\u6765\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/5-relationships-and-hyperlinked-apis/","text":"Tutorial 5: Relationships & Hyperlinked APIs At the moment relationships within our API are represented by using primary keys. In this part of the tutorial we'll improve the cohesion and discoverability of our API, by instead using hyperlinking for relationships. Creating an endpoint for the root of our API Right now we have endpoints for 'snippets' and 'users', but we don't have a single entry point to our API. To create one, we'll use a regular function-based view and the @api_view decorator we introduced earlier. In your snippets/views.py add: from rest_framework.decorators import api_view from rest_framework.response import Response from rest_framework.reverse import reverse @api_view(['GET']) def api_root(request, format=None): return Response({ 'users': reverse('user-list', request=request, format=format), 'snippets': reverse('snippet-list', request=request, format=format) }) Two things should be noticed here. First, we're using REST framework's reverse function in order to return fully-qualified URLs; second, URL patterns are identified by convenience names that we will declare later on in our snippets/urls.py . Creating an endpoint for the highlighted snippets The other obvious thing that's still missing from our pastebin API is the code highlighting endpoints. Unlike all our other API endpoints, we don't want to use JSON, but instead just present an HTML representation. There are two styles of HTML renderer provided by REST framework, one for dealing with HTML rendered using templates, the other for dealing with pre-rendered HTML. The second renderer is the one we'd like to use for this endpoint. The other thing we need to consider when creating the code highlight view is that there's no existing concrete generic view that we can use. We're not returning an object instance, but instead a property of an object instance. Instead of using a concrete generic view, we'll use the base class for representing instances, and create our own .get() method. In your snippets/views.py add: from rest_framework import renderers from rest_framework.response import Response class SnippetHighlight(generics.GenericAPIView): queryset = Snippet.objects.all() renderer_classes = [renderers.StaticHTMLRenderer] def get(self, request, *args, **kwargs): snippet = self.get_object() return Response(snippet.highlighted) As usual we need to add the new views that we've created in to our URLconf. We'll add a url pattern for our new API root in snippets/urls.py : path('', views.api_root), And then add a url pattern for the snippet highlights: path('snippets/<int:pk>/highlight/', views.SnippetHighlight.as_view()), Hyperlinking our API Dealing with relationships between entities is one of the more challenging aspects of Web API design. There are a number of different ways that we might choose to represent a relationship: Using primary keys. Using hyperlinking between entities. Using a unique identifying slug field on the related entity. Using the default string representation of the related entity. Nesting the related entity inside the parent representation. Some other custom representation. REST framework supports all of these styles, and can apply them across forward or reverse relationships, or apply them across custom managers such as generic foreign keys. In this case we'd like to use a hyperlinked style between entities. In order to do so, we'll modify our serializers to extend HyperlinkedModelSerializer instead of the existing ModelSerializer . The HyperlinkedModelSerializer has the following differences from ModelSerializer : It does not include the id field by default. It includes a url field, using HyperlinkedIdentityField . Relationships use HyperlinkedRelatedField , instead of PrimaryKeyRelatedField . We can easily re-write our existing serializers to use hyperlinking. In your snippets/serializers.py add: class SnippetSerializer(serializers.HyperlinkedModelSerializer): owner = serializers.ReadOnlyField(source='owner.username') highlight = serializers.HyperlinkedIdentityField(view_name='snippet-highlight', format='html') class Meta: model = Snippet fields = ['url', 'id', 'highlight', 'owner', 'title', 'code', 'linenos', 'language', 'style'] class UserSerializer(serializers.HyperlinkedModelSerializer): snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True) class Meta: model = User fields = ['url', 'id', 'username', 'snippets'] Notice that we've also added a new 'highlight' field. This field is of the same type as the url field, except that it points to the 'snippet-highlight' url pattern, instead of the 'snippet-detail' url pattern. Because we've included format suffixed URLs such as '.json' , we also need to indicate on the highlight field that any format suffixed hyperlinks it returns should use the '.html' suffix. Making sure our URL patterns are named If we're going to have a hyperlinked API, we need to make sure we name our URL patterns. Let's take a look at which URL patterns we need to name. The root of our API refers to 'user-list' and 'snippet-list' . Our snippet serializer includes a field that refers to 'snippet-highlight' . Our user serializer includes a field that refers to 'snippet-detail' . Our snippet and user serializers include 'url' fields that by default will refer to '{model_name}-detail' , which in this case will be 'snippet-detail' and 'user-detail' . After adding all those names into our URLconf, our final snippets/urls.py file should look like this: from django.urls import path from rest_framework.urlpatterns import format_suffix_patterns from snippets import views # API endpoints urlpatterns = format_suffix_patterns([ path('', views.api_root), path('snippets/', views.SnippetList.as_view(), name='snippet-list'), path('snippets/<int:pk>/', views.SnippetDetail.as_view(), name='snippet-detail'), path('snippets/<int:pk>/highlight/', views.SnippetHighlight.as_view(), name='snippet-highlight'), path('users/', views.UserList.as_view(), name='user-list'), path('users/<int:pk>/', views.UserDetail.as_view(), name='user-detail') ]) Adding pagination The list views for users and code snippets could end up returning quite a lot of instances, so really we'd like to make sure we paginate the results, and allow the API client to step through each of the individual pages. We can change the default list style to use pagination, by modifying our tutorial/settings.py file slightly. Add the following setting: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 10 } Note that settings in REST framework are all namespaced into a single dictionary setting, named REST_FRAMEWORK , which helps keep them well separated from your other project settings. We could also customize the pagination style if we needed too, but in this case we'll just stick with the default. Browsing the API If we open a browser and navigate to the browsable API, you'll find that you can now work your way around the API simply by following links. You'll also be able to see the 'highlight' links on the snippet instances, that will take you to the highlighted code HTML representations. In part 6 of the tutorial we'll look at how we can use ViewSets and Routers to reduce the amount of code we need to build our API.","title":"Tutorial 5: Relationships & Hyperlinked APIs"},{"location":"tutorial/5-relationships-and-hyperlinked-apis/#tutorial-5-relationships-hyperlinked-apis","text":"At the moment relationships within our API are represented by using primary keys. In this part of the tutorial we'll improve the cohesion and discoverability of our API, by instead using hyperlinking for relationships.","title":"Tutorial 5: Relationships &amp; Hyperlinked APIs"},{"location":"tutorial/5-relationships-and-hyperlinked-apis/#creating-an-endpoint-for-the-root-of-our-api","text":"Right now we have endpoints for 'snippets' and 'users', but we don't have a single entry point to our API. To create one, we'll use a regular function-based view and the @api_view decorator we introduced earlier. In your snippets/views.py add: from rest_framework.decorators import api_view from rest_framework.response import Response from rest_framework.reverse import reverse @api_view(['GET']) def api_root(request, format=None): return Response({ 'users': reverse('user-list', request=request, format=format), 'snippets': reverse('snippet-list', request=request, format=format) }) Two things should be noticed here. First, we're using REST framework's reverse function in order to return fully-qualified URLs; second, URL patterns are identified by convenience names that we will declare later on in our snippets/urls.py .","title":"Creating an endpoint for the root of our API"},{"location":"tutorial/5-relationships-and-hyperlinked-apis/#creating-an-endpoint-for-the-highlighted-snippets","text":"The other obvious thing that's still missing from our pastebin API is the code highlighting endpoints. Unlike all our other API endpoints, we don't want to use JSON, but instead just present an HTML representation. There are two styles of HTML renderer provided by REST framework, one for dealing with HTML rendered using templates, the other for dealing with pre-rendered HTML. The second renderer is the one we'd like to use for this endpoint. The other thing we need to consider when creating the code highlight view is that there's no existing concrete generic view that we can use. We're not returning an object instance, but instead a property of an object instance. Instead of using a concrete generic view, we'll use the base class for representing instances, and create our own .get() method. In your snippets/views.py add: from rest_framework import renderers from rest_framework.response import Response class SnippetHighlight(generics.GenericAPIView): queryset = Snippet.objects.all() renderer_classes = [renderers.StaticHTMLRenderer] def get(self, request, *args, **kwargs): snippet = self.get_object() return Response(snippet.highlighted) As usual we need to add the new views that we've created in to our URLconf. We'll add a url pattern for our new API root in snippets/urls.py : path('', views.api_root), And then add a url pattern for the snippet highlights: path('snippets/<int:pk>/highlight/', views.SnippetHighlight.as_view()),","title":"Creating an endpoint for the highlighted snippets"},{"location":"tutorial/5-relationships-and-hyperlinked-apis/#hyperlinking-our-api","text":"Dealing with relationships between entities is one of the more challenging aspects of Web API design. There are a number of different ways that we might choose to represent a relationship: Using primary keys. Using hyperlinking between entities. Using a unique identifying slug field on the related entity. Using the default string representation of the related entity. Nesting the related entity inside the parent representation. Some other custom representation. REST framework supports all of these styles, and can apply them across forward or reverse relationships, or apply them across custom managers such as generic foreign keys. In this case we'd like to use a hyperlinked style between entities. In order to do so, we'll modify our serializers to extend HyperlinkedModelSerializer instead of the existing ModelSerializer . The HyperlinkedModelSerializer has the following differences from ModelSerializer : It does not include the id field by default. It includes a url field, using HyperlinkedIdentityField . Relationships use HyperlinkedRelatedField , instead of PrimaryKeyRelatedField . We can easily re-write our existing serializers to use hyperlinking. In your snippets/serializers.py add: class SnippetSerializer(serializers.HyperlinkedModelSerializer): owner = serializers.ReadOnlyField(source='owner.username') highlight = serializers.HyperlinkedIdentityField(view_name='snippet-highlight', format='html') class Meta: model = Snippet fields = ['url', 'id', 'highlight', 'owner', 'title', 'code', 'linenos', 'language', 'style'] class UserSerializer(serializers.HyperlinkedModelSerializer): snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True) class Meta: model = User fields = ['url', 'id', 'username', 'snippets'] Notice that we've also added a new 'highlight' field. This field is of the same type as the url field, except that it points to the 'snippet-highlight' url pattern, instead of the 'snippet-detail' url pattern. Because we've included format suffixed URLs such as '.json' , we also need to indicate on the highlight field that any format suffixed hyperlinks it returns should use the '.html' suffix.","title":"Hyperlinking our API"},{"location":"tutorial/5-relationships-and-hyperlinked-apis/#making-sure-our-url-patterns-are-named","text":"If we're going to have a hyperlinked API, we need to make sure we name our URL patterns. Let's take a look at which URL patterns we need to name. The root of our API refers to 'user-list' and 'snippet-list' . Our snippet serializer includes a field that refers to 'snippet-highlight' . Our user serializer includes a field that refers to 'snippet-detail' . Our snippet and user serializers include 'url' fields that by default will refer to '{model_name}-detail' , which in this case will be 'snippet-detail' and 'user-detail' . After adding all those names into our URLconf, our final snippets/urls.py file should look like this: from django.urls import path from rest_framework.urlpatterns import format_suffix_patterns from snippets import views # API endpoints urlpatterns = format_suffix_patterns([ path('', views.api_root), path('snippets/', views.SnippetList.as_view(), name='snippet-list'), path('snippets/<int:pk>/', views.SnippetDetail.as_view(), name='snippet-detail'), path('snippets/<int:pk>/highlight/', views.SnippetHighlight.as_view(), name='snippet-highlight'), path('users/', views.UserList.as_view(), name='user-list'), path('users/<int:pk>/', views.UserDetail.as_view(), name='user-detail') ])","title":"Making sure our URL patterns are named"},{"location":"tutorial/5-relationships-and-hyperlinked-apis/#adding-pagination","text":"The list views for users and code snippets could end up returning quite a lot of instances, so really we'd like to make sure we paginate the results, and allow the API client to step through each of the individual pages. We can change the default list style to use pagination, by modifying our tutorial/settings.py file slightly. Add the following setting: REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 10 } Note that settings in REST framework are all namespaced into a single dictionary setting, named REST_FRAMEWORK , which helps keep them well separated from your other project settings. We could also customize the pagination style if we needed too, but in this case we'll just stick with the default.","title":"Adding pagination"},{"location":"tutorial/5-relationships-and-hyperlinked-apis/#browsing-the-api","text":"If we open a browser and navigate to the browsable API, you'll find that you can now work your way around the API simply by following links. You'll also be able to see the 'highlight' links on the snippet instances, that will take you to the highlighted code HTML representations. In part 6 of the tutorial we'll look at how we can use ViewSets and Routers to reduce the amount of code we need to build our API.","title":"Browsing the API"},{"location":"tutorial/5-relationships-and-hyperlinked-apis_zh/","text":"Tutorial 5: \u5173\u7cfb\u548c\u8d85\u94fe\u63a5API \u76ee\u524d\u6211\u4eec\u7684API\u4e2d\u7684\u5173\u7cfb\u662f\u7528\u4e3b\u952e\u8868\u793a\u7684\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u4f7f\u7528\u8d85\u94fe\u63a5\u6765\u63d0\u9ad8\u6211\u4eecAPI\u7684\u5185\u90e8\u8054\u7cfb\u3002 \u4e3a\u6211\u4eec\u7684API\u521b\u5efa\u4e00\u4e2a\u6839\u8def\u5f84 \u73b0\u5728\u6211\u4eec\u6709'snippets'\u548c'users'\u7684\u8def\u5f84\uff0c\u4f46\u662f\u6211\u4eec\u7684API\u6ca1\u6709\u4e00\u4e2a\u5165\u53e3\u70b9\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5e38\u89c4\u7684\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u548c\u6211\u4eec\u524d\u9762\u4ecb\u7ecd\u7684 @api_view \u88c5\u9970\u5668\u521b\u5efa\u4e00\u4e2a\u3002\u5728\u4f60\u7684 snippets/views.py \u4e2d\u6dfb\u52a0\uff1a from rest_framework.decorators import api_view from rest_framework.response import Response from rest_framework.reverse import reverse @api_view(['GET']) def api_root(request, format=None): return Response({ 'users': reverse('user-list', request=request, format=format), 'snippets': reverse('snippet-list', request=request, format=format) }) \u8fd9\u91cc\u5e94\u8be5\u6ce8\u610f\u4e24\u4ef6\u4e8b\u3002\u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528REST\u6846\u67b6\u7684 reverse \u529f\u80fd\u6765\u8fd4\u56de\u5b8c\u5168\u9650\u5b9a\u7684URL\uff1b\u7b2c\u4e8c\uff0cURL\u6a21\u5f0f\u662f\u901a\u8fc7\u65b9\u4fbf\u7684\u540d\u79f0\u6765\u6807\u8bc6\u7684\uff0c\u6211\u4eec\u7a0d\u540e\u5c06\u5728 snippets/urls.py \u4e2d\u58f0\u660e\u3002 \u4e3a\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u8def\u5f84 \u6211\u4eec\u7684API\u4e2d\u53e6\u4e00\u4e2a\u660e\u663e\u7f3a\u5c11\u7684\u662f\u4ee3\u7801\u9ad8\u4eae\u663e\u793a\u8def\u5f84\u3002 \u4e0e\u6240\u6709\u5176\u4ed6API\u8def\u5f84\u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528JSON\uff0c\u800c\u53ea\u662f\u9700\u8981HTML\u8868\u793a\u3002REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cdHTML\u6e32\u67d3\u5668\uff0c\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u4f7f\u7528\u6a21\u677f\u6e32\u67d3\u7684HTML\uff0c\u53e6\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u9884\u6e32\u67d3\u7684HTML\u3002\u7b2c\u4e8c\u4e2a\u6e32\u67d3\u5668\u662f\u6211\u4eec\u8981\u7528\u4e8e\u6b64\u8def\u5f84\u7684\u6e32\u67d3\u5668\u3002 \u521b\u5efa\u4ee3\u7801\u9ad8\u4eae\u89c6\u56fe\u65f6\u9700\u8981\u8003\u8651\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u53ef\u7528\u7684\u5177\u4f53\u901a\u7528\u89c6\u56fe\u3002\u6211\u4eec\u4e0d\u662f\u8fd4\u56de\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u800c\u662f\u8fd4\u56de\u5bf9\u8c61\u5b9e\u4f8b\u7684\u5c5e\u6027\u3002 \u4e0d\u662f\u4f7f\u7528\u5177\u4f53\u7684\u901a\u7528\u89c6\u56fe\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u57fa\u7c7b\u6765\u8868\u793a\u5b9e\u4f8b\uff0c\u5e76\u521b\u5efa\u6211\u4eec\u81ea\u5df1\u7684 .get() \u65b9\u6cd5\u3002\u5728\u4f60\u7684 snippets/views.py \u4e2d\u6dfb\u52a0\uff1a from rest_framework import renderers from rest_framework.response import Response class SnippetHighlight(generics.GenericAPIView): queryset = Snippet.objects.all() renderer_classes = (renderers.StaticHTMLRenderer,) def get(self, request, *args, **kwargs): snippet = self.get_object() return Response(snippet.highlighted) \u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5728URLconf\u4e2d\u6dfb\u52a0\u6211\u4eec\u521b\u5efa\u7684\u65b0\u89c6\u56fe\u3002\u6211\u4eec\u5c06\u5728 snippets/urls.py \u4e2d\u4e3a\u6211\u4eec\u7684\u65b0API\u6839\u8def\u5f84\u6dfb\u52a0\u4e00\u4e2aurl\u6a21\u5f0f\uff1a url(r'^$', views.api_root), \u7136\u540e\u4e3a\u9ad8\u4eae\u4ee3\u7801\u7247\u6bb5\u6dfb\u52a0\u4e00\u4e2aurl\u6a21\u5f0f\uff1a url(r'^snippets/(?P<pk>[0-9]+)/highlight/$', views.SnippetHighlight.as_view()), \u8d85\u94fe\u63a5\u6211\u4eec\u7684API \u5904\u7406\u597d\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u662fWeb API\u8bbe\u8ba1\u4e2d\u66f4\u5177\u6311\u6218\u6027\u7684\u65b9\u9762\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u4ee3\u8868\u4e00\u79cd\u5173\u7cfb\uff1a \u4f7f\u7528\u4e3b\u952e\u3002 \u5728\u5b9e\u4f53\u4e4b\u95f4\u4f7f\u7528\u8d85\u94fe\u63a5\u3002 \u5728\u76f8\u5173\u5b9e\u4f53\u4e0a\u4f7f\u7528\u552f\u4e00\u7684\u6807\u8bc6\u5b57\u6bb5\u3002 \u4f7f\u7528\u76f8\u5173\u5b9e\u4f53\u7684\u9ed8\u8ba4\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 \u5c06\u76f8\u5173\u5b9e\u4f53\u5d4c\u5957\u5728\u7236\u8868\u793a\u4e2d\u3002 \u4e00\u4e9b\u5176\u4ed6\u81ea\u5b9a\u4e49\u8868\u793a\u3002 REST\u6846\u67b6\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u65b9\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u5b83\u4eec\u5e94\u7528\u4e8e\u6b63\u5411\u6216\u53cd\u5411\u5173\u7cfb\uff0c\u4e5f\u53ef\u4ee5\u5728\u8bf8\u5982\u901a\u7528\u5916\u952e\u4e4b\u7c7b\u7684\u81ea\u5b9a\u4e49\u7ba1\u7406\u5668\u4e0a\u5e94\u7528\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u5b9e\u4f53\u4e4b\u95f4\u4f7f\u7528\u8d85\u94fe\u63a5\u65b9\u5f0f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u6765\u6269\u5c55 HyperlinkedModelSerializer \u800c\u4e0d\u662f\u73b0\u6709\u7684 ModelSerializer \u3002 HyperlinkedModelSerializer \u4e0e ModelSerializer \u6709\u4ee5\u4e0b\u533a\u522b\uff1a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u5305\u62ec id \u5b57\u6bb5\u3002 \u5b83\u5305\u542b\u4e00\u4e2a url \u5b57\u6bb5\uff0c\u4f7f\u7528 HyperlinkedIdentityField \u3002 \u5173\u8054\u5173\u7cfb\u4f7f\u7528 HyperlinkedRelatedField \uff0c\u800c\u4e0d\u662f PrimaryKeyRelatedField \u3002 \u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u91cd\u5199\u6211\u4eec\u73b0\u6709\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u4ee5\u4f7f\u7528\u8d85\u94fe\u63a5\u3002\u5728\u4f60\u7684 snippets/serializers.py \u4e2d\u6dfb\u52a0\uff1a class SnippetSerializer(serializers.HyperlinkedModelSerializer): owner = serializers.ReadOnlyField(source='owner.username') highlight = serializers.HyperlinkedIdentityField(view_name='snippet-highlight', format='html') class Meta: model = Snippet fields = ('url', 'id', 'highlight', 'owner', 'title', 'code', 'linenos', 'language', 'style') class UserSerializer(serializers.HyperlinkedModelSerializer): snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True) class Meta: model = User fields = ('url', 'id', 'username', 'snippets') \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684 'highlight' \u5b57\u6bb5\u3002\u8be5\u5b57\u6bb5\u4e0e url \u5b57\u6bb5\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u6307\u5411 'snippet-highlight' url\u6a21\u5f0f\uff0c\u800c\u4e0d\u662f 'snippet-detail' url\u6a21\u5f0f\u3002 \u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5305\u542b\u4e86\u683c\u5f0f\u540e\u7f00\u7684URL\uff0c\u4f8b\u5982 '.json' \uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728 highlight \u5b57\u6bb5\u4e0a\u6307\u51fa\u4efb\u4f55\u683c\u5f0f\u540e\u7f00\u7684\u8d85\u94fe\u63a5\uff0c\u5b83\u5e94\u8be5\u4f7f\u7528 '.html' \u540e\u7f00\u3002 \u786e\u4fdd\u6211\u4eec\u7684URL\u6a21\u5f0f\u88ab\u547d\u540d \u5982\u679c\u6211\u4eec\u8981\u4f7f\u7528\u8d85\u94fe\u63a5\u7684API\uff0c\u90a3\u4e48\u9700\u8981\u786e\u4fdd\u4e3a\u6211\u4eec\u7684URL\u6a21\u5f0f\u547d\u540d\u3002\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u9700\u8981\u547d\u540d\u7684URL\u6a21\u5f0f\u3002 \u6211\u4eecAPI\u7684\u6839\u8def\u5f84\u662f\u6307 'user-list' \u548c 'snippet-list' \u3002 \u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u5e8f\u5217\u5316\u5668\u5305\u542b\u4e00\u4e2a\u6307\u5411 'snippet-highlight' \u7684\u5b57\u6bb5\u3002 \u6211\u4eec\u7684\u7528\u6237\u5e8f\u5217\u5316\u5668\u5305\u542b\u4e00\u4e2a\u6307\u5411 'snippet-detail' \u7684\u5b57\u6bb5\u3002 \u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u548c\u7528\u6237\u5e8f\u5217\u5316\u7a0b\u5e8f\u5305\u62ec 'url' \u5b57\u6bb5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u6307\u5411 '{model_name}-detail' \uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f 'snippet-detail' \u548c 'user-detail' \u3002 \u5c06\u6240\u6709\u8fd9\u4e9b\u540d\u79f0\u6dfb\u52a0\u5230\u6211\u4eec\u7684URLconf\u4e2d\u540e\uff0c\u6700\u7ec8\u6211\u4eec\u7684 snippets/urls.py \u6587\u4ef6\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a from django.conf.urls import url, include from rest_framework.urlpatterns import format_suffix_patterns from snippets import views # API endpoints urlpatterns = format_suffix_patterns([ url(r'^$', views.api_root), url(r'^snippets/$', views.SnippetList.as_view(), name='snippet-list'), url(r'^snippets/(?P<pk>[0-9]+)/$', views.SnippetDetail.as_view(), name='snippet-detail'), url(r'^snippets/(?P<pk>[0-9]+)/highlight/$', views.SnippetHighlight.as_view(), name='snippet-highlight'), url(r'^users/$', views.UserList.as_view(), name='user-list'), url(r'^users/(?P<pk>[0-9]+)/$', views.UserDetail.as_view(), name='user-detail') ]) # \u53ef\u6d4f\u89c8API\u7684\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe urlpatterns += [ url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')), ] \u6dfb\u52a0\u5206\u9875 \u7528\u6237\u548c\u4ee3\u7801\u7247\u6bb5\u7684\u5217\u8868\u89c6\u56fe\u53ef\u80fd\u4f1a\u8fd4\u56de\u76f8\u5f53\u591a\u7684\u5b9e\u4f8b\uff0c\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u5bf9\u7ed3\u679c\u5206\u9875\uff0c\u5e76\u5141\u8bb8API\u5ba2\u6237\u7aef\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a\u5355\u72ec\u7684\u9875\u9762\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7a0d\u5fae\u4fee\u6539\u6211\u4eec\u7684 tutorial/settings.py \u6587\u4ef6\u6765\u66f4\u6539\u9ed8\u8ba4\u5217\u8868\u5c55\u793a\u6837\u5f0f\u6765\u4f7f\u7528\u5206\u9875\u3002\u6dfb\u52a0\u4ee5\u4e0b\u8bbe\u7f6e\uff1a REST_FRAMEWORK = { 'PAGE_SIZE': 10 } \u8bf7\u6ce8\u610f\uff0cREST\u6846\u67b6\u4e2d\u7684\u6240\u6709\u8bbe\u7f6e\u90fd\u653e\u5728\u4e00\u4e2a\u540d\u4e3a\u201cREST_FRAMEWORK\u201d\u7684\u5b57\u5178\u4e2d\uff0c\u8fd9\u6709\u52a9\u4e8e\u533a\u5206\u9879\u76ee\u4e2d\u7684\u5176\u4ed6\u8bbe\u7f6e\u3002 \u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5206\u9875\u98ce\u683c\uff0c\u4f46\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u76f4\u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u3002 \u6d4f\u89c8API \u5982\u679c\u6211\u4eec\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6d4f\u89c8\u6211\u4eec\u7684API\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7\u9875\u9762\u4e0a\u7684\u8d85\u94fe\u63a5\u6765\u4e86\u89e3API\u3002 \u4f60\u8fd8\u53ef\u4ee5\u770b\u5230\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u4e0a\u7684'highlight'\u94fe\u63a5\uff0c\u5b83\u80fd\u5e26\u4f60\u8df3\u8f6c\u5230\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801HTML\u8868\u793a\u3002 \u5728 \u6559\u7a0b\u7684\u7b2c6\u90e8\u5206 \u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528ViewSets\u548cRouters\u6765\u51cf\u5c11\u6784\u5efaAPI\u6240\u9700\u7684\u4ee3\u7801\u91cf\u3002","title":"5 - Relationships and hyperlinked APIs"},{"location":"tutorial/5-relationships-and-hyperlinked-apis_zh/#tutorial-5-api","text":"\u76ee\u524d\u6211\u4eec\u7684API\u4e2d\u7684\u5173\u7cfb\u662f\u7528\u4e3b\u952e\u8868\u793a\u7684\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u4f7f\u7528\u8d85\u94fe\u63a5\u6765\u63d0\u9ad8\u6211\u4eecAPI\u7684\u5185\u90e8\u8054\u7cfb\u3002","title":"Tutorial 5: \u5173\u7cfb\u548c\u8d85\u94fe\u63a5API"},{"location":"tutorial/5-relationships-and-hyperlinked-apis_zh/#api","text":"\u73b0\u5728\u6211\u4eec\u6709'snippets'\u548c'users'\u7684\u8def\u5f84\uff0c\u4f46\u662f\u6211\u4eec\u7684API\u6ca1\u6709\u4e00\u4e2a\u5165\u53e3\u70b9\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5e38\u89c4\u7684\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u548c\u6211\u4eec\u524d\u9762\u4ecb\u7ecd\u7684 @api_view \u88c5\u9970\u5668\u521b\u5efa\u4e00\u4e2a\u3002\u5728\u4f60\u7684 snippets/views.py \u4e2d\u6dfb\u52a0\uff1a from rest_framework.decorators import api_view from rest_framework.response import Response from rest_framework.reverse import reverse @api_view(['GET']) def api_root(request, format=None): return Response({ 'users': reverse('user-list', request=request, format=format), 'snippets': reverse('snippet-list', request=request, format=format) }) \u8fd9\u91cc\u5e94\u8be5\u6ce8\u610f\u4e24\u4ef6\u4e8b\u3002\u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528REST\u6846\u67b6\u7684 reverse \u529f\u80fd\u6765\u8fd4\u56de\u5b8c\u5168\u9650\u5b9a\u7684URL\uff1b\u7b2c\u4e8c\uff0cURL\u6a21\u5f0f\u662f\u901a\u8fc7\u65b9\u4fbf\u7684\u540d\u79f0\u6765\u6807\u8bc6\u7684\uff0c\u6211\u4eec\u7a0d\u540e\u5c06\u5728 snippets/urls.py \u4e2d\u58f0\u660e\u3002","title":"\u4e3a\u6211\u4eec\u7684API\u521b\u5efa\u4e00\u4e2a\u6839\u8def\u5f84"},{"location":"tutorial/5-relationships-and-hyperlinked-apis_zh/#_1","text":"\u6211\u4eec\u7684API\u4e2d\u53e6\u4e00\u4e2a\u660e\u663e\u7f3a\u5c11\u7684\u662f\u4ee3\u7801\u9ad8\u4eae\u663e\u793a\u8def\u5f84\u3002 \u4e0e\u6240\u6709\u5176\u4ed6API\u8def\u5f84\u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528JSON\uff0c\u800c\u53ea\u662f\u9700\u8981HTML\u8868\u793a\u3002REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cdHTML\u6e32\u67d3\u5668\uff0c\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u4f7f\u7528\u6a21\u677f\u6e32\u67d3\u7684HTML\uff0c\u53e6\u4e00\u79cd\u7528\u4e8e\u5904\u7406\u9884\u6e32\u67d3\u7684HTML\u3002\u7b2c\u4e8c\u4e2a\u6e32\u67d3\u5668\u662f\u6211\u4eec\u8981\u7528\u4e8e\u6b64\u8def\u5f84\u7684\u6e32\u67d3\u5668\u3002 \u521b\u5efa\u4ee3\u7801\u9ad8\u4eae\u89c6\u56fe\u65f6\u9700\u8981\u8003\u8651\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u53ef\u7528\u7684\u5177\u4f53\u901a\u7528\u89c6\u56fe\u3002\u6211\u4eec\u4e0d\u662f\u8fd4\u56de\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u800c\u662f\u8fd4\u56de\u5bf9\u8c61\u5b9e\u4f8b\u7684\u5c5e\u6027\u3002 \u4e0d\u662f\u4f7f\u7528\u5177\u4f53\u7684\u901a\u7528\u89c6\u56fe\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u57fa\u7c7b\u6765\u8868\u793a\u5b9e\u4f8b\uff0c\u5e76\u521b\u5efa\u6211\u4eec\u81ea\u5df1\u7684 .get() \u65b9\u6cd5\u3002\u5728\u4f60\u7684 snippets/views.py \u4e2d\u6dfb\u52a0\uff1a from rest_framework import renderers from rest_framework.response import Response class SnippetHighlight(generics.GenericAPIView): queryset = Snippet.objects.all() renderer_classes = (renderers.StaticHTMLRenderer,) def get(self, request, *args, **kwargs): snippet = self.get_object() return Response(snippet.highlighted) \u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5728URLconf\u4e2d\u6dfb\u52a0\u6211\u4eec\u521b\u5efa\u7684\u65b0\u89c6\u56fe\u3002\u6211\u4eec\u5c06\u5728 snippets/urls.py \u4e2d\u4e3a\u6211\u4eec\u7684\u65b0API\u6839\u8def\u5f84\u6dfb\u52a0\u4e00\u4e2aurl\u6a21\u5f0f\uff1a url(r'^$', views.api_root), \u7136\u540e\u4e3a\u9ad8\u4eae\u4ee3\u7801\u7247\u6bb5\u6dfb\u52a0\u4e00\u4e2aurl\u6a21\u5f0f\uff1a url(r'^snippets/(?P<pk>[0-9]+)/highlight/$', views.SnippetHighlight.as_view()),","title":"\u4e3a\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801\u7247\u6bb5\u521b\u5efa\u8def\u5f84"},{"location":"tutorial/5-relationships-and-hyperlinked-apis_zh/#api_1","text":"\u5904\u7406\u597d\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u662fWeb API\u8bbe\u8ba1\u4e2d\u66f4\u5177\u6311\u6218\u6027\u7684\u65b9\u9762\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u4ee3\u8868\u4e00\u79cd\u5173\u7cfb\uff1a \u4f7f\u7528\u4e3b\u952e\u3002 \u5728\u5b9e\u4f53\u4e4b\u95f4\u4f7f\u7528\u8d85\u94fe\u63a5\u3002 \u5728\u76f8\u5173\u5b9e\u4f53\u4e0a\u4f7f\u7528\u552f\u4e00\u7684\u6807\u8bc6\u5b57\u6bb5\u3002 \u4f7f\u7528\u76f8\u5173\u5b9e\u4f53\u7684\u9ed8\u8ba4\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 \u5c06\u76f8\u5173\u5b9e\u4f53\u5d4c\u5957\u5728\u7236\u8868\u793a\u4e2d\u3002 \u4e00\u4e9b\u5176\u4ed6\u81ea\u5b9a\u4e49\u8868\u793a\u3002 REST\u6846\u67b6\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u65b9\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u5b83\u4eec\u5e94\u7528\u4e8e\u6b63\u5411\u6216\u53cd\u5411\u5173\u7cfb\uff0c\u4e5f\u53ef\u4ee5\u5728\u8bf8\u5982\u901a\u7528\u5916\u952e\u4e4b\u7c7b\u7684\u81ea\u5b9a\u4e49\u7ba1\u7406\u5668\u4e0a\u5e94\u7528\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u5b9e\u4f53\u4e4b\u95f4\u4f7f\u7528\u8d85\u94fe\u63a5\u65b9\u5f0f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u6765\u6269\u5c55 HyperlinkedModelSerializer \u800c\u4e0d\u662f\u73b0\u6709\u7684 ModelSerializer \u3002 HyperlinkedModelSerializer \u4e0e ModelSerializer \u6709\u4ee5\u4e0b\u533a\u522b\uff1a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u5305\u62ec id \u5b57\u6bb5\u3002 \u5b83\u5305\u542b\u4e00\u4e2a url \u5b57\u6bb5\uff0c\u4f7f\u7528 HyperlinkedIdentityField \u3002 \u5173\u8054\u5173\u7cfb\u4f7f\u7528 HyperlinkedRelatedField \uff0c\u800c\u4e0d\u662f PrimaryKeyRelatedField \u3002 \u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u91cd\u5199\u6211\u4eec\u73b0\u6709\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u4ee5\u4f7f\u7528\u8d85\u94fe\u63a5\u3002\u5728\u4f60\u7684 snippets/serializers.py \u4e2d\u6dfb\u52a0\uff1a class SnippetSerializer(serializers.HyperlinkedModelSerializer): owner = serializers.ReadOnlyField(source='owner.username') highlight = serializers.HyperlinkedIdentityField(view_name='snippet-highlight', format='html') class Meta: model = Snippet fields = ('url', 'id', 'highlight', 'owner', 'title', 'code', 'linenos', 'language', 'style') class UserSerializer(serializers.HyperlinkedModelSerializer): snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True) class Meta: model = User fields = ('url', 'id', 'username', 'snippets') \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684 'highlight' \u5b57\u6bb5\u3002\u8be5\u5b57\u6bb5\u4e0e url \u5b57\u6bb5\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u6307\u5411 'snippet-highlight' url\u6a21\u5f0f\uff0c\u800c\u4e0d\u662f 'snippet-detail' url\u6a21\u5f0f\u3002 \u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5305\u542b\u4e86\u683c\u5f0f\u540e\u7f00\u7684URL\uff0c\u4f8b\u5982 '.json' \uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728 highlight \u5b57\u6bb5\u4e0a\u6307\u51fa\u4efb\u4f55\u683c\u5f0f\u540e\u7f00\u7684\u8d85\u94fe\u63a5\uff0c\u5b83\u5e94\u8be5\u4f7f\u7528 '.html' \u540e\u7f00\u3002","title":"\u8d85\u94fe\u63a5\u6211\u4eec\u7684API"},{"location":"tutorial/5-relationships-and-hyperlinked-apis_zh/#url","text":"\u5982\u679c\u6211\u4eec\u8981\u4f7f\u7528\u8d85\u94fe\u63a5\u7684API\uff0c\u90a3\u4e48\u9700\u8981\u786e\u4fdd\u4e3a\u6211\u4eec\u7684URL\u6a21\u5f0f\u547d\u540d\u3002\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u9700\u8981\u547d\u540d\u7684URL\u6a21\u5f0f\u3002 \u6211\u4eecAPI\u7684\u6839\u8def\u5f84\u662f\u6307 'user-list' \u548c 'snippet-list' \u3002 \u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u5e8f\u5217\u5316\u5668\u5305\u542b\u4e00\u4e2a\u6307\u5411 'snippet-highlight' \u7684\u5b57\u6bb5\u3002 \u6211\u4eec\u7684\u7528\u6237\u5e8f\u5217\u5316\u5668\u5305\u542b\u4e00\u4e2a\u6307\u5411 'snippet-detail' \u7684\u5b57\u6bb5\u3002 \u6211\u4eec\u7684\u4ee3\u7801\u7247\u6bb5\u548c\u7528\u6237\u5e8f\u5217\u5316\u7a0b\u5e8f\u5305\u62ec 'url' \u5b57\u6bb5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u6307\u5411 '{model_name}-detail' \uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f 'snippet-detail' \u548c 'user-detail' \u3002 \u5c06\u6240\u6709\u8fd9\u4e9b\u540d\u79f0\u6dfb\u52a0\u5230\u6211\u4eec\u7684URLconf\u4e2d\u540e\uff0c\u6700\u7ec8\u6211\u4eec\u7684 snippets/urls.py \u6587\u4ef6\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a from django.conf.urls import url, include from rest_framework.urlpatterns import format_suffix_patterns from snippets import views # API endpoints urlpatterns = format_suffix_patterns([ url(r'^$', views.api_root), url(r'^snippets/$', views.SnippetList.as_view(), name='snippet-list'), url(r'^snippets/(?P<pk>[0-9]+)/$', views.SnippetDetail.as_view(), name='snippet-detail'), url(r'^snippets/(?P<pk>[0-9]+)/highlight/$', views.SnippetHighlight.as_view(), name='snippet-highlight'), url(r'^users/$', views.UserList.as_view(), name='user-list'), url(r'^users/(?P<pk>[0-9]+)/$', views.UserDetail.as_view(), name='user-detail') ]) # \u53ef\u6d4f\u89c8API\u7684\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe urlpatterns += [ url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')), ]","title":"\u786e\u4fdd\u6211\u4eec\u7684URL\u6a21\u5f0f\u88ab\u547d\u540d"},{"location":"tutorial/5-relationships-and-hyperlinked-apis_zh/#_2","text":"\u7528\u6237\u548c\u4ee3\u7801\u7247\u6bb5\u7684\u5217\u8868\u89c6\u56fe\u53ef\u80fd\u4f1a\u8fd4\u56de\u76f8\u5f53\u591a\u7684\u5b9e\u4f8b\uff0c\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u5bf9\u7ed3\u679c\u5206\u9875\uff0c\u5e76\u5141\u8bb8API\u5ba2\u6237\u7aef\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a\u5355\u72ec\u7684\u9875\u9762\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7a0d\u5fae\u4fee\u6539\u6211\u4eec\u7684 tutorial/settings.py \u6587\u4ef6\u6765\u66f4\u6539\u9ed8\u8ba4\u5217\u8868\u5c55\u793a\u6837\u5f0f\u6765\u4f7f\u7528\u5206\u9875\u3002\u6dfb\u52a0\u4ee5\u4e0b\u8bbe\u7f6e\uff1a REST_FRAMEWORK = { 'PAGE_SIZE': 10 } \u8bf7\u6ce8\u610f\uff0cREST\u6846\u67b6\u4e2d\u7684\u6240\u6709\u8bbe\u7f6e\u90fd\u653e\u5728\u4e00\u4e2a\u540d\u4e3a\u201cREST_FRAMEWORK\u201d\u7684\u5b57\u5178\u4e2d\uff0c\u8fd9\u6709\u52a9\u4e8e\u533a\u5206\u9879\u76ee\u4e2d\u7684\u5176\u4ed6\u8bbe\u7f6e\u3002 \u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5206\u9875\u98ce\u683c\uff0c\u4f46\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u76f4\u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u3002","title":"\u6dfb\u52a0\u5206\u9875"},{"location":"tutorial/5-relationships-and-hyperlinked-apis_zh/#api_2","text":"\u5982\u679c\u6211\u4eec\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u6d4f\u89c8\u6211\u4eec\u7684API\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7\u9875\u9762\u4e0a\u7684\u8d85\u94fe\u63a5\u6765\u4e86\u89e3API\u3002 \u4f60\u8fd8\u53ef\u4ee5\u770b\u5230\u4ee3\u7801\u7247\u6bb5\u5b9e\u4f8b\u4e0a\u7684'highlight'\u94fe\u63a5\uff0c\u5b83\u80fd\u5e26\u4f60\u8df3\u8f6c\u5230\u9ad8\u4eae\u663e\u793a\u7684\u4ee3\u7801HTML\u8868\u793a\u3002 \u5728 \u6559\u7a0b\u7684\u7b2c6\u90e8\u5206 \u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528ViewSets\u548cRouters\u6765\u51cf\u5c11\u6784\u5efaAPI\u6240\u9700\u7684\u4ee3\u7801\u91cf\u3002","title":"\u6d4f\u89c8API"},{"location":"tutorial/6-viewsets-and-routers/","text":"Tutorial 6: ViewSets & Routers REST framework includes an abstraction for dealing with ViewSets , that allows the developer to concentrate on modeling the state and interactions of the API, and leave the URL construction to be handled automatically, based on common conventions. ViewSet classes are almost the same thing as View classes, except that they provide operations such as read , or update , and not method handlers such as get or put . A ViewSet class is only bound to a set of method handlers at the last moment, when it is instantiated into a set of views, typically by using a Router class which handles the complexities of defining the URL conf for you. Refactoring to use ViewSets Let's take our current set of views, and refactor them into view sets. First of all let's refactor our UserList and UserDetail views into a single UserViewSet . We can remove the two views, and replace them with a single class: from rest_framework import viewsets class UserViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" This viewset automatically provides `list` and `detail` actions. \"\"\" queryset = User.objects.all() serializer_class = UserSerializer Here we've used the ReadOnlyModelViewSet class to automatically provide the default 'read-only' operations. We're still setting the queryset and serializer_class attributes exactly as we did when we were using regular views, but we no longer need to provide the same information to two separate classes. Next we're going to replace the SnippetList , SnippetDetail and SnippetHighlight view classes. We can remove the three views, and again replace them with a single class. from rest_framework.decorators import action from rest_framework.response import Response class SnippetViewSet(viewsets.ModelViewSet): \"\"\" This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions. Additionally we also provide an extra `highlight` action. \"\"\" queryset = Snippet.objects.all() serializer_class = SnippetSerializer permission_classes = [permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly] @action(detail=True, renderer_classes=[renderers.StaticHTMLRenderer]) def highlight(self, request, *args, **kwargs): snippet = self.get_object() return Response(snippet.highlighted) def perform_create(self, serializer): serializer.save(owner=self.request.user) This time we've used the ModelViewSet class in order to get the complete set of default read and write operations. Notice that we've also used the @action decorator to create a custom action, named highlight . This decorator can be used to add any custom endpoints that don't fit into the standard create / update / delete style. Custom actions which use the @action decorator will respond to GET requests by default. We can use the methods argument if we wanted an action that responded to POST requests. The URLs for custom actions by default depend on the method name itself. If you want to change the way url should be constructed, you can include url_path as a decorator keyword argument. Binding ViewSets to URLs explicitly The handler methods only get bound to the actions when we define the URLConf. To see what's going on under the hood let's first explicitly create a set of views from our ViewSets. In the snippets/urls.py file we bind our ViewSet classes into a set of concrete views. from snippets.views import SnippetViewSet, UserViewSet, api_root from rest_framework import renderers snippet_list = SnippetViewSet.as_view({ 'get': 'list', 'post': 'create' }) snippet_detail = SnippetViewSet.as_view({ 'get': 'retrieve', 'put': 'update', 'patch': 'partial_update', 'delete': 'destroy' }) snippet_highlight = SnippetViewSet.as_view({ 'get': 'highlight' }, renderer_classes=[renderers.StaticHTMLRenderer]) user_list = UserViewSet.as_view({ 'get': 'list' }) user_detail = UserViewSet.as_view({ 'get': 'retrieve' }) Notice how we're creating multiple views from each ViewSet class, by binding the http methods to the required action for each view. Now that we've bound our resources into concrete views, we can register the views with the URL conf as usual. urlpatterns = format_suffix_patterns([ path('', api_root), path('snippets/', snippet_list, name='snippet-list'), path('snippets/<int:pk>/', snippet_detail, name='snippet-detail'), path('snippets/<int:pk>/highlight/', snippet_highlight, name='snippet-highlight'), path('users/', user_list, name='user-list'), path('users/<int:pk>/', user_detail, name='user-detail') ]) Using Routers Because we're using ViewSet classes rather than View classes, we actually don't need to design the URL conf ourselves. The conventions for wiring up resources into views and urls can be handled automatically, using a Router class. All we need to do is register the appropriate view sets with a router, and let it do the rest. Here's our re-wired snippets/urls.py file. from django.urls import path, include from rest_framework.routers import DefaultRouter from snippets import views # Create a router and register our viewsets with it. router = DefaultRouter() router.register(r'snippets', views.SnippetViewSet) router.register(r'users', views.UserViewSet) # The API URLs are now determined automatically by the router. urlpatterns = [ path('', include(router.urls)), ] Registering the viewsets with the router is similar to providing a urlpattern. We include two arguments - the URL prefix for the views, and the viewset itself. The DefaultRouter class we're using also automatically creates the API root view for us, so we can now delete the api_root method from our views module. Trade-offs between views vs viewsets Using viewsets can be a really useful abstraction. It helps ensure that URL conventions will be consistent across your API, minimizes the amount of code you need to write, and allows you to concentrate on the interactions and representations your API provides rather than the specifics of the URL conf. That doesn't mean it's always the right approach to take. There's a similar set of trade-offs to consider as when using class-based views instead of function based views. Using viewsets is less explicit than building your views individually.","title":"Tutorial 6: ViewSets & Routers"},{"location":"tutorial/6-viewsets-and-routers/#tutorial-6-viewsets-routers","text":"REST framework includes an abstraction for dealing with ViewSets , that allows the developer to concentrate on modeling the state and interactions of the API, and leave the URL construction to be handled automatically, based on common conventions. ViewSet classes are almost the same thing as View classes, except that they provide operations such as read , or update , and not method handlers such as get or put . A ViewSet class is only bound to a set of method handlers at the last moment, when it is instantiated into a set of views, typically by using a Router class which handles the complexities of defining the URL conf for you.","title":"Tutorial 6: ViewSets &amp; Routers"},{"location":"tutorial/6-viewsets-and-routers/#refactoring-to-use-viewsets","text":"Let's take our current set of views, and refactor them into view sets. First of all let's refactor our UserList and UserDetail views into a single UserViewSet . We can remove the two views, and replace them with a single class: from rest_framework import viewsets class UserViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" This viewset automatically provides `list` and `detail` actions. \"\"\" queryset = User.objects.all() serializer_class = UserSerializer Here we've used the ReadOnlyModelViewSet class to automatically provide the default 'read-only' operations. We're still setting the queryset and serializer_class attributes exactly as we did when we were using regular views, but we no longer need to provide the same information to two separate classes. Next we're going to replace the SnippetList , SnippetDetail and SnippetHighlight view classes. We can remove the three views, and again replace them with a single class. from rest_framework.decorators import action from rest_framework.response import Response class SnippetViewSet(viewsets.ModelViewSet): \"\"\" This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions. Additionally we also provide an extra `highlight` action. \"\"\" queryset = Snippet.objects.all() serializer_class = SnippetSerializer permission_classes = [permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly] @action(detail=True, renderer_classes=[renderers.StaticHTMLRenderer]) def highlight(self, request, *args, **kwargs): snippet = self.get_object() return Response(snippet.highlighted) def perform_create(self, serializer): serializer.save(owner=self.request.user) This time we've used the ModelViewSet class in order to get the complete set of default read and write operations. Notice that we've also used the @action decorator to create a custom action, named highlight . This decorator can be used to add any custom endpoints that don't fit into the standard create / update / delete style. Custom actions which use the @action decorator will respond to GET requests by default. We can use the methods argument if we wanted an action that responded to POST requests. The URLs for custom actions by default depend on the method name itself. If you want to change the way url should be constructed, you can include url_path as a decorator keyword argument.","title":"Refactoring to use ViewSets"},{"location":"tutorial/6-viewsets-and-routers/#binding-viewsets-to-urls-explicitly","text":"The handler methods only get bound to the actions when we define the URLConf. To see what's going on under the hood let's first explicitly create a set of views from our ViewSets. In the snippets/urls.py file we bind our ViewSet classes into a set of concrete views. from snippets.views import SnippetViewSet, UserViewSet, api_root from rest_framework import renderers snippet_list = SnippetViewSet.as_view({ 'get': 'list', 'post': 'create' }) snippet_detail = SnippetViewSet.as_view({ 'get': 'retrieve', 'put': 'update', 'patch': 'partial_update', 'delete': 'destroy' }) snippet_highlight = SnippetViewSet.as_view({ 'get': 'highlight' }, renderer_classes=[renderers.StaticHTMLRenderer]) user_list = UserViewSet.as_view({ 'get': 'list' }) user_detail = UserViewSet.as_view({ 'get': 'retrieve' }) Notice how we're creating multiple views from each ViewSet class, by binding the http methods to the required action for each view. Now that we've bound our resources into concrete views, we can register the views with the URL conf as usual. urlpatterns = format_suffix_patterns([ path('', api_root), path('snippets/', snippet_list, name='snippet-list'), path('snippets/<int:pk>/', snippet_detail, name='snippet-detail'), path('snippets/<int:pk>/highlight/', snippet_highlight, name='snippet-highlight'), path('users/', user_list, name='user-list'), path('users/<int:pk>/', user_detail, name='user-detail') ])","title":"Binding ViewSets to URLs explicitly"},{"location":"tutorial/6-viewsets-and-routers/#using-routers","text":"Because we're using ViewSet classes rather than View classes, we actually don't need to design the URL conf ourselves. The conventions for wiring up resources into views and urls can be handled automatically, using a Router class. All we need to do is register the appropriate view sets with a router, and let it do the rest. Here's our re-wired snippets/urls.py file. from django.urls import path, include from rest_framework.routers import DefaultRouter from snippets import views # Create a router and register our viewsets with it. router = DefaultRouter() router.register(r'snippets', views.SnippetViewSet) router.register(r'users', views.UserViewSet) # The API URLs are now determined automatically by the router. urlpatterns = [ path('', include(router.urls)), ] Registering the viewsets with the router is similar to providing a urlpattern. We include two arguments - the URL prefix for the views, and the viewset itself. The DefaultRouter class we're using also automatically creates the API root view for us, so we can now delete the api_root method from our views module.","title":"Using Routers"},{"location":"tutorial/6-viewsets-and-routers/#trade-offs-between-views-vs-viewsets","text":"Using viewsets can be a really useful abstraction. It helps ensure that URL conventions will be consistent across your API, minimizes the amount of code you need to write, and allows you to concentrate on the interactions and representations your API provides rather than the specifics of the URL conf. That doesn't mean it's always the right approach to take. There's a similar set of trade-offs to consider as when using class-based views instead of function based views. Using viewsets is less explicit than building your views individually.","title":"Trade-offs between views vs viewsets"},{"location":"tutorial/6-viewsets-and-routers_zh/","text":"Tutorial 6: \u89c6\u56fe\u96c6\u548c\u8def\u7531\u5668 REST\u6846\u67b6\u5305\u62ec\u4e00\u4e2a\u7528\u4e8e\u5904\u7406 ViewSets \u7684\u62bd\u8c61\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u96c6\u4e2d\u7cbe\u529b\u5bf9API\u7684\u72b6\u6001\u548c\u4ea4\u4e92\u8fdb\u884c\u5efa\u6a21\uff0c\u5e76\u6839\u636e\u5e38\u89c4\u7ea6\u5b9a\u81ea\u52a8\u5904\u7406URL\u6784\u9020\u3002 ViewSet \u7c7b\u4e0e View \u7c7b\u51e0\u4e4e\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4eec\u63d0\u4f9b\u8bf8\u5982 read \u6216 update \u4e4b\u7c7b\u7684\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f get \u6216 put \u7b49\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6700\u540e\u4e00\u4e2a ViewSet \u7c7b\u53ea\u7ed1\u5b9a\u5230\u4e00\u7ec4\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\uff0c\u5f53\u5b83\u88ab\u5b9e\u4f8b\u5316\u6210\u4e00\u7ec4\u89c6\u56fe\u7684\u65f6\u5019\uff0c\u901a\u5e38\u901a\u8fc7\u4f7f\u7528\u4e00\u4e2a Router \u7c7b\u6765\u5904\u7406\u81ea\u5df1\u5b9a\u4e49URL conf\u7684\u590d\u6742\u6027\u3002 \u4f7f\u7528ViewSets\u91cd\u6784 \u6211\u4eec\u770b\u4e00\u4e0b\u76ee\u524d\u7684\u89c6\u56fe\uff0c\u628a\u5b83\u4eec\u91cd\u6784\u6210\u89c6\u56fe\u96c6\u3002 \u9996\u5148\u8ba9\u6211\u4eec\u5c06 UserList \u548c UserDetail \u89c6\u56fe\u91cd\u6784\u4e3a\u4e00\u4e2a UserViewSet \u3002\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u8fd9\u4e24\u4e2a\u89c6\u56fe\uff0c\u5e76\u7528\u4e00\u4e2a\u7c7b\u66ff\u6362\u5b83\u4eec\uff1a from rest_framework import viewsets class UserViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" \u6b64\u89c6\u56fe\u81ea\u52a8\u63d0\u4f9b`list`\u548c`detail`\u64cd\u4f5c\u3002 \"\"\" queryset = User.objects.all() serializer_class = UserSerializer \u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 ReadOnlyModelViewSet \u7c7b\u6765\u81ea\u52a8\u63d0\u4f9b\u9ed8\u8ba4\u7684\u201c\u53ea\u8bfb\u201d\u64cd\u4f5c\u3002\u6211\u4eec\u4ecd\u7136\u50cf\u4f7f\u7528\u5e38\u89c4\u89c6\u56fe\u90a3\u6837\u8bbe\u7f6e queryset \u548c serializer_class \u5c5e\u6027\uff0c\u4f46\u6211\u4eec\u4e0d\u518d\u9700\u8981\u5411\u4e24\u4e2a\u4e0d\u540c\u7684\u7c7b\u63d0\u4f9b\u76f8\u540c\u7684\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u66ff\u6362 SnippetList \uff0c SnippetDetail \u548c SnippetHighlight \u89c6\u56fe\u7c7b\u3002\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u4e09\u4e2a\u89c6\u56fe\uff0c\u5e76\u518d\u6b21\u7528\u4e00\u4e2a\u7c7b\u66ff\u6362\u5b83\u4eec\u3002 from rest_framework.decorators import detail_route class SnippetViewSet(viewsets.ModelViewSet): \"\"\" \u6b64\u89c6\u56fe\u81ea\u52a8\u63d0\u4f9b`list`\uff0c`create`\uff0c`retrieve`\uff0c`update`\u548c`destroy`\u64cd\u4f5c\u3002 \u53e6\u5916\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u989d\u5916\u7684`highlight`\u64cd\u4f5c\u3002 \"\"\" queryset = Snippet.objects.all() serializer_class = SnippetSerializer permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly,) @detail_route(renderer_classes=[renderers.StaticHTMLRenderer]) def highlight(self, request, *args, **kwargs): snippet = self.get_object() return Response(snippet.highlighted) def perform_create(self, serializer): serializer.save(owner=self.request.user) \u8fd9\u6b21\u6211\u4eec\u4f7f\u7528\u4e86 ModelViewSet \u7c7b\u6765\u83b7\u53d6\u5b8c\u6574\u7684\u9ed8\u8ba4\u8bfb\u5199\u64cd\u4f5c\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528 @detail_route \u88c5\u9970\u5668\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a highlight \u7684\u81ea\u5b9a\u4e49\u64cd\u4f5c\u3002\u8fd9\u4e2a\u88c5\u9970\u5668\u53ef\u7528\u4e8e\u6dfb\u52a0\u4e0d\u7b26\u5408\u6807\u51c6 create / update / delete \u6837\u5f0f\u7684\u4efb\u4f55\u81ea\u5b9a\u4e49\u8def\u5f84\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 @detail_route \u88c5\u9970\u5668\u7684\u81ea\u5b9a\u4e49\u64cd\u4f5c\u5c06\u54cd\u5e94 GET \u8bf7\u6c42\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u54cd\u5e94 POST \u8bf7\u6c42\u7684\u52a8\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 methods \u53c2\u6570\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684URL\u53d6\u51b3\u4e8e\u65b9\u6cd5\u540d\u79f0\u672c\u8eab\u3002\u5982\u679c\u8981\u66f4\u6539URL\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4e3a\u88c5\u9970\u5668\u8bbe\u7f6eurl_path\u5173\u952e\u5b57\u53c2\u6570\u3002 \u660e\u786e\u5730\u5c06ViewSets\u7ed1\u5b9a\u5230URL \u5f53\u6211\u4eec\u5b9a\u4e49URLConf\u65f6\uff0c\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u53ea\u80fd\u7ed1\u5b9a\u5230\u90a3\u4e9b\u52a8\u4f5c\u4e0a\u3002 \u8981\u4e86\u89e3\u5728\u5e55\u540e\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u9996\u5148\u663e\u5f0f\u5730\u4ece\u6211\u4eec\u7684\u89c6\u56fe\u96c6\u4e2d\u521b\u5efa\u4e00\u7ec4\u89c6\u56fe\u3002 \u5728 urls.py \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5c06 ViewSet \u7c7b\u7ed1\u5b9a\u5230\u4e00\u7ec4\u5177\u4f53\u89c6\u56fe\u4e2d\u3002 from snippets.views import SnippetViewSet, UserViewSet, api_root from rest_framework import renderers snippet_list = SnippetViewSet.as_view({ 'get': 'list', 'post': 'create' }) snippet_detail = SnippetViewSet.as_view({ 'get': 'retrieve', 'put': 'update', 'patch': 'partial_update', 'delete': 'destroy' }) snippet_highlight = SnippetViewSet.as_view({ 'get': 'highlight' }, renderer_classes=[renderers.StaticHTMLRenderer]) user_list = UserViewSet.as_view({ 'get': 'list' }) user_detail = UserViewSet.as_view({ 'get': 'retrieve' }) \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7\u5c06http\u65b9\u6cd5\u7ed1\u5b9a\u5230\u6bcf\u4e2a\u89c6\u56fe\u6240\u9700\u7684\u64cd\u4f5c\uff0c\u4ece\u6bcf\u4e2a ViewSet \u7c7b\u521b\u5efa\u591a\u4e2a\u89c6\u56fe\u7684\u3002 \u73b0\u5728\u6211\u4eec\u5c06\u8d44\u6e90\u7ed1\u5b9a\u5230\u5177\u4f53\u7684\u89c6\u56fe\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u5f80\u5e38\u4e00\u6837\u5728URL conf\u4e2d\u6ce8\u518c\u89c6\u56fe\u3002 urlpatterns = format_suffix_patterns([ url(r'^$', api_root), url(r'^snippets/$', snippet_list, name='snippet-list'), url(r'^snippets/(?P<pk>[0-9]+)/$', snippet_detail, name='snippet-detail'), url(r'^snippets/(?P<pk>[0-9]+)/highlight/$', snippet_highlight, name='snippet-highlight'), url(r'^users/$', user_list, name='user-list'), url(r'^users/(?P<pk>[0-9]+)/$', user_detail, name='user-detail') ]) \u4f7f\u7528\u8def\u7531\u5668 \u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f ViewSet \u7c7b\u800c\u4e0d\u662f View \u7c7b\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u81ea\u5df1\u8bbe\u8ba1URL\u3002\u5c06\u8d44\u6e90\u8fde\u63a5\u5230\u89c6\u56fe\u548curl\u7684\u7ea6\u5b9a\u53ef\u4ee5\u4f7f\u7528 Router \u7c7b\u81ea\u52a8\u5904\u7406\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u4f7f\u7528\u8def\u7531\u5668\u6ce8\u518c\u76f8\u5e94\u7684\u89c6\u56fe\u96c6\uff0c\u7136\u540e\u8ba9\u5b83\u6267\u884c\u5176\u4f59\u64cd\u4f5c\u3002 \u8fd9\u662f\u6211\u4eec\u91cd\u5199\u7684 urls.py \u6587\u4ef6\u3002 from django.conf.urls import url, include from snippets import views from rest_framework.routers import DefaultRouter # \u521b\u5efa\u8def\u7531\u5668\u5e76\u6ce8\u518c\u6211\u4eec\u7684\u89c6\u56fe\u3002 router = DefaultRouter() router.register(r'snippets', views.SnippetViewSet) router.register(r'users', views.UserViewSet) # API URL\u73b0\u5728\u7531\u8def\u7531\u5668\u81ea\u52a8\u786e\u5b9a\u3002 # \u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u8981\u5305\u542b\u53ef\u6d4f\u89c8\u7684API\u7684\u767b\u5f55URL\u3002 urlpatterns = [ url(r'^', include(router.urls)), url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')) ] \u4f7f\u7528\u8def\u7531\u5668\u6ce8\u518cviewsets\u7c7b\u4f3c\u4e8e\u63d0\u4f9burlpattern\u3002\u6211\u4eec\u5305\u542b\u4e24\u4e2a\u53c2\u6570 - \u89c6\u56fe\u7684URL\u524d\u7f00\u548c\u89c6\u56fe\u672c\u8eab\u3002 \u6211\u4eec\u4f7f\u7528\u7684 DefaultRouter \u7c7b\u4e5f\u4f1a\u81ea\u52a8\u4e3a\u6211\u4eec\u521b\u5efaAPI\u6839\u89c6\u56fe\uff0c\u56e0\u6b64\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ece\u6211\u4eec\u7684 views \u6a21\u5757\u4e2d\u5220\u9664 api_root \u65b9\u6cd5\u3002 \u89c6\u56fe\uff08views\uff09vs\u89c6\u56fe\u96c6\uff08viewsets\uff09\u4e4b\u95f4\u7684\u6743\u8861 \u4f7f\u7528\u89c6\u56fe\u96c6\u53ef\u4ee5\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u62bd\u8c61\u3002\u5b83\u6709\u52a9\u4e8e\u786e\u4fddURL\u7ea6\u5b9a\u5728\u4f60\u7684API\u4e2d\u4fdd\u6301\u4e00\u81f4\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u7f16\u5199\u6240\u9700\u7684\u4ee3\u7801\u91cf\uff0c\u8ba9\u4f60\u80fd\u591f\u4e13\u6ce8\u4e8eAPI\u63d0\u4f9b\u7684\u4ea4\u4e92\u548c\u8868\u793a\uff0c\u800c\u4e0d\u662fURLconf\u7684\u7ec6\u8282\u3002 \u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u91c7\u7528\u89c6\u56fe\u96c6\u603b\u662f\u6b63\u786e\u7684\u65b9\u6cd5\u3002\u5728\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u800c\u4e0d\u662f\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u65f6\uff0c\u6709\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6743\u8861\u8981\u8003\u8651\u3002\u4f7f\u7528\u89c6\u56fe\u96c6\u4e0d\u50cf\u5355\u72ec\u6784\u5efa\u89c6\u56fe\u90a3\u6837\u660e\u786e\u3002 \u5728 \u672c\u6559\u7a0b\u7684\u7b2c7\u90e8\u5206 \u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u6dfb\u52a0API\u6a21\u5f0f\uff0c\u5e76\u4f7f\u7528\u5ba2\u6237\u7aef\u5e93\u6216\u547d\u4ee4\u884c\u5de5\u5177\u4e0e\u6211\u4eec\u7684API\u8fdb\u884c\u4ea4\u4e92\u3002","title":"6 - Viewsets and routers"},{"location":"tutorial/6-viewsets-and-routers_zh/#tutorial-6","text":"REST\u6846\u67b6\u5305\u62ec\u4e00\u4e2a\u7528\u4e8e\u5904\u7406 ViewSets \u7684\u62bd\u8c61\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u96c6\u4e2d\u7cbe\u529b\u5bf9API\u7684\u72b6\u6001\u548c\u4ea4\u4e92\u8fdb\u884c\u5efa\u6a21\uff0c\u5e76\u6839\u636e\u5e38\u89c4\u7ea6\u5b9a\u81ea\u52a8\u5904\u7406URL\u6784\u9020\u3002 ViewSet \u7c7b\u4e0e View \u7c7b\u51e0\u4e4e\u76f8\u540c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4eec\u63d0\u4f9b\u8bf8\u5982 read \u6216 update \u4e4b\u7c7b\u7684\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f get \u6216 put \u7b49\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u6700\u540e\u4e00\u4e2a ViewSet \u7c7b\u53ea\u7ed1\u5b9a\u5230\u4e00\u7ec4\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\uff0c\u5f53\u5b83\u88ab\u5b9e\u4f8b\u5316\u6210\u4e00\u7ec4\u89c6\u56fe\u7684\u65f6\u5019\uff0c\u901a\u5e38\u901a\u8fc7\u4f7f\u7528\u4e00\u4e2a Router \u7c7b\u6765\u5904\u7406\u81ea\u5df1\u5b9a\u4e49URL conf\u7684\u590d\u6742\u6027\u3002","title":"Tutorial 6: \u89c6\u56fe\u96c6\u548c\u8def\u7531\u5668"},{"location":"tutorial/6-viewsets-and-routers_zh/#viewsets","text":"\u6211\u4eec\u770b\u4e00\u4e0b\u76ee\u524d\u7684\u89c6\u56fe\uff0c\u628a\u5b83\u4eec\u91cd\u6784\u6210\u89c6\u56fe\u96c6\u3002 \u9996\u5148\u8ba9\u6211\u4eec\u5c06 UserList \u548c UserDetail \u89c6\u56fe\u91cd\u6784\u4e3a\u4e00\u4e2a UserViewSet \u3002\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u8fd9\u4e24\u4e2a\u89c6\u56fe\uff0c\u5e76\u7528\u4e00\u4e2a\u7c7b\u66ff\u6362\u5b83\u4eec\uff1a from rest_framework import viewsets class UserViewSet(viewsets.ReadOnlyModelViewSet): \"\"\" \u6b64\u89c6\u56fe\u81ea\u52a8\u63d0\u4f9b`list`\u548c`detail`\u64cd\u4f5c\u3002 \"\"\" queryset = User.objects.all() serializer_class = UserSerializer \u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 ReadOnlyModelViewSet \u7c7b\u6765\u81ea\u52a8\u63d0\u4f9b\u9ed8\u8ba4\u7684\u201c\u53ea\u8bfb\u201d\u64cd\u4f5c\u3002\u6211\u4eec\u4ecd\u7136\u50cf\u4f7f\u7528\u5e38\u89c4\u89c6\u56fe\u90a3\u6837\u8bbe\u7f6e queryset \u548c serializer_class \u5c5e\u6027\uff0c\u4f46\u6211\u4eec\u4e0d\u518d\u9700\u8981\u5411\u4e24\u4e2a\u4e0d\u540c\u7684\u7c7b\u63d0\u4f9b\u76f8\u540c\u7684\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u66ff\u6362 SnippetList \uff0c SnippetDetail \u548c SnippetHighlight \u89c6\u56fe\u7c7b\u3002\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u4e09\u4e2a\u89c6\u56fe\uff0c\u5e76\u518d\u6b21\u7528\u4e00\u4e2a\u7c7b\u66ff\u6362\u5b83\u4eec\u3002 from rest_framework.decorators import detail_route class SnippetViewSet(viewsets.ModelViewSet): \"\"\" \u6b64\u89c6\u56fe\u81ea\u52a8\u63d0\u4f9b`list`\uff0c`create`\uff0c`retrieve`\uff0c`update`\u548c`destroy`\u64cd\u4f5c\u3002 \u53e6\u5916\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u989d\u5916\u7684`highlight`\u64cd\u4f5c\u3002 \"\"\" queryset = Snippet.objects.all() serializer_class = SnippetSerializer permission_classes = (permissions.IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly,) @detail_route(renderer_classes=[renderers.StaticHTMLRenderer]) def highlight(self, request, *args, **kwargs): snippet = self.get_object() return Response(snippet.highlighted) def perform_create(self, serializer): serializer.save(owner=self.request.user) \u8fd9\u6b21\u6211\u4eec\u4f7f\u7528\u4e86 ModelViewSet \u7c7b\u6765\u83b7\u53d6\u5b8c\u6574\u7684\u9ed8\u8ba4\u8bfb\u5199\u64cd\u4f5c\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528 @detail_route \u88c5\u9970\u5668\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a highlight \u7684\u81ea\u5b9a\u4e49\u64cd\u4f5c\u3002\u8fd9\u4e2a\u88c5\u9970\u5668\u53ef\u7528\u4e8e\u6dfb\u52a0\u4e0d\u7b26\u5408\u6807\u51c6 create / update / delete \u6837\u5f0f\u7684\u4efb\u4f55\u81ea\u5b9a\u4e49\u8def\u5f84\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 @detail_route \u88c5\u9970\u5668\u7684\u81ea\u5b9a\u4e49\u64cd\u4f5c\u5c06\u54cd\u5e94 GET \u8bf7\u6c42\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u54cd\u5e94 POST \u8bf7\u6c42\u7684\u52a8\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 methods \u53c2\u6570\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7684URL\u53d6\u51b3\u4e8e\u65b9\u6cd5\u540d\u79f0\u672c\u8eab\u3002\u5982\u679c\u8981\u66f4\u6539URL\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4e3a\u88c5\u9970\u5668\u8bbe\u7f6eurl_path\u5173\u952e\u5b57\u53c2\u6570\u3002","title":"\u4f7f\u7528ViewSets\u91cd\u6784"},{"location":"tutorial/6-viewsets-and-routers_zh/#viewsetsurl","text":"\u5f53\u6211\u4eec\u5b9a\u4e49URLConf\u65f6\uff0c\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u53ea\u80fd\u7ed1\u5b9a\u5230\u90a3\u4e9b\u52a8\u4f5c\u4e0a\u3002 \u8981\u4e86\u89e3\u5728\u5e55\u540e\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u9996\u5148\u663e\u5f0f\u5730\u4ece\u6211\u4eec\u7684\u89c6\u56fe\u96c6\u4e2d\u521b\u5efa\u4e00\u7ec4\u89c6\u56fe\u3002 \u5728 urls.py \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5c06 ViewSet \u7c7b\u7ed1\u5b9a\u5230\u4e00\u7ec4\u5177\u4f53\u89c6\u56fe\u4e2d\u3002 from snippets.views import SnippetViewSet, UserViewSet, api_root from rest_framework import renderers snippet_list = SnippetViewSet.as_view({ 'get': 'list', 'post': 'create' }) snippet_detail = SnippetViewSet.as_view({ 'get': 'retrieve', 'put': 'update', 'patch': 'partial_update', 'delete': 'destroy' }) snippet_highlight = SnippetViewSet.as_view({ 'get': 'highlight' }, renderer_classes=[renderers.StaticHTMLRenderer]) user_list = UserViewSet.as_view({ 'get': 'list' }) user_detail = UserViewSet.as_view({ 'get': 'retrieve' }) \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u662f\u5982\u4f55\u901a\u8fc7\u5c06http\u65b9\u6cd5\u7ed1\u5b9a\u5230\u6bcf\u4e2a\u89c6\u56fe\u6240\u9700\u7684\u64cd\u4f5c\uff0c\u4ece\u6bcf\u4e2a ViewSet \u7c7b\u521b\u5efa\u591a\u4e2a\u89c6\u56fe\u7684\u3002 \u73b0\u5728\u6211\u4eec\u5c06\u8d44\u6e90\u7ed1\u5b9a\u5230\u5177\u4f53\u7684\u89c6\u56fe\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u5f80\u5e38\u4e00\u6837\u5728URL conf\u4e2d\u6ce8\u518c\u89c6\u56fe\u3002 urlpatterns = format_suffix_patterns([ url(r'^$', api_root), url(r'^snippets/$', snippet_list, name='snippet-list'), url(r'^snippets/(?P<pk>[0-9]+)/$', snippet_detail, name='snippet-detail'), url(r'^snippets/(?P<pk>[0-9]+)/highlight/$', snippet_highlight, name='snippet-highlight'), url(r'^users/$', user_list, name='user-list'), url(r'^users/(?P<pk>[0-9]+)/$', user_detail, name='user-detail') ])","title":"\u660e\u786e\u5730\u5c06ViewSets\u7ed1\u5b9a\u5230URL"},{"location":"tutorial/6-viewsets-and-routers_zh/#_1","text":"\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f ViewSet \u7c7b\u800c\u4e0d\u662f View \u7c7b\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u81ea\u5df1\u8bbe\u8ba1URL\u3002\u5c06\u8d44\u6e90\u8fde\u63a5\u5230\u89c6\u56fe\u548curl\u7684\u7ea6\u5b9a\u53ef\u4ee5\u4f7f\u7528 Router \u7c7b\u81ea\u52a8\u5904\u7406\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u4f7f\u7528\u8def\u7531\u5668\u6ce8\u518c\u76f8\u5e94\u7684\u89c6\u56fe\u96c6\uff0c\u7136\u540e\u8ba9\u5b83\u6267\u884c\u5176\u4f59\u64cd\u4f5c\u3002 \u8fd9\u662f\u6211\u4eec\u91cd\u5199\u7684 urls.py \u6587\u4ef6\u3002 from django.conf.urls import url, include from snippets import views from rest_framework.routers import DefaultRouter # \u521b\u5efa\u8def\u7531\u5668\u5e76\u6ce8\u518c\u6211\u4eec\u7684\u89c6\u56fe\u3002 router = DefaultRouter() router.register(r'snippets', views.SnippetViewSet) router.register(r'users', views.UserViewSet) # API URL\u73b0\u5728\u7531\u8def\u7531\u5668\u81ea\u52a8\u786e\u5b9a\u3002 # \u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u8981\u5305\u542b\u53ef\u6d4f\u89c8\u7684API\u7684\u767b\u5f55URL\u3002 urlpatterns = [ url(r'^', include(router.urls)), url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')) ] \u4f7f\u7528\u8def\u7531\u5668\u6ce8\u518cviewsets\u7c7b\u4f3c\u4e8e\u63d0\u4f9burlpattern\u3002\u6211\u4eec\u5305\u542b\u4e24\u4e2a\u53c2\u6570 - \u89c6\u56fe\u7684URL\u524d\u7f00\u548c\u89c6\u56fe\u672c\u8eab\u3002 \u6211\u4eec\u4f7f\u7528\u7684 DefaultRouter \u7c7b\u4e5f\u4f1a\u81ea\u52a8\u4e3a\u6211\u4eec\u521b\u5efaAPI\u6839\u89c6\u56fe\uff0c\u56e0\u6b64\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ece\u6211\u4eec\u7684 views \u6a21\u5757\u4e2d\u5220\u9664 api_root \u65b9\u6cd5\u3002","title":"\u4f7f\u7528\u8def\u7531\u5668"},{"location":"tutorial/6-viewsets-and-routers_zh/#viewsvsviewsets","text":"\u4f7f\u7528\u89c6\u56fe\u96c6\u53ef\u4ee5\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u62bd\u8c61\u3002\u5b83\u6709\u52a9\u4e8e\u786e\u4fddURL\u7ea6\u5b9a\u5728\u4f60\u7684API\u4e2d\u4fdd\u6301\u4e00\u81f4\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u7f16\u5199\u6240\u9700\u7684\u4ee3\u7801\u91cf\uff0c\u8ba9\u4f60\u80fd\u591f\u4e13\u6ce8\u4e8eAPI\u63d0\u4f9b\u7684\u4ea4\u4e92\u548c\u8868\u793a\uff0c\u800c\u4e0d\u662fURLconf\u7684\u7ec6\u8282\u3002 \u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u91c7\u7528\u89c6\u56fe\u96c6\u603b\u662f\u6b63\u786e\u7684\u65b9\u6cd5\u3002\u5728\u4f7f\u7528\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u800c\u4e0d\u662f\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u65f6\uff0c\u6709\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6743\u8861\u8981\u8003\u8651\u3002\u4f7f\u7528\u89c6\u56fe\u96c6\u4e0d\u50cf\u5355\u72ec\u6784\u5efa\u89c6\u56fe\u90a3\u6837\u660e\u786e\u3002 \u5728 \u672c\u6559\u7a0b\u7684\u7b2c7\u90e8\u5206 \u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u6dfb\u52a0API\u6a21\u5f0f\uff0c\u5e76\u4f7f\u7528\u5ba2\u6237\u7aef\u5e93\u6216\u547d\u4ee4\u884c\u5de5\u5177\u4e0e\u6211\u4eec\u7684API\u8fdb\u884c\u4ea4\u4e92\u3002","title":"\u89c6\u56fe\uff08views\uff09vs\u89c6\u56fe\u96c6\uff08viewsets\uff09\u4e4b\u95f4\u7684\u6743\u8861"},{"location":"tutorial/7-schemas-and-client-libraries_zh/","text":"Tutorial 7: \u6982\u8981\u548c\u5ba2\u6237\u7aef\u5e93 \u6982\u8981\u662f\u4e00\u79cd\u673a\u5668\u53ef\u8bfb\u6587\u6863\uff0c\u7528\u4e8e\u63cf\u8ff0\u53ef\u7528\u7684API\u8def\u5f84\uff0c\u5176URLS\u4ee5\u53ca\u5b83\u4eec\u652f\u6301\u7684\u64cd\u4f5c\u3002 \u6982\u8981\u53ef\u4ee5\u662f\u81ea\u52a8\u751f\u6210\u6587\u6863\u7684\u6709\u7528\u5de5\u5177\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u9a71\u52a8\u53ef\u4ee5\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u7684\u52a8\u6001\u5ba2\u6237\u7aef\u5e93\u3002 Core API \u4e3a\u4e86\u63d0\u4f9b\u6982\u8981\u652f\u6301REST\u6846\u67b6\u4f7f\u7528 Core API \u3002 Core API\u662f\u7528\u4e8e\u63cf\u8ff0API\u7684\u6587\u6863\u89c4\u8303\u3002\u5b83\u7528\u4e8e\u63d0\u4f9b\u53ef\u7528\u8def\u5f84\u7684\u5185\u90e8\u8868\u793a\u5f62\u5f0f\u548cAPI\u516c\u5f00\u7684\u53ef\u80fd\u7684\u4ea4\u4e92\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u6216\u5ba2\u6237\u7aef\u3002 \u5f53\u4f7f\u7528\u670d\u52a1\u5668\u7aef\u65f6\uff0ccoreAPI\u5141\u8bb8API\u652f\u6301\u5448\u73b0\u8303\u56f4\u5e7f\u6cdb\u7684\u6982\u8981\u6216\u8d85\u5a92\u4f53\u683c\u5f0f\u3002 \u5f53\u4f7f\u7528\u5ba2\u6237\u7aef\u65f6\uff0c\u6838\u5fc3API\u5141\u8bb8\u52a8\u6001\u9a71\u52a8\u7684\u5ba2\u6237\u7aef\u5e93\uff0c\u5b83\u53ef\u4ee5\u4e0e\u4efb\u4f55\u516c\u5f00\u53d7\u652f\u6301\u7684\u6982\u8981\u6216\u8d85\u5a92\u4f53\u683c\u5f0f\u7684API\u4ea4\u4e92\u3002 \u6dfb\u52a0\u6982\u8981 REST\u6846\u67b6\u652f\u6301\u660e\u786e\u5b9a\u4e49\u7684\u6982\u8981\u89c6\u56fe\u6216\u81ea\u52a8\u751f\u6210\u7684\u6982\u8981\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u89c6\u56fe\u96c6\u548c\u8def\u7531\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528\u81ea\u52a8\u6982\u8981\u751f\u6210\u3002 \u4f60\u9700\u8981\u5b89\u88c5 coreapi python\u5305\u624d\u80fd\u5305\u542bAPI\u6982\u8981\u3002 $ pip install coreapi \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728URL\u914d\u7f6e\u4e2d\u5305\u542b\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684\u6982\u8981\u89c6\u56fe\u6765\u4e3aAPI\u6dfb\u52a0\u6982\u8981\u3002 from rest_framework.schemas import get_schema_view schema_view = get_schema_view(title='Pastebin API') urlpatterns = [ url('^schema/$', schema_view), ... ] \u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95eeAPI\u6839\u8def\u5f84\uff0c\u90a3\u4e48\u4f60\u73b0\u5728\u5e94\u8be5\u53ef\u4ee5\u770b\u5230 corejson \u8868\u793a\u5f62\u5f0f\u662f\u4e00\u4e2a\u53ef\u7528\u9009\u9879\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728 Accept \u6807\u5934\u4e2d\u6307\u5b9a\u6240\u9700\u7684\u5185\u5bb9\u7c7b\u578b\u4ece\u547d\u4ee4\u884c\u8bf7\u6c42\u6982\u8981\u3002 $ http http://127.0.0.1:8000/schema/ Accept:application/coreapi+json HTTP/1.0 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/coreapi+json { \"_meta\": { \"title\": \"Pastebin API\" }, \"_type\": \"document\", ... \u9ed8\u8ba4\u8f93\u51fa\u6837\u5f0f\u662f\u4f7f\u7528 Core JSON \u7f16\u7801\u3002 \u8fd8\u652f\u6301\u5176\u4ed6\u6982\u8981\u683c\u5f0f\uff0c\u5982 Open API \uff08\u4ee5\u524d\u53ebSwagger\uff09\u3002 \u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef \u73b0\u5728\u6211\u4eec\u7684API\u66b4\u9732\u4e86\u4e00\u4e2a\u6982\u8981\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u52a8\u6001\u7684\u5ba2\u6237\u7aef\u5e93\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u3002\u4e3a\u4e86\u6f14\u793a\u8fd9\u4e2a\uff0c\u6211\u4eec\u6765\u4f7f\u7528Core API\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u3002 \u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u4f5c\u4e3a\u4e00\u4e2a coreapi-cli \u5305\u63d0\u4f9b\uff1a $ pip install coreapi-cli \u73b0\u5728\u68c0\u67e5\u5b83\u5728\u547d\u4ee4\u884c\u4e0a\u662f\u5426\u53ef\u7528... $ coreapi Usage: coreapi [OPTIONS] COMMAND [ARGS]... Command line client for interacting with CoreAPI services. Visit http://www.coreapi.org for more information. Options: --version Display the package version number. --help Show this message and exit. Commands: ... \u9996\u5148\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u52a0\u8f7dAPI\u6982\u8981\u3002 $ coreapi get http://127.0.0.1:8000/schema/ <Pastebin API \"http://127.0.0.1:8000/schema/\"> snippets: { highlight(id) list() read(id) } users: { list() read(id) } \u6211\u4eec\u8fd8\u6ca1\u6709\u8ba4\u8bc1\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u53ea\u80fd\u770b\u5230\u53ea\u8bfb\u8def\u5f84\uff0c\u8fd9\u4e0e\u6211\u4eec\u8bbe\u7f6e\u7684API\u6743\u9650\u662f\u4e00\u81f4\u7684\u3002 \u6211\u4eec\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\uff0c\u5c1d\u8bd5\u5217\u51fa\u73b0\u6709\u7684\u4ee3\u7801\u7247\u6bb5\uff1a $ coreapi action snippets list [ { \"url\": \"http://127.0.0.1:8000/snippets/1/\", \"id\": 1, \"highlight\": \"http://127.0.0.1:8000/snippets/1/highlight/\", \"owner\": \"lucy\", \"title\": \"Example\", \"code\": \"print('hello, world!')\", \"linenos\": true, \"language\": \"python\", \"style\": \"friendly\" }, ... \u4e00\u4e9bAPI\u8def\u5f84\u9700\u8981\u547d\u540d\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u7279\u5b9a\u4ee3\u7801\u7247\u6bb5\u7684\u9ad8\u4eaeHTML\u8868\u793a\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e2aid\u3002 $ coreapi action snippets highlight --param id=1 <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> <html> <head> <title>Example</title> ... \u9a8c\u8bc1\u6211\u4eec\u7684\u5ba2\u6237\u7aef \u5982\u679c\u6211\u4eec\u60f3\u8981\u521b\u5efa\uff0c\u7f16\u8f91\u548c\u5220\u9664\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u6709\u6548\u6027\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u4f7f\u7528\u57fa\u672c\u7684auth\u3002 \u8bf7\u786e\u4fdd\u4f7f\u7528\u5b9e\u9645\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u66ff\u6362\u4e0b\u9762\u7684 <username> \u548c <password> \u3002 $ coreapi credentials add 127.0.0.1 <username>:<password> --auth basic Added credentials 127.0.0.1 \"Basic <...>\" \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u518d\u6b21\u63d0\u53d6\u6982\u8981\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u770b\u5230\u4e00\u7ec4\u53ef\u7528\u7684\u4ea4\u4e92\u3002 $ coreapi reload Pastebin API \"http://127.0.0.1:8000/schema/\"> snippets: { create(code, [title], [linenos], [language], [style]) delete(id) highlight(id) list() partial_update(id, [title], [code], [linenos], [language], [style]) read(id) update(id, code, [title], [linenos], [language], [style]) } users: { list() read(id) } \u6211\u4eec\u73b0\u5728\u80fd\u591f\u4e0e\u8fd9\u4e9b\u8def\u5f84\u884c\u4ea4\u4e92\u3002\u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ee3\u7801\u7247\u6bb5: $ coreapi action snippets create --param title=\"Example\" --param code=\"print('hello, world')\" { \"url\": \"http://127.0.0.1:8000/snippets/7/\", \"id\": 7, \"highlight\": \"http://127.0.0.1:8000/snippets/7/highlight/\", \"owner\": \"lucy\", \"title\": \"Example\", \"code\": \"print('hello, world')\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } \u7136\u540e\u5220\u9664\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff1a $ coreapi action snippets delete --param id=7 \u9664\u4e86\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\uff0c\u5f00\u53d1\u4eba\u5458\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5ba2\u6237\u7aef\u5e93\u4e0e\u4f60\u7684API\u8fdb\u884c\u4ea4\u4e92\u3002Python\u5ba2\u6237\u7aef\u5e93\u662f\u7b2c\u4e00\u4e2a\u53ef\u7528\u7684\u5e93\uff0c\u5e76\u4e14\u8ba1\u5212\u5373\u5c06\u53d1\u5e03\u4e00\u4e2aJavascript\u5ba2\u6237\u7aef\u5e93\u3002 \u6709\u5173\u5b9a\u5236\u6a21\u5f0f\u751f\u6210\u548c\u4f7f\u7528Core API\u5ba2\u6237\u7aef\u5e93\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u60a8\u9700\u8981\u53c2\u8003\u5b8c\u6574\u7684\u6587\u6863\u3002 \u56de\u987e\u6211\u4eec\u6240\u505a\u7684 \u4f7f\u7528\u975e\u5e38\u5c11\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a\u4ee3\u7801\u6536\u96c6\u7cfb\u7edf\u7684webAPI\uff0c\u5b83\u662f\u5b8c\u5168\u7684\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684\uff0c\u5305\u62ec\u4e00\u4e2a\u6982\u8981\u9a71\u52a8\u7684\u5ba2\u6237\u7aef\u5e93\u548c\u5e26\u6709\u8eab\u4efd\u9a8c\u8bc1\u3001\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6743\u9650\u63a7\u5236\u548c\u591a\u4e2a\u6e32\u67d3\u5668\u683c\u5f0f\u652f\u6301\u3002 \u6211\u4eec\u5df2\u7ecf\u8d70\u8fc7\u4e86\u8bbe\u8ba1\u8fc7\u7a0b\u7684\u6bcf\u4e2a\u6b65\u9aa4\uff0c\u5e76\u4e14\u770b\u5230\u5982\u679c\u6211\u4eec\u9700\u8981\u81ea\u5b9a\u4e49\u4efb\u4f55\u4e1c\u897f\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6309\u90e8\u5c31\u73ed\u7684\u7b80\u5355\u5730\u4f7f\u7528\u5e38\u89c4\u7684Django\u89c6\u56fe\u5b9e\u73b0\u3002 \u4f60\u53ef\u4ee5\u67e5\u770bGitHub\u4e0a\u7684 \u6700\u7ec8\u6559\u7a0b\u4ee3\u7801 \uff0c\u6216\u8005\u5c1d\u8bd5\u4e0b \u6c99\u7bb1\u4e2d \u7684\u5b9e\u4f8b\u3002 \u8d8a\u6765\u8d8a\u6210\u529f \u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u6211\u4eec\u7684\u6559\u7a0b\u3002\u5982\u679c\u4f60\u60f3\u8981\u66f4\u591a\u5730\u53c2\u4e0e\u5230REST\u6846\u67b6\u9879\u76ee\u4e2d\uff0c\u4ee5\u4e0b\u662f\u4f60\u53ef\u4ee5\u5f00\u59cb\u7684\u51e0\u4e2a\u5730\u65b9\uff1a \u901a\u8fc7\u5ba1\u67e5\u548c\u63d0\u4ea4\u95ee\u9898\uff0c\u5e76pull requests\uff0c\u4e3a GitHub \u505a\u51fa\u8d21\u732e\u3002 \u52a0\u5165 REST framework \u8ba8\u8bba\u7ec4 \uff0c\u5e76\u5e2e\u52a9\u6784\u5efa\u793e\u533a\u3002 \u5728Twitter\u6210\u4e3a \u4f5c\u8005 \u7684\u7c89\u4e1d\uff0c\u5e76\u6253\u4e2a\u62db\u547c\u3002 \u73b0\u5728\u5c31\u53bb\u6784\u5efa\u975e\u5e38\u68d2\u7684\u4e1c\u897f\u5427\u3002","title":"7 - Schemas and client libraries"},{"location":"tutorial/7-schemas-and-client-libraries_zh/#tutorial-7","text":"\u6982\u8981\u662f\u4e00\u79cd\u673a\u5668\u53ef\u8bfb\u6587\u6863\uff0c\u7528\u4e8e\u63cf\u8ff0\u53ef\u7528\u7684API\u8def\u5f84\uff0c\u5176URLS\u4ee5\u53ca\u5b83\u4eec\u652f\u6301\u7684\u64cd\u4f5c\u3002 \u6982\u8981\u53ef\u4ee5\u662f\u81ea\u52a8\u751f\u6210\u6587\u6863\u7684\u6709\u7528\u5de5\u5177\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u9a71\u52a8\u53ef\u4ee5\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u7684\u52a8\u6001\u5ba2\u6237\u7aef\u5e93\u3002","title":"Tutorial 7: \u6982\u8981\u548c\u5ba2\u6237\u7aef\u5e93"},{"location":"tutorial/7-schemas-and-client-libraries_zh/#core-api","text":"\u4e3a\u4e86\u63d0\u4f9b\u6982\u8981\u652f\u6301REST\u6846\u67b6\u4f7f\u7528 Core API \u3002 Core API\u662f\u7528\u4e8e\u63cf\u8ff0API\u7684\u6587\u6863\u89c4\u8303\u3002\u5b83\u7528\u4e8e\u63d0\u4f9b\u53ef\u7528\u8def\u5f84\u7684\u5185\u90e8\u8868\u793a\u5f62\u5f0f\u548cAPI\u516c\u5f00\u7684\u53ef\u80fd\u7684\u4ea4\u4e92\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u6216\u5ba2\u6237\u7aef\u3002 \u5f53\u4f7f\u7528\u670d\u52a1\u5668\u7aef\u65f6\uff0ccoreAPI\u5141\u8bb8API\u652f\u6301\u5448\u73b0\u8303\u56f4\u5e7f\u6cdb\u7684\u6982\u8981\u6216\u8d85\u5a92\u4f53\u683c\u5f0f\u3002 \u5f53\u4f7f\u7528\u5ba2\u6237\u7aef\u65f6\uff0c\u6838\u5fc3API\u5141\u8bb8\u52a8\u6001\u9a71\u52a8\u7684\u5ba2\u6237\u7aef\u5e93\uff0c\u5b83\u53ef\u4ee5\u4e0e\u4efb\u4f55\u516c\u5f00\u53d7\u652f\u6301\u7684\u6982\u8981\u6216\u8d85\u5a92\u4f53\u683c\u5f0f\u7684API\u4ea4\u4e92\u3002","title":"Core API"},{"location":"tutorial/7-schemas-and-client-libraries_zh/#_1","text":"REST\u6846\u67b6\u652f\u6301\u660e\u786e\u5b9a\u4e49\u7684\u6982\u8981\u89c6\u56fe\u6216\u81ea\u52a8\u751f\u6210\u7684\u6982\u8981\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u89c6\u56fe\u96c6\u548c\u8def\u7531\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u4f7f\u7528\u81ea\u52a8\u6982\u8981\u751f\u6210\u3002 \u4f60\u9700\u8981\u5b89\u88c5 coreapi python\u5305\u624d\u80fd\u5305\u542bAPI\u6982\u8981\u3002 $ pip install coreapi \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728URL\u914d\u7f6e\u4e2d\u5305\u542b\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684\u6982\u8981\u89c6\u56fe\u6765\u4e3aAPI\u6dfb\u52a0\u6982\u8981\u3002 from rest_framework.schemas import get_schema_view schema_view = get_schema_view(title='Pastebin API') urlpatterns = [ url('^schema/$', schema_view), ... ] \u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95eeAPI\u6839\u8def\u5f84\uff0c\u90a3\u4e48\u4f60\u73b0\u5728\u5e94\u8be5\u53ef\u4ee5\u770b\u5230 corejson \u8868\u793a\u5f62\u5f0f\u662f\u4e00\u4e2a\u53ef\u7528\u9009\u9879\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728 Accept \u6807\u5934\u4e2d\u6307\u5b9a\u6240\u9700\u7684\u5185\u5bb9\u7c7b\u578b\u4ece\u547d\u4ee4\u884c\u8bf7\u6c42\u6982\u8981\u3002 $ http http://127.0.0.1:8000/schema/ Accept:application/coreapi+json HTTP/1.0 200 OK Allow: GET, HEAD, OPTIONS Content-Type: application/coreapi+json { \"_meta\": { \"title\": \"Pastebin API\" }, \"_type\": \"document\", ... \u9ed8\u8ba4\u8f93\u51fa\u6837\u5f0f\u662f\u4f7f\u7528 Core JSON \u7f16\u7801\u3002 \u8fd8\u652f\u6301\u5176\u4ed6\u6982\u8981\u683c\u5f0f\uff0c\u5982 Open API \uff08\u4ee5\u524d\u53ebSwagger\uff09\u3002","title":"\u6dfb\u52a0\u6982\u8981"},{"location":"tutorial/7-schemas-and-client-libraries_zh/#_2","text":"\u73b0\u5728\u6211\u4eec\u7684API\u66b4\u9732\u4e86\u4e00\u4e2a\u6982\u8981\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u52a8\u6001\u7684\u5ba2\u6237\u7aef\u5e93\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u3002\u4e3a\u4e86\u6f14\u793a\u8fd9\u4e2a\uff0c\u6211\u4eec\u6765\u4f7f\u7528Core API\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u3002 \u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u4f5c\u4e3a\u4e00\u4e2a coreapi-cli \u5305\u63d0\u4f9b\uff1a $ pip install coreapi-cli \u73b0\u5728\u68c0\u67e5\u5b83\u5728\u547d\u4ee4\u884c\u4e0a\u662f\u5426\u53ef\u7528... $ coreapi Usage: coreapi [OPTIONS] COMMAND [ARGS]... Command line client for interacting with CoreAPI services. Visit http://www.coreapi.org for more information. Options: --version Display the package version number. --help Show this message and exit. Commands: ... \u9996\u5148\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u52a0\u8f7dAPI\u6982\u8981\u3002 $ coreapi get http://127.0.0.1:8000/schema/ <Pastebin API \"http://127.0.0.1:8000/schema/\"> snippets: { highlight(id) list() read(id) } users: { list() read(id) } \u6211\u4eec\u8fd8\u6ca1\u6709\u8ba4\u8bc1\uff0c\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u53ea\u80fd\u770b\u5230\u53ea\u8bfb\u8def\u5f84\uff0c\u8fd9\u4e0e\u6211\u4eec\u8bbe\u7f6e\u7684API\u6743\u9650\u662f\u4e00\u81f4\u7684\u3002 \u6211\u4eec\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\uff0c\u5c1d\u8bd5\u5217\u51fa\u73b0\u6709\u7684\u4ee3\u7801\u7247\u6bb5\uff1a $ coreapi action snippets list [ { \"url\": \"http://127.0.0.1:8000/snippets/1/\", \"id\": 1, \"highlight\": \"http://127.0.0.1:8000/snippets/1/highlight/\", \"owner\": \"lucy\", \"title\": \"Example\", \"code\": \"print('hello, world!')\", \"linenos\": true, \"language\": \"python\", \"style\": \"friendly\" }, ... \u4e00\u4e9bAPI\u8def\u5f84\u9700\u8981\u547d\u540d\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u7279\u5b9a\u4ee3\u7801\u7247\u6bb5\u7684\u9ad8\u4eaeHTML\u8868\u793a\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e2aid\u3002 $ coreapi action snippets highlight --param id=1 <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> <html> <head> <title>Example</title> ...","title":"\u4f7f\u7528\u547d\u4ee4\u884c\u5ba2\u6237\u7aef"},{"location":"tutorial/7-schemas-and-client-libraries_zh/#_3","text":"\u5982\u679c\u6211\u4eec\u60f3\u8981\u521b\u5efa\uff0c\u7f16\u8f91\u548c\u5220\u9664\u4ee3\u7801\u7247\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u6709\u6548\u6027\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u4f7f\u7528\u57fa\u672c\u7684auth\u3002 \u8bf7\u786e\u4fdd\u4f7f\u7528\u5b9e\u9645\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u66ff\u6362\u4e0b\u9762\u7684 <username> \u548c <password> \u3002 $ coreapi credentials add 127.0.0.1 <username>:<password> --auth basic Added credentials 127.0.0.1 \"Basic <...>\" \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u518d\u6b21\u63d0\u53d6\u6982\u8981\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u770b\u5230\u4e00\u7ec4\u53ef\u7528\u7684\u4ea4\u4e92\u3002 $ coreapi reload Pastebin API \"http://127.0.0.1:8000/schema/\"> snippets: { create(code, [title], [linenos], [language], [style]) delete(id) highlight(id) list() partial_update(id, [title], [code], [linenos], [language], [style]) read(id) update(id, code, [title], [linenos], [language], [style]) } users: { list() read(id) } \u6211\u4eec\u73b0\u5728\u80fd\u591f\u4e0e\u8fd9\u4e9b\u8def\u5f84\u884c\u4ea4\u4e92\u3002\u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ee3\u7801\u7247\u6bb5: $ coreapi action snippets create --param title=\"Example\" --param code=\"print('hello, world')\" { \"url\": \"http://127.0.0.1:8000/snippets/7/\", \"id\": 7, \"highlight\": \"http://127.0.0.1:8000/snippets/7/highlight/\", \"owner\": \"lucy\", \"title\": \"Example\", \"code\": \"print('hello, world')\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\" } \u7136\u540e\u5220\u9664\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff1a $ coreapi action snippets delete --param id=7 \u9664\u4e86\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\uff0c\u5f00\u53d1\u4eba\u5458\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5ba2\u6237\u7aef\u5e93\u4e0e\u4f60\u7684API\u8fdb\u884c\u4ea4\u4e92\u3002Python\u5ba2\u6237\u7aef\u5e93\u662f\u7b2c\u4e00\u4e2a\u53ef\u7528\u7684\u5e93\uff0c\u5e76\u4e14\u8ba1\u5212\u5373\u5c06\u53d1\u5e03\u4e00\u4e2aJavascript\u5ba2\u6237\u7aef\u5e93\u3002 \u6709\u5173\u5b9a\u5236\u6a21\u5f0f\u751f\u6210\u548c\u4f7f\u7528Core API\u5ba2\u6237\u7aef\u5e93\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u60a8\u9700\u8981\u53c2\u8003\u5b8c\u6574\u7684\u6587\u6863\u3002","title":"\u9a8c\u8bc1\u6211\u4eec\u7684\u5ba2\u6237\u7aef"},{"location":"tutorial/7-schemas-and-client-libraries_zh/#_4","text":"\u4f7f\u7528\u975e\u5e38\u5c11\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e00\u4e2a\u4ee3\u7801\u6536\u96c6\u7cfb\u7edf\u7684webAPI\uff0c\u5b83\u662f\u5b8c\u5168\u7684\u6d4f\u89c8\u5668\u53ef\u6d4f\u89c8\u7684\uff0c\u5305\u62ec\u4e00\u4e2a\u6982\u8981\u9a71\u52a8\u7684\u5ba2\u6237\u7aef\u5e93\u548c\u5e26\u6709\u8eab\u4efd\u9a8c\u8bc1\u3001\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6743\u9650\u63a7\u5236\u548c\u591a\u4e2a\u6e32\u67d3\u5668\u683c\u5f0f\u652f\u6301\u3002 \u6211\u4eec\u5df2\u7ecf\u8d70\u8fc7\u4e86\u8bbe\u8ba1\u8fc7\u7a0b\u7684\u6bcf\u4e2a\u6b65\u9aa4\uff0c\u5e76\u4e14\u770b\u5230\u5982\u679c\u6211\u4eec\u9700\u8981\u81ea\u5b9a\u4e49\u4efb\u4f55\u4e1c\u897f\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u6309\u90e8\u5c31\u73ed\u7684\u7b80\u5355\u5730\u4f7f\u7528\u5e38\u89c4\u7684Django\u89c6\u56fe\u5b9e\u73b0\u3002 \u4f60\u53ef\u4ee5\u67e5\u770bGitHub\u4e0a\u7684 \u6700\u7ec8\u6559\u7a0b\u4ee3\u7801 \uff0c\u6216\u8005\u5c1d\u8bd5\u4e0b \u6c99\u7bb1\u4e2d \u7684\u5b9e\u4f8b\u3002","title":"\u56de\u987e\u6211\u4eec\u6240\u505a\u7684"},{"location":"tutorial/7-schemas-and-client-libraries_zh/#_5","text":"\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u6211\u4eec\u7684\u6559\u7a0b\u3002\u5982\u679c\u4f60\u60f3\u8981\u66f4\u591a\u5730\u53c2\u4e0e\u5230REST\u6846\u67b6\u9879\u76ee\u4e2d\uff0c\u4ee5\u4e0b\u662f\u4f60\u53ef\u4ee5\u5f00\u59cb\u7684\u51e0\u4e2a\u5730\u65b9\uff1a \u901a\u8fc7\u5ba1\u67e5\u548c\u63d0\u4ea4\u95ee\u9898\uff0c\u5e76pull requests\uff0c\u4e3a GitHub \u505a\u51fa\u8d21\u732e\u3002 \u52a0\u5165 REST framework \u8ba8\u8bba\u7ec4 \uff0c\u5e76\u5e2e\u52a9\u6784\u5efa\u793e\u533a\u3002 \u5728Twitter\u6210\u4e3a \u4f5c\u8005 \u7684\u7c89\u4e1d\uff0c\u5e76\u6253\u4e2a\u62db\u547c\u3002 \u73b0\u5728\u5c31\u53bb\u6784\u5efa\u975e\u5e38\u68d2\u7684\u4e1c\u897f\u5427\u3002","title":"\u8d8a\u6765\u8d8a\u6210\u529f"},{"location":"tutorial/quickstart/","text":"Quickstart We're going to create a simple API to allow admin users to view and edit the users and groups in the system. Project setup Create a new Django project named tutorial , then start a new app called quickstart . # Create the project directory mkdir tutorial cd tutorial # Create a virtual environment to isolate our package dependencies locally python3 -m venv env source env/bin/activate # On Windows use `env\\Scripts\\activate` # Install Django and Django REST framework into the virtual environment pip install django pip install djangorestframework # Set up a new project with a single application django-admin startproject tutorial . # Note the trailing '.' character cd tutorial django-admin startapp quickstart cd .. The project layout should look like: $ pwd <some path>/tutorial $ find . . ./manage.py ./tutorial ./tutorial/__init__.py ./tutorial/quickstart ./tutorial/quickstart/__init__.py ./tutorial/quickstart/admin.py ./tutorial/quickstart/apps.py ./tutorial/quickstart/migrations ./tutorial/quickstart/migrations/__init__.py ./tutorial/quickstart/models.py ./tutorial/quickstart/tests.py ./tutorial/quickstart/views.py ./tutorial/settings.py ./tutorial/urls.py ./tutorial/wsgi.py It may look unusual that the application has been created within the project directory. Using the project's namespace avoids name clashes with external modules (a topic that goes outside the scope of the quickstart). Now sync your database for the first time: python manage.py migrate We'll also create an initial user named admin with a password of password123 . We'll authenticate as that user later in our example. python manage.py createsuperuser --email admin@example.com --username admin Once you've set up a database and the initial user is created and ready to go, open up the app's directory and we'll get coding... Serializers First up we're going to define some serializers. Let's create a new module named tutorial/quickstart/serializers.py that we'll use for our data representations. from django.contrib.auth.models import User, Group from rest_framework import serializers class UserSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = User fields = ['url', 'username', 'email', 'groups'] class GroupSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Group fields = ['url', 'name'] Notice that we're using hyperlinked relations in this case with HyperlinkedModelSerializer . You can also use primary key and various other relationships, but hyperlinking is good RESTful design. Views Right, we'd better write some views then. Open tutorial/quickstart/views.py and get typing. from django.contrib.auth.models import User, Group from rest_framework import viewsets from rest_framework import permissions from tutorial.quickstart.serializers import UserSerializer, GroupSerializer class UserViewSet(viewsets.ModelViewSet): \"\"\" API endpoint that allows users to be viewed or edited. \"\"\" queryset = User.objects.all().order_by('-date_joined') serializer_class = UserSerializer permission_classes = [permissions.IsAuthenticated] class GroupViewSet(viewsets.ModelViewSet): \"\"\" API endpoint that allows groups to be viewed or edited. \"\"\" queryset = Group.objects.all() serializer_class = GroupSerializer permission_classes = [permissions.IsAuthenticated] Rather than write multiple views we're grouping together all the common behavior into classes called ViewSets . We can easily break these down into individual views if we need to, but using viewsets keeps the view logic nicely organized as well as being very concise. URLs Okay, now let's wire up the API URLs. On to tutorial/urls.py ... from django.urls import include, path from rest_framework import routers from tutorial.quickstart import views router = routers.DefaultRouter() router.register(r'users', views.UserViewSet) router.register(r'groups', views.GroupViewSet) # Wire up our API using automatic URL routing. # Additionally, we include login URLs for the browsable API. urlpatterns = [ path('', include(router.urls)), path('api-auth/', include('rest_framework.urls', namespace='rest_framework')) ] Because we're using viewsets instead of views, we can automatically generate the URL conf for our API, by simply registering the viewsets with a router class. Again, if we need more control over the API URLs we can simply drop down to using regular class-based views, and writing the URL conf explicitly. Finally, we're including default login and logout views for use with the browsable API. That's optional, but useful if your API requires authentication and you want to use the browsable API. Pagination Pagination allows you to control how many objects per page are returned. To enable it add the following lines to tutorial/settings.py REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 10 } Settings Add 'rest_framework' to INSTALLED_APPS . The settings module will be in tutorial/settings.py INSTALLED_APPS = [ ... 'rest_framework', ] Okay, we're done. Testing our API We're now ready to test the API we've built. Let's fire up the server from the command line. python manage.py runserver We can now access our API, both from the command-line, using tools like curl ... bash: curl -H 'Accept: application/json; indent=4' -u admin:password123 http://127.0.0.1:8000/users/ { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"email\": \"admin@example.com\", \"groups\": [], \"url\": \"http://127.0.0.1:8000/users/1/\", \"username\": \"admin\" }, { \"email\": \"tom@example.com\", \"groups\": [ ], \"url\": \"http://127.0.0.1:8000/users/2/\", \"username\": \"tom\" } ] } Or using the httpie , command line tool... bash: http -a admin:password123 http://127.0.0.1:8000/users/ HTTP/1.1 200 OK ... { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"email\": \"admin@example.com\", \"groups\": [], \"url\": \"http://localhost:8000/users/1/\", \"username\": \"paul\" }, { \"email\": \"tom@example.com\", \"groups\": [ ], \"url\": \"http://127.0.0.1:8000/users/2/\", \"username\": \"tom\" } ] } Or directly through the browser, by going to the URL http://127.0.0.1:8000/users/ ... If you're working through the browser, make sure to login using the control in the top right corner. Great, that was easy! If you want to get a more in depth understanding of how REST framework fits together head on over to the tutorial , or start browsing the API guide .","title":"Quickstart"},{"location":"tutorial/quickstart/#quickstart","text":"We're going to create a simple API to allow admin users to view and edit the users and groups in the system.","title":"Quickstart"},{"location":"tutorial/quickstart/#project-setup","text":"Create a new Django project named tutorial , then start a new app called quickstart . # Create the project directory mkdir tutorial cd tutorial # Create a virtual environment to isolate our package dependencies locally python3 -m venv env source env/bin/activate # On Windows use `env\\Scripts\\activate` # Install Django and Django REST framework into the virtual environment pip install django pip install djangorestframework # Set up a new project with a single application django-admin startproject tutorial . # Note the trailing '.' character cd tutorial django-admin startapp quickstart cd .. The project layout should look like: $ pwd <some path>/tutorial $ find . . ./manage.py ./tutorial ./tutorial/__init__.py ./tutorial/quickstart ./tutorial/quickstart/__init__.py ./tutorial/quickstart/admin.py ./tutorial/quickstart/apps.py ./tutorial/quickstart/migrations ./tutorial/quickstart/migrations/__init__.py ./tutorial/quickstart/models.py ./tutorial/quickstart/tests.py ./tutorial/quickstart/views.py ./tutorial/settings.py ./tutorial/urls.py ./tutorial/wsgi.py It may look unusual that the application has been created within the project directory. Using the project's namespace avoids name clashes with external modules (a topic that goes outside the scope of the quickstart). Now sync your database for the first time: python manage.py migrate We'll also create an initial user named admin with a password of password123 . We'll authenticate as that user later in our example. python manage.py createsuperuser --email admin@example.com --username admin Once you've set up a database and the initial user is created and ready to go, open up the app's directory and we'll get coding...","title":"Project setup"},{"location":"tutorial/quickstart/#serializers","text":"First up we're going to define some serializers. Let's create a new module named tutorial/quickstart/serializers.py that we'll use for our data representations. from django.contrib.auth.models import User, Group from rest_framework import serializers class UserSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = User fields = ['url', 'username', 'email', 'groups'] class GroupSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Group fields = ['url', 'name'] Notice that we're using hyperlinked relations in this case with HyperlinkedModelSerializer . You can also use primary key and various other relationships, but hyperlinking is good RESTful design.","title":"Serializers"},{"location":"tutorial/quickstart/#views","text":"Right, we'd better write some views then. Open tutorial/quickstart/views.py and get typing. from django.contrib.auth.models import User, Group from rest_framework import viewsets from rest_framework import permissions from tutorial.quickstart.serializers import UserSerializer, GroupSerializer class UserViewSet(viewsets.ModelViewSet): \"\"\" API endpoint that allows users to be viewed or edited. \"\"\" queryset = User.objects.all().order_by('-date_joined') serializer_class = UserSerializer permission_classes = [permissions.IsAuthenticated] class GroupViewSet(viewsets.ModelViewSet): \"\"\" API endpoint that allows groups to be viewed or edited. \"\"\" queryset = Group.objects.all() serializer_class = GroupSerializer permission_classes = [permissions.IsAuthenticated] Rather than write multiple views we're grouping together all the common behavior into classes called ViewSets . We can easily break these down into individual views if we need to, but using viewsets keeps the view logic nicely organized as well as being very concise.","title":"Views"},{"location":"tutorial/quickstart/#urls","text":"Okay, now let's wire up the API URLs. On to tutorial/urls.py ... from django.urls import include, path from rest_framework import routers from tutorial.quickstart import views router = routers.DefaultRouter() router.register(r'users', views.UserViewSet) router.register(r'groups', views.GroupViewSet) # Wire up our API using automatic URL routing. # Additionally, we include login URLs for the browsable API. urlpatterns = [ path('', include(router.urls)), path('api-auth/', include('rest_framework.urls', namespace='rest_framework')) ] Because we're using viewsets instead of views, we can automatically generate the URL conf for our API, by simply registering the viewsets with a router class. Again, if we need more control over the API URLs we can simply drop down to using regular class-based views, and writing the URL conf explicitly. Finally, we're including default login and logout views for use with the browsable API. That's optional, but useful if your API requires authentication and you want to use the browsable API.","title":"URLs"},{"location":"tutorial/quickstart/#pagination","text":"Pagination allows you to control how many objects per page are returned. To enable it add the following lines to tutorial/settings.py REST_FRAMEWORK = { 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 10 }","title":"Pagination"},{"location":"tutorial/quickstart/#settings","text":"Add 'rest_framework' to INSTALLED_APPS . The settings module will be in tutorial/settings.py INSTALLED_APPS = [ ... 'rest_framework', ] Okay, we're done.","title":"Settings"},{"location":"tutorial/quickstart/#testing-our-api","text":"We're now ready to test the API we've built. Let's fire up the server from the command line. python manage.py runserver We can now access our API, both from the command-line, using tools like curl ... bash: curl -H 'Accept: application/json; indent=4' -u admin:password123 http://127.0.0.1:8000/users/ { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"email\": \"admin@example.com\", \"groups\": [], \"url\": \"http://127.0.0.1:8000/users/1/\", \"username\": \"admin\" }, { \"email\": \"tom@example.com\", \"groups\": [ ], \"url\": \"http://127.0.0.1:8000/users/2/\", \"username\": \"tom\" } ] } Or using the httpie , command line tool... bash: http -a admin:password123 http://127.0.0.1:8000/users/ HTTP/1.1 200 OK ... { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"email\": \"admin@example.com\", \"groups\": [], \"url\": \"http://localhost:8000/users/1/\", \"username\": \"paul\" }, { \"email\": \"tom@example.com\", \"groups\": [ ], \"url\": \"http://127.0.0.1:8000/users/2/\", \"username\": \"tom\" } ] } Or directly through the browser, by going to the URL http://127.0.0.1:8000/users/ ... If you're working through the browser, make sure to login using the control in the top right corner. Great, that was easy! If you want to get a more in depth understanding of how REST framework fits together head on over to the tutorial , or start browsing the API guide .","title":"Testing our API"},{"location":"tutorial/quickstart_zh/","text":"\u5feb\u901f\u5165\u95e8 \u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5141\u8bb8\u7ba1\u7406\u5458\u7528\u6237\u67e5\u770b\u548c\u7f16\u8f91\u7cfb\u7edf\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7684API\u3002 \u9879\u76ee\u8bbe\u7f6e \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a tutorial \u7684\u65b0django\u9879\u76ee\uff0c\u7136\u540e\u542f\u52a8\u4e00\u4e2a\u540d\u4e3a quickstart \u7684\u65b0app\u3002 # \u521b\u5efa\u9879\u76ee\u76ee\u5f55 mkdir tutorial cd tutorial # \u521b\u5efa\u4e00\u4e2avirtualenv\u6765\u9694\u79bb\u6211\u4eec\u672c\u5730\u7684\u5305\u4f9d\u8d56\u5173\u7cfb virtualenv env source env/bin/activate # \u5728Windows\u4e0b\u4f7f\u7528 `env\\Scripts\\activate` # \u5728\u521b\u5efa\u7684\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5 Django \u548c Django REST framework pip install django pip install djangorestframework # \u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u548c\u4e00\u4e2a\u5355\u4e2a\u5e94\u7528 django-admin.py startproject tutorial . # \u6ce8\u610f\u7ed3\u5c3e\u7684'.'\u7b26\u53f7 cd tutorial django-admin.py startapp quickstart cd .. \u73b0\u5728\u7b2c\u4e00\u6b21\u540c\u6b65\u4f60\u7684\u6570\u636e\u5e93\uff1a python manage.py migrate \u6211\u4eec\u8fd8\u8981\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a admin \u7684\u521d\u59cb\u7528\u6237\uff0c\u5bc6\u7801\u4e3a password123 \u3002\u6211\u4eec\u7a0d\u540e\u5c06\u5728\u8be5\u793a\u4f8b\u4e2d\u9a8c\u8bc1\u8be5\u7528\u6237\u3002 python manage.py createsuperuser \u7b49\u4f60\u5efa\u7acb\u597d\u4e00\u4e2a\u6570\u636e\u5e93\u548c\u521d\u59cb\u7528\u6237\uff0c\u5e76\u51c6\u5907\u597d\u5f00\u59cb\u3002\u6253\u5f00\u5e94\u7528\u7a0b\u5e8f\u7684\u76ee\u5f55\uff0c\u6211\u4eec\u5c31\u8981\u5f00\u59cb\u7f16\u7801\u4e86... Serializers \u9996\u5148\u6211\u4eec\u8981\u5b9a\u4e49\u4e00\u4e9b\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a tutorial/quickstart/serializers.py \u7684\u6587\u4ef6\uff0c\u6765\u7528\u4f5c\u6211\u4eec\u7684\u6570\u636e\u8868\u793a\u3002 from django.contrib.auth.models import User, Group from rest_framework import serializers class UserSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = User fields = ('url', 'username', 'email', 'groups') class GroupSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Group fields = ('url', 'name') \u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u7528\u5230\u4e86\u8d85\u94fe\u63a5\u5173\u7cfb\uff0c\u4f7f\u7528 HyperlinkedModelSerializer \u3002\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e3b\u952e\u548c\u5404\u79cd\u5176\u4ed6\u5173\u7cfb\uff0c\u4f46\u8d85\u94fe\u63a5\u662f\u597d\u7684RESTful\u8bbe\u8ba1\u3002 Views \u597d\u4e86\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u518d\u5199\u4e00\u4e9b\u89c6\u56fe\u3002\u6253\u5f00 tutorial/quickstart/views.py \u6587\u4ef6\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002 from django.contrib.auth.models import User, Group from rest_framework import viewsets from tutorial.quickstart.serializers import UserSerializer, GroupSerializer class UserViewSet(viewsets.ModelViewSet): \"\"\" \u5141\u8bb8\u7528\u6237\u67e5\u770b\u6216\u7f16\u8f91\u7684API\u8def\u5f84\u3002 \"\"\" queryset = User.objects.all().order_by('-date_joined') serializer_class = UserSerializer class GroupViewSet(viewsets.ModelViewSet): \"\"\" \u5141\u8bb8\u7ec4\u67e5\u770b\u6216\u7f16\u8f91\u7684API\u8def\u5f84\u3002 \"\"\" queryset = Group.objects.all() serializer_class = GroupSerializer \u4e0d\u518d\u5199\u591a\u4e2a\u89c6\u56fe\uff0c\u6211\u4eec\u5c06\u6240\u6709\u5e38\u89c1\u884c\u4e3a\u5206\u7ec4\u5199\u5230\u53eb ViewSets \u7684\u7c7b\u4e2d\u3002 \u5982\u679c\u6211\u4eec\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8fd9\u4e9b\u7ec6\u8282\u5206\u89e3\u4e3a\u5355\u4e2a\u89c6\u56fe\uff0c\u4f46\u662f\u4f7f\u7528viewsets\u53ef\u4ee5\u4f7f\u89c6\u56fe\u903b\u8f91\u7ec4\u7ec7\u826f\u597d\uff0c\u5e76\u4e14\u975e\u5e38\u7b80\u6d01\u3002 URLs \u597d\u7684\uff0c\u73b0\u5728\u6211\u4eec\u5728 tutorial/urls.py \u4e2d\u5f00\u59cb\u5199\u8fde\u63a5API\u7684URLs\u3002 from django.conf.urls import url, include from rest_framework import routers from tutorial.quickstart import views router = routers.DefaultRouter() router.register(r'users', views.UserViewSet) router.register(r'groups', views.GroupViewSet) # \u4f7f\u7528\u81ea\u52a8URL\u8def\u7531\u8fde\u63a5\u6211\u4eec\u7684API\u3002 # \u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u5305\u62ec\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8API\u7684\u767b\u5f55URL\u3002 urlpatterns = [ url(r'^', include(router.urls)), url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')) ] \u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662fviewsets\u800c\u4e0d\u662fviews\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u4f7f\u7528\u8def\u7531\u5668\u7c7b\u6ce8\u518c\u89c6\u56fe\u6765\u81ea\u52a8\u751f\u6210API\u7684URL conf\u3002 \u518d\u6b21\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u5bf9API URL\u8fdb\u884c\u66f4\u591a\u7684\u63a7\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u5176\u62c9\u51fa\u6765\u4f7f\u7528\u5e38\u89c4\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5e76\u660e\u786e\u5730\u7f16\u5199URL conf\u3002 \u6700\u540e\uff0c\u6211\u4eec\u5c06\u5305\u62ec\u7528\u4e8e\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\u7684\u9ed8\u8ba4\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe\u3002\u8fd9\u662f\u53ef\u9009\u7684\uff0c\u4f46\u5982\u679c\u60a8\u7684API\u9700\u8981\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4e14\u4f60\u60f3\u8981\u4f7f\u7528\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\uff0c\u90a3\u4e48\u5b83\u4eec\u5f88\u6709\u7528\u3002 Settings \u6211\u4eec\u4e5f\u60f3\u8bbe\u7f6e\u4e00\u4e9b\u5168\u5c40\u8bbe\u7f6e\u3002\u6211\u4eec\u60f3\u6253\u5f00\u5206\u9875\uff0c\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684API\u53ea\u80fd\u7531\u7ba1\u7406\u5458\u4f7f\u7528\u3002\u8bbe\u7f6e\u6a21\u5757\u90fd\u5728 tutorial/settings.py \u4e2d\u3002 INSTALLED_APPS = ( ... 'rest_framework', ) REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.IsAdminUser', ], 'PAGE_SIZE': 10 } \u597d\u4e86\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\u3002 \u6d4b\u8bd5\u6211\u4eec\u7684API \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u6d4b\u8bd5\u6211\u4eec\u6784\u5efa\u7684API\u3002\u6211\u4eec\u4ece\u547d\u4ee4\u884c\u542f\u52a8\u670d\u52a1\u5668\u3002 python manage.py runserver \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u8bbf\u95ee\u6211\u4eec\u7684API\uff0c\u4f7f\u7528\u8bf8\u5982 curl ... bash: curl -H 'Accept: application/json; indent=4' -u admin:password123 http://127.0.0.1:8000/users/ { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"email\": \"admin@example.com\", \"groups\": [], \"url\": \"http://127.0.0.1:8000/users/1/\", \"username\": \"admin\" }, { \"email\": \"tom@example.com\", \"groups\": [ ], \"url\": \"http://127.0.0.1:8000/users/2/\", \"username\": \"tom\" } ] } \u6216\u8005\u4f7f\u7528 httpie \uff0c\u547d\u4ee4\u884c\u5de5\u5177... bash: http -a admin:password123 http://127.0.0.1:8000/users/ HTTP/1.1 200 OK ... { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"email\": \"admin@example.com\", \"groups\": [], \"url\": \"http://localhost:8000/users/1/\", \"username\": \"paul\" }, { \"email\": \"tom@example.com\", \"groups\": [ ], \"url\": \"http://127.0.0.1:8000/users/2/\", \"username\": \"tom\" } ] } \u6216\u76f4\u63a5\u901a\u8fc7\u6d4f\u89c8\u5668\uff0c\u8f6c\u5230URL http://127.0.0.1:8000/users/ ... \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u6d4f\u89c8\u5668\uff0c\u8bf7\u786e\u4fdd\u4f7f\u7528\u53f3\u4e0a\u89d2\u8fdb\u884c\u767b\u5f55\u3002 \u975e\u5e38\u68d2\uff01\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\uff01 \u5982\u679c\u60a8\u60f3\u66f4\u6df1\u5165\u5730\u4e86\u89e3REST framework\u5404\u90e8\u5206\u662f\u5982\u4f55\u914d\u5408\u5728\u4e00\u8d77\u7684\uff0c\u8bf7\u524d\u5f80 \u6559\u7a0b \uff0c\u6216\u8005\u5f00\u59cb\u6d4f\u89c8 API\u6307\u5357 \u3002","title":"Quickstart"},{"location":"tutorial/quickstart_zh/#_1","text":"\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5141\u8bb8\u7ba1\u7406\u5458\u7528\u6237\u67e5\u770b\u548c\u7f16\u8f91\u7cfb\u7edf\u4e2d\u7684\u7528\u6237\u548c\u7ec4\u7684API\u3002","title":"\u5feb\u901f\u5165\u95e8"},{"location":"tutorial/quickstart_zh/#_2","text":"\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a tutorial \u7684\u65b0django\u9879\u76ee\uff0c\u7136\u540e\u542f\u52a8\u4e00\u4e2a\u540d\u4e3a quickstart \u7684\u65b0app\u3002 # \u521b\u5efa\u9879\u76ee\u76ee\u5f55 mkdir tutorial cd tutorial # \u521b\u5efa\u4e00\u4e2avirtualenv\u6765\u9694\u79bb\u6211\u4eec\u672c\u5730\u7684\u5305\u4f9d\u8d56\u5173\u7cfb virtualenv env source env/bin/activate # \u5728Windows\u4e0b\u4f7f\u7528 `env\\Scripts\\activate` # \u5728\u521b\u5efa\u7684\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5 Django \u548c Django REST framework pip install django pip install djangorestframework # \u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u548c\u4e00\u4e2a\u5355\u4e2a\u5e94\u7528 django-admin.py startproject tutorial . # \u6ce8\u610f\u7ed3\u5c3e\u7684'.'\u7b26\u53f7 cd tutorial django-admin.py startapp quickstart cd .. \u73b0\u5728\u7b2c\u4e00\u6b21\u540c\u6b65\u4f60\u7684\u6570\u636e\u5e93\uff1a python manage.py migrate \u6211\u4eec\u8fd8\u8981\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a admin \u7684\u521d\u59cb\u7528\u6237\uff0c\u5bc6\u7801\u4e3a password123 \u3002\u6211\u4eec\u7a0d\u540e\u5c06\u5728\u8be5\u793a\u4f8b\u4e2d\u9a8c\u8bc1\u8be5\u7528\u6237\u3002 python manage.py createsuperuser \u7b49\u4f60\u5efa\u7acb\u597d\u4e00\u4e2a\u6570\u636e\u5e93\u548c\u521d\u59cb\u7528\u6237\uff0c\u5e76\u51c6\u5907\u597d\u5f00\u59cb\u3002\u6253\u5f00\u5e94\u7528\u7a0b\u5e8f\u7684\u76ee\u5f55\uff0c\u6211\u4eec\u5c31\u8981\u5f00\u59cb\u7f16\u7801\u4e86...","title":"\u9879\u76ee\u8bbe\u7f6e"},{"location":"tutorial/quickstart_zh/#serializers","text":"\u9996\u5148\u6211\u4eec\u8981\u5b9a\u4e49\u4e00\u4e9b\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a tutorial/quickstart/serializers.py \u7684\u6587\u4ef6\uff0c\u6765\u7528\u4f5c\u6211\u4eec\u7684\u6570\u636e\u8868\u793a\u3002 from django.contrib.auth.models import User, Group from rest_framework import serializers class UserSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = User fields = ('url', 'username', 'email', 'groups') class GroupSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Group fields = ('url', 'name') \u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u7528\u5230\u4e86\u8d85\u94fe\u63a5\u5173\u7cfb\uff0c\u4f7f\u7528 HyperlinkedModelSerializer \u3002\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e3b\u952e\u548c\u5404\u79cd\u5176\u4ed6\u5173\u7cfb\uff0c\u4f46\u8d85\u94fe\u63a5\u662f\u597d\u7684RESTful\u8bbe\u8ba1\u3002","title":"Serializers"},{"location":"tutorial/quickstart_zh/#views","text":"\u597d\u4e86\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u518d\u5199\u4e00\u4e9b\u89c6\u56fe\u3002\u6253\u5f00 tutorial/quickstart/views.py \u6587\u4ef6\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\u3002 from django.contrib.auth.models import User, Group from rest_framework import viewsets from tutorial.quickstart.serializers import UserSerializer, GroupSerializer class UserViewSet(viewsets.ModelViewSet): \"\"\" \u5141\u8bb8\u7528\u6237\u67e5\u770b\u6216\u7f16\u8f91\u7684API\u8def\u5f84\u3002 \"\"\" queryset = User.objects.all().order_by('-date_joined') serializer_class = UserSerializer class GroupViewSet(viewsets.ModelViewSet): \"\"\" \u5141\u8bb8\u7ec4\u67e5\u770b\u6216\u7f16\u8f91\u7684API\u8def\u5f84\u3002 \"\"\" queryset = Group.objects.all() serializer_class = GroupSerializer \u4e0d\u518d\u5199\u591a\u4e2a\u89c6\u56fe\uff0c\u6211\u4eec\u5c06\u6240\u6709\u5e38\u89c1\u884c\u4e3a\u5206\u7ec4\u5199\u5230\u53eb ViewSets \u7684\u7c7b\u4e2d\u3002 \u5982\u679c\u6211\u4eec\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8fd9\u4e9b\u7ec6\u8282\u5206\u89e3\u4e3a\u5355\u4e2a\u89c6\u56fe\uff0c\u4f46\u662f\u4f7f\u7528viewsets\u53ef\u4ee5\u4f7f\u89c6\u56fe\u903b\u8f91\u7ec4\u7ec7\u826f\u597d\uff0c\u5e76\u4e14\u975e\u5e38\u7b80\u6d01\u3002","title":"Views"},{"location":"tutorial/quickstart_zh/#urls","text":"\u597d\u7684\uff0c\u73b0\u5728\u6211\u4eec\u5728 tutorial/urls.py \u4e2d\u5f00\u59cb\u5199\u8fde\u63a5API\u7684URLs\u3002 from django.conf.urls import url, include from rest_framework import routers from tutorial.quickstart import views router = routers.DefaultRouter() router.register(r'users', views.UserViewSet) router.register(r'groups', views.GroupViewSet) # \u4f7f\u7528\u81ea\u52a8URL\u8def\u7531\u8fde\u63a5\u6211\u4eec\u7684API\u3002 # \u53e6\u5916\uff0c\u6211\u4eec\u8fd8\u5305\u62ec\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8API\u7684\u767b\u5f55URL\u3002 urlpatterns = [ url(r'^', include(router.urls)), url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')) ] \u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662fviewsets\u800c\u4e0d\u662fviews\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u4f7f\u7528\u8def\u7531\u5668\u7c7b\u6ce8\u518c\u89c6\u56fe\u6765\u81ea\u52a8\u751f\u6210API\u7684URL conf\u3002 \u518d\u6b21\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u5bf9API URL\u8fdb\u884c\u66f4\u591a\u7684\u63a7\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u5176\u62c9\u51fa\u6765\u4f7f\u7528\u5e38\u89c4\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\uff0c\u5e76\u660e\u786e\u5730\u7f16\u5199URL conf\u3002 \u6700\u540e\uff0c\u6211\u4eec\u5c06\u5305\u62ec\u7528\u4e8e\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\u7684\u9ed8\u8ba4\u767b\u5f55\u548c\u6ce8\u9500\u89c6\u56fe\u3002\u8fd9\u662f\u53ef\u9009\u7684\uff0c\u4f46\u5982\u679c\u60a8\u7684API\u9700\u8981\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u4e14\u4f60\u60f3\u8981\u4f7f\u7528\u652f\u6301\u6d4f\u89c8\u5668\u6d4f\u89c8\u7684API\uff0c\u90a3\u4e48\u5b83\u4eec\u5f88\u6709\u7528\u3002","title":"URLs"},{"location":"tutorial/quickstart_zh/#settings","text":"\u6211\u4eec\u4e5f\u60f3\u8bbe\u7f6e\u4e00\u4e9b\u5168\u5c40\u8bbe\u7f6e\u3002\u6211\u4eec\u60f3\u6253\u5f00\u5206\u9875\uff0c\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684API\u53ea\u80fd\u7531\u7ba1\u7406\u5458\u4f7f\u7528\u3002\u8bbe\u7f6e\u6a21\u5757\u90fd\u5728 tutorial/settings.py \u4e2d\u3002 INSTALLED_APPS = ( ... 'rest_framework', ) REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.IsAdminUser', ], 'PAGE_SIZE': 10 } \u597d\u4e86\uff0c\u6211\u4eec\u5b8c\u6210\u4e86\u3002","title":"Settings"},{"location":"tutorial/quickstart_zh/#api","text":"\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u6d4b\u8bd5\u6211\u4eec\u6784\u5efa\u7684API\u3002\u6211\u4eec\u4ece\u547d\u4ee4\u884c\u542f\u52a8\u670d\u52a1\u5668\u3002 python manage.py runserver \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u8bbf\u95ee\u6211\u4eec\u7684API\uff0c\u4f7f\u7528\u8bf8\u5982 curl ... bash: curl -H 'Accept: application/json; indent=4' -u admin:password123 http://127.0.0.1:8000/users/ { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"email\": \"admin@example.com\", \"groups\": [], \"url\": \"http://127.0.0.1:8000/users/1/\", \"username\": \"admin\" }, { \"email\": \"tom@example.com\", \"groups\": [ ], \"url\": \"http://127.0.0.1:8000/users/2/\", \"username\": \"tom\" } ] } \u6216\u8005\u4f7f\u7528 httpie \uff0c\u547d\u4ee4\u884c\u5de5\u5177... bash: http -a admin:password123 http://127.0.0.1:8000/users/ HTTP/1.1 200 OK ... { \"count\": 2, \"next\": null, \"previous\": null, \"results\": [ { \"email\": \"admin@example.com\", \"groups\": [], \"url\": \"http://localhost:8000/users/1/\", \"username\": \"paul\" }, { \"email\": \"tom@example.com\", \"groups\": [ ], \"url\": \"http://127.0.0.1:8000/users/2/\", \"username\": \"tom\" } ] } \u6216\u76f4\u63a5\u901a\u8fc7\u6d4f\u89c8\u5668\uff0c\u8f6c\u5230URL http://127.0.0.1:8000/users/ ... \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u6d4f\u89c8\u5668\uff0c\u8bf7\u786e\u4fdd\u4f7f\u7528\u53f3\u4e0a\u89d2\u8fdb\u884c\u767b\u5f55\u3002 \u975e\u5e38\u68d2\uff01\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\uff01 \u5982\u679c\u60a8\u60f3\u66f4\u6df1\u5165\u5730\u4e86\u89e3REST framework\u5404\u90e8\u5206\u662f\u5982\u4f55\u914d\u5408\u5728\u4e00\u8d77\u7684\uff0c\u8bf7\u524d\u5f80 \u6559\u7a0b \uff0c\u6216\u8005\u5f00\u59cb\u6d4f\u89c8 API\u6307\u5357 \u3002","title":"\u6d4b\u8bd5\u6211\u4eec\u7684API"}]}